{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { deepMap } from '../../utils/collection';\nimport { asinhNumber } from '../../plain/number';\nvar name = 'asinh';\nvar dependencies = ['typed'];\nexport var createAsinh = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n  /**\r\n   * Calculate the hyperbolic arcsine of a value,\r\n   * defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.asinh(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.asinh(0.5)       // returns 0.48121182505960347\r\n   *\r\n   * See also:\r\n   *\r\n   *    acosh, atanh\r\n   *\r\n   * @param {number | Complex | Array | Matrix} x  Function input\r\n   * @return {number | Complex | Array | Matrix} Hyperbolic arcsine of x\r\n   */\n\n  return typed('asinh', {\n    number: asinhNumber,\n    Complex: function Complex(x) {\n      return x.asinh();\n    },\n    BigNumber: function BigNumber(x) {\n      return x.asinh();\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since asinh(0) = 0\n      return deepMap(x, this, true);\n    }\n  });\n});","map":{"version":3,"sources":["C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/mathjs/es/function/trigonometry/asinh.js"],"names":["factory","deepMap","asinhNumber","name","dependencies","createAsinh","_ref","typed","number","Complex","x","asinh","BigNumber","ArrayMatrix"],"mappings":"AAAA,SAASA,OAAT,QAAwB,qBAAxB;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,SAASC,WAAT,QAA4B,oBAA5B;AACA,IAAIC,IAAI,GAAG,OAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,CAAnB;AACA,OAAO,IAAIC,WAAW,GAAG,eAAeL,OAAO,CAACG,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AAClF,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOA,KAAK,CAAC,OAAD,EAAU;AACpBC,IAAAA,MAAM,EAAEN,WADY;AAEpBO,IAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBC,CAAjB,EAAoB;AAC3B,aAAOA,CAAC,CAACC,KAAF,EAAP;AACD,KAJmB;AAKpBC,IAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBF,CAAnB,EAAsB;AAC/B,aAAOA,CAAC,CAACC,KAAF,EAAP;AACD,KAPmB;AAQpB,sBAAkB,SAASE,WAAT,CAAqBH,CAArB,EAAwB;AACxC;AACA,aAAOT,OAAO,CAACS,CAAD,EAAI,IAAJ,EAAU,IAAV,CAAd;AACD;AAXmB,GAAV,CAAZ;AAaD,CArC8C,CAAxC","sourcesContent":["import { factory } from '../../utils/factory';\r\nimport { deepMap } from '../../utils/collection';\r\nimport { asinhNumber } from '../../plain/number';\r\nvar name = 'asinh';\r\nvar dependencies = ['typed'];\r\nexport var createAsinh = /* #__PURE__ */factory(name, dependencies, function (_ref) {\r\n  var typed = _ref.typed;\r\n\r\n  /**\r\n   * Calculate the hyperbolic arcsine of a value,\r\n   * defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.asinh(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.asinh(0.5)       // returns 0.48121182505960347\r\n   *\r\n   * See also:\r\n   *\r\n   *    acosh, atanh\r\n   *\r\n   * @param {number | Complex | Array | Matrix} x  Function input\r\n   * @return {number | Complex | Array | Matrix} Hyperbolic arcsine of x\r\n   */\r\n  return typed('asinh', {\r\n    number: asinhNumber,\r\n    Complex: function Complex(x) {\r\n      return x.asinh();\r\n    },\r\n    BigNumber: function BigNumber(x) {\r\n      return x.asinh();\r\n    },\r\n    'Array | Matrix': function ArrayMatrix(x) {\r\n      // deep map collection, skip zeros since asinh(0) = 0\r\n      return deepMap(x, this, true);\r\n    }\r\n  });\r\n});"]},"metadata":{},"sourceType":"module"}