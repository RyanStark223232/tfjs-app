{"ast":null,"code":"import _classCallCheck from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nexport var MultinomialProgram = /*#__PURE__*/function () {\n  function MultinomialProgram(batchSize, numOutcomes, numSamples) {\n    _classCallCheck(this, MultinomialProgram);\n\n    this.variableNames = ['probs'];\n    this.outputShape = [batchSize, numSamples];\n    this.userCode = \"\\n      uniform float seed;\\n\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        int batch = coords[0];\\n\\n        float r = random(seed);\\n        float cdf = 0.0;\\n\\n        for (int i = 0; i < \".concat(numOutcomes - 1, \"; i++) {\\n          cdf += getProbs(batch, i);\\n\\n          if (r < cdf) {\\n            setOutput(float(i));\\n            return;\\n          }\\n        }\\n\\n        // If no other event happened, last event happened.\\n        setOutput(float(\").concat(numOutcomes - 1, \"));\\n      }\\n    \");\n  }\n\n  _createClass(MultinomialProgram, [{\n    key: \"getCustomSetupFunc\",\n    value: function getCustomSetupFunc(seed) {\n      var _this = this;\n\n      return function (gpgpu, webGLProgram) {\n        if (_this.seedLoc == null) {\n          _this.seedLoc = gpgpu.getUniformLocation(webGLProgram, 'seed');\n        }\n\n        gpgpu.gl.uniform1f(_this.seedLoc, seed);\n      };\n    }\n  }]);\n\n  return MultinomialProgram;\n}();","map":{"version":3,"sources":["../src/multinomial_gpu.ts"],"names":[],"mappings":";;;AAAA;;;;;;;;;;;;;;;AAeG;AAKH,WAAa,kBAAb;AAQE,8BAAY,SAAZ,EAA+B,WAA/B,EAAoD,UAApD,EAAsE;AAAA;;AAPtE,SAAA,aAAA,GAAgB,CAAC,OAAD,CAAhB;AAQE,SAAK,WAAL,GAAmB,CAAC,SAAD,EAAY,UAAZ,CAAnB;AAEA,SAAK,QAAL,uOAU0B,WAAW,GAAG,CAVxC,+PAoBsB,WAAW,GAAG,CApBpC;AAuBD;;AAlCH;AAAA;AAAA,uCAoCqB,IApCrB,EAoCiC;AAAA;;AAC7B,aAAO,UAAC,KAAD,EAAsB,YAAtB,EAAoD;AACzD,YAAI,KAAI,CAAC,OAAL,IAAgB,IAApB,EAA0B;AACxB,UAAA,KAAI,CAAC,OAAL,GAAe,KAAK,CAAC,kBAAN,CAAyB,YAAzB,EAAuC,MAAvC,CAAf;AACD;;AACD,QAAA,KAAK,CAAC,EAAN,CAAS,SAAT,CAAmB,KAAI,CAAC,OAAxB,EAAiC,IAAjC;AACD,OALD;AAMD;AA3CH;;AAAA;AAAA","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2017 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nexport class MultinomialProgram {\r\n    constructor(batchSize, numOutcomes, numSamples) {\r\n        this.variableNames = ['probs'];\r\n        this.outputShape = [batchSize, numSamples];\r\n        this.userCode = `\r\n      uniform float seed;\r\n\r\n      void main() {\r\n        ivec2 coords = getOutputCoords();\r\n        int batch = coords[0];\r\n\r\n        float r = random(seed);\r\n        float cdf = 0.0;\r\n\r\n        for (int i = 0; i < ${numOutcomes - 1}; i++) {\r\n          cdf += getProbs(batch, i);\r\n\r\n          if (r < cdf) {\r\n            setOutput(float(i));\r\n            return;\r\n          }\r\n        }\r\n\r\n        // If no other event happened, last event happened.\r\n        setOutput(float(${numOutcomes - 1}));\r\n      }\r\n    `;\r\n    }\r\n    getCustomSetupFunc(seed) {\r\n        return (gpgpu, webGLProgram) => {\r\n            if (this.seedLoc == null) {\r\n                this.seedLoc = gpgpu.getUniformLocation(webGLProgram, 'seed');\r\n            }\r\n            gpgpu.gl.uniform1f(this.seedLoc, seed);\r\n        };\r\n    }\r\n}\r\n//# sourceMappingURL=multinomial_gpu.js.map"]},"metadata":{},"sourceType":"module"}