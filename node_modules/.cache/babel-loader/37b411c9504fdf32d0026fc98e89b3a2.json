{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { LogicalAnd } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { assertAndGetBroadcastShape } from './broadcast_util';\nimport { op } from './operation';\n/**\r\n * Returns the truth value of `a AND b` element-wise. Supports broadcasting.\r\n *\r\n * ```js\r\n * const a = tf.tensor1d([false, false, true, true], 'bool');\r\n * const b = tf.tensor1d([false, true, false, true], 'bool');\r\n *\r\n * a.logicalAnd(b).print();\r\n * ```\r\n *\r\n * @param a The first input tensor. Must be of dtype bool.\r\n * @param b The second input tensor. Must be of dtype bool.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Logical'}\r\n */\n\nfunction logicalAnd_(a, b) {\n  var $a = convertToTensor(a, 'a', 'logicalAnd', 'bool');\n  var $b = convertToTensor(b, 'b', 'logicalAnd', 'bool');\n  assertAndGetBroadcastShape($a.shape, $b.shape);\n  var inputs = {\n    a: $a,\n    b: $b\n  };\n  return ENGINE.runKernelFunc(function (backend) {\n    return backend.logicalAnd($a, $b);\n  }, inputs, null\n  /* grad */\n  , LogicalAnd);\n}\n\nexport var logicalAnd = op({\n  logicalAnd_: logicalAnd_\n});","map":{"version":3,"sources":["../../src/ops/logical_and.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AACH,SAAQ,MAAR,QAAqB,WAArB;AACA,SAAQ,UAAR,QAA2C,iBAA3C;AAGA,SAAQ,eAAR,QAA8B,oBAA9B;AAGA,SAAQ,0BAAR,QAAyC,kBAAzC;AACA,SAAQ,EAAR,QAAiB,aAAjB;AAEA;;;;;;;;;;;;;;AAcG;;AACH,SAAS,WAAT,CACI,CADJ,EAC0B,CAD1B,EAC8C;AAC5C,MAAM,EAAE,GAAG,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,YAAT,EAAuB,MAAvB,CAA1B;AACA,MAAM,EAAE,GAAG,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,YAAT,EAAuB,MAAvB,CAA1B;AACA,EAAA,0BAA0B,CAAC,EAAE,CAAC,KAAJ,EAAW,EAAE,CAAC,KAAd,CAA1B;AAEA,MAAM,MAAM,GAAqB;AAAC,IAAA,CAAC,EAAE,EAAJ;AAAQ,IAAA,CAAC,EAAE;AAAX,GAAjC;AAEA,SAAO,MAAM,CAAC,aAAP,CACI,UAAA,OAAO;AAAA,WAAI,OAAO,CAAC,UAAR,CAAmB,EAAnB,EAAuB,EAAvB,CAAJ;AAAA,GADX,EAEI,MAFJ,EAEoC;AAAK;AAFzC,IAEqD,UAFrD,CAAP;AAGD;;AAED,OAAO,IAAM,UAAU,GAAG,EAAE,CAAC;AAAC,EAAA,WAAW,EAAX;AAAD,CAAD,CAArB","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { ENGINE } from '../engine';\r\nimport { LogicalAnd } from '../kernel_names';\r\nimport { convertToTensor } from '../tensor_util_env';\r\nimport { assertAndGetBroadcastShape } from './broadcast_util';\r\nimport { op } from './operation';\r\n/**\r\n * Returns the truth value of `a AND b` element-wise. Supports broadcasting.\r\n *\r\n * ```js\r\n * const a = tf.tensor1d([false, false, true, true], 'bool');\r\n * const b = tf.tensor1d([false, true, false, true], 'bool');\r\n *\r\n * a.logicalAnd(b).print();\r\n * ```\r\n *\r\n * @param a The first input tensor. Must be of dtype bool.\r\n * @param b The second input tensor. Must be of dtype bool.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Logical'}\r\n */\r\nfunction logicalAnd_(a, b) {\r\n    const $a = convertToTensor(a, 'a', 'logicalAnd', 'bool');\r\n    const $b = convertToTensor(b, 'b', 'logicalAnd', 'bool');\r\n    assertAndGetBroadcastShape($a.shape, $b.shape);\r\n    const inputs = { a: $a, b: $b };\r\n    return ENGINE.runKernelFunc(backend => backend.logicalAnd($a, $b), inputs, null /* grad */, LogicalAnd);\r\n}\r\nexport const logicalAnd = op({ logicalAnd_ });\r\n//# sourceMappingURL=logical_and.js.map"]},"metadata":{},"sourceType":"module"}