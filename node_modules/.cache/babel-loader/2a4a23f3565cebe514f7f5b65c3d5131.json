{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { Max } from '@tensorflow/tfjs-core';\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nimport { maxImplCPU } from '../kernel_utils/shared';\nimport { maxImpl } from './Max_impl';\nimport { transposeImpl, transposeImplCPU } from './Transpose_impl';\nexport const maxConfig = {\n  kernelName: Max,\n  backendName: 'webgl',\n  kernelFunc: ({\n    inputs,\n    attrs,\n    backend\n  }) => {\n    const {\n      x\n    } = inputs;\n    const {\n      reductionIndices,\n      keepDims\n    } = attrs;\n    const webglBackend = backend;\n    const xRank = x.shape.length;\n    const origAxes = util.parseAxisParam(reductionIndices, x.shape);\n    let axes = origAxes;\n    const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n    const maxInputIsTransposed = permutedAxes != null;\n    const shouldExecuteOnCPU = webglBackend.shouldExecuteOnCPU([x]);\n    let maxInput = x;\n\n    if (maxInputIsTransposed) {\n      if (shouldExecuteOnCPU) {\n        const xTexData = webglBackend.texData.get(maxInput.dataId);\n        const values = xTexData.values;\n        const newShape = new Array(xRank);\n\n        for (let i = 0; i < newShape.length; i++) {\n          newShape[i] = x.shape[permutedAxes[i]];\n        }\n\n        const maxInputValues = transposeImplCPU(values, x.shape, x.dtype, permutedAxes, newShape);\n        maxInput = webglBackend.makeTensorInfo(newShape, x.dtype);\n        const maxInputData = webglBackend.texData.get(maxInput.dataId);\n        maxInputData.values = maxInputValues;\n      } else {\n        maxInput = transposeImpl(x, permutedAxes, webglBackend);\n      }\n\n      axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    }\n\n    backend_util.assertAxesAreInnerMostDims('max', axes, xRank);\n    const [maxOutShape, reduceShape] = backend_util.computeOutAndReduceShapes(maxInput.shape, axes);\n    let outShape = maxOutShape;\n\n    if (keepDims) {\n      // rather than reshape at the end, set the target shape here.\n      outShape = backend_util.expandShapeToKeepDim(maxOutShape, origAxes);\n    }\n\n    let out;\n\n    if (shouldExecuteOnCPU) {\n      const xTexData = webglBackend.texData.get(maxInput.dataId);\n      const values = xTexData.values;\n      const outValues = maxImplCPU(values, util.sizeFromShape(reduceShape), outShape, x.dtype);\n      out = webglBackend.makeTensorInfo(outShape, x.dtype);\n      const outData = webglBackend.texData.get(out.dataId);\n      outData.values = outValues;\n    } else {\n      out = maxImpl(maxInput, reduceShape, outShape, webglBackend);\n    }\n\n    if (maxInputIsTransposed) {\n      webglBackend.disposeIntermediateTensorInfo(maxInput);\n    }\n\n    return out;\n  }\n};","map":{"version":3,"sources":["../../src/kernels/Max.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { Max } from '@tensorflow/tfjs-core';\r\nimport { backend_util, util } from '@tensorflow/tfjs-core';\r\nimport { maxImplCPU } from '../kernel_utils/shared';\r\nimport { maxImpl } from './Max_impl';\r\nimport { transposeImpl, transposeImplCPU } from './Transpose_impl';\r\nexport const maxConfig = {\r\n    kernelName: Max,\r\n    backendName: 'webgl',\r\n    kernelFunc: ({ inputs, attrs, backend }) => {\r\n        const { x } = inputs;\r\n        const { reductionIndices, keepDims } = attrs;\r\n        const webglBackend = backend;\r\n        const xRank = x.shape.length;\r\n        const origAxes = util.parseAxisParam(reductionIndices, x.shape);\r\n        let axes = origAxes;\r\n        const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\r\n        const maxInputIsTransposed = permutedAxes != null;\r\n        const shouldExecuteOnCPU = webglBackend.shouldExecuteOnCPU([x]);\r\n        let maxInput = x;\r\n        if (maxInputIsTransposed) {\r\n            if (shouldExecuteOnCPU) {\r\n                const xTexData = webglBackend.texData.get(maxInput.dataId);\r\n                const values = xTexData.values;\r\n                const newShape = new Array(xRank);\r\n                for (let i = 0; i < newShape.length; i++) {\r\n                    newShape[i] = x.shape[permutedAxes[i]];\r\n                }\r\n                const maxInputValues = transposeImplCPU(values, x.shape, x.dtype, permutedAxes, newShape);\r\n                maxInput = webglBackend.makeTensorInfo(newShape, x.dtype);\r\n                const maxInputData = webglBackend.texData.get(maxInput.dataId);\r\n                maxInputData.values = maxInputValues;\r\n            }\r\n            else {\r\n                maxInput = transposeImpl(x, permutedAxes, webglBackend);\r\n            }\r\n            axes = backend_util.getInnerMostAxes(axes.length, xRank);\r\n        }\r\n        backend_util.assertAxesAreInnerMostDims('max', axes, xRank);\r\n        const [maxOutShape, reduceShape] = backend_util.computeOutAndReduceShapes(maxInput.shape, axes);\r\n        let outShape = maxOutShape;\r\n        if (keepDims) {\r\n            // rather than reshape at the end, set the target shape here.\r\n            outShape = backend_util.expandShapeToKeepDim(maxOutShape, origAxes);\r\n        }\r\n        let out;\r\n        if (shouldExecuteOnCPU) {\r\n            const xTexData = webglBackend.texData.get(maxInput.dataId);\r\n            const values = xTexData.values;\r\n            const outValues = maxImplCPU(values, util.sizeFromShape(reduceShape), outShape, x.dtype);\r\n            out = webglBackend.makeTensorInfo(outShape, x.dtype);\r\n            const outData = webglBackend.texData.get(out.dataId);\r\n            outData.values = outValues;\r\n        }\r\n        else {\r\n            out = maxImpl(maxInput, reduceShape, outShape, webglBackend);\r\n        }\r\n        if (maxInputIsTransposed) {\r\n            webglBackend.disposeIntermediateTensorInfo(maxInput);\r\n        }\r\n        return out;\r\n    }\r\n};\r\n//# sourceMappingURL=Max.js.map"]},"metadata":{},"sourceType":"module"}