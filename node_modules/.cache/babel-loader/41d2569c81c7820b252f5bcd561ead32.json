{"ast":null,"code":"import { assert } from '../util';\n/**\r\n * Prepare the split size array. When the input is a number, the axis is evenly\r\n * divided among the split size. When the input contains the negative value, the\r\n * rest of the axis is allocated toward that.\r\n */\n\nexport function prepareSplitSize(x, numOrSizeSplits) {\n  var axis = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var splitSizes = [];\n\n  if (typeof numOrSizeSplits === 'number') {\n    assert(x.shape[axis] % numOrSizeSplits === 0, function () {\n      return 'Number of splits must evenly divide the axis.';\n    });\n    splitSizes = new Array(numOrSizeSplits).fill(x.shape[axis] / numOrSizeSplits);\n  } else {\n    var numOfNegs = numOrSizeSplits.reduce(function (count, value) {\n      if (value === -1) {\n        count += 1;\n      }\n\n      return count;\n    }, 0);\n    assert(numOfNegs <= 1, function () {\n      return 'There should be only one negative value in split array.';\n    });\n    var negIndex = numOrSizeSplits.indexOf(-1); // Allow the number of split array to be -1, which indicates the rest\n    // of dimension is allocated to that split.\n\n    if (negIndex !== -1) {\n      var total = numOrSizeSplits.reduce(function (a, b) {\n        return b > 0 ? a + b : a;\n      });\n      numOrSizeSplits[negIndex] = x.shape[axis] - total;\n    }\n\n    assert(x.shape[axis] === numOrSizeSplits.reduce(function (a, b) {\n      return a + b;\n    }), function () {\n      return 'The sum of sizes must match the size of the axis dimension.';\n    });\n    splitSizes = numOrSizeSplits;\n  }\n\n  return splitSizes;\n}","map":{"version":3,"sources":["../../src/ops/split_util.ts"],"names":[],"mappings":"AAkBA,SAAQ,MAAR,QAAqB,SAArB;AAEA;;;;AAIG;;AACH,OAAM,SAAU,gBAAV,CACF,CADE,EACoB,eADpB,EAEM;AAAA,MAAR,IAAQ,uEAAD,CAAC;AACV,MAAI,UAAU,GAAG,EAAjB;;AACA,MAAI,OAAQ,eAAR,KAA6B,QAAjC,EAA2C;AACzC,IAAA,MAAM,CACF,CAAC,CAAC,KAAF,CAAQ,IAAR,IAAgB,eAAhB,KAAoC,CADlC,EAEF;AAAA,aAAM,+CAAN;AAAA,KAFE,CAAN;AAGA,IAAA,UAAU,GACN,IAAI,KAAJ,CAAU,eAAV,EAA2B,IAA3B,CAAgC,CAAC,CAAC,KAAF,CAAQ,IAAR,IAAgB,eAAhD,CADJ;AAED,GAND,MAMO;AACL,QAAM,SAAS,GAAG,eAAe,CAAC,MAAhB,CAAuB,UAAC,KAAD,EAAQ,KAAR,EAAiB;AACxD,UAAI,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChB,QAAA,KAAK,IAAI,CAAT;AACD;;AACD,aAAO,KAAP;AACD,KALiB,EAKf,CALe,CAAlB;AAMA,IAAA,MAAM,CACF,SAAS,IAAI,CADX,EAEF;AAAA,aAAM,yDAAN;AAAA,KAFE,CAAN;AAGA,QAAM,QAAQ,GAAG,eAAe,CAAC,OAAhB,CAAwB,CAAC,CAAzB,CAAjB,CAVK,CAWL;AACA;;AACA,QAAI,QAAQ,KAAK,CAAC,CAAlB,EAAqB;AACnB,UAAM,KAAK,GAAG,eAAe,CAAC,MAAhB,CAAuB,UAAC,CAAD,EAAI,CAAJ;AAAA,eAAU,CAAC,GAAG,CAAJ,GAAQ,CAAC,GAAG,CAAZ,GAAgB,CAA1B;AAAA,OAAvB,CAAd;AACA,MAAA,eAAe,CAAC,QAAD,CAAf,GAA4B,CAAC,CAAC,KAAF,CAAQ,IAAR,IAAgB,KAA5C;AACD;;AACD,IAAA,MAAM,CACF,CAAC,CAAC,KAAF,CAAQ,IAAR,MAAkB,eAAe,CAAC,MAAhB,CAAuB,UAAC,CAAD,EAAI,CAAJ;AAAA,aAAU,CAAC,GAAG,CAAd;AAAA,KAAvB,CADhB,EAEF;AAAA,aAAM,6DAAN;AAAA,KAFE,CAAN;AAGA,IAAA,UAAU,GAAG,eAAb;AACD;;AAED,SAAO,UAAP;AACD","sourceRoot":"","sourcesContent":["import { assert } from '../util';\r\n/**\r\n * Prepare the split size array. When the input is a number, the axis is evenly\r\n * divided among the split size. When the input contains the negative value, the\r\n * rest of the axis is allocated toward that.\r\n */\r\nexport function prepareSplitSize(x, numOrSizeSplits, axis = 0) {\r\n    let splitSizes = [];\r\n    if (typeof (numOrSizeSplits) === 'number') {\r\n        assert(x.shape[axis] % numOrSizeSplits === 0, () => 'Number of splits must evenly divide the axis.');\r\n        splitSizes =\r\n            new Array(numOrSizeSplits).fill(x.shape[axis] / numOrSizeSplits);\r\n    }\r\n    else {\r\n        const numOfNegs = numOrSizeSplits.reduce((count, value) => {\r\n            if (value === -1) {\r\n                count += 1;\r\n            }\r\n            return count;\r\n        }, 0);\r\n        assert(numOfNegs <= 1, () => 'There should be only one negative value in split array.');\r\n        const negIndex = numOrSizeSplits.indexOf(-1);\r\n        // Allow the number of split array to be -1, which indicates the rest\r\n        // of dimension is allocated to that split.\r\n        if (negIndex !== -1) {\r\n            const total = numOrSizeSplits.reduce((a, b) => b > 0 ? a + b : a);\r\n            numOrSizeSplits[negIndex] = x.shape[axis] - total;\r\n        }\r\n        assert(x.shape[axis] === numOrSizeSplits.reduce((a, b) => a + b), () => 'The sum of sizes must match the size of the axis dimension.');\r\n        splitSizes = numOrSizeSplits;\r\n    }\r\n    return splitSizes;\r\n}\r\n//# sourceMappingURL=split_util.js.map"]},"metadata":{},"sourceType":"module"}