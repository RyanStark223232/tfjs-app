{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\n\n/**\r\n * IOHandler implementations based on HTTP requests in the web browser.\r\n *\r\n * Uses [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\r\n */\nimport { env } from '../environment';\nimport { assert } from '../util';\nimport { concatenateArrayBuffers, getModelArtifactsInfoForJSON } from './io_utils';\nimport { IORouterRegistry } from './router_registry';\nimport { loadWeightsAsArrayBuffer } from './weights_loader';\nconst OCTET_STREAM_MIME_TYPE = 'application/octet-stream';\nconst JSON_TYPE = 'application/json';\nexport class HTTPRequest {\n  constructor(path, loadOptions) {\n    this.DEFAULT_METHOD = 'POST';\n\n    if (loadOptions == null) {\n      loadOptions = {};\n    }\n\n    this.weightPathPrefix = loadOptions.weightPathPrefix;\n    this.onProgress = loadOptions.onProgress;\n    this.weightUrlConverter = loadOptions.weightUrlConverter;\n\n    if (loadOptions.fetchFunc != null) {\n      assert(typeof loadOptions.fetchFunc === 'function', () => 'Must pass a function that matches the signature of ' + '`fetch` (see ' + 'https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)');\n      this.fetch = loadOptions.fetchFunc;\n    } else {\n      this.fetch = env().platform.fetch;\n    }\n\n    assert(path != null && path.length > 0, () => 'URL path for http must not be null, undefined or ' + 'empty.');\n\n    if (Array.isArray(path)) {\n      assert(path.length === 2, () => 'URL paths for http must have a length of 2, ' + `(actual length is ${path.length}).`);\n    }\n\n    this.path = path;\n\n    if (loadOptions.requestInit != null && loadOptions.requestInit.body != null) {\n      throw new Error('requestInit is expected to have no pre-existing body, but has one.');\n    }\n\n    this.requestInit = loadOptions.requestInit || {};\n  }\n\n  async save(modelArtifacts) {\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n      throw new Error('BrowserHTTPRequest.save() does not support saving model topology ' + 'in binary formats yet.');\n    }\n\n    const init = Object.assign({\n      method: this.DEFAULT_METHOD\n    }, this.requestInit);\n    init.body = new FormData();\n    const weightsManifest = [{\n      paths: ['./model.weights.bin'],\n      weights: modelArtifacts.weightSpecs\n    }];\n    const modelTopologyAndWeightManifest = {\n      modelTopology: modelArtifacts.modelTopology,\n      format: modelArtifacts.format,\n      generatedBy: modelArtifacts.generatedBy,\n      convertedBy: modelArtifacts.convertedBy,\n      userDefinedMetadata: modelArtifacts.userDefinedMetadata,\n      weightsManifest\n    };\n    init.body.append('model.json', new Blob([JSON.stringify(modelTopologyAndWeightManifest)], {\n      type: JSON_TYPE\n    }), 'model.json');\n\n    if (modelArtifacts.weightData != null) {\n      init.body.append('model.weights.bin', new Blob([modelArtifacts.weightData], {\n        type: OCTET_STREAM_MIME_TYPE\n      }), 'model.weights.bin');\n    }\n\n    const response = await this.fetch(this.path, init);\n\n    if (response.ok) {\n      return {\n        modelArtifactsInfo: getModelArtifactsInfoForJSON(modelArtifacts),\n        responses: [response]\n      };\n    } else {\n      throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ` + `${response.status}.`);\n    }\n  }\n  /**\r\n   * Load model artifacts via HTTP request(s).\r\n   *\r\n   * See the documentation to `tf.io.http` for details on the saved\r\n   * artifacts.\r\n   *\r\n   * @returns The loaded model artifacts (if loading succeeds).\r\n   */\n\n\n  async load() {\n    const modelConfigRequest = await this.fetch(this.path, this.requestInit);\n\n    if (!modelConfigRequest.ok) {\n      throw new Error(`Request to ${this.path} failed with status code ` + `${modelConfigRequest.status}. Please verify this URL points to ` + `the model JSON of the model to load.`);\n    }\n\n    let modelConfig;\n\n    try {\n      modelConfig = await modelConfigRequest.json();\n    } catch (e) {\n      let message = `Failed to parse model JSON of response from ${this.path}.`; // TODO(nsthorat): Remove this after some time when we're comfortable that\n      // .pb files are mostly gone.\n\n      if (this.path.endsWith('.pb')) {\n        message += ' Your path contains a .pb file extension. ' + 'Support for .pb models have been removed in TensorFlow.js 1.0 ' + 'in favor of .json models. You can re-convert your Python ' + 'TensorFlow model using the TensorFlow.js 1.0 conversion scripts ' + 'or you can convert your.pb models with the \\'pb2json\\'' + 'NPM script in the tensorflow/tfjs-converter repository.';\n      } else {\n        message += ' Please make sure the server is serving valid ' + 'JSON for this request.';\n      }\n\n      throw new Error(message);\n    }\n\n    const modelTopology = modelConfig.modelTopology;\n    const weightsManifest = modelConfig.weightsManifest;\n    const generatedBy = modelConfig.generatedBy;\n    const convertedBy = modelConfig.convertedBy;\n    const format = modelConfig.format;\n    const userDefinedMetadata = modelConfig.userDefinedMetadata; // We do not allow both modelTopology and weightsManifest to be missing.\n\n    if (modelTopology == null && weightsManifest == null) {\n      throw new Error(`The JSON from HTTP path ${this.path} contains neither model ` + `topology or manifest for weights.`);\n    }\n\n    let weightSpecs;\n    let weightData;\n\n    if (weightsManifest != null) {\n      const results = await this.loadWeights(weightsManifest);\n      [weightSpecs, weightData] = results;\n    }\n\n    const artifacts = {\n      modelTopology,\n      weightSpecs,\n      weightData,\n      userDefinedMetadata,\n      generatedBy,\n      convertedBy,\n      format\n    };\n    const initializer = modelConfig.modelInitializer;\n\n    if (initializer) {\n      artifacts.modelInitializer = initializer;\n    }\n\n    return artifacts;\n  }\n\n  async loadWeights(weightsManifest) {\n    const weightPath = Array.isArray(this.path) ? this.path[1] : this.path;\n    const [prefix, suffix] = parseUrl(weightPath);\n    const pathPrefix = this.weightPathPrefix || prefix;\n    const weightSpecs = [];\n\n    for (const entry of weightsManifest) {\n      weightSpecs.push(...entry.weights);\n    }\n\n    const fetchURLs = [];\n    const urlPromises = [];\n\n    for (const weightsGroup of weightsManifest) {\n      for (const path of weightsGroup.paths) {\n        if (this.weightUrlConverter != null) {\n          urlPromises.push(this.weightUrlConverter(path));\n        } else {\n          fetchURLs.push(pathPrefix + path + suffix);\n        }\n      }\n    }\n\n    if (this.weightUrlConverter) {\n      fetchURLs.push(...(await Promise.all(urlPromises)));\n    }\n\n    const buffers = await loadWeightsAsArrayBuffer(fetchURLs, {\n      requestInit: this.requestInit,\n      fetchFunc: this.fetch,\n      onProgress: this.onProgress\n    });\n    return [weightSpecs, concatenateArrayBuffers(buffers)];\n  }\n\n}\nHTTPRequest.URL_SCHEME_REGEX = /^https?:\\/\\//;\n/**\r\n * Extract the prefix and suffix of the url, where the prefix is the path before\r\n * the last file, and suffix is the search params after the last file.\r\n * ```\r\n * const url = 'http://tfhub.dev/model/1/tensorflowjs_model.pb?tfjs-format=file'\r\n * [prefix, suffix] = parseUrl(url)\r\n * // prefix = 'http://tfhub.dev/model/1/'\r\n * // suffix = '?tfjs-format=file'\r\n * ```\r\n * @param url the model url to be parsed.\r\n */\n\nexport function parseUrl(url) {\n  const lastSlash = url.lastIndexOf('/');\n  const lastSearchParam = url.lastIndexOf('?');\n  const prefix = url.substring(0, lastSlash);\n  const suffix = lastSearchParam > lastSlash ? url.substring(lastSearchParam) : '';\n  return [prefix + '/', suffix];\n}\nexport function isHTTPScheme(url) {\n  return url.match(HTTPRequest.URL_SCHEME_REGEX) != null;\n}\nexport const httpRouter = (url, loadOptions) => {\n  if (typeof fetch === 'undefined' && (loadOptions == null || loadOptions.fetchFunc == null)) {\n    // `http` uses `fetch` or `node-fetch`, if one wants to use it in\n    // an environment that is not the browser or node they have to setup a\n    // global fetch polyfill.\n    return null;\n  } else {\n    let isHTTP = true;\n\n    if (Array.isArray(url)) {\n      isHTTP = url.every(urlItem => isHTTPScheme(urlItem));\n    } else {\n      isHTTP = isHTTPScheme(url);\n    }\n\n    if (isHTTP) {\n      return http(url, loadOptions);\n    }\n  }\n\n  return null;\n};\nIORouterRegistry.registerSaveRouter(httpRouter);\nIORouterRegistry.registerLoadRouter(httpRouter);\n/**\r\n * Creates an IOHandler subtype that sends model artifacts to HTTP server.\r\n *\r\n * An HTTP request of the `multipart/form-data` mime type will be sent to the\r\n * `path` URL. The form data includes artifacts that represent the topology\r\n * and/or weights of the model. In the case of Keras-style `tf.Model`, two\r\n * blobs (files) exist in form-data:\r\n *   - A JSON file consisting of `modelTopology` and `weightsManifest`.\r\n *   - A binary weights file consisting of the concatenated weight values.\r\n * These files are in the same format as the one generated by\r\n * [tfjs_converter](https://js.tensorflow.org/tutorials/import-keras.html).\r\n *\r\n * The following code snippet exemplifies the client-side code that uses this\r\n * function:\r\n *\r\n * ```js\r\n * const model = tf.sequential();\r\n * model.add(\r\n *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));\r\n *\r\n * const saveResult = await model.save(tf.io.http(\r\n *     'http://model-server:5000/upload', {requestInit: {method: 'PUT'}}));\r\n * console.log(saveResult);\r\n * ```\r\n *\r\n * If the default `POST` method is to be used, without any custom parameters\r\n * such as headers, you can simply pass an HTTP or HTTPS URL to `model.save`:\r\n *\r\n * ```js\r\n * const saveResult = await model.save('http://model-server:5000/upload');\r\n * ```\r\n *\r\n * The following GitHub Gist\r\n * https://gist.github.com/dsmilkov/1b6046fd6132d7408d5257b0976f7864\r\n * implements a server based on [flask](https://github.com/pallets/flask) that\r\n * can receive the request. Upon receiving the model artifacts via the requst,\r\n * this particular server reconsistutes instances of [Keras\r\n * Models](https://keras.io/models/model/) in memory.\r\n *\r\n *\r\n * @param path A URL path to the model.\r\n *   Can be an absolute HTTP path (e.g.,\r\n *   'http://localhost:8000/model-upload)') or a relative path (e.g.,\r\n *   './model-upload').\r\n * @param requestInit Request configurations to be used when sending\r\n *    HTTP request to server using `fetch`. It can contain fields such as\r\n *    `method`, `credentials`, `headers`, `mode`, etc. See\r\n *    https://developer.mozilla.org/en-US/docs/Web/API/Request/Request\r\n *    for more information. `requestInit` must not have a body, because the\r\n * body will be set by TensorFlow.js. File blobs representing the model\r\n * topology (filename: 'model.json') and the weights of the model (filename:\r\n * 'model.weights.bin') will be appended to the body. If `requestInit` has a\r\n * `body`, an Error will be thrown.\r\n * @param loadOptions Optional configuration for the loading. It includes the\r\n *   following fields:\r\n *   - weightPathPrefix Optional, this specifies the path prefix for weight\r\n *     files, by default this is calculated from the path param.\r\n *   - fetchFunc Optional, custom `fetch` function. E.g., in Node.js,\r\n *     the `fetch` from node-fetch can be used here.\r\n *   - onProgress Optional, progress callback function, fired periodically\r\n *     before the load is completed.\r\n * @returns An instance of `IOHandler`.\r\n *\r\n * @doc {\r\n *   heading: 'Models',\r\n *   subheading: 'Loading',\r\n *   namespace: 'io',\r\n *   ignoreCI: true\r\n * }\r\n */\n\nexport function http(path, loadOptions) {\n  return new HTTPRequest(path, loadOptions);\n}\n/**\r\n * Deprecated. Use `tf.io.http`.\r\n * @param path\r\n * @param loadOptions\r\n */\n\nexport function browserHTTPRequest(path, loadOptions) {\n  return http(path, loadOptions);\n}","map":{"version":3,"sources":["../../src/io/http.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\n/**\r\n * IOHandler implementations based on HTTP requests in the web browser.\r\n *\r\n * Uses [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\r\n */\r\nimport { env } from '../environment';\r\nimport { assert } from '../util';\r\nimport { concatenateArrayBuffers, getModelArtifactsInfoForJSON } from './io_utils';\r\nimport { IORouterRegistry } from './router_registry';\r\nimport { loadWeightsAsArrayBuffer } from './weights_loader';\r\nconst OCTET_STREAM_MIME_TYPE = 'application/octet-stream';\r\nconst JSON_TYPE = 'application/json';\r\nexport class HTTPRequest {\r\n    constructor(path, loadOptions) {\r\n        this.DEFAULT_METHOD = 'POST';\r\n        if (loadOptions == null) {\r\n            loadOptions = {};\r\n        }\r\n        this.weightPathPrefix = loadOptions.weightPathPrefix;\r\n        this.onProgress = loadOptions.onProgress;\r\n        this.weightUrlConverter = loadOptions.weightUrlConverter;\r\n        if (loadOptions.fetchFunc != null) {\r\n            assert(typeof loadOptions.fetchFunc === 'function', () => 'Must pass a function that matches the signature of ' +\r\n                '`fetch` (see ' +\r\n                'https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)');\r\n            this.fetch = loadOptions.fetchFunc;\r\n        }\r\n        else {\r\n            this.fetch = env().platform.fetch;\r\n        }\r\n        assert(path != null && path.length > 0, () => 'URL path for http must not be null, undefined or ' +\r\n            'empty.');\r\n        if (Array.isArray(path)) {\r\n            assert(path.length === 2, () => 'URL paths for http must have a length of 2, ' +\r\n                `(actual length is ${path.length}).`);\r\n        }\r\n        this.path = path;\r\n        if (loadOptions.requestInit != null &&\r\n            loadOptions.requestInit.body != null) {\r\n            throw new Error('requestInit is expected to have no pre-existing body, but has one.');\r\n        }\r\n        this.requestInit = loadOptions.requestInit || {};\r\n    }\r\n    async save(modelArtifacts) {\r\n        if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\r\n            throw new Error('BrowserHTTPRequest.save() does not support saving model topology ' +\r\n                'in binary formats yet.');\r\n        }\r\n        const init = Object.assign({ method: this.DEFAULT_METHOD }, this.requestInit);\r\n        init.body = new FormData();\r\n        const weightsManifest = [{\r\n                paths: ['./model.weights.bin'],\r\n                weights: modelArtifacts.weightSpecs,\r\n            }];\r\n        const modelTopologyAndWeightManifest = {\r\n            modelTopology: modelArtifacts.modelTopology,\r\n            format: modelArtifacts.format,\r\n            generatedBy: modelArtifacts.generatedBy,\r\n            convertedBy: modelArtifacts.convertedBy,\r\n            userDefinedMetadata: modelArtifacts.userDefinedMetadata,\r\n            weightsManifest\r\n        };\r\n        init.body.append('model.json', new Blob([JSON.stringify(modelTopologyAndWeightManifest)], { type: JSON_TYPE }), 'model.json');\r\n        if (modelArtifacts.weightData != null) {\r\n            init.body.append('model.weights.bin', new Blob([modelArtifacts.weightData], { type: OCTET_STREAM_MIME_TYPE }), 'model.weights.bin');\r\n        }\r\n        const response = await this.fetch(this.path, init);\r\n        if (response.ok) {\r\n            return {\r\n                modelArtifactsInfo: getModelArtifactsInfoForJSON(modelArtifacts),\r\n                responses: [response],\r\n            };\r\n        }\r\n        else {\r\n            throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ` +\r\n                `${response.status}.`);\r\n        }\r\n    }\r\n    /**\r\n     * Load model artifacts via HTTP request(s).\r\n     *\r\n     * See the documentation to `tf.io.http` for details on the saved\r\n     * artifacts.\r\n     *\r\n     * @returns The loaded model artifacts (if loading succeeds).\r\n     */\r\n    async load() {\r\n        const modelConfigRequest = await this.fetch(this.path, this.requestInit);\r\n        if (!modelConfigRequest.ok) {\r\n            throw new Error(`Request to ${this.path} failed with status code ` +\r\n                `${modelConfigRequest.status}. Please verify this URL points to ` +\r\n                `the model JSON of the model to load.`);\r\n        }\r\n        let modelConfig;\r\n        try {\r\n            modelConfig = await modelConfigRequest.json();\r\n        }\r\n        catch (e) {\r\n            let message = `Failed to parse model JSON of response from ${this.path}.`;\r\n            // TODO(nsthorat): Remove this after some time when we're comfortable that\r\n            // .pb files are mostly gone.\r\n            if (this.path.endsWith('.pb')) {\r\n                message += ' Your path contains a .pb file extension. ' +\r\n                    'Support for .pb models have been removed in TensorFlow.js 1.0 ' +\r\n                    'in favor of .json models. You can re-convert your Python ' +\r\n                    'TensorFlow model using the TensorFlow.js 1.0 conversion scripts ' +\r\n                    'or you can convert your.pb models with the \\'pb2json\\'' +\r\n                    'NPM script in the tensorflow/tfjs-converter repository.';\r\n            }\r\n            else {\r\n                message += ' Please make sure the server is serving valid ' +\r\n                    'JSON for this request.';\r\n            }\r\n            throw new Error(message);\r\n        }\r\n        const modelTopology = modelConfig.modelTopology;\r\n        const weightsManifest = modelConfig.weightsManifest;\r\n        const generatedBy = modelConfig.generatedBy;\r\n        const convertedBy = modelConfig.convertedBy;\r\n        const format = modelConfig.format;\r\n        const userDefinedMetadata = modelConfig.userDefinedMetadata;\r\n        // We do not allow both modelTopology and weightsManifest to be missing.\r\n        if (modelTopology == null && weightsManifest == null) {\r\n            throw new Error(`The JSON from HTTP path ${this.path} contains neither model ` +\r\n                `topology or manifest for weights.`);\r\n        }\r\n        let weightSpecs;\r\n        let weightData;\r\n        if (weightsManifest != null) {\r\n            const results = await this.loadWeights(weightsManifest);\r\n            [weightSpecs, weightData] = results;\r\n        }\r\n        const artifacts = {\r\n            modelTopology,\r\n            weightSpecs,\r\n            weightData,\r\n            userDefinedMetadata,\r\n            generatedBy,\r\n            convertedBy,\r\n            format\r\n        };\r\n        const initializer = modelConfig.modelInitializer;\r\n        if (initializer) {\r\n            artifacts.modelInitializer = initializer;\r\n        }\r\n        return artifacts;\r\n    }\r\n    async loadWeights(weightsManifest) {\r\n        const weightPath = Array.isArray(this.path) ? this.path[1] : this.path;\r\n        const [prefix, suffix] = parseUrl(weightPath);\r\n        const pathPrefix = this.weightPathPrefix || prefix;\r\n        const weightSpecs = [];\r\n        for (const entry of weightsManifest) {\r\n            weightSpecs.push(...entry.weights);\r\n        }\r\n        const fetchURLs = [];\r\n        const urlPromises = [];\r\n        for (const weightsGroup of weightsManifest) {\r\n            for (const path of weightsGroup.paths) {\r\n                if (this.weightUrlConverter != null) {\r\n                    urlPromises.push(this.weightUrlConverter(path));\r\n                }\r\n                else {\r\n                    fetchURLs.push(pathPrefix + path + suffix);\r\n                }\r\n            }\r\n        }\r\n        if (this.weightUrlConverter) {\r\n            fetchURLs.push(...await Promise.all(urlPromises));\r\n        }\r\n        const buffers = await loadWeightsAsArrayBuffer(fetchURLs, {\r\n            requestInit: this.requestInit,\r\n            fetchFunc: this.fetch,\r\n            onProgress: this.onProgress\r\n        });\r\n        return [weightSpecs, concatenateArrayBuffers(buffers)];\r\n    }\r\n}\r\nHTTPRequest.URL_SCHEME_REGEX = /^https?:\\/\\//;\r\n/**\r\n * Extract the prefix and suffix of the url, where the prefix is the path before\r\n * the last file, and suffix is the search params after the last file.\r\n * ```\r\n * const url = 'http://tfhub.dev/model/1/tensorflowjs_model.pb?tfjs-format=file'\r\n * [prefix, suffix] = parseUrl(url)\r\n * // prefix = 'http://tfhub.dev/model/1/'\r\n * // suffix = '?tfjs-format=file'\r\n * ```\r\n * @param url the model url to be parsed.\r\n */\r\nexport function parseUrl(url) {\r\n    const lastSlash = url.lastIndexOf('/');\r\n    const lastSearchParam = url.lastIndexOf('?');\r\n    const prefix = url.substring(0, lastSlash);\r\n    const suffix = lastSearchParam > lastSlash ? url.substring(lastSearchParam) : '';\r\n    return [prefix + '/', suffix];\r\n}\r\nexport function isHTTPScheme(url) {\r\n    return url.match(HTTPRequest.URL_SCHEME_REGEX) != null;\r\n}\r\nexport const httpRouter = (url, loadOptions) => {\r\n    if (typeof fetch === 'undefined' &&\r\n        (loadOptions == null || loadOptions.fetchFunc == null)) {\r\n        // `http` uses `fetch` or `node-fetch`, if one wants to use it in\r\n        // an environment that is not the browser or node they have to setup a\r\n        // global fetch polyfill.\r\n        return null;\r\n    }\r\n    else {\r\n        let isHTTP = true;\r\n        if (Array.isArray(url)) {\r\n            isHTTP = url.every(urlItem => isHTTPScheme(urlItem));\r\n        }\r\n        else {\r\n            isHTTP = isHTTPScheme(url);\r\n        }\r\n        if (isHTTP) {\r\n            return http(url, loadOptions);\r\n        }\r\n    }\r\n    return null;\r\n};\r\nIORouterRegistry.registerSaveRouter(httpRouter);\r\nIORouterRegistry.registerLoadRouter(httpRouter);\r\n/**\r\n * Creates an IOHandler subtype that sends model artifacts to HTTP server.\r\n *\r\n * An HTTP request of the `multipart/form-data` mime type will be sent to the\r\n * `path` URL. The form data includes artifacts that represent the topology\r\n * and/or weights of the model. In the case of Keras-style `tf.Model`, two\r\n * blobs (files) exist in form-data:\r\n *   - A JSON file consisting of `modelTopology` and `weightsManifest`.\r\n *   - A binary weights file consisting of the concatenated weight values.\r\n * These files are in the same format as the one generated by\r\n * [tfjs_converter](https://js.tensorflow.org/tutorials/import-keras.html).\r\n *\r\n * The following code snippet exemplifies the client-side code that uses this\r\n * function:\r\n *\r\n * ```js\r\n * const model = tf.sequential();\r\n * model.add(\r\n *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));\r\n *\r\n * const saveResult = await model.save(tf.io.http(\r\n *     'http://model-server:5000/upload', {requestInit: {method: 'PUT'}}));\r\n * console.log(saveResult);\r\n * ```\r\n *\r\n * If the default `POST` method is to be used, without any custom parameters\r\n * such as headers, you can simply pass an HTTP or HTTPS URL to `model.save`:\r\n *\r\n * ```js\r\n * const saveResult = await model.save('http://model-server:5000/upload');\r\n * ```\r\n *\r\n * The following GitHub Gist\r\n * https://gist.github.com/dsmilkov/1b6046fd6132d7408d5257b0976f7864\r\n * implements a server based on [flask](https://github.com/pallets/flask) that\r\n * can receive the request. Upon receiving the model artifacts via the requst,\r\n * this particular server reconsistutes instances of [Keras\r\n * Models](https://keras.io/models/model/) in memory.\r\n *\r\n *\r\n * @param path A URL path to the model.\r\n *   Can be an absolute HTTP path (e.g.,\r\n *   'http://localhost:8000/model-upload)') or a relative path (e.g.,\r\n *   './model-upload').\r\n * @param requestInit Request configurations to be used when sending\r\n *    HTTP request to server using `fetch`. It can contain fields such as\r\n *    `method`, `credentials`, `headers`, `mode`, etc. See\r\n *    https://developer.mozilla.org/en-US/docs/Web/API/Request/Request\r\n *    for more information. `requestInit` must not have a body, because the\r\n * body will be set by TensorFlow.js. File blobs representing the model\r\n * topology (filename: 'model.json') and the weights of the model (filename:\r\n * 'model.weights.bin') will be appended to the body. If `requestInit` has a\r\n * `body`, an Error will be thrown.\r\n * @param loadOptions Optional configuration for the loading. It includes the\r\n *   following fields:\r\n *   - weightPathPrefix Optional, this specifies the path prefix for weight\r\n *     files, by default this is calculated from the path param.\r\n *   - fetchFunc Optional, custom `fetch` function. E.g., in Node.js,\r\n *     the `fetch` from node-fetch can be used here.\r\n *   - onProgress Optional, progress callback function, fired periodically\r\n *     before the load is completed.\r\n * @returns An instance of `IOHandler`.\r\n *\r\n * @doc {\r\n *   heading: 'Models',\r\n *   subheading: 'Loading',\r\n *   namespace: 'io',\r\n *   ignoreCI: true\r\n * }\r\n */\r\nexport function http(path, loadOptions) {\r\n    return new HTTPRequest(path, loadOptions);\r\n}\r\n/**\r\n * Deprecated. Use `tf.io.http`.\r\n * @param path\r\n * @param loadOptions\r\n */\r\nexport function browserHTTPRequest(path, loadOptions) {\r\n    return http(path, loadOptions);\r\n}\r\n//# sourceMappingURL=http.js.map"]},"metadata":{},"sourceType":"module"}