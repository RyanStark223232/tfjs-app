{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\wongh\\\\finger\\\\src\\\\App.js\";\nimport React from \"react\"; // import logo from './logo.svg';\n//import * as tf from \"@tensorflow/tfjs-core\";\n\nimport * as handpose from \"@tensorflow-models/handpose\";\nimport Webcam from \"react-webcam\";\nimport \"./App.css\";\nimport { drawHand } from \"./utilities\";\nimport { sqrt, pow } from \"mathjs\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0,\n      passed: 0,\n      record: [],\n      ID: 0,\n      real_time_inferencing: false,\n      recording: false\n    };\n    this.webcamRef = /*#__PURE__*/React.createRef(null);\n    this.canvasRef = /*#__PURE__*/React.createRef(null);\n    this.runHandpose = this.runHandpose.bind(this);\n    this.stop_real_time_inference = this.stop_real_time_inference.bind(this);\n    this.stop_record = this.stop_record.bind(this);\n    this.record_video = this.record_video.bind(this);\n    this.concat_frame = this.concat_frame.bind(this);\n    this.inference = this.inference.bind(this);\n    this.reset_counter = this.reset_counter.bind(this);\n  }\n\n  reset_counter() {\n    this.setState({\n      count: 0\n    });\n  }\n\n  async runHandpose() {\n    require('@tensorflow/tfjs-backend-webgl');\n\n    const net = await handpose.load();\n    console.log(\"Handpose model loaded.\");\n    const Interval_ID = setInterval(() => {\n      this.read_time_inference(net);\n    }, 50);\n    this.setState({\n      ID: Interval_ID\n    });\n    this.setState({\n      real_time_inferencing: true\n    });\n  }\n\n  async read_time_inference(net) {\n    if (typeof this.webcamRef.current !== \"undefined\" && this.webcamRef.current !== null && this.webcamRef.current.video.readyState === 4) {\n      const video = this.webcamRef.current.video;\n      const videoWidth = this.webcamRef.current.video.videoWidth;\n      const videoHeight = this.webcamRef.current.video.videoHeight;\n      this.webcamRef.current.video.width = videoWidth;\n      this.webcamRef.current.video.height = videoHeight;\n      this.canvasRef.current.width = videoWidth;\n      this.canvasRef.current.height = videoHeight;\n      const hand = await net.estimateHands(video);\n\n      if (hand.length > 0) {\n        hand.forEach(prediction => {\n          const landmarks = prediction.landmarks;\n          let pawn_dist = sqrt(pow(landmarks[0][0] - landmarks[2][0], 2) + pow(landmarks[0][1] - landmarks[2][1], 2));\n          let finger_dist = sqrt(pow(landmarks[8][0] - landmarks[4][0], 2) + pow(landmarks[8][1] - landmarks[4][1], 2));\n          finger_dist = finger_dist / pawn_dist;\n\n          if (finger_dist >= 0.5) {\n            this.setState({\n              passed: 1\n            });\n          }\n\n          if (finger_dist < 0.5 && this.state.passed === 1) {\n            this.setState({\n              passed: 0\n            });\n            this.setState({\n              count: this.state.count + 1\n            });\n          }\n\n          console.log(\"passed:\", this.state.passed, \"count:\", this.state.count);\n          const ctx = this.canvasRef.current.getContext(\"2d\");\n          this.setState({\n            context: ctx\n          });\n          drawHand(hand, ctx);\n        });\n      }\n    }\n  }\n\n  stop_real_time_inference() {\n    clearInterval(this.state.ID);\n    this.setState({\n      real_time_inferencing: false\n    });\n  }\n\n  async record_video() {\n    const Interval_ID = setInterval(() => {\n      this.concat_frame();\n    }, 50);\n    this.setState({\n      ID: Interval_ID\n    });\n    this.setState({\n      recording: true\n    });\n  }\n\n  async concat_frame() {\n    if (typeof this.webcamRef.current !== \"undefined\" && this.webcamRef.current !== null && this.webcamRef.current.video.readyState === 4) {\n      const image = this.webcamRef.current.getScreenshot();\n      var img = document.createElement(\"img\");\n\n      img.onload = function () {\n        this.setState({\n          record: [...this.state.record, img]\n        });\n        console.log(this.state.record, this.state.recording);\n      }.bind(this);\n\n      img.src = image;\n    }\n  }\n\n  async inference() {\n    require('@tensorflow/tfjs-backend-webgl');\n\n    const net = await handpose.load();\n    console.log(\"Handpose model loaded.\");\n    var i;\n\n    for (i = 0; i < this.state.record.length; i++) {\n      const hand = await net.estimateHands(this.state.record[i]);\n      console.log(hand);\n\n      if (hand.length > 0) {\n        hand.forEach(prediction => {\n          const landmarks = prediction.landmarks;\n          let finger_dist = sqrt(pow(landmarks[8][0] - landmarks[4][0], 2) + pow(landmarks[8][1] - landmarks[4][1], 2));\n          let pawn_dist = sqrt(pow(landmarks[0][0] - landmarks[2][0], 2) + pow(landmarks[0][1] - landmarks[2][1], 2));\n          finger_dist = finger_dist / pawn_dist;\n\n          if (finger_dist >= 0.5) {\n            this.setState({\n              passed: 1\n            });\n          }\n\n          if (finger_dist < 0.5 && this.state.passed === 1) {\n            this.setState({\n              passed: 0\n            });\n            this.setState({\n              count: this.state.count + 1\n            });\n          }\n\n          console.log(\"passed:\", this.state.passed, \"count:\", this.state.count);\n        });\n      }\n    }\n\n    this.setState({\n      record: []\n    });\n  }\n\n  stop_record() {\n    clearInterval(this.state.ID);\n    this.inference();\n    this.setState({\n      recording: false\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"App-header\",\n        children: [/*#__PURE__*/_jsxDEV(Webcam, {\n          ref: this.webcamRef,\n          style: {\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 9,\n            width: \"auto\",\n            height: \"auto\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: this.canvasRef,\n          style: {\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 9,\n            width: \"auto\",\n            height: \"auto\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), this.state.real_time_inferencing ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.stop_real_time_inference,\n        children: \"Stopping Real Time Inference\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.runHandpose,\n        children: \"Starting Real Time Inference\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 11\n      }, this), this.state.recording ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.stop_record,\n        children: \"Stopping Recording\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.record_video,\n        children: \"Starting Recording\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.reset_counter,\n        children: \"Reset Counter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Finger Tapping Count: \", this.state.count]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/wongh/finger/src/App.js"],"names":["React","handpose","Webcam","drawHand","sqrt","pow","App","Component","constructor","props","state","count","passed","record","ID","real_time_inferencing","recording","webcamRef","createRef","canvasRef","runHandpose","bind","stop_real_time_inference","stop_record","record_video","concat_frame","inference","reset_counter","setState","require","net","load","console","log","Interval_ID","setInterval","read_time_inference","current","video","readyState","videoWidth","videoHeight","width","height","hand","estimateHands","length","forEach","prediction","landmarks","pawn_dist","finger_dist","ctx","getContext","context","clearInterval","image","getScreenshot","img","document","createElement","onload","src","i","render","position","marginLeft","marginRight","left","right","textAlign","zindex"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;AACA;;AACA,OAAO,KAAKC,QAAZ,MAA0B,6BAA1B;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAO,WAAP;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,IAAT,EAAeC,GAAf,QAA0B,QAA1B;;AAEA,MAAMC,GAAN,SAAkBN,KAAK,CAACO,SAAxB,CAAkC;AAChCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAG,CADG;AAEXC,MAAAA,MAAM,EAAG,CAFE;AAGXC,MAAAA,MAAM,EAAG,EAHE;AAIXC,MAAAA,EAAE,EAAG,CAJM;AAKXC,MAAAA,qBAAqB,EAAC,KALX;AAMXC,MAAAA,SAAS,EAAC;AANC,KAAb;AAQA,SAAKC,SAAL,gBAAiBjB,KAAK,CAACkB,SAAN,CAAgB,IAAhB,CAAjB;AACA,SAAKC,SAAL,gBAAiBnB,KAAK,CAACkB,SAAN,CAAgB,IAAhB,CAAjB;AACA,SAAKE,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKC,wBAAL,GAAgC,KAAKA,wBAAL,CAA8BD,IAA9B,CAAmC,IAAnC,CAAhC;AACA,SAAKE,WAAL,GAAmB,KAAKA,WAAL,CAAiBF,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKG,YAAL,GAAoB,KAAKA,YAAL,CAAkBH,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKI,YAAL,GAAoB,KAAKA,YAAL,CAAkBJ,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKK,SAAL,GAAiB,KAAKA,SAAL,CAAeL,IAAf,CAAoB,IAApB,CAAjB;AACA,SAAKM,aAAL,GAAqB,KAAKA,aAAL,CAAmBN,IAAnB,CAAwB,IAAxB,CAArB;AACD;;AAEDM,EAAAA,aAAa,GAAE;AACb,SAAKC,QAAL,CAAc;AAACjB,MAAAA,KAAK,EAAC;AAAP,KAAd;AACD;;AAED,QAAMS,WAAN,GAAoB;AAClBS,IAAAA,OAAO,CAAC,gCAAD,CAAP;;AACA,UAAMC,GAAG,GAAG,MAAM7B,QAAQ,CAAC8B,IAAT,EAAlB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACA,UAAMC,WAAW,GAAGC,WAAW,CAAC,MAAM;AACpC,WAAKC,mBAAL,CAAyBN,GAAzB;AACD,KAF8B,EAE5B,EAF4B,CAA/B;AAGA,SAAKF,QAAL,CAAc;AAACd,MAAAA,EAAE,EAACoB;AAAJ,KAAd;AACA,SAAKN,QAAL,CAAc;AAACb,MAAAA,qBAAqB,EAAC;AAAvB,KAAd;AACD;;AAED,QAAMqB,mBAAN,CAA0BN,GAA1B,EAA+B;AAC7B,QACE,OAAO,KAAKb,SAAL,CAAeoB,OAAtB,KAAkC,WAAlC,IACA,KAAKpB,SAAL,CAAeoB,OAAf,KAA2B,IAD3B,IAEA,KAAKpB,SAAL,CAAeoB,OAAf,CAAuBC,KAAvB,CAA6BC,UAA7B,KAA4C,CAH9C,EAIE;AACA,YAAMD,KAAK,GAAG,KAAKrB,SAAL,CAAeoB,OAAf,CAAuBC,KAArC;AACA,YAAME,UAAU,GAAG,KAAKvB,SAAL,CAAeoB,OAAf,CAAuBC,KAAvB,CAA6BE,UAAhD;AACA,YAAMC,WAAW,GAAG,KAAKxB,SAAL,CAAeoB,OAAf,CAAuBC,KAAvB,CAA6BG,WAAjD;AACA,WAAKxB,SAAL,CAAeoB,OAAf,CAAuBC,KAAvB,CAA6BI,KAA7B,GAAqCF,UAArC;AACA,WAAKvB,SAAL,CAAeoB,OAAf,CAAuBC,KAAvB,CAA6BK,MAA7B,GAAsCF,WAAtC;AACA,WAAKtB,SAAL,CAAekB,OAAf,CAAuBK,KAAvB,GAA+BF,UAA/B;AACA,WAAKrB,SAAL,CAAekB,OAAf,CAAuBM,MAAvB,GAAgCF,WAAhC;AACA,YAAMG,IAAI,GAAG,MAAMd,GAAG,CAACe,aAAJ,CAAkBP,KAAlB,CAAnB;;AACA,UAAIM,IAAI,CAACE,MAAL,GAAc,CAAlB,EAAoB;AAClBF,QAAAA,IAAI,CAACG,OAAL,CAAcC,UAAD,IAAgB;AAC3B,gBAAMC,SAAS,GAAGD,UAAU,CAACC,SAA7B;AAEA,cAAIC,SAAS,GAAG9C,IAAI,CAACC,GAAG,CAAC4C,SAAS,CAAC,CAAD,CAAT,CAAa,CAAb,IAAgBA,SAAS,CAAC,CAAD,CAAT,CAAa,CAAb,CAAjB,EAAkC,CAAlC,CAAH,GAAwC5C,GAAG,CAAC4C,SAAS,CAAC,CAAD,CAAT,CAAa,CAAb,IAAgBA,SAAS,CAAC,CAAD,CAAT,CAAa,CAAb,CAAjB,EAAkC,CAAlC,CAA5C,CAApB;AACA,cAAIE,WAAW,GAAG/C,IAAI,CAACC,GAAG,CAAC4C,SAAS,CAAC,CAAD,CAAT,CAAa,CAAb,IAAgBA,SAAS,CAAC,CAAD,CAAT,CAAa,CAAb,CAAjB,EAAkC,CAAlC,CAAH,GAAwC5C,GAAG,CAAC4C,SAAS,CAAC,CAAD,CAAT,CAAa,CAAb,IAAgBA,SAAS,CAAC,CAAD,CAAT,CAAa,CAAb,CAAjB,EAAkC,CAAlC,CAA5C,CAAtB;AAEAE,UAAAA,WAAW,GAAGA,WAAW,GAACD,SAA1B;;AACA,cAAIC,WAAW,IAAI,GAAnB,EAAuB;AAAC,iBAAKvB,QAAL,CAAc;AAAChB,cAAAA,MAAM,EAAC;AAAR,aAAd;AAA0B;;AAClD,cAAIuC,WAAW,GAAG,GAAd,IAAqB,KAAKzC,KAAL,CAAWE,MAAX,KAAsB,CAA/C,EAAiD;AAC/C,iBAAKgB,QAAL,CAAc;AAAChB,cAAAA,MAAM,EAAC;AAAR,aAAd;AACA,iBAAKgB,QAAL,CAAc;AAACjB,cAAAA,KAAK,EAAC,KAAKD,KAAL,CAAWC,KAAX,GAAiB;AAAxB,aAAd;AACD;;AACDqB,UAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuB,KAAKvB,KAAL,CAAWE,MAAlC,EAA0C,QAA1C,EAAoD,KAAKF,KAAL,CAAWC,KAA/D;AACA,gBAAMyC,GAAG,GAAG,KAAKjC,SAAL,CAAekB,OAAf,CAAuBgB,UAAvB,CAAkC,IAAlC,CAAZ;AACA,eAAKzB,QAAL,CAAc;AAAC0B,YAAAA,OAAO,EAACF;AAAT,WAAd;AACAjD,UAAAA,QAAQ,CAACyC,IAAD,EAAOQ,GAAP,CAAR;AACD,SAhBD;AAiBD;AACF;AACF;;AAED9B,EAAAA,wBAAwB,GAAG;AACzBiC,IAAAA,aAAa,CAAC,KAAK7C,KAAL,CAAWI,EAAZ,CAAb;AACA,SAAKc,QAAL,CAAc;AAACb,MAAAA,qBAAqB,EAAC;AAAvB,KAAd;AACD;;AAED,QAAMS,YAAN,GAAoB;AAClB,UAAMU,WAAW,GAAGC,WAAW,CAAC,MAAM;AACpC,WAAKV,YAAL;AACD,KAF8B,EAE5B,EAF4B,CAA/B;AAGA,SAAKG,QAAL,CAAc;AAACd,MAAAA,EAAE,EAACoB;AAAJ,KAAd;AACA,SAAKN,QAAL,CAAc;AAACZ,MAAAA,SAAS,EAAC;AAAX,KAAd;AACD;;AAED,QAAMS,YAAN,GAAqB;AACnB,QACE,OAAO,KAAKR,SAAL,CAAeoB,OAAtB,KAAkC,WAAlC,IACA,KAAKpB,SAAL,CAAeoB,OAAf,KAA2B,IAD3B,IAEA,KAAKpB,SAAL,CAAeoB,OAAf,CAAuBC,KAAvB,CAA6BC,UAA7B,KAA4C,CAH9C,EAIE;AACA,YAAMiB,KAAK,GAAG,KAAKvC,SAAL,CAAeoB,OAAf,CAAuBoB,aAAvB,EAAd;AACA,UAAIC,GAAG,GAAGC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAV;;AACAF,MAAAA,GAAG,CAACG,MAAJ,GAAa,YAAU;AACrB,aAAKjC,QAAL,CAAc;AAACf,UAAAA,MAAM,EAAC,CAAC,GAAG,KAAKH,KAAL,CAAWG,MAAf,EAAuB6C,GAAvB;AAAR,SAAd;AACA1B,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAKvB,KAAL,CAAWG,MAAvB,EAA+B,KAAKH,KAAL,CAAWM,SAA1C;AACD,OAHY,CAGXK,IAHW,CAGN,IAHM,CAAb;;AAIAqC,MAAAA,GAAG,CAACI,GAAJ,GAAUN,KAAV;AACD;AACF;;AAED,QAAM9B,SAAN,GAAkB;AAChBG,IAAAA,OAAO,CAAC,gCAAD,CAAP;;AACA,UAAMC,GAAG,GAAG,MAAM7B,QAAQ,CAAC8B,IAAT,EAAlB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACA,QAAI8B,CAAJ;;AACA,SAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAC,KAAKrD,KAAL,CAAWG,MAAX,CAAkBiC,MAAhC,EAAwCiB,CAAC,EAAzC,EAA4C;AAC1C,YAAMnB,IAAI,GAAG,MAAMd,GAAG,CAACe,aAAJ,CAAkB,KAAKnC,KAAL,CAAWG,MAAX,CAAkBkD,CAAlB,CAAlB,CAAnB;AACA/B,MAAAA,OAAO,CAACC,GAAR,CAAYW,IAAZ;;AACA,UAAIA,IAAI,CAACE,MAAL,GAAc,CAAlB,EAAoB;AAClBF,QAAAA,IAAI,CAACG,OAAL,CAAcC,UAAD,IAAgB;AAC3B,gBAAMC,SAAS,GAAGD,UAAU,CAACC,SAA7B;AACA,cAAIE,WAAW,GAAG/C,IAAI,CAACC,GAAG,CAAC4C,SAAS,CAAC,CAAD,CAAT,CAAa,CAAb,IAAgBA,SAAS,CAAC,CAAD,CAAT,CAAa,CAAb,CAAjB,EAAkC,CAAlC,CAAH,GAAwC5C,GAAG,CAAC4C,SAAS,CAAC,CAAD,CAAT,CAAa,CAAb,IAAgBA,SAAS,CAAC,CAAD,CAAT,CAAa,CAAb,CAAjB,EAAkC,CAAlC,CAA5C,CAAtB;AACA,cAAIC,SAAS,GAAG9C,IAAI,CAACC,GAAG,CAAC4C,SAAS,CAAC,CAAD,CAAT,CAAa,CAAb,IAAgBA,SAAS,CAAC,CAAD,CAAT,CAAa,CAAb,CAAjB,EAAkC,CAAlC,CAAH,GAAwC5C,GAAG,CAAC4C,SAAS,CAAC,CAAD,CAAT,CAAa,CAAb,IAAgBA,SAAS,CAAC,CAAD,CAAT,CAAa,CAAb,CAAjB,EAAkC,CAAlC,CAA5C,CAApB;AACAE,UAAAA,WAAW,GAAGA,WAAW,GAACD,SAA1B;;AACA,cAAIC,WAAW,IAAI,GAAnB,EAAuB;AAAC,iBAAKvB,QAAL,CAAc;AAAChB,cAAAA,MAAM,EAAC;AAAR,aAAd;AAA0B;;AAClD,cAAIuC,WAAW,GAAG,GAAd,IAAqB,KAAKzC,KAAL,CAAWE,MAAX,KAAsB,CAA/C,EAAiD;AAC/C,iBAAKgB,QAAL,CAAc;AAAChB,cAAAA,MAAM,EAAC;AAAR,aAAd;AACA,iBAAKgB,QAAL,CAAc;AAACjB,cAAAA,KAAK,EAAC,KAAKD,KAAL,CAAWC,KAAX,GAAiB;AAAxB,aAAd;AACD;;AACDqB,UAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuB,KAAKvB,KAAL,CAAWE,MAAlC,EAA0C,QAA1C,EAAoD,KAAKF,KAAL,CAAWC,KAA/D;AACD,SAXD;AAYD;AACF;;AACD,SAAKiB,QAAL,CAAc;AAACf,MAAAA,MAAM,EAAC;AAAR,KAAd;AACD;;AAEDU,EAAAA,WAAW,GAAG;AACZgC,IAAAA,aAAa,CAAC,KAAK7C,KAAL,CAAWI,EAAZ,CAAb;AACA,SAAKY,SAAL;AACA,SAAKE,QAAL,CAAc;AAACZ,MAAAA,SAAS,EAAC;AAAX,KAAd;AACD;;AACDgD,EAAAA,MAAM,GAAE;AACN,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACE;AAAQ,QAAA,SAAS,EAAC,YAAlB;AAAA,gCACA,QAAC,MAAD;AACE,UAAA,GAAG,EAAE,KAAK/C,SADZ;AAEE,UAAA,KAAK,EAAE;AACLgD,YAAAA,QAAQ,EAAE,UADL;AAELC,YAAAA,UAAU,EAAE,MAFP;AAGLC,YAAAA,WAAW,EAAE,MAHR;AAILC,YAAAA,IAAI,EAAE,CAJD;AAKLC,YAAAA,KAAK,EAAE,CALF;AAMLC,YAAAA,SAAS,EAAE,QANN;AAOLC,YAAAA,MAAM,EAAE,CAPH;AAQL7B,YAAAA,KAAK,EAAE,MARF;AASLC,YAAAA,MAAM,EAAE;AATH;AAFT;AAAA;AAAA;AAAA;AAAA,gBADA,eAeA;AACE,UAAA,GAAG,EAAE,KAAKxB,SADZ;AAEE,UAAA,KAAK,EAAE;AACL8C,YAAAA,QAAQ,EAAE,UADL;AAELC,YAAAA,UAAU,EAAE,MAFP;AAGLC,YAAAA,WAAW,EAAE,MAHR;AAILC,YAAAA,IAAI,EAAE,CAJD;AAKLC,YAAAA,KAAK,EAAE,CALF;AAMLC,YAAAA,SAAS,EAAE,QANN;AAOLC,YAAAA,MAAM,EAAE,CAPH;AAQL7B,YAAAA,KAAK,EAAE,MARF;AASLC,YAAAA,MAAM,EAAE;AATH;AAFT;AAAA;AAAA;AAAA;AAAA,gBAfA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EA+BK,KAAKjC,KAAL,CAAWK,qBAAX,gBACD;AAAQ,QAAA,OAAO,EAAE,KAAKO,wBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADC,gBAGD;AAAQ,QAAA,OAAO,EAAE,KAAKF,WAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAlCJ,EAqCK,KAAKV,KAAL,CAAWM,SAAX,gBACD;AAAQ,QAAA,OAAO,EAAE,KAAKO,WAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADC,gBAGD;AAAQ,QAAA,OAAO,EAAE,KAAKC,YAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAxCJ,eA2CI;AAAQ,QAAA,OAAO,EAAE,KAAKG,aAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA3CJ,eA6CI;AAAA,6CACyB,KAAKjB,KAAL,CAAWC,KADpC;AAAA;AAAA;AAAA;AAAA;AAAA,cA7CJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAoDD;;AA1L+B;;AA6LlC,eAAeL,GAAf","sourcesContent":["import React from \"react\";\n// import logo from './logo.svg';\n//import * as tf from \"@tensorflow/tfjs-core\";\nimport * as handpose from \"@tensorflow-models/handpose\";\nimport Webcam from \"react-webcam\";\nimport \"./App.css\";\nimport { drawHand } from \"./utilities\";\nimport { sqrt, pow } from \"mathjs\"\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count : 0,\n      passed : 0,\n      record : [],\n      ID : 0,\n      real_time_inferencing:false,\n      recording:false,\n    };\n    this.webcamRef = React.createRef(null);\n    this.canvasRef = React.createRef(null);\n    this.runHandpose = this.runHandpose.bind(this);\n    this.stop_real_time_inference = this.stop_real_time_inference.bind(this);\n    this.stop_record = this.stop_record.bind(this);\n    this.record_video = this.record_video.bind(this);\n    this.concat_frame = this.concat_frame.bind(this);\n    this.inference = this.inference.bind(this);\n    this.reset_counter = this.reset_counter.bind(this);\n  }\n\n  reset_counter(){\n    this.setState({count:0});\n  }\n\n  async runHandpose() {    \n    require('@tensorflow/tfjs-backend-webgl');\n    const net = await handpose.load();\n    console.log(\"Handpose model loaded.\");\n    const Interval_ID = setInterval(() => {\n      this.read_time_inference(net);\n    }, 50);\n    this.setState({ID:Interval_ID});\n    this.setState({real_time_inferencing:true});\n  };\n\n  async read_time_inference(net) {\n    if (\n      typeof this.webcamRef.current !== \"undefined\" &&\n      this.webcamRef.current !== null &&\n      this.webcamRef.current.video.readyState === 4\n    ) {\n      const video = this.webcamRef.current.video;\n      const videoWidth = this.webcamRef.current.video.videoWidth;\n      const videoHeight = this.webcamRef.current.video.videoHeight;\n      this.webcamRef.current.video.width = videoWidth;\n      this.webcamRef.current.video.height = videoHeight;\n      this.canvasRef.current.width = videoWidth;\n      this.canvasRef.current.height = videoHeight;\n      const hand = await net.estimateHands(video);\n      if (hand.length > 0){\n        hand.forEach((prediction) => {\n          const landmarks = prediction.landmarks\n\n          let pawn_dist = sqrt(pow(landmarks[0][0]-landmarks[2][0], 2)+pow(landmarks[0][1]-landmarks[2][1], 2))\n          let finger_dist = sqrt(pow(landmarks[8][0]-landmarks[4][0], 2)+pow(landmarks[8][1]-landmarks[4][1], 2))\n          \n          finger_dist = finger_dist/pawn_dist          \n          if (finger_dist >= 0.5){this.setState({passed:1})}\n          if (finger_dist < 0.5 && this.state.passed === 1){\n            this.setState({passed:0});\n            this.setState({count:this.state.count+1});\n          }\n          console.log(\"passed:\", this.state.passed, \"count:\", this.state.count)\n          const ctx = this.canvasRef.current.getContext(\"2d\");\n          this.setState({context:ctx});\n          drawHand(hand, ctx);\n        });\n      }      \n    }\n  };\n\n  stop_real_time_inference() {\n    clearInterval(this.state.ID);\n    this.setState({real_time_inferencing:false});\n  }\n\n  async record_video(){    \n    const Interval_ID = setInterval(() => {\n      this.concat_frame();\n    }, 50);\n    this.setState({ID:Interval_ID});\n    this.setState({recording:true});\n  }\n\n  async concat_frame() {\n    if (\n      typeof this.webcamRef.current !== \"undefined\" &&\n      this.webcamRef.current !== null &&\n      this.webcamRef.current.video.readyState === 4\n    ) {\n      const image = this.webcamRef.current.getScreenshot();      \n      var img = document.createElement(\"img\");\n      img.onload = function(){\n        this.setState({record:[...this.state.record, img]});\n        console.log(this.state.record, this.state.recording);\n      }.bind(this)\n      img.src = image;\n    }\n  }\n\n  async inference() {\n    require('@tensorflow/tfjs-backend-webgl');\n    const net = await handpose.load();\n    console.log(\"Handpose model loaded.\");\n    var i;\n    for (i = 0; i<this.state.record.length; i++){\n      const hand = await net.estimateHands(this.state.record[i]);\n      console.log(hand);\n      if (hand.length > 0){\n        hand.forEach((prediction) => {\n          const landmarks = prediction.landmarks\n          let finger_dist = sqrt(pow(landmarks[8][0]-landmarks[4][0], 2)+pow(landmarks[8][1]-landmarks[4][1], 2))\n          let pawn_dist = sqrt(pow(landmarks[0][0]-landmarks[2][0], 2)+pow(landmarks[0][1]-landmarks[2][1], 2))\n          finger_dist = finger_dist/pawn_dist          \n          if (finger_dist >= 0.5){this.setState({passed:1})}\n          if (finger_dist < 0.5 && this.state.passed === 1){\n            this.setState({passed:0});\n            this.setState({count:this.state.count+1});\n          }\n          console.log(\"passed:\", this.state.passed, \"count:\", this.state.count)\n        });\n      }\n    }\n    this.setState({record:[]});\n  }\n\n  stop_record() {\n    clearInterval(this.state.ID);\n    this.inference();\n    this.setState({recording:false});\n  }\n  render(){\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n        <Webcam\n          ref={this.webcamRef}\n          style={{\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 9,\n            width: \"auto\",\n            height: \"auto\",\n          }}\n        />\n        <canvas\n          ref={this.canvasRef}\n          style={{\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 9,\n            width: \"auto\",\n            height: \"auto\",\n          }}\n        />\n        </header>\n          {this.state.real_time_inferencing ? (\n          <button onClick={this.stop_real_time_inference}>Stopping Real Time Inference</button>\n          ) : (\n          <button onClick={this.runHandpose}>Starting Real Time Inference</button>\n          )}\n\n          {this.state.recording ? (\n          <button onClick={this.stop_record}>Stopping Recording</button>\n          ) : (\n          <button onClick={this.record_video}>Starting Recording</button>\n          )}\n\n          <button onClick={this.reset_counter}>Reset Counter</button>\n          \n          <h4>\n            Finger Tapping Count: {this.state.count}\n          </h4>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}