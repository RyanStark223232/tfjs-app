{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { dispose as _dispose, tidy } from '../globals';\nimport { add } from '../ops/add';\nimport { div } from '../ops/div';\nimport { mul } from '../ops/mul';\nimport { sqrt } from '../ops/ops';\nimport { square } from '../ops/square';\nimport { zerosLike } from '../ops/zeros_like';\nimport { registerClass } from '../serialization';\nimport { Optimizer } from './optimizer';\n/** @doclink Optimizer */\n\nexport var AdadeltaOptimizer = /*#__PURE__*/function (_Optimizer) {\n  _inherits(AdadeltaOptimizer, _Optimizer);\n\n  var _super = _createSuper(AdadeltaOptimizer);\n\n  function AdadeltaOptimizer(learningRate, rho) {\n    var _this;\n\n    var epsilon = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n    _classCallCheck(this, AdadeltaOptimizer);\n\n    _this = _super.call(this);\n    _this.learningRate = learningRate;\n    _this.rho = rho;\n    _this.epsilon = epsilon;\n    _this.accumulatedGrads = [];\n    _this.accumulatedUpdates = [];\n\n    if (epsilon == null) {\n      _this.epsilon = ENGINE.backend.epsilon();\n    }\n\n    return _this;\n  }\n\n  _createClass(AdadeltaOptimizer, [{\n    key: \"applyGradients\",\n    value: function applyGradients(variableGradients) {\n      var _this2 = this;\n\n      var variableNames = Array.isArray(variableGradients) ? variableGradients.map(function (item) {\n        return item.name;\n      }) : Object.keys(variableGradients);\n      variableNames.forEach(function (name, i) {\n        var value = ENGINE.registeredVariables[name];\n        var trainable = false;\n\n        if (_this2.accumulatedGrads[i] == null) {\n          _this2.accumulatedGrads[i] = {\n            originalName: \"\".concat(name, \"/accum_grad\"),\n            variable: tidy(function () {\n              return zerosLike(value).variable(trainable);\n            })\n          };\n        }\n\n        if (_this2.accumulatedUpdates[i] == null) {\n          _this2.accumulatedUpdates[i] = {\n            originalName: \"\".concat(name, \"/accum_var\"),\n            variable: tidy(function () {\n              return zerosLike(value).variable(trainable);\n            })\n          };\n        }\n\n        var gradient = Array.isArray(variableGradients) ? variableGradients[i].tensor : variableGradients[name];\n\n        if (gradient == null) {\n          return;\n        }\n\n        var accumulatedGrad = _this2.accumulatedGrads[i].variable;\n        var accumulatedUpdate = _this2.accumulatedUpdates[i].variable;\n        tidy(function () {\n          var newAccumulatedGrad = add(mul(accumulatedGrad, _this2.rho), mul(square(gradient), 1 - _this2.rho));\n          var updates = mul(div(sqrt(add(accumulatedUpdate, _this2.epsilon)), sqrt(add(accumulatedGrad, _this2.epsilon))), gradient);\n          var newAccumulatedUpdate = add(mul(accumulatedUpdate, _this2.rho), mul(square(updates), 1 - _this2.rho));\n          accumulatedGrad.assign(newAccumulatedGrad);\n          accumulatedUpdate.assign(newAccumulatedUpdate);\n          var newValue = add(mul(updates, -_this2.learningRate), value);\n          value.assign(newValue);\n        });\n      });\n      this.incrementIterations();\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      if (this.accumulatedUpdates != null) {\n        _dispose(this.accumulatedGrads.map(function (v) {\n          return v.variable;\n        }));\n\n        _dispose(this.accumulatedUpdates.map(function (v) {\n          return v.variable;\n        }));\n      }\n    }\n  }, {\n    key: \"getWeights\",\n    value: function () {\n      var _getWeights = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var variables;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // Order matters for Python compatibility.\n                variables = [].concat(_toConsumableArray(this.accumulatedGrads), _toConsumableArray(this.accumulatedUpdates));\n                _context.next = 3;\n                return this.saveIterations();\n\n              case 3:\n                _context.t0 = _context.sent;\n                return _context.abrupt(\"return\", [_context.t0].concat(variables.map(function (v) {\n                  return {\n                    name: v.originalName,\n                    tensor: v.variable\n                  };\n                })));\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getWeights() {\n        return _getWeights.apply(this, arguments);\n      }\n\n      return getWeights;\n    }()\n  }, {\n    key: \"setWeights\",\n    value: function () {\n      var _setWeights = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(weightValues) {\n        var variableCount, trainable;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.extractIterations(weightValues);\n\n              case 2:\n                weightValues = _context2.sent;\n                variableCount = weightValues.length / 2;\n                trainable = false;\n                this.accumulatedGrads = weightValues.slice(0, variableCount).map(function (v) {\n                  return {\n                    originalName: v.name,\n                    variable: v.tensor.variable(trainable)\n                  };\n                });\n                this.accumulatedUpdates = weightValues.slice(variableCount, variableCount * 2).map(function (v) {\n                  return {\n                    originalName: v.name,\n                    variable: v.tensor.variable(trainable)\n                  };\n                });\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function setWeights(_x) {\n        return _setWeights.apply(this, arguments);\n      }\n\n      return setWeights;\n    }()\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return {\n        'learningRate': this.learningRate,\n        'rho': this.rho,\n        'epsilon': this.epsilon\n      };\n    }\n    /** @nocollapse */\n\n  }], [{\n    key: \"fromConfig\",\n    value: function fromConfig(cls, config) {\n      return new cls(config['learningRate'], config['rho'], config['epsilon']);\n    }\n  }]);\n\n  return AdadeltaOptimizer;\n}(Optimizer);\n/** @nocollapse */\n\nAdadeltaOptimizer.className = 'Adadelta'; // Name matters for Python compatibility.\n\nregisterClass(AdadeltaOptimizer);","map":{"version":3,"sources":["../../src/optimizers/adadelta_optimizer.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { ENGINE } from '../engine';\r\nimport { dispose, tidy } from '../globals';\r\nimport { add } from '../ops/add';\r\nimport { div } from '../ops/div';\r\nimport { mul } from '../ops/mul';\r\nimport { sqrt } from '../ops/ops';\r\nimport { square } from '../ops/square';\r\nimport { zerosLike } from '../ops/zeros_like';\r\nimport { registerClass } from '../serialization';\r\nimport { Optimizer } from './optimizer';\r\n/** @doclink Optimizer */\r\nexport class AdadeltaOptimizer extends Optimizer {\r\n    constructor(learningRate, rho, epsilon = null) {\r\n        super();\r\n        this.learningRate = learningRate;\r\n        this.rho = rho;\r\n        this.epsilon = epsilon;\r\n        this.accumulatedGrads = [];\r\n        this.accumulatedUpdates = [];\r\n        if (epsilon == null) {\r\n            this.epsilon = ENGINE.backend.epsilon();\r\n        }\r\n    }\r\n    applyGradients(variableGradients) {\r\n        const variableNames = Array.isArray(variableGradients) ?\r\n            variableGradients.map(item => item.name) :\r\n            Object.keys(variableGradients);\r\n        variableNames.forEach((name, i) => {\r\n            const value = ENGINE.registeredVariables[name];\r\n            const trainable = false;\r\n            if (this.accumulatedGrads[i] == null) {\r\n                this.accumulatedGrads[i] = {\r\n                    originalName: `${name}/accum_grad`,\r\n                    variable: tidy(() => zerosLike(value).variable(trainable))\r\n                };\r\n            }\r\n            if (this.accumulatedUpdates[i] == null) {\r\n                this.accumulatedUpdates[i] = {\r\n                    originalName: `${name}/accum_var`,\r\n                    variable: tidy(() => zerosLike(value).variable(trainable))\r\n                };\r\n            }\r\n            const gradient = Array.isArray(variableGradients) ?\r\n                variableGradients[i].tensor :\r\n                variableGradients[name];\r\n            if (gradient == null) {\r\n                return;\r\n            }\r\n            const accumulatedGrad = this.accumulatedGrads[i].variable;\r\n            const accumulatedUpdate = this.accumulatedUpdates[i].variable;\r\n            tidy(() => {\r\n                const newAccumulatedGrad = add(mul(accumulatedGrad, this.rho), mul(square(gradient), 1 - this.rho));\r\n                const updates = mul(div(sqrt(add(accumulatedUpdate, this.epsilon)), sqrt(add(accumulatedGrad, this.epsilon))), gradient);\r\n                const newAccumulatedUpdate = add(mul(accumulatedUpdate, this.rho), mul(square(updates), 1 - this.rho));\r\n                accumulatedGrad.assign(newAccumulatedGrad);\r\n                accumulatedUpdate.assign(newAccumulatedUpdate);\r\n                const newValue = add(mul(updates, -this.learningRate), value);\r\n                value.assign(newValue);\r\n            });\r\n        });\r\n        this.incrementIterations();\r\n    }\r\n    dispose() {\r\n        if (this.accumulatedUpdates != null) {\r\n            dispose(this.accumulatedGrads.map(v => v.variable));\r\n            dispose(this.accumulatedUpdates.map(v => v.variable));\r\n        }\r\n    }\r\n    async getWeights() {\r\n        // Order matters for Python compatibility.\r\n        const variables = [...this.accumulatedGrads, ...this.accumulatedUpdates];\r\n        return [await this.saveIterations()].concat(variables.map(v => ({ name: v.originalName, tensor: v.variable })));\r\n    }\r\n    async setWeights(weightValues) {\r\n        weightValues = await this.extractIterations(weightValues);\r\n        const variableCount = weightValues.length / 2;\r\n        const trainable = false;\r\n        this.accumulatedGrads =\r\n            weightValues.slice(0, variableCount).map(v => ({\r\n                originalName: v.name,\r\n                variable: v.tensor.variable(trainable)\r\n            }));\r\n        this.accumulatedUpdates =\r\n            weightValues.slice(variableCount, variableCount * 2)\r\n                .map(v => ({\r\n                originalName: v.name,\r\n                variable: v.tensor.variable(trainable)\r\n            }));\r\n    }\r\n    getConfig() {\r\n        return {\r\n            'learningRate': this.learningRate,\r\n            'rho': this.rho,\r\n            'epsilon': this.epsilon\r\n        };\r\n    }\r\n    /** @nocollapse */\r\n    static fromConfig(cls, config) {\r\n        return new cls(config['learningRate'], config['rho'], config['epsilon']);\r\n    }\r\n}\r\n/** @nocollapse */\r\nAdadeltaOptimizer.className = 'Adadelta'; // Name matters for Python compatibility.\r\nregisterClass(AdadeltaOptimizer);\r\n//# sourceMappingURL=adadelta_optimizer.js.map"]},"metadata":{},"sourceType":"module"}