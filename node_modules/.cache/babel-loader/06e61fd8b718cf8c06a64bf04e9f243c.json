{"ast":null,"code":"import { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { conv2d } from './conv2d';\nimport { depthwiseConv2d } from './depthwise_conv2d';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\r\n * 2-D convolution with separable filters.\r\n *\r\n * Performs a depthwise convolution that acts separately on channels followed\r\n * by a pointwise convolution that mixes channels. Note that this is\r\n * separability between dimensions [1, 2] and 3, not spatial separability\r\n * between dimensions 1 and 2.\r\n *\r\n * See\r\n * [https://www.tensorflow.org/api_docs/python/tf/nn/separable_conv2d](\r\n *     https://www.tensorflow.org/api_docs/python/tf/nn/separable_conv2d)\r\n * for more details.\r\n *\r\n * @param x The input tensor, of rank 4 or rank 3, of shape\r\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is\r\n * assumed.\r\n * @param depthwiseFilter The depthwise filter tensor, rank 4, of shape\r\n *     `[filterHeight, filterWidth, inChannels, channelMultiplier]`. This is\r\n *     the filter used in the first step.\r\n * @param pointwiseFilter The pointwise filter tensor, rank 4, of shape\r\n *     `[1, 1, inChannels * channelMultiplier, outChannels]`. This is\r\n *     the filter used in the second step.\r\n * @param strides The strides of the convolution: `[strideHeight,\r\n * strideWidth]`. If strides is a single number, then `strideHeight ==\r\n * strideWidth`.\r\n * @param pad The type of padding algorithm.\r\n *   - `same` and stride 1: output will be of same size as input,\r\n *       regardless of filter size.\r\n *   - `valid`: output will be smaller than input if filter is larger\r\n *       than 1x1.\r\n *   - For more info, see this guide:\r\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\r\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\r\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\r\n *     in which we sample input values across the height and width dimensions\r\n *     in atrous convolution. Defaults to `[1, 1]`. If `rate` is a single\r\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\r\n *     1, then all values of `strides` must be 1.\r\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\r\n *     \"NHWC\". Specify the data format of the input and output data. With the\r\n *     default format \"NHWC\", the data is stored in the order of: [batch,\r\n *     height, width, channels]. Only \"NHWC\" is currently supported.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Convolution'}\r\n */\n\nfunction separableConv2d_(x, depthwiseFilter, pointwiseFilter, strides, pad) {\n  var dilation = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [1, 1];\n  var dataFormat = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 'NHWC';\n  var $x = convertToTensor(x, 'x', 'separableConv2d');\n  var $depthwiseFilter = convertToTensor(depthwiseFilter, 'depthwiseFilter', 'separableConv2d');\n  var $pointwiseFilter = convertToTensor(pointwiseFilter, 'pointwiseFilter', 'separableConv2d');\n  var x4D = $x;\n  var reshapedTo4D = false;\n\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n  }\n\n  if (dataFormat === 'NCHW') {\n    throw new Error('separableConv2d currently does not support dataFormat NCHW; only ' + 'NHWC is supported');\n  }\n\n  util.assert(x4D.rank === 4, function () {\n    return \"Error in separableConv2d: input must be rank 4, but got \" + \"rank \".concat(x4D.rank, \".\");\n  });\n  util.assert($depthwiseFilter.rank === 4, function () {\n    return \"Error in separableConv2d: depthwise filter must be rank 4, but \" + \"got rank \".concat($depthwiseFilter.rank, \".\");\n  });\n  util.assert($pointwiseFilter.rank === 4, function () {\n    return \"Error in separableConv2d: pointwise filter must be rank 4, but \" + \"got rank \".concat($depthwiseFilter.rank, \".\");\n  });\n  util.assert($pointwiseFilter.shape[0] === 1, function () {\n    return \"Error in separableConv2d: the first dimension of pointwise filter \" + \" must be 1, but got \".concat($pointwiseFilter.shape[0], \".\");\n  });\n  util.assert($pointwiseFilter.shape[1] === 1, function () {\n    return \"Error in separableConv2d: the second dimension of pointwise \" + \"filter must be 1, but got \".concat($pointwiseFilter.shape[1], \".\");\n  });\n  var inChannels = $depthwiseFilter.shape[2];\n  var channelMultiplier = $depthwiseFilter.shape[3];\n  util.assert($pointwiseFilter.shape[2] === inChannels * channelMultiplier, function () {\n    return \"Error in separableConv2d: the third dimension of pointwise filter \" + \"must be \".concat(inChannels * channelMultiplier, \", \") + \"but got \".concat($pointwiseFilter.shape[2], \".\");\n  });\n  var depthwise = depthwiseConv2d(x4D, $depthwiseFilter, strides, pad, dataFormat, dilation);\n  var pointwiseStride = 1;\n  var res = conv2d(depthwise, $pointwiseFilter, pointwiseStride, 'valid', dataFormat);\n\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n  }\n\n  return res;\n}\n\nexport var separableConv2d = op({\n  separableConv2d_: separableConv2d_\n});","map":{"version":3,"sources":["../../src/ops/separable_conv2d.ts"],"names":[],"mappings":"AAiBA,SAAQ,eAAR,QAA8B,oBAA9B;AAEA,OAAO,KAAK,IAAZ,MAAsB,SAAtB;AAEA,SAAQ,MAAR,QAAqB,UAArB;AACA,SAAQ,eAAR,QAA8B,oBAA9B;AACA,SAAQ,EAAR,QAAiB,aAAjB;AACA,SAAQ,OAAR,QAAsB,WAAtB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4CG;;AACH,SAAS,gBAAT,CACI,CADJ,EACqB,eADrB,EAEI,eAFJ,EAE0C,OAF1C,EAGI,GAHJ,EAIsC;AAAA,MADb,QACa,uEADuB,CAAC,CAAD,EAAI,CAAJ,CACvB;AAAA,MAAlC,UAAkC,uEAAN,MAAM;AACpC,MAAM,EAAE,GAAG,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,iBAAT,CAA1B;AACA,MAAM,gBAAgB,GAClB,eAAe,CAAC,eAAD,EAAkB,iBAAlB,EAAqC,iBAArC,CADnB;AAEA,MAAM,gBAAgB,GAClB,eAAe,CAAC,eAAD,EAAkB,iBAAlB,EAAqC,iBAArC,CADnB;AAGA,MAAI,GAAG,GAAG,EAAV;AACA,MAAI,YAAY,GAAG,KAAnB;;AACA,MAAI,EAAE,CAAC,IAAH,KAAY,CAAhB,EAAmB;AACjB,IAAA,YAAY,GAAG,IAAf;AACA,IAAA,GAAG,GAAG,OAAO,CAAC,EAAD,EAAK,CAAC,CAAD,EAAI,EAAE,CAAC,KAAH,CAAS,CAAT,CAAJ,EAAiB,EAAE,CAAC,KAAH,CAAS,CAAT,CAAjB,EAA8B,EAAE,CAAC,KAAH,CAAS,CAAT,CAA9B,CAAL,CAAb;AACD;;AAED,MAAI,UAAU,KAAK,MAAnB,EAA2B;AACzB,UAAM,IAAI,KAAJ,CACF,sEACA,mBAFE,CAAN;AAGD;;AAED,EAAA,IAAI,CAAC,MAAL,CACI,GAAG,CAAC,IAAJ,KAAa,CADjB,EAEI;AAAA,WAAM,4EACM,GAAG,CAAC,IADV,MAAN;AAAA,GAFJ;AAIA,EAAA,IAAI,CAAC,MAAL,CACI,gBAAgB,CAAC,IAAjB,KAA0B,CAD9B,EAEI;AAAA,WAAM,uFACU,gBAAgB,CAAC,IAD3B,MAAN;AAAA,GAFJ;AAIA,EAAA,IAAI,CAAC,MAAL,CACI,gBAAgB,CAAC,IAAjB,KAA0B,CAD9B,EAEI;AAAA,WAAM,uFACU,gBAAgB,CAAC,IAD3B,MAAN;AAAA,GAFJ;AAIA,EAAA,IAAI,CAAC,MAAL,CACI,gBAAgB,CAAC,KAAjB,CAAuB,CAAvB,MAA8B,CADlC,EAEI;AAAA,WACI,qGACuB,gBAAgB,CAAC,KAAjB,CAAuB,CAAvB,CADvB,MADJ;AAAA,GAFJ;AAKA,EAAA,IAAI,CAAC,MAAL,CACI,gBAAgB,CAAC,KAAjB,CAAuB,CAAvB,MAA8B,CADlC,EAEI;AAAA,WAAM,qGAC2B,gBAAgB,CAAC,KAAjB,CAAuB,CAAvB,CAD3B,MAAN;AAAA,GAFJ;AAKA,MAAM,UAAU,GAAG,gBAAgB,CAAC,KAAjB,CAAuB,CAAvB,CAAnB;AACA,MAAM,iBAAiB,GAAG,gBAAgB,CAAC,KAAjB,CAAuB,CAAvB,CAA1B;AACA,EAAA,IAAI,CAAC,MAAL,CACI,gBAAgB,CAAC,KAAjB,CAAuB,CAAvB,MAA8B,UAAU,GAAG,iBAD/C,EAEI;AAAA,WACI,yFACW,UAAU,GAAG,iBADxB,4BAEW,gBAAgB,CAAC,KAAjB,CAAuB,CAAvB,CAFX,MADJ;AAAA,GAFJ;AAOA,MAAM,SAAS,GAAG,eAAe,CAC7B,GAD6B,EACxB,gBADwB,EACN,OADM,EACG,GADH,EACQ,UADR,EACoB,QADpB,CAAjC;AAEA,MAAM,eAAe,GAAG,CAAxB;AACA,MAAM,GAAG,GACL,MAAM,CAAC,SAAD,EAAY,gBAAZ,EAA8B,eAA9B,EAA+C,OAA/C,EAAwD,UAAxD,CADV;;AAGA,MAAI,YAAJ,EAAkB;AAChB,WAAO,OAAO,CAAC,GAAD,EAAM,CAAC,GAAG,CAAC,KAAJ,CAAU,CAAV,CAAD,EAAe,GAAG,CAAC,KAAJ,CAAU,CAAV,CAAf,EAA6B,GAAG,CAAC,KAAJ,CAAU,CAAV,CAA7B,CAAN,CAAd;AACD;;AACD,SAAO,GAAP;AACD;;AAED,OAAO,IAAM,eAAe,GAAG,EAAE,CAAC;AAAC,EAAA,gBAAgB,EAAhB;AAAD,CAAD,CAA1B","sourceRoot":"","sourcesContent":["import { convertToTensor } from '../tensor_util_env';\r\nimport * as util from '../util';\r\nimport { conv2d } from './conv2d';\r\nimport { depthwiseConv2d } from './depthwise_conv2d';\r\nimport { op } from './operation';\r\nimport { reshape } from './reshape';\r\n/**\r\n * 2-D convolution with separable filters.\r\n *\r\n * Performs a depthwise convolution that acts separately on channels followed\r\n * by a pointwise convolution that mixes channels. Note that this is\r\n * separability between dimensions [1, 2] and 3, not spatial separability\r\n * between dimensions 1 and 2.\r\n *\r\n * See\r\n * [https://www.tensorflow.org/api_docs/python/tf/nn/separable_conv2d](\r\n *     https://www.tensorflow.org/api_docs/python/tf/nn/separable_conv2d)\r\n * for more details.\r\n *\r\n * @param x The input tensor, of rank 4 or rank 3, of shape\r\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is\r\n * assumed.\r\n * @param depthwiseFilter The depthwise filter tensor, rank 4, of shape\r\n *     `[filterHeight, filterWidth, inChannels, channelMultiplier]`. This is\r\n *     the filter used in the first step.\r\n * @param pointwiseFilter The pointwise filter tensor, rank 4, of shape\r\n *     `[1, 1, inChannels * channelMultiplier, outChannels]`. This is\r\n *     the filter used in the second step.\r\n * @param strides The strides of the convolution: `[strideHeight,\r\n * strideWidth]`. If strides is a single number, then `strideHeight ==\r\n * strideWidth`.\r\n * @param pad The type of padding algorithm.\r\n *   - `same` and stride 1: output will be of same size as input,\r\n *       regardless of filter size.\r\n *   - `valid`: output will be smaller than input if filter is larger\r\n *       than 1x1.\r\n *   - For more info, see this guide:\r\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\r\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\r\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\r\n *     in which we sample input values across the height and width dimensions\r\n *     in atrous convolution. Defaults to `[1, 1]`. If `rate` is a single\r\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\r\n *     1, then all values of `strides` must be 1.\r\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\r\n *     \"NHWC\". Specify the data format of the input and output data. With the\r\n *     default format \"NHWC\", the data is stored in the order of: [batch,\r\n *     height, width, channels]. Only \"NHWC\" is currently supported.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Convolution'}\r\n */\r\nfunction separableConv2d_(x, depthwiseFilter, pointwiseFilter, strides, pad, dilation = [1, 1], dataFormat = 'NHWC') {\r\n    const $x = convertToTensor(x, 'x', 'separableConv2d');\r\n    const $depthwiseFilter = convertToTensor(depthwiseFilter, 'depthwiseFilter', 'separableConv2d');\r\n    const $pointwiseFilter = convertToTensor(pointwiseFilter, 'pointwiseFilter', 'separableConv2d');\r\n    let x4D = $x;\r\n    let reshapedTo4D = false;\r\n    if ($x.rank === 3) {\r\n        reshapedTo4D = true;\r\n        x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\r\n    }\r\n    if (dataFormat === 'NCHW') {\r\n        throw new Error('separableConv2d currently does not support dataFormat NCHW; only ' +\r\n            'NHWC is supported');\r\n    }\r\n    util.assert(x4D.rank === 4, () => `Error in separableConv2d: input must be rank 4, but got ` +\r\n        `rank ${x4D.rank}.`);\r\n    util.assert($depthwiseFilter.rank === 4, () => `Error in separableConv2d: depthwise filter must be rank 4, but ` +\r\n        `got rank ${$depthwiseFilter.rank}.`);\r\n    util.assert($pointwiseFilter.rank === 4, () => `Error in separableConv2d: pointwise filter must be rank 4, but ` +\r\n        `got rank ${$depthwiseFilter.rank}.`);\r\n    util.assert($pointwiseFilter.shape[0] === 1, () => `Error in separableConv2d: the first dimension of pointwise filter ` +\r\n        ` must be 1, but got ${$pointwiseFilter.shape[0]}.`);\r\n    util.assert($pointwiseFilter.shape[1] === 1, () => `Error in separableConv2d: the second dimension of pointwise ` +\r\n        `filter must be 1, but got ${$pointwiseFilter.shape[1]}.`);\r\n    const inChannels = $depthwiseFilter.shape[2];\r\n    const channelMultiplier = $depthwiseFilter.shape[3];\r\n    util.assert($pointwiseFilter.shape[2] === inChannels * channelMultiplier, () => `Error in separableConv2d: the third dimension of pointwise filter ` +\r\n        `must be ${inChannels * channelMultiplier}, ` +\r\n        `but got ${$pointwiseFilter.shape[2]}.`);\r\n    const depthwise = depthwiseConv2d(x4D, $depthwiseFilter, strides, pad, dataFormat, dilation);\r\n    const pointwiseStride = 1;\r\n    const res = conv2d(depthwise, $pointwiseFilter, pointwiseStride, 'valid', dataFormat);\r\n    if (reshapedTo4D) {\r\n        return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\r\n    }\r\n    return res;\r\n}\r\nexport const separableConv2d = op({ separableConv2d_ });\r\n//# sourceMappingURL=separable_conv2d.js.map"]},"metadata":{},"sourceType":"module"}