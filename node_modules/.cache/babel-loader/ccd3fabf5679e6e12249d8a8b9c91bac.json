{"ast":null,"code":"import _classCallCheck from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nexport var AddNProgram = function AddNProgram(outputShape, shapes) {\n  _classCallCheck(this, AddNProgram);\n\n  this.outputShape = [];\n  this.outputShape = outputShape;\n  this.variableNames = shapes.map(function (_, i) {\n    return \"T\".concat(i);\n  });\n  var snippets = []; // Get target elements from every input tensor.\n\n  this.variableNames.forEach(function (variable) {\n    snippets.push(\"float v\".concat(variable, \" = get\").concat(variable, \"AtOutCoords();\"));\n  }); // Calculate the sum of all elements.\n\n  var operation = this.variableNames.map(function (variable) {\n    return \"v\".concat(variable);\n  }).join(' + ');\n  this.userCode = \"\\n      void main() {\\n        \".concat(snippets.join('\\n        '), \"\\n\\n        float result = \").concat(operation, \";\\n        setOutput(result);\\n      }\\n    \");\n};","map":{"version":3,"sources":["../src/addn_gpu.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AAIH,WAAa,WAAb,GAKE,qBAAY,WAAZ,EAAmC,MAAnC,EAAqD;AAAA;;AAHrD,OAAA,WAAA,GAAwB,EAAxB;AAIE,OAAK,WAAL,GAAmB,WAAnB;AACA,OAAK,aAAL,GAAqB,MAAM,CAAC,GAAP,CAAW,UAAC,CAAD,EAAI,CAAJ;AAAA,sBAAc,CAAd;AAAA,GAAX,CAArB;AAEA,MAAM,QAAQ,GAAa,EAA3B,CAJmD,CAKnD;;AACA,OAAK,aAAL,CAAmB,OAAnB,CAA2B,UAAA,QAAQ,EAAG;AACpC,IAAA,QAAQ,CAAC,IAAT,kBAAwB,QAAxB,mBAAyC,QAAzC;AACD,GAFD,EANmD,CAUnD;;AACA,MAAM,SAAS,GAAG,KAAK,aAAL,CACK,GADL,CACS,UAAA,QAAQ,EAAG;AACd,sBAAW,QAAX;AACD,GAHL,EAIK,IAJL,CAIU,KAJV,CAAlB;AAMA,OAAK,QAAL,4CAEM,QAAQ,CAAC,IAAT,CAAc,YAAd,CAFN,wCAIqB,SAJrB;AAQD,CA9BH","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nexport class AddNProgram {\r\n    constructor(outputShape, shapes) {\r\n        this.outputShape = [];\r\n        this.outputShape = outputShape;\r\n        this.variableNames = shapes.map((_, i) => `T${i}`);\r\n        const snippets = [];\r\n        // Get target elements from every input tensor.\r\n        this.variableNames.forEach(variable => {\r\n            snippets.push(`float v${variable} = get${variable}AtOutCoords();`);\r\n        });\r\n        // Calculate the sum of all elements.\r\n        const operation = this.variableNames\r\n            .map(variable => {\r\n            return `v${variable}`;\r\n        })\r\n            .join(' + ');\r\n        this.userCode = `\r\n      void main() {\r\n        ${snippets.join('\\n        ')}\r\n\r\n        float result = ${operation};\r\n        setOutput(result);\r\n      }\r\n    `;\r\n    }\r\n}\r\n//# sourceMappingURL=addn_gpu.js.map"]},"metadata":{},"sourceType":"module"}