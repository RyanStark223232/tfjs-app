{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\wongh\\\\Documents\\\\GitHub\\\\tfjs-app\\\\src\\\\App.js\";\nimport React from \"react\";\nimport Button from '@material-ui/core/Button';\nimport * as handpose from \"@tensorflow-models/handpose\";\nimport * as posenet from \"@tensorflow-models/posenet\";\nimport * as facemesh from \"@tensorflow-models/facemesh\"; //import * as tf from '@tensorflow/tfjs-core';\n\nimport Webcam from \"react-webcam\";\nimport \"./App.css\";\nimport { drawHand_tap, drawHand_rotate, drawHand_fist, drawHand_still, writeText, drawKeypoints, drawSkeleton, drawMesh } from \"./utilities\";\nimport { sqrt, pow } from \"mathjs\";\nimport { Line } from 'react-chartjs-2';\nimport handline from './HandLines1.jpg';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.sleep = milliseconds => {\n      return new Promise(resolve => setTimeout(resolve, milliseconds));\n    };\n\n    this.exportToJson = (objectData, filename) => {\n      let contentType = \"application/json;charset=utf-8;\";\n\n      if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n        var blob = new Blob([decodeURIComponent(encodeURI(JSON.stringify(objectData)))], {\n          type: contentType\n        });\n        navigator.msSaveOrOpenBlob(blob, filename);\n      } else {\n        var a = document.createElement('a');\n        a.download = filename;\n        a.href = 'data:' + contentType + ',' + encodeURIComponent(JSON.stringify(objectData));\n        a.target = '_blank';\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n      }\n    };\n\n    this.getArray = () => {\n      let dict = {\n        tap_count: this.state.tap_count,\n        rotate_count: this.state.rotate_count,\n        fist_count: this.state.fist_count,\n        dist_array: this.state.dist_array,\n        dist_time_array: this.state.dist_time_array,\n        dist_record: this.state.dist_record,\n        dist_time_record: this.state.dist_time_record,\n        rotate_array: this.state.rotate_array,\n        rotate_time_array: this.state.rotate_time_array,\n        rotate_record: this.state.rotate_record,\n        rotate_time_record: this.state.rotate_time_record,\n        fist_array: this.state.fist_array,\n        fist_time_array: this.state.fist_time_array,\n        fist_record: this.state.fist_record,\n        fist_time_record: this.state.fist_time_record,\n        still_array: this.state.still_array,\n        still_time_array: this.state.still_time_array,\n        still_record: this.state.still_record,\n        still_time_record: this.state.still_time_record,\n        startAt: this.state.startAt,\n        avg_fps: this.state.avg_fps,\n        hand_dist_array: this.state.hand_dist_array,\n        hand_rotate_array: this.state.hand_rotate_array,\n        hand_fist_array: this.state.hand_fist_array,\n        hand_still_array: this.state.hand_still_array\n      };\n      this.exportToJson(dict, \"state\");\n    };\n\n    this.state = {\n      ID: 0,\n      tap_count: [],\n      rotate_count: [],\n      fist_count: [],\n      last_hand_L: [],\n      last_hand_R: [],\n      index_passed: 0,\n      min_dist: 0,\n      max_dist: 99.0,\n      rotate_passed: 0,\n      last_pressed: 0,\n      real_time_inferencing: false,\n      recording: false,\n      button_mode: false,\n      chart_ready: false,\n      finger_done: false,\n      rotate_done: false,\n      fist_done: false,\n      hand_dist_array_L: [],\n      hand_dist_array_R: [],\n      hand_rotate_array_L: [],\n      hand_rotate_array_R: [],\n      hand_fist_array_L: [],\n      hand_fist_array_R: [],\n      hand_still_array_L: [],\n      hand_still_array_R: [],\n      dist_array_L: [],\n      dist_time_array_L: [],\n      dist_record_L: [],\n      dist_time_record_L: [],\n      dist_array_R: [],\n      dist_time_array_R: [],\n      dist_record_R: [],\n      dist_time_record_R: [],\n      rotate_array_L: [],\n      rotate_time_array_L: [],\n      rotate_record_L: [],\n      rotate_time_record_L: [],\n      rotate_array_R: [],\n      rotate_time_array_R: [],\n      rotate_record_R: [],\n      rotate_time_record_R: [],\n      fist_array_L: [],\n      fist_time_array_L: [],\n      fist_record_L: [],\n      fist_time_record_L: [],\n      fist_array_R: [],\n      fist_time_array_R: [],\n      fist_record_R: [],\n      fist_time_record_R: [],\n      still_array_L: [],\n      still_time_array_L: [],\n      still_record_L: [],\n      still_time_record_L: [],\n      still_array_R: [],\n      still_time_array_R: [],\n      still_record_R: [],\n      still_time_record_R: [],\n      chart_data1_L: null,\n      chart_data1_R: null,\n      chart_data2_L: null,\n      chart_data2_R: null,\n      chart_data3_L: null,\n      chart_data3_R: null,\n      chart_data4_L: null,\n      chart_data4_R: null,\n      stage: 0,\n      wait: false,\n      wait_till: 0,\n      startAt: Date.now(),\n      dead_frame: 0,\n      raw: true,\n      facingMode: \"user\",\n      avg_fps: 0\n    };\n    this.webcamRef = /*#__PURE__*/React.createRef(null);\n    this.canvasRef = /*#__PURE__*/React.createRef(null);\n    this.videoConstraints = {\n      facingMode: \"user\"\n    };\n    this.capture_interval = 50;\n    this.runHandpose = this.runHandpose.bind(this);\n    this.stop_real_time_inference = this.stop_real_time_inference.bind(this);\n    this.stop_tapping = this.stop_tapping.bind(this);\n    this.stop_rotating = this.stop_rotating.bind(this);\n    this.stop_gripping = this.stop_gripping.bind(this);\n    this.stop_record = this.stop_record.bind(this);\n    this.record_video = this.record_video.bind(this);\n    this.concat_frame = this.concat_frame.bind(this);\n    this.inference = this.inference.bind(this);\n    this.reset_counter = this.reset_counter.bind(this);\n    this.increment_tap1 = this.increment_tap1.bind(this);\n    this.increment_tap2 = this.increment_tap2.bind(this);\n    this.switch_button = this.switch_button.bind(this);\n    this.compose_chart = this.compose_chart.bind(this);\n    this.runPosenet = this.runPosenet.bind(this);\n    this.real_time_posenet = this.real_time_posenet.bind(this);\n    this.runFacemesh = this.runFacemesh.bind(this);\n    this.real_time_facemesh = this.real_time_facemesh.bind(this);\n    this.switch_style = this.switch_style.bind(this);\n    this.switch_cam = this.switch_cam.bind(this);\n    this.getArray = this.getArray.bind(this);\n    this.exportToJson = this.exportToJson.bind(this);\n    this.next_step = this.next_step.bind(this);\n  }\n\n  switch_cam() {\n    if (this.state.facingMode === \"user\") this.setState({\n      facingMode: \"environment\"\n    });else if (this.state.facingMode === \"environment\") this.setState({\n      facingMode: \"user\"\n    });\n  }\n\n  async runFacemesh() {\n    require('@tensorflow/tfjs-backend-webgl');\n\n    const net = await facemesh.load();\n    console.log(\"Facemesh model loaded.\");\n    this.setState({\n      startAt: Date.now()\n    });\n    const Interval_ID = setInterval(() => {\n      this.real_time_facemesh(net);\n    }, this.capture_interval);\n    this.setState({\n      ID: Interval_ID,\n      real_time_inferencing: true\n    });\n  }\n\n  async real_time_facemesh(net) {\n    if (this.state.wait) {\n      this.setState({\n        wait_till: Date.now() + 3000\n      });\n      this.setState({\n        wait: false\n      });\n    }\n\n    if (typeof this.webcamRef.current !== \"undefined\" && this.webcamRef.current !== null && this.webcamRef.current.video.readyState === 4) {\n      const video = this.webcamRef.current.video;\n      const videoWidth = this.webcamRef.current.video.videoWidth;\n      const videoHeight = this.webcamRef.current.video.videoHeight;\n      this.webcamRef.current.video.width = videoWidth;\n      this.webcamRef.current.video.height = videoHeight;\n      this.canvasRef.current.width = videoWidth;\n      this.canvasRef.current.height = videoHeight;\n      const face = await net.estimateFaces(video);\n      const ctx = this.canvasRef.current.getContext(\"2d\");\n      drawMesh(face, ctx);\n    }\n  }\n\n  async runPosenet() {\n    require('@tensorflow/tfjs-backend-webgl');\n\n    const net = await posenet.load();\n    console.log(\"PoseNet model loaded.\");\n    this.setState({\n      startAt: Date.now()\n    });\n    const Interval_ID = setInterval(() => {\n      this.real_time_posenet(net);\n    }, this.capture_interval);\n    this.setState({\n      ID: Interval_ID,\n      real_time_inferencing: true\n    });\n  }\n\n  async real_time_posenet(net) {\n    if (this.state.wait) {\n      this.setState({\n        wait_till: Date.now() + 3000,\n        wait: false\n      });\n    }\n\n    if (typeof this.webcamRef.current !== \"undefined\" && this.webcamRef.current !== null && this.webcamRef.current.video.readyState === 4) {\n      const video = this.webcamRef.current.video;\n      const videoWidth = this.webcamRef.current.video.videoWidth;\n      const videoHeight = this.webcamRef.current.video.videoHeight;\n      this.webcamRef.current.video.width = videoWidth;\n      this.webcamRef.current.video.height = videoHeight;\n      this.canvasRef.current.width = videoWidth;\n      this.canvasRef.current.height = videoHeight;\n      const pose = await net.estimateSinglePose(video);\n      const ctx = this.canvasRef.current.getContext(\"2d\");\n      drawKeypoints(pose[\"keypoints\"], 0.6, ctx);\n      drawSkeleton(pose[\"keypoints\"], 0.7, ctx);\n    }\n  }\n\n  async switch_style() {\n    await this.setState({\n      raw: !this.state.raw\n    });\n    this.compose_chart();\n  }\n\n  compose_chart() {\n    let time_array_1_L = [];\n    let time_array_1_R = [];\n    let count_array_1_L = [];\n    let count_array_1_R = [];\n    let label_1_L = \"\";\n    let label_1_R = \"\";\n    let time_array_2_L = [];\n    let time_array_2_R = [];\n    let count_array_2_L = [];\n    let count_array_2_R = [];\n    let label_2_L = \"\";\n    let label_2_R = \"\";\n    let time_array_3_L = [];\n    let time_array_3_R = [];\n    let count_array_3_L = [];\n    let count_array_3_R = [];\n    let label_3_L = \"\";\n    let label_3_R = \"\";\n    let time_array_4_L = [];\n    let time_array_4_R = [];\n    let count_array_4_L = [];\n    let count_array_4_R = [];\n    let label_4_L = \"\";\n    let label_4_R = \"\";\n    let real_dist_v = document.getElementById(\"real_measurement_v\").value;\n    let real_dist_h = document.getElementById(\"real_measurement_h\").value;\n    let avg_fps = this.state.hand_dist_array_L.length / (this.state.dist_time_array_L[this.state.dist_time_array_L.length - 1] - this.state.dist_time_array_L[0]);\n    this.setState({\n      avg_fps: avg_fps\n    });\n\n    if (this.state.raw) {\n      // Print Data Raw\n      if (this.state.dist_array_L.length > 100) {\n        time_array_1_L = this.state.dist_time_array_L.slice(10, this.state.dist_time_array_L.length - 20);\n        count_array_1_L = this.state.dist_array_L.slice(10, this.state.dist_array_L.length - 20);\n      } else {\n        time_array_1_L = [...this.state.dist_time_array_L];\n        count_array_1_L = [...this.state.dist_array_L];\n      }\n\n      if (this.state.dist_array_R.length > 100) {\n        time_array_1_R = this.state.dist_time_array_R.slice(10, this.state.dist_time_array_R.length - 20);\n        count_array_1_R = this.state.dist_array_R.slice(10, this.state.dist_array_R.length - 20);\n      } else {\n        time_array_1_R = [...this.state.dist_time_array_R];\n        count_array_1_R = [...this.state.dist_array_R];\n      }\n\n      if (this.state.rotate_array_L.length > 100) {\n        time_array_2_L = this.state.rotate_time_array_L.slice(10, this.state.rotate_time_array_L.length - 20);\n        count_array_2_L = this.state.rotate_array_L.slice(10, this.state.rotate_array_L.length - 20);\n      } else {\n        time_array_2_L = [...this.state.rotate_time_array_L];\n        count_array_2_L = [...this.state.rotate_array_L];\n      }\n\n      if (this.state.rotate_array_R.length > 100) {\n        time_array_2_R = this.state.rotate_time_array_R.slice(10, this.state.rotate_time_array_R.length - 20);\n        count_array_2_R = this.state.rotate_array_R.slice(10, this.state.rotate_array_R.length - 20);\n      } else {\n        time_array_2_R = [...this.state.rotate_time_array_R];\n        count_array_2_R = [...this.state.rotate_array_R];\n      }\n\n      if (this.state.fist_array_L.length > 100) {\n        time_array_3_L = this.state.fist_time_array_L.slice(10, this.state.fist_time_array_L.length - 20);\n        count_array_3_L = this.state.fist_array_L.slice(10, this.state.fist_array_L.length - 20);\n      } else {\n        time_array_3_L = [...this.state.fist_time_array_L];\n        count_array_3_L = [...this.state.fist_array_L];\n      }\n\n      if (this.state.fist_array_R.length > 100) {\n        time_array_3_R = this.state.fist_time_array_R.slice(10, this.state.fist_time_array_R.length - 20);\n        count_array_3_R = this.state.fist_array_R.slice(10, this.state.fist_array_R.length - 20);\n      } else {\n        time_array_3_R = [...this.state.fist_time_array_R];\n        count_array_3_R = [...this.state.fist_array_R];\n      }\n\n      if (this.state.still_array_L.length > 100) {\n        time_array_4_L = this.state.still_time_array_L.slice(10, this.state.still_time_array_L.length - 20);\n        count_array_4_L = this.state.still_array_L.slice(10, this.state.still_array_L.length - 20);\n      } else {\n        time_array_4_L = [...this.state.still_time_array_L];\n        count_array_4_L = [...this.state.still_array_L];\n      }\n\n      if (this.state.still_array_R.length > 100) {\n        time_array_4_R = this.state.still_time_array_R.slice(10, this.state.still_time_array_R.length - 20);\n        count_array_4_R = this.state.still_array_R.slice(10, this.state.still_array_R.length - 20);\n      } else {\n        time_array_4_R = [...this.state.still_time_array_R];\n        count_array_4_R = [...this.state.still_array_R];\n      } // Change to Real Life Measurement\n\n\n      if (real_dist_v > 0.0001 && real_dist_h > 0.0001) {\n        label_1_L = \"Distance between Index and Thumb (cm)\";\n        label_1_R = \"Distance between Index and Thumb (cm)\";\n        label_2_L = \"Relative Location between Left and Right of Hand (cm)\";\n        label_2_R = \"Relative Location between Left and Right of Hand (cm)\";\n        label_3_L = \"Relative Location between Tip of Fingers and Finger Joints (cm)\";\n        label_3_R = \"Relative Location between Tip of Fingers and Finger Joints (cm)\";\n        label_4_L = \"Relative Location Moved (cm)\";\n        label_4_R = \"Relative Location Moved (cm)\";\n        let i = 0;\n        let tmp = 0;\n\n        for (i = 0; i < count_array_1_L.length; i++) {\n          tmp = count_array_1_L[i];\n          count_array_1_L[i] = tmp * real_dist_h;\n        }\n\n        for (i = 0; i < count_array_1_R.length; i++) {\n          tmp = count_array_1_R[i];\n          count_array_1_R[i] = tmp * real_dist_h;\n        }\n\n        for (i = 0; i < count_array_2_L.length; i++) {\n          tmp = count_array_2_L[i];\n          count_array_2_L[i] = tmp * real_dist_v;\n        }\n\n        for (i = 0; i < count_array_2_R.length; i++) {\n          tmp = count_array_2_R[i];\n          count_array_2_R[i] = tmp * real_dist_v;\n        }\n\n        for (i = 0; i < count_array_3_L.length; i++) {\n          tmp = count_array_3_L[i];\n          count_array_3_L[i] = tmp * real_dist_h;\n        }\n\n        for (i = 0; i < count_array_3_R.length; i++) {\n          tmp = count_array_3_R[i];\n          count_array_3_R[i] = tmp * real_dist_h;\n        }\n\n        for (i = 0; i < count_array_4_L.length; i++) {\n          tmp = count_array_4_L[i];\n          count_array_4_L[i] = tmp * real_dist_h;\n        }\n\n        for (i = 0; i < count_array_4_R.length; i++) {\n          tmp = count_array_4_R[i];\n          count_array_4_R[i] = tmp * real_dist_h;\n        }\n      } else {\n        label_1_L = \"Distance between Index and Thumb (cm)\";\n        label_1_R = \"Distance between Index and Thumb (cm)\";\n        label_2_L = \"Relative Location between Left and Right of Hand (cm)\";\n        label_2_R = \"Relative Location between Left and Right of Hand (cm)\";\n        label_3_L = \"Relative Location between Tip of Fingers and Finger Joints (cm)\";\n        label_3_R = \"Relative Location between Tip of Fingers and Finger Joints (cm)\";\n        label_4_L = \"Relative Location Moved (cm)\";\n        label_4_R = \"Relative Location Moved (cm)\";\n      }\n    }\n    /*\r\n    else{\r\n      \r\n      // Recalculate Tapping Data\r\n      console.log(\"Use Avg\");\r\n      let d_array = [];\r\n      let frames = (1000/this.capture_interval);\r\n      for (let i = 1; i < this.state.dist_array.length; i++) d_array = [...d_array, Math.abs(this.state.dist_array[i-1] - this.state.dist_array[i])];\r\n      for (let i = 0; i < d_array.length - frames; i++){\r\n        let total = 0.0;\r\n        for (let j = 0; j < frames; j++) total += d_array[i+j];\r\n        count_array_1 = [...count_array_1, total / frames];\r\n        time_array_1 = [...time_array_1, this.state.dist_time_array[i]];\r\n      }\r\n        d_array = [];\r\n      for (let i = 1; i < this.state.rotate_array.length; i++) d_array = [...d_array, Math.abs(this.state.rotate_array[i-1] - this.state.rotate_array[i])];\r\n      for (let i = 0; i < d_array.length - frames; i++){\r\n        let total = 0.0;\r\n        for (let j = 0; j < frames; j++) total += d_array[i+j];\r\n        count_array_2 = [...count_array_2, total / frames];\r\n        time_array_2 = [...time_array_2, this.state.rotate_time_array[i]];\r\n      }\r\n        d_array = [];\r\n      for (let i = 1; i < this.state.fist_array.length; i++) d_array = [...d_array, Math.abs(this.state.fist_array[i-1] - this.state.fist_array[i])];\r\n      for (let i = 0; i < d_array.length - frames; i++){\r\n        let total = 0.0;\r\n        for (let j = 0; j < frames; j++) total += d_array[i+j];\r\n        count_array_3 = [...count_array_3, total / frames];\r\n        time_array_3 = [...time_array_3, this.state.fist_time_array[i]];\r\n      }\r\n        d_array = [];\r\n      for (let i = 1; i < this.state.still_array.length; i++) d_array = [...d_array, Math.abs(this.state.still_array[i-1] - this.state.still_array[i])];\r\n      for (let i = 0; i < d_array.length - frames; i++){\r\n        let total = 0.0;\r\n        for (let j = 0; j < frames; j++) total += d_array[i+j];\r\n        count_array_4 = [...count_array_4, total / frames];\r\n        time_array_4 = [...time_array_4, this.state.still_time_array[i]];\r\n      }\r\n      if (this.state.still_array.length > 100){\r\n        time_array_4 = this.state.still_time_array.slice(20, this.state.still_time_array.length-20);\r\n        count_array_4 = this.state.still_array.slice(20, this.state.still_array.length-20);\r\n      }\r\n      else {\r\n        time_array_4 = [...this.state.still_time_array];\r\n        count_array_4 = [...this.state.still_array];\r\n      }\r\n        // Change to Real Life Measurement\r\n      if (real_dist > 0.0001){\r\n        label_1 = \"Average Distance between Index and Thumb per Second (cm)\";\r\n        label_2 = \"Average Distance between Left and Right of Hand per Second (cm)\";\r\n        label_3 = \"Average Distance Location between Tip of Fingers and Finger Joints per Second (cm)\";\r\n        label_4 = \"Relative Location Moved per Second (cm)\";\r\n        let i = 0;\r\n        let tmp = 0;\r\n        for (i = 0; i < count_array_1.length; i++){\r\n          tmp = count_array_1[i];\r\n          count_array_1[i] = tmp*real_dist;\r\n        }\r\n        for (i = 0; i < count_array_2.length; i++){\r\n          tmp = count_array_2[i];\r\n          count_array_2[i] = tmp*real_dist;\r\n        }\r\n        for (i = 0; i < count_array_3.length; i++){\r\n          tmp = count_array_3[i];\r\n          count_array_3[i] = tmp*real_dist;\r\n        }\r\n        for (i = 0; i < count_array_4.length; i++){\r\n          tmp = count_array_4[i];\r\n          count_array_4[i] = tmp*real_dist;\r\n        }\r\n      }\r\n      else{\r\n        label_1 = \"Average Distance between Index and Thumb per Second (Relative Scale)\";\r\n        label_2 = \"Average Distance between Left and Right of Hand per Second (Relative Scale)\";\r\n        label_3 = \"Average Distance Location between Tip of Fingers and Finger Joints per Second (Relative Scale)\";\r\n        label_4 = \"Relative Location Moved per Second (Relative Scale)\";\r\n      }\r\n      \r\n    }\r\n    */\n    // Setup Graphs\n\n\n    const data1_L = {\n      labels: time_array_1_L,\n      datasets: [{\n        label: label_1_L,\n        fill: false,\n        lineTension: 0.3,\n        backgroundColor: 'rgba(75,192,192,0.4)',\n        borderColor: 'rgba(75,192,192,1)',\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: 'rgba(75,192,192,1)',\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: count_array_1_L\n      }]\n    };\n    const data1_R = {\n      labels: time_array_1_R,\n      datasets: [{\n        label: label_1_R,\n        fill: false,\n        lineTension: 0.3,\n        backgroundColor: 'rgba(75,192,192,0.4)',\n        borderColor: 'rgba(75,192,192,1)',\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: 'rgba(75,192,192,1)',\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: count_array_1_R\n      }]\n    };\n    const data2_L = {\n      labels: time_array_2_L,\n      datasets: [{\n        label: label_2_L,\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: 'rgba(192,75,192,0.4)',\n        borderColor: 'rgba(192,75,192,1)',\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: 'rgba(192,75,192,1)',\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'rgba(192,75,192,1)',\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: count_array_2_L\n      }]\n    };\n    const data2_R = {\n      labels: time_array_2_R,\n      datasets: [{\n        label: label_2_R,\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: 'rgba(192,75,192,0.4)',\n        borderColor: 'rgba(192,75,192,1)',\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: 'rgba(192,75,192,1)',\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'rgba(192,75,192,1)',\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: count_array_2_R\n      }]\n    };\n    const data3_L = {\n      labels: time_array_3_L,\n      datasets: [{\n        label: label_3_L,\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: 'rgba(192,192,75,0.4)',\n        borderColor: 'rgba(192,192,75,1)',\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: 'rgba(192,192,75,1)',\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'rgba(192,192,75,1)',\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: count_array_3_L\n      }]\n    };\n    const data3_R = {\n      labels: time_array_3_R,\n      datasets: [{\n        label: label_3_R,\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: 'rgba(192,192,75,0.4)',\n        borderColor: 'rgba(192,192,75,1)',\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: 'rgba(192,192,75,1)',\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'rgba(192,192,75,1)',\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: count_array_3_R\n      }]\n    };\n    const data4_L = {\n      labels: time_array_4_L,\n      datasets: [{\n        label: label_4_L,\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: 'rgba(75,192,75,0.4)',\n        borderColor: 'rgba(75,192,75,1)',\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: 'rgba(75,192,75,1)',\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'rgba(75,192,75,1)',\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: count_array_4_L\n      }]\n    };\n    const data4_R = {\n      labels: time_array_4_R,\n      datasets: [{\n        label: label_4_R,\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: 'rgba(75,192,75,0.4)',\n        borderColor: 'rgba(75,192,75,1)',\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: 'rgba(75,192,75,1)',\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'rgba(75,192,75,1)',\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: count_array_4_R\n      }]\n    };\n    this.setState({\n      chart_data1_L: data1_L\n    });\n    this.setState({\n      chart_data1_R: data1_R\n    });\n    this.setState({\n      chart_data2_L: data2_L\n    });\n    this.setState({\n      chart_data2_R: data2_R\n    });\n    this.setState({\n      chart_data3_L: data3_L\n    });\n    this.setState({\n      chart_data3_R: data3_R\n    });\n    this.setState({\n      chart_data4_L: data4_L\n    });\n    this.setState({\n      chart_data4_R: data4_R\n    });\n    this.setState({\n      chart_ready: true\n    });\n  }\n\n  switch_button() {\n    if (this.state.button_mode === true) {\n      this.setState({\n        button_mode: false\n      });\n      this.compose_chart();\n    } else {\n      this.setState({\n        button_mode: true\n      });\n    }\n  }\n\n  increment_tap1() {\n    if (this.state.last_pressed !== 1) {\n      let current_moment = (Date.now() - this.state.startAt) / 1000;\n      this.setState({\n        last_pressed: 1\n      });\n      this.setState({\n        dist_array: [...this.state.dist_array, 1.0]\n      });\n      this.setState({\n        dist_time_array: [...this.state.dist_time_array, current_moment]\n      });\n      this.setState({\n        tap_count: [...this.state.tap_count, current_moment]\n      });\n    }\n  }\n\n  increment_tap2() {\n    if (this.state.last_pressed !== 2) {\n      let current_moment = (Date.now() - this.state.startAt) / 1000;\n      this.setState({\n        last_pressed: 2\n      });\n      this.setState({\n        dist_array: [...this.state.dist_array, 1.0]\n      });\n      this.setState({\n        dist_time_array: [...this.state.dist_time_array, current_moment]\n      });\n      this.setState({\n        tap_count: [...this.state.tap_count, current_moment]\n      });\n    }\n  }\n\n  norm(lm1, lm2) {\n    return sqrt(pow(lm1[0] - lm2[0], 2) + pow(lm1[1] - lm2[1], 2));\n  }\n\n  reset_counter() {\n    clearInterval(this.state.ID);\n    const ctx = this.canvasRef.current.getContext(\"2d\");\n    ctx.clearRect(0, 0, this.canvasRef.current.width, this.canvasRef.current.height);\n    this.setState({\n      ID: 0,\n      tap_count: [],\n      rotate_count: [],\n      fist_count: [],\n      last_hand_L: [],\n      last_hand_R: [],\n      index_passed: 0,\n      min_dist: 0,\n      max_dist: 99.0,\n      rotate_passed: 0,\n      last_pressed: 0,\n      real_time_inferencing: false,\n      recording: false,\n      button_mode: false,\n      chart_ready: false,\n      finger_done: false,\n      rotate_done: false,\n      fist_done: false,\n      hand_dist_array_L: [],\n      hand_dist_array_R: [],\n      hand_rotate_array_L: [],\n      hand_rotate_array_R: [],\n      hand_fist_array_L: [],\n      hand_fist_array_R: [],\n      hand_still_array_L: [],\n      hand_still_array_R: [],\n      dist_array_L: [],\n      dist_time_array_L: [],\n      dist_record_L: [],\n      dist_time_record_L: [],\n      dist_array_R: [],\n      dist_time_array_R: [],\n      dist_record_R: [],\n      dist_time_record_R: [],\n      rotate_array_L: [],\n      rotate_time_array_L: [],\n      rotate_record_L: [],\n      rotate_time_record_L: [],\n      rotate_array_R: [],\n      rotate_time_array_R: [],\n      rotate_record_R: [],\n      rotate_time_record_R: [],\n      fist_array_L: [],\n      fist_time_array_L: [],\n      fist_record_L: [],\n      fist_time_record_L: [],\n      fist_array_R: [],\n      fist_time_array_R: [],\n      fist_record_R: [],\n      fist_time_record_R: [],\n      still_array_L: [],\n      still_time_array_L: [],\n      still_record_L: [],\n      still_time_record_L: [],\n      still_array_R: [],\n      still_time_array_R: [],\n      still_record_R: [],\n      still_time_record_R: [],\n      chart_data1_L: null,\n      chart_data1_R: null,\n      chart_data2_L: null,\n      chart_data2_R: null,\n      chart_data3_L: null,\n      chart_data3_R: null,\n      chart_data4_L: null,\n      chart_data4_R: null,\n      stage: 0,\n      wait: false,\n      wait_till: 0,\n      startAt: Date.now(),\n      dead_frame: 0,\n      raw: true,\n      facingMode: \"user\",\n      avg_fps: 0\n    });\n  }\n\n  async runHandpose() {\n    const ctx = this.canvasRef.current.getContext(\"2d\");\n    writeText(ctx, {\n      text: 'Loading',\n      x: 180,\n      y: 70\n    });\n\n    require('@tensorflow/tfjs-backend-webgl');\n\n    const net = await handpose.load();\n    ctx.clearRect(0, 0, this.canvasRef.current.width, this.canvasRef.current.height); //const uploadJSONInput = document.getElementById('upload-json');\n    //const uploadWeightsInput = document.getElementById('upload-weights');\n    //const model = await tf.loadLayersModel(tf.io.browserFiles([uploadJSONInput.files[0], uploadWeightsInput.files[0]]));\n\n    console.log(\"Handpose model loaded.\");\n    this.setState({\n      startAt: Date.now()\n    });\n    const Interval_ID = setInterval(() => {\n      this.real_time_inference(net);\n    }, this.capture_interval);\n    this.setState({\n      ID: Interval_ID,\n      real_time_inferencing: true,\n      wait: true,\n      stage: this.state.stage + 1\n    });\n  }\n\n  async real_time_inference(net) {\n    if (this.state.wait) {\n      this.setState({\n        wait_till: Date.now() + 3000\n      });\n      this.setState({\n        wait: false\n      });\n    }\n\n    if (typeof this.webcamRef.current !== \"undefined\" && this.webcamRef.current !== null && this.webcamRef.current.video.readyState === 4) {\n      const video = this.webcamRef.current.video;\n      const videoWidth = this.webcamRef.current.video.videoWidth;\n      const videoHeight = this.webcamRef.current.video.videoHeight;\n      this.webcamRef.current.video.width = videoWidth;\n      this.webcamRef.current.video.height = videoHeight;\n      this.canvasRef.current.width = videoWidth;\n      this.canvasRef.current.height = videoHeight;\n      const hand = await net.estimateHands(video);\n      const ctx = this.canvasRef.current.getContext(\"2d\"); //check if waiting\n\n      if (Date.now() < this.state.wait_till) {\n        if (hand.length > 0) drawHand_tap(hand, ctx); //count down 3, 2, 1\n\n        if (this.state.wait_till - Date.now() < 1000) writeText(ctx, {\n          text: '1',\n          x: 180,\n          y: 70\n        });else if (this.state.wait_till - Date.now() < 2000) writeText(ctx, {\n          text: '2',\n          x: 140,\n          y: 70\n        });else if (this.state.wait_till - Date.now() < 3000) writeText(ctx, {\n          text: '3',\n          x: 100,\n          y: 70\n        });\n      } else {\n        switch (this.state.stage) {\n          case 1:\n            this.setState({\n              hand_dist_array_L: [...this.state.hand_dist_array_L, hand]\n            });\n            break;\n\n          case 2:\n            this.setState({\n              hand_dist_array_R: [...this.state.hand_dist_array_R, hand]\n            });\n            break;\n\n          case 3:\n            this.setState({\n              hand_rotate_array_L: [...this.state.hand_rotate_array_L, hand]\n            });\n            break;\n\n          case 4:\n            this.setState({\n              hand_rotate_array_R: [...this.state.hand_rotate_array_R, hand]\n            });\n            break;\n\n          case 5:\n            this.setState({\n              hand_fist_array_L: [...this.state.hand_fist_array_L, hand]\n            });\n            break;\n\n          case 6:\n            this.setState({\n              hand_fist_array_R: [...this.state.hand_fist_array_R, hand]\n            });\n            break;\n\n          case 7:\n            this.setState({\n              hand_still_array_L: [...this.state.hand_still_array_L, hand]\n            });\n            break;\n\n          case 8:\n            this.setState({\n              hand_still_array_R: [...this.state.hand_still_array_R, hand]\n            });\n            break;\n\n          default:\n            break;\n        }\n\n        if (hand.length > 0) {\n          hand.forEach(prediction => {\n            this.setState({\n              dead_frame: 0\n            });\n            const landmarks = prediction.landmarks;\n            let pawn_dist = this.norm(landmarks[0], landmarks[2]);\n            let y_dist = this.norm(landmarks[0], landmarks[12]);\n            let current_moment = (Date.now() - this.state.startAt) / 1000;\n            let index_dist = null;\n            let current_dist = null;\n            let rotate_dist = null;\n            let fist_dist = null;\n            let total_move = null;\n            let pinky_rest = null;\n            let ring_rest = null;\n            let middle_rest = null;\n            let index_rest = null;\n            let thumb_rest = null;\n\n            switch (this.state.stage) {\n              case 1:\n                drawHand_tap(hand, ctx);\n                index_dist = this.norm(landmarks[4], landmarks[8]);\n                current_dist = index_dist / pawn_dist;\n                this.setState({\n                  dist_array_L: [...this.state.dist_array_L, current_dist],\n                  dist_time_array_L: [...this.state.dist_time_array_L, current_moment]\n                });\n\n                if (this.state.index_passed === 0 && current_dist - this.state.min_dist > 0.2) {\n                  this.setState({\n                    index_passed: 1,\n                    max_dist: current_dist\n                  });\n                }\n\n                if (this.state.index_passed === 1 && current_dist > this.state.max_dist) {\n                  this.setState({\n                    max_dist: current_dist\n                  });\n                }\n\n                if (this.state.index_passed === 1 && this.state.max_dist - current_dist > 0.2) {\n                  this.setState({\n                    index_passed: 0,\n                    min_dist: current_dist,\n                    tap_count: [...this.state.tap_count, current_moment]\n                  });\n                }\n\n                if (this.state.index_passed === 0 && current_dist < this.state.min_dist) {\n                  this.setState({\n                    min_dist: current_dist\n                  });\n                }\n\n                break;\n\n              case 2:\n                drawHand_tap(hand, ctx);\n                index_dist = this.norm(landmarks[4], landmarks[8]);\n                current_dist = index_dist / pawn_dist;\n                this.setState({\n                  dist_array_R: [...this.state.dist_array_R, current_dist],\n                  dist_time_array_R: [...this.state.dist_time_array_R, current_moment]\n                });\n\n                if (this.state.index_passed === 0 && current_dist - this.state.min_dist > 0.2) {\n                  this.setState({\n                    index_passed: 1,\n                    max_dist: current_dist\n                  });\n                }\n\n                if (this.state.index_passed === 1 && current_dist > this.state.max_dist) {\n                  this.setState({\n                    max_dist: current_dist\n                  });\n                }\n\n                if (this.state.index_passed === 1 && this.state.max_dist - current_dist > 0.2) {\n                  this.setState({\n                    index_passed: 0,\n                    min_dist: current_dist,\n                    tap_count: [...this.state.tap_count, current_moment]\n                  });\n                }\n\n                if (this.state.index_passed === 0 && current_dist < this.state.min_dist) {\n                  this.setState({\n                    min_dist: current_dist\n                  });\n                }\n\n                break;\n\n              case 3:\n                drawHand_rotate(hand, ctx, this.state.rotate_passed);\n                rotate_dist = (landmarks[2][0] - landmarks[17][0]) / y_dist;\n                this.setState({\n                  rotate_array_L: [...this.state.rotate_array_L, rotate_dist],\n                  rotate_time_array_L: [...this.state.rotate_time_array_L, current_moment]\n                });\n\n                if (this.state.rotate_passed === 0) {\n                  if (rotate_dist >= 0.2) this.setState({\n                    rotate_passed: 1\n                  });\n                  if (rotate_dist <= -0.2) this.setState({\n                    rotate_passed: -1\n                  });\n                }\n\n                if (this.state.rotate_passed === 1 && rotate_dist <= -0.2) {\n                  this.setState({\n                    rotate_passed: -1\n                  });\n                }\n\n                if (this.state.rotate_passed === -1 && rotate_dist >= 0.2) {\n                  this.setState({\n                    rotate_passed: 1,\n                    rotate_count: [...this.state.rotate_count, current_moment]\n                  });\n                }\n\n                break;\n\n              case 4:\n                drawHand_rotate(hand, ctx, this.state.rotate_passed);\n                rotate_dist = (landmarks[2][0] - landmarks[17][0]) / y_dist;\n                this.setState({\n                  rotate_array_R: [...this.state.rotate_array_R, rotate_dist],\n                  rotate_time_array_R: [...this.state.rotate_time_array_R, current_moment]\n                });\n\n                if (this.state.rotate_passed === 0) {\n                  if (rotate_dist >= 0.2) this.setState({\n                    rotate_passed: 1\n                  });\n                  if (rotate_dist <= -0.2) this.setState({\n                    rotate_passed: -1\n                  });\n                }\n\n                if (this.state.rotate_passed === 1 && rotate_dist <= -0.2) {\n                  this.setState({\n                    rotate_passed: -1\n                  });\n                }\n\n                if (this.state.rotate_passed === -1 && rotate_dist >= 0.2) {\n                  this.setState({\n                    rotate_passed: 1,\n                    rotate_count: [...this.state.rotate_count, current_moment]\n                  });\n                }\n\n                break;\n\n              case 5:\n                drawHand_fist(hand, ctx, this.state.fist_passed);\n                fist_dist = (landmarks[8][1] - landmarks[5][1] + (landmarks[12][1] - landmarks[9][1]) + (landmarks[16][1] - landmarks[13][1]) + (landmarks[20][1] - landmarks[17][1])) / (4 * pawn_dist);\n                this.setState({\n                  fist_array_L: [...this.state.fist_array_L, fist_dist],\n                  fist_time_array_L: [...this.state.fist_time_array_L, current_moment]\n                });\n\n                if (fist_dist >= 0.0) {\n                  this.setState({\n                    fist_passed: 1\n                  });\n                }\n\n                if (fist_dist < -0.4 && this.state.fist_passed === 1) {\n                  this.setState({\n                    fist_passed: 0,\n                    fist_count: [...this.state.fist_count, current_moment]\n                  });\n                }\n\n                break;\n\n              case 6:\n                drawHand_fist(hand, ctx, this.state.fist_passed);\n                fist_dist = (landmarks[8][1] - landmarks[5][1] + (landmarks[12][1] - landmarks[9][1]) + (landmarks[16][1] - landmarks[13][1]) + (landmarks[20][1] - landmarks[17][1])) / (4 * pawn_dist);\n                this.setState({\n                  fist_array_R: [...this.state.fist_array_R, fist_dist],\n                  fist_time_array_R: [...this.state.fist_time_array_R, current_moment]\n                });\n\n                if (fist_dist >= 0.0) {\n                  this.setState({\n                    fist_passed: 1\n                  });\n                }\n\n                if (fist_dist < -0.4 && this.state.fist_passed === 1) {\n                  this.setState({\n                    fist_passed: 0,\n                    fist_count: [...this.state.fist_count, current_moment]\n                  });\n                }\n\n                break;\n\n              case 7:\n                total_move = 0.0;\n\n                if (this.state.last_hand_L.length > 0) {\n                  let moved = [];\n                  pinky_rest = Math.abs(this.norm(landmarks[0], landmarks[4]) - this.norm(this.state.last_hand_L[0], this.state.last_hand_L[4])) / pawn_dist;\n                  ring_rest = Math.abs(this.norm(landmarks[0], landmarks[8]) - this.norm(this.state.last_hand_L[0], this.state.last_hand_L[8])) / pawn_dist;\n                  middle_rest = Math.abs(this.norm(landmarks[0], landmarks[12]) - this.norm(this.state.last_hand_L[0], this.state.last_hand_L[12])) / pawn_dist;\n                  index_rest = Math.abs(this.norm(landmarks[0], landmarks[16]) - this.norm(this.state.last_hand_L[0], this.state.last_hand_L[16])) / pawn_dist;\n                  thumb_rest = Math.abs(this.norm(landmarks[0], landmarks[20]) - this.norm(this.state.last_hand_L[0], this.state.last_hand_L[20])) / pawn_dist;\n                  if (pinky_rest > 0.05) moved = [...moved, 4];\n                  if (ring_rest > 0.05) moved = [...moved, 8];\n                  if (middle_rest > 0.05) moved = [...moved, 12];\n                  if (index_rest > 0.05) moved = [...moved, 16];\n                  if (thumb_rest > 0.05) moved = [...moved, 20];\n                  total_move += pinky_rest + ring_rest + middle_rest + index_rest + thumb_rest;\n                  drawHand_still(hand, ctx, moved);\n                } else {\n                  this.setState({\n                    last_hand_L: landmarks\n                  });\n                }\n\n                this.setState({\n                  still_array_L: [...this.state.still_array_L, total_move],\n                  still_time_array_L: [...this.state.still_time_array_L, current_moment]\n                });\n                break;\n\n              case 8:\n                total_move = 0.0;\n\n                if (this.state.last_hand_R.length > 0) {\n                  let moved = [];\n                  pinky_rest = Math.abs(this.norm(landmarks[0], landmarks[4]) - this.norm(this.state.last_hand_R[0], this.state.last_hand_R[4])) / pawn_dist;\n                  ring_rest = Math.abs(this.norm(landmarks[0], landmarks[8]) - this.norm(this.state.last_hand_R[0], this.state.last_hand_R[8])) / pawn_dist;\n                  middle_rest = Math.abs(this.norm(landmarks[0], landmarks[12]) - this.norm(this.state.last_hand_R[0], this.state.last_hand_R[12])) / pawn_dist;\n                  index_rest = Math.abs(this.norm(landmarks[0], landmarks[16]) - this.norm(this.state.last_hand_R[0], this.state.last_hand_R[16])) / pawn_dist;\n                  thumb_rest = Math.abs(this.norm(landmarks[0], landmarks[20]) - this.norm(this.state.last_hand_R[0], this.state.last_hand_R[20])) / pawn_dist;\n                  if (pinky_rest > 0.05) moved = [...moved, 4];\n                  if (ring_rest > 0.05) moved = [...moved, 8];\n                  if (middle_rest > 0.05) moved = [...moved, 12];\n                  if (index_rest > 0.05) moved = [...moved, 16];\n                  if (thumb_rest > 0.05) moved = [...moved, 20];\n                  total_move += pinky_rest + ring_rest + middle_rest + index_rest + thumb_rest;\n                  drawHand_still(hand, ctx, moved);\n                } else {\n                  this.setState({\n                    last_hand_R: landmarks\n                  });\n                }\n\n                this.setState({\n                  still_array_R: [...this.state.still_array_R, total_move],\n                  still_time_array_R: [...this.state.still_time_array_R, current_moment]\n                });\n                break;\n\n              default:\n                console.log(\"Should Not Print\");\n                break;\n            }\n          });\n        } else {\n          // Warning message for hand off screen\n          if (this.state.dead_frame > 9) writeText(ctx, {\n            text: 'Hand Off Screen',\n            x: 180,\n            y: 70\n          });\n          this.setState({\n            dead_frame: this.state.dead_frame + 1\n          });\n        }\n      }\n    }\n  }\n\n  async next_step() {\n    if (this.state.stage !== 8) this.setState({\n      stage: this.state.stage + 1,\n      wait: true\n    });else {\n      clearInterval(this.state.ID);\n      this.setState({\n        real_time_inferencing: false,\n        recording: false,\n        stage: 0\n      });\n      this.compose_chart();\n      const ctx = this.canvasRef.current.getContext(\"2d\");\n      ctx.clearRect(0, 0, this.canvasRef.current.width, this.canvasRef.current.height);\n    }\n  }\n\n  async stop_tapping() {\n    this.setState({\n      finger_done: true\n    });\n    this.setState({\n      wait: true\n    });\n  }\n\n  async stop_rotating() {\n    this.setState({\n      rotate_done: true\n    });\n    this.setState({\n      wait: true\n    });\n  }\n\n  async stop_gripping() {\n    this.setState({\n      fist_done: true\n    });\n    this.setState({\n      wait: true\n    });\n  }\n\n  stop_real_time_inference() {\n    clearInterval(this.state.ID);\n    this.setState({\n      real_time_inferencing: false,\n      finger_done: false,\n      rotate_done: false,\n      fist_done: false\n    });\n    this.compose_chart();\n    const ctx = this.canvasRef.current.getContext(\"2d\");\n    ctx.clearRect(0, 0, this.canvasRef.current.width, this.canvasRef.current.height);\n  }\n\n  async record_video() {\n    this.setState({\n      startAt: Date.now()\n    });\n    console.log(\"Handpose model loaded.\");\n    const Interval_ID = setInterval(() => {\n      this.concat_frame();\n    }, this.capture_interval);\n    this.setState({\n      ID: Interval_ID,\n      recording: true,\n      wait: true,\n      stage: this.state.stage + 1\n    });\n  }\n\n  async concat_frame() {\n    if (this.state.wait) {\n      this.setState({\n        wait_till: Date.now() + 3000,\n        wait: false\n      });\n    }\n\n    if (typeof this.webcamRef.current !== \"undefined\" && this.webcamRef.current !== null && this.webcamRef.current.video.readyState === 4) {\n      if (Date.now() < this.state.wait_till) {\n        //console.log(\"Waiting till \", this.state.wait_till);\n        //count down 3, 2, 1\n        const ctx = this.canvasRef.current.getContext(\"2d\");\n        if (this.state.wait_till - Date.now() < 250) ctx.clearRect(0, 0, this.canvasRef.current.width, this.canvasRef.current.height);else if (this.state.wait_till - Date.now() < 1000) writeText(ctx, {\n          text: '1',\n          x: 180,\n          y: 70\n        });else if (this.state.wait_till - Date.now() < 2000) writeText(ctx, {\n          text: '2',\n          x: 140,\n          y: 70\n        });else if (this.state.wait_till - Date.now() < 3000) writeText(ctx, {\n          text: '3',\n          x: 100,\n          y: 70\n        });\n      } else {\n        let current_moment = (Date.now() - this.state.startAt) / 1000;\n        const image = this.webcamRef.current.getScreenshot();\n        var img = document.createElement(\"img\");\n        img.src = image;\n\n        img.onload = function () {\n          if (this.state.finger_done === false) {\n            this.setState({\n              dist_record: [...this.state.dist_record, img],\n              dist_time_record: [...this.state.dist_time_record, current_moment]\n            });\n          } else if (this.state.finger_done === true && this.state.rotate_done === false) {\n            this.setState({\n              rotate_record: [...this.state.rotate_record, img],\n              rotate_time_record: [...this.state.rotate_time_record, current_moment]\n            });\n          } else if (this.state.rotate_done === true && this.state.fist_done === false) {\n            this.setState({\n              fist_record: [...this.state.fist_record, img],\n              fist_time_record: [...this.state.fist_time_record, current_moment]\n            });\n          }\n\n          if (this.state.fist_done === true) {\n            this.setState({\n              still_record: [...this.state.still_record, img],\n              still_time_record: [...this.state.still_time_record, current_moment]\n            });\n          }\n        }.bind(this);\n      }\n    }\n  }\n\n  async inference() {\n    require('@tensorflow/tfjs-backend-webgl');\n\n    const net = await handpose.load();\n    console.log(\"Handpose model loaded.\"); // Run prediction on recorded tapping data\n\n    for (let i = 0; i < this.state.dist_record.length; i++) {\n      const hand = await net.estimateHands(this.state.dist_record[i]);\n\n      if (hand.length > 0) {\n        hand.forEach(prediction => {\n          // Calculate relative distance\n          const landmarks = prediction.landmarks;\n          let index_dist = this.norm(landmarks[4], landmarks[8]);\n          let pawn_dist = this.norm(landmarks[0], landmarks[2]);\n          let current_dist = index_dist / pawn_dist; // Record distance\n\n          this.setState({\n            dist_array: [...this.state.dist_array, current_dist],\n            dist_time_array: [...this.state.dist_time_array, this.state.dist_time_record[i]],\n            hand_dist_array: [...this.state.hand_dist_array, hand]\n          }); // Perform counting\n\n          if (this.state.index_passed === 0 && current_dist - this.state.min_dist > 0.05) {\n            this.setState({\n              index_passed: 1,\n              max_dist: current_dist\n            });\n          }\n\n          if (this.state.index_passed === 1 && current_dist > this.state.max_dist) {\n            this.setState({\n              max_dist: current_dist\n            });\n          }\n\n          if (this.state.index_passed === 1 && this.state.max_dist - current_dist > 0.05) {\n            this.setState({\n              index_passed: 0,\n              min_dist: current_dist,\n              tap_count: [...this.state.tap_count, this.state.dist_time_record[i]]\n            });\n          }\n\n          if (this.state.index_passed === 0 && current_dist < this.state.min_dist) {\n            this.setState({\n              min_dist: current_dist\n            });\n          } //console.log(\"INDEX COUNT:\", this.state.tap_count);\n\n        });\n      }\n    } // Run prediction on recorded rotation data\n\n\n    for (let i = 0; i < this.state.rotate_record.length; i++) {\n      const hand = await net.estimateHands(this.state.rotate_record[i]);\n\n      if (hand.length > 0) {\n        hand.forEach(prediction => {\n          const landmarks = prediction.landmarks;\n          let pawn_dist = this.norm(landmarks[0], landmarks[12]);\n          let rotate_dist = (landmarks[2][0] - landmarks[17][0]) / pawn_dist; //this.setState({pawn_rotate_array:[...this.state.pawn_rotate_array, pawn_dist]});\n\n          this.setState({\n            rotate_array: [...this.state.rotate_array, rotate_dist],\n            rotate_time_array: [...this.state.rotate_time_array, this.state.rotate_time_record[i]],\n            hand_rotate_array: [...this.state.hand_rotate_array, hand]\n          });\n\n          if (this.state.rotate_passed === 0) {\n            if (rotate_dist >= 0.2) this.setState({\n              rotate_passed: 1\n            });\n            if (rotate_dist <= -0.2) this.setState({\n              rotate_passed: -1\n            });\n          }\n\n          if (this.state.rotate_passed === 1 && rotate_dist <= -0.2) {\n            this.setState({\n              rotate_passed: -1\n            });\n          }\n\n          if (this.state.rotate_passed === -1 && rotate_dist >= 0.2) {\n            this.setState({\n              rotate_passed: 1,\n              rotate_count: [...this.state.rotate_count, this.state.rotate_time_record[i]]\n            });\n          } //console.log(\"ROTATE COUNT:\", this.state.rotate_count);\n\n        });\n      }\n    } // Run prediction on recorded gripping data\n\n\n    for (let i = 0; i < this.state.fist_record.length; i++) {\n      const hand = await net.estimateHands(this.state.fist_record[i]);\n\n      if (hand.length > 0) {\n        hand.forEach(prediction => {\n          const landmarks = prediction.landmarks;\n          let pawn_dist = this.norm(landmarks[0], landmarks[2]);\n          let fist_dist = (landmarks[8][1] - landmarks[5][1] + (landmarks[12][1] - landmarks[9][1]) + (landmarks[16][1] - landmarks[13][1]) + (landmarks[20][1] - landmarks[17][1])) / (4 * pawn_dist); //this.setState({pawn_fist_array:[...this.state.pawn_fist_array, pawn_dist]});\n\n          this.setState({\n            fist_array: [...this.state.fist_array, fist_dist],\n            fist_time_array: [...this.state.fist_time_array, this.state.fist_time_record[i]],\n            hand_fist_array: [...this.state.hand_fist_array, hand]\n          });\n\n          if (fist_dist >= 0.0) {\n            this.setState({\n              fist_passed: 1\n            });\n          }\n\n          if (fist_dist < -0.4 && this.state.fist_passed === 1) {\n            this.setState({\n              fist_passed: 0\n            });\n            this.setState({\n              fist_count: [...this.state.fist_count, this.state.fist_time_record[i]]\n            });\n          } //console.log(\"FIST COUNT:\", this.state.fist_count);\n\n        });\n      }\n    } // Run prediction on recorded postural data\n\n\n    for (let i = 0; i < this.state.still_record.length; i++) {\n      const hand = await net.estimateHands(this.state.still_record[i]);\n\n      if (hand.length > 0) {\n        hand.forEach(prediction => {\n          const landmarks = prediction.landmarks;\n          let pawn_dist = this.norm(landmarks[0], landmarks[2]);\n          let total_move;\n          let i;\n          let moved = [];\n\n          if (this.state.last_hand.length > 0) {\n            total_move = 0.0;\n\n            for (i = 0; i < 21; i++) {\n              let move_dist = this.norm(landmarks[i], this.state.last_hand[i]) / pawn_dist;\n              total_move += move_dist;\n\n              if (move_dist > 0.1) {\n                moved = [...moved, i];\n              }\n            }\n          } //console.log(\"TOTAL MOVED:\", total_move);\n          //this.setState({pawn_fist_array:[...this.state.pawn_fist_array, pawn_dist]});\n\n\n          this.setState({\n            still_array: [...this.state.still_array, total_move],\n            still_time_array: [...this.state.still_time_array, this.state.still_time_record[i]],\n            hand_still_array: [...this.state.hand_still_array, hand],\n            last_hand: landmarks\n          });\n        });\n      }\n    }\n\n    this.setState({\n      record: []\n    });\n  }\n\n  async stop_record() {\n    clearInterval(this.state.ID);\n    await this.inference();\n    this.setState({\n      recording: false,\n      finger_done: false,\n      rotate_done: false,\n      fist_done: false\n    });\n    this.compose_chart();\n  }\n\n  render() {\n    const videoConstraints = {\n      facingMode: this.state.facingMode\n    };\n    let button_1 = null;\n    let button_2 = null;\n\n    switch (this.state.stage) {\n      case 1:\n        button_1 = /*#__PURE__*/_jsxDEV(Button, {\n          disabled: this.state.recording,\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: this.next_step,\n          children: \"Finish Finger Tapping Left (Real Time)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1372,\n          columnNumber: 20\n        }, this);\n        button_2 = /*#__PURE__*/_jsxDEV(Button, {\n          disabled: this.state.real_time_inferencing,\n          variant: \"contained\",\n          color: \"secondary\",\n          onClick: this.next_step,\n          children: \"Finish Finger Tapping Left (Record)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1373,\n          columnNumber: 20\n        }, this);\n        break;\n\n      case 2:\n        button_1 = /*#__PURE__*/_jsxDEV(Button, {\n          disabled: this.state.recording,\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: this.next_step,\n          children: \"Finish Finger Tapping Right (Real Time)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1376,\n          columnNumber: 20\n        }, this);\n        button_2 = /*#__PURE__*/_jsxDEV(Button, {\n          disabled: this.state.real_time_inferencing,\n          variant: \"contained\",\n          color: \"secondary\",\n          onClick: this.next_step,\n          children: \"Finish Finger Tapping Right (Record)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1377,\n          columnNumber: 20\n        }, this);\n        break;\n\n      case 3:\n        button_1 = /*#__PURE__*/_jsxDEV(Button, {\n          disabled: this.state.recording,\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: this.next_step,\n          children: \"Finish Rotation Left (Real Time)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1380,\n          columnNumber: 20\n        }, this);\n        button_2 = /*#__PURE__*/_jsxDEV(Button, {\n          disabled: this.state.real_time_inferencing,\n          variant: \"contained\",\n          color: \"secondary\",\n          onClick: this.next_step,\n          children: \"Finish Rotation Left (Record)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1381,\n          columnNumber: 20\n        }, this);\n        break;\n\n      case 4:\n        button_1 = /*#__PURE__*/_jsxDEV(Button, {\n          disabled: this.state.recording,\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: this.next_step,\n          children: \"Finish Rotation Right (Real Time)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1384,\n          columnNumber: 20\n        }, this);\n        button_2 = /*#__PURE__*/_jsxDEV(Button, {\n          disabled: this.state.real_time_inferencing,\n          variant: \"contained\",\n          color: \"secondary\",\n          onClick: this.next_step,\n          children: \"Finish Rotation Right (Record)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1385,\n          columnNumber: 20\n        }, this);\n        break;\n\n      case 5:\n        button_1 = /*#__PURE__*/_jsxDEV(Button, {\n          disabled: this.state.recording,\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: this.next_step,\n          children: \"Finish Gripping Left (Real Time)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1388,\n          columnNumber: 20\n        }, this);\n        button_2 = /*#__PURE__*/_jsxDEV(Button, {\n          disabled: this.state.real_time_inferencing,\n          variant: \"contained\",\n          color: \"secondary\",\n          onClick: this.next_step,\n          children: \"Finish Gripping Left (Record)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1389,\n          columnNumber: 20\n        }, this);\n        break;\n\n      case 6:\n        button_1 = /*#__PURE__*/_jsxDEV(Button, {\n          disabled: this.state.recording,\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: this.next_step,\n          children: \"Finish Gripping Right (Real Time)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1392,\n          columnNumber: 20\n        }, this);\n        button_2 = /*#__PURE__*/_jsxDEV(Button, {\n          disabled: this.state.real_time_inferencing,\n          variant: \"contained\",\n          color: \"secondary\",\n          onClick: this.next_step,\n          children: \"Finish Gripping Right (Record)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1393,\n          columnNumber: 20\n        }, this);\n        break;\n\n      case 7:\n        button_1 = /*#__PURE__*/_jsxDEV(Button, {\n          disabled: this.state.recording,\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: this.next_step,\n          children: \"Finish Resting Left (Real Time)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1396,\n          columnNumber: 20\n        }, this);\n        button_2 = /*#__PURE__*/_jsxDEV(Button, {\n          disabled: this.state.real_time_inferencing,\n          variant: \"contained\",\n          color: \"secondary\",\n          onClick: this.next_step,\n          children: \"Finish Resting Left (Record)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1397,\n          columnNumber: 20\n        }, this);\n        break;\n\n      case 8:\n        button_1 = /*#__PURE__*/_jsxDEV(Button, {\n          disabled: this.state.recording,\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: this.next_step,\n          children: \"Finish Resting Right (Real Time)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1400,\n          columnNumber: 20\n        }, this);\n        button_2 = /*#__PURE__*/_jsxDEV(Button, {\n          disabled: this.state.real_time_inferencing,\n          variant: \"contained\",\n          color: \"secondary\",\n          onClick: this.next_step,\n          children: \"Finish Resting Right (Record)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1401,\n          columnNumber: 20\n        }, this);\n        break;\n\n      default:\n        button_1 = /*#__PURE__*/_jsxDEV(Button, {\n          disabled: this.state.recording,\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: this.runHandpose,\n          children: \"Start Test (Real Time)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1404,\n          columnNumber: 20\n        }, this);\n        button_2 = /*#__PURE__*/_jsxDEV(Button, {\n          disabled: this.state.real_time_inferencing,\n          variant: \"contained\",\n          color: \"secondary\",\n          onClick: this.record_video,\n          children: \"Start Test (Record)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1405,\n          columnNumber: 20\n        }, this);\n        break;\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"App-header\",\n        children: [/*#__PURE__*/_jsxDEV(Webcam, {\n          ref: this.webcamRef,\n          videoConstraints: videoConstraints,\n          style: {\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 9,\n            width: \"auto\",\n            height: \"auto\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1411,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: this.canvasRef,\n          style: {\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 9,\n            width: \"auto\",\n            height: \"auto\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1426,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1410,\n        columnNumber: 9\n      }, this), this.state.button_mode ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.increment_tap1,\n          id: \"button1\",\n          children: \"Index Finger\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1443,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.increment_tap2,\n          id: \"button2\",\n          children: \"Middle Finger\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1444,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1442,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1447,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: button_1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1451,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: button_2\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1452,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            disabled: this.state.recording || this.state.real_time_inferencing,\n            variant: \"outlined\",\n            color: \"secondary\",\n            onClick: this.reset_counter,\n            children: \"Reset All\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1454,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1453,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1450,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h5\", {\n          children: [\"Finger Tapping Count:\", this.state.tap_count.length, \"\\xA0\\xA0\\xA0\\xA0 Rotate Count:\", this.state.rotate_count.length, \"\\xA0\\xA0\\xA0\\xA0 Gripping Count: \", this.state.fist_count.length, \"\\xA0\\xA0\\xA0\\xA0 FPS: \", this.state.avg_fps]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1460,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1459,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: handline,\n          className: \"handline\",\n          alt: \"anything\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1468,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n          children: \"Enter Vertical Distance (cm)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1469,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"real_measurement_v\",\n          onChange: this.compose_chart,\n          step: \"0.001\",\n          min: \"0\",\n          max: \"20\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1470,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n          children: \"Enter Horizontal Distance (cm)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1471,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"real_measurement_h\",\n          onChange: this.compose_chart,\n          step: \"0.001\",\n          min: \"0\",\n          max: \"20\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1472,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          disabled: !this.state.chart_ready,\n          onClick: this.switch_style,\n          children: \"Switch Chart Style\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1473,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.switch_cam,\n          children: \"Switch Camera\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1474,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1467,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"small\", {\n          children: \"Experimental Features\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1477,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          disabled: this.state.recording || this.state.real_time_inferencing,\n          onClick: this.runPosenet,\n          children: \"PoseNet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1478,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          disabled: this.state.recording || this.state.real_time_inferencing,\n          onClick: this.runFacemesh,\n          children: \"Facemesh\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1479,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          disabled: this.state.recording || this.state.real_time_inferencing,\n          onClick: this.switch_button,\n          children: \"Switch On/Off Button\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1480,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1476,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [this.state.chart_ready ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Line, {\n            data: this.state.chart_data1_L\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1485,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            data: this.state.chart_data1_R\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1486,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            data: this.state.chart_data2_L\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1487,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            data: this.state.chart_data2_R\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1488,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            data: this.state.chart_data3_L\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1489,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            data: this.state.chart_data3_R\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1490,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            data: this.state.chart_data4_L\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1491,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            data: this.state.chart_data4_R\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1492,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1484,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1495,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            id: \"upload-json\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1498,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1497,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            id: \"upload-weights\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1501,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1500,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.getArray,\n          children: \"Get Array\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1503,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1482,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1409,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/wongh/Documents/GitHub/tfjs-app/src/App.js"],"names":["React","Button","handpose","posenet","facemesh","Webcam","drawHand_tap","drawHand_rotate","drawHand_fist","drawHand_still","writeText","drawKeypoints","drawSkeleton","drawMesh","sqrt","pow","Line","handline","App","Component","constructor","props","sleep","milliseconds","Promise","resolve","setTimeout","exportToJson","objectData","filename","contentType","window","navigator","msSaveOrOpenBlob","blob","Blob","decodeURIComponent","encodeURI","JSON","stringify","type","a","document","createElement","download","href","encodeURIComponent","target","body","appendChild","click","removeChild","getArray","dict","tap_count","state","rotate_count","fist_count","dist_array","dist_time_array","dist_record","dist_time_record","rotate_array","rotate_time_array","rotate_record","rotate_time_record","fist_array","fist_time_array","fist_record","fist_time_record","still_array","still_time_array","still_record","still_time_record","startAt","avg_fps","hand_dist_array","hand_rotate_array","hand_fist_array","hand_still_array","ID","last_hand_L","last_hand_R","index_passed","min_dist","max_dist","rotate_passed","last_pressed","real_time_inferencing","recording","button_mode","chart_ready","finger_done","rotate_done","fist_done","hand_dist_array_L","hand_dist_array_R","hand_rotate_array_L","hand_rotate_array_R","hand_fist_array_L","hand_fist_array_R","hand_still_array_L","hand_still_array_R","dist_array_L","dist_time_array_L","dist_record_L","dist_time_record_L","dist_array_R","dist_time_array_R","dist_record_R","dist_time_record_R","rotate_array_L","rotate_time_array_L","rotate_record_L","rotate_time_record_L","rotate_array_R","rotate_time_array_R","rotate_record_R","rotate_time_record_R","fist_array_L","fist_time_array_L","fist_record_L","fist_time_record_L","fist_array_R","fist_time_array_R","fist_record_R","fist_time_record_R","still_array_L","still_time_array_L","still_record_L","still_time_record_L","still_array_R","still_time_array_R","still_record_R","still_time_record_R","chart_data1_L","chart_data1_R","chart_data2_L","chart_data2_R","chart_data3_L","chart_data3_R","chart_data4_L","chart_data4_R","stage","wait","wait_till","Date","now","dead_frame","raw","facingMode","webcamRef","createRef","canvasRef","videoConstraints","capture_interval","runHandpose","bind","stop_real_time_inference","stop_tapping","stop_rotating","stop_gripping","stop_record","record_video","concat_frame","inference","reset_counter","increment_tap1","increment_tap2","switch_button","compose_chart","runPosenet","real_time_posenet","runFacemesh","real_time_facemesh","switch_style","switch_cam","next_step","setState","require","net","load","console","log","Interval_ID","setInterval","current","video","readyState","videoWidth","videoHeight","width","height","face","estimateFaces","ctx","getContext","pose","estimateSinglePose","time_array_1_L","time_array_1_R","count_array_1_L","count_array_1_R","label_1_L","label_1_R","time_array_2_L","time_array_2_R","count_array_2_L","count_array_2_R","label_2_L","label_2_R","time_array_3_L","time_array_3_R","count_array_3_L","count_array_3_R","label_3_L","label_3_R","time_array_4_L","time_array_4_R","count_array_4_L","count_array_4_R","label_4_L","label_4_R","real_dist_v","getElementById","value","real_dist_h","length","slice","i","tmp","data1_L","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","data","data1_R","data2_L","data2_R","data3_L","data3_R","data4_L","data4_R","current_moment","norm","lm1","lm2","clearInterval","clearRect","text","x","y","real_time_inference","hand","estimateHands","forEach","prediction","landmarks","pawn_dist","y_dist","index_dist","current_dist","rotate_dist","fist_dist","total_move","pinky_rest","ring_rest","middle_rest","index_rest","thumb_rest","fist_passed","moved","Math","abs","image","getScreenshot","img","src","onload","last_hand","move_dist","record","render","button_1","button_2","position","marginLeft","marginRight","left","right","textAlign","zindex"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Button from '@material-ui/core/Button';\r\nimport * as handpose from \"@tensorflow-models/handpose\";\r\nimport * as posenet from \"@tensorflow-models/posenet\";\r\nimport * as facemesh from \"@tensorflow-models/facemesh\";\r\n//import * as tf from '@tensorflow/tfjs-core';\r\nimport Webcam from \"react-webcam\";\r\nimport \"./App.css\";\r\nimport { drawHand_tap, drawHand_rotate, drawHand_fist, drawHand_still, writeText, drawKeypoints, drawSkeleton, drawMesh } from \"./utilities\";\r\nimport { sqrt, pow } from \"mathjs\"\r\nimport {Line} from 'react-chartjs-2';\r\nimport handline from './HandLines1.jpg';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      ID : 0,\r\n      tap_count : [],\r\n      rotate_count : [],\r\n      fist_count : [],\r\n      last_hand_L: [],\r\n      last_hand_R: [],\r\n      index_passed : 0,\r\n      min_dist: 0,\r\n      max_dist: 99.0,\r\n      rotate_passed : 0,\r\n      last_pressed:0,\r\n\r\n      real_time_inferencing:false,\r\n      recording:false,\r\n      button_mode:false,\r\n      chart_ready:false,\r\n      finger_done : false,\r\n      rotate_done : false,\r\n      fist_done : false,\r\n\r\n      hand_dist_array_L : [],\r\n      hand_dist_array_R : [],\r\n      hand_rotate_array_L : [],\r\n      hand_rotate_array_R : [],\r\n      hand_fist_array_L : [],\r\n      hand_fist_array_R : [],\r\n      hand_still_array_L : [],\r\n      hand_still_array_R : [],\r\n\r\n      dist_array_L : [],\r\n      dist_time_array_L : [],\r\n      dist_record_L : [],\r\n      dist_time_record_L : [],\r\n      dist_array_R : [],\r\n      dist_time_array_R : [],\r\n      dist_record_R : [],\r\n      dist_time_record_R : [],\r\n\r\n      rotate_array_L : [],\r\n      rotate_time_array_L : [],\r\n      rotate_record_L : [],\r\n      rotate_time_record_L : [],\r\n      rotate_array_R : [],\r\n      rotate_time_array_R : [],\r\n      rotate_record_R : [],\r\n      rotate_time_record_R : [],\r\n\r\n      fist_array_L : [],\r\n      fist_time_array_L : [],\r\n      fist_record_L : [],\r\n      fist_time_record_L : [],\r\n      fist_array_R : [],\r\n      fist_time_array_R : [],\r\n      fist_record_R : [],\r\n      fist_time_record_R : [],\r\n\r\n      still_array_L : [],\r\n      still_time_array_L : [],\r\n      still_record_L : [],\r\n      still_time_record_L : [],\r\n      still_array_R : [],\r\n      still_time_array_R : [],\r\n      still_record_R : [],\r\n      still_time_record_R : [],\r\n\r\n      chart_data1_L : null,\r\n      chart_data1_R : null,\r\n      chart_data2_L : null,\r\n      chart_data2_R : null,\r\n      chart_data3_L : null,\r\n      chart_data3_R : null,\r\n      chart_data4_L : null,\r\n      chart_data4_R : null,\r\n\r\n      stage:0,\r\n      wait : false,\r\n      wait_till : 0,\r\n\r\n      startAt: Date.now(),\r\n      dead_frame: 0,\r\n      raw: true,\r\n      facingMode: \"user\",\r\n      avg_fps: 0,\r\n    };\r\n    this.webcamRef = React.createRef(null);\r\n    this.canvasRef = React.createRef(null);\r\n    this.videoConstraints = {facingMode: \"user\"};\r\n    this.capture_interval = 50;\r\n    this.runHandpose = this.runHandpose.bind(this);\r\n    this.stop_real_time_inference = this.stop_real_time_inference.bind(this);\r\n    this.stop_tapping = this.stop_tapping.bind(this);\r\n    this.stop_rotating = this.stop_rotating.bind(this);\r\n    this.stop_gripping = this.stop_gripping.bind(this);\r\n    this.stop_record = this.stop_record.bind(this);\r\n    this.record_video = this.record_video.bind(this);\r\n    this.concat_frame = this.concat_frame.bind(this);\r\n    this.inference = this.inference.bind(this);\r\n    this.reset_counter = this.reset_counter.bind(this);\r\n    this.increment_tap1 = this.increment_tap1.bind(this);\r\n    this.increment_tap2 = this.increment_tap2.bind(this);\r\n    this.switch_button = this.switch_button.bind(this);\r\n    this.compose_chart = this.compose_chart.bind(this);\r\n    this.runPosenet = this.runPosenet.bind(this);\r\n    this.real_time_posenet = this.real_time_posenet.bind(this);\r\n    this.runFacemesh = this.runFacemesh.bind(this);\r\n    this.real_time_facemesh = this.real_time_facemesh.bind(this);\r\n    this.switch_style = this.switch_style.bind(this);\r\n    this.switch_cam = this.switch_cam.bind(this);\r\n    this.getArray = this.getArray.bind(this);\r\n    this.exportToJson = this.exportToJson.bind(this);\r\n    this.next_step = this.next_step.bind(this);\r\n  }\r\n\r\n  switch_cam(){\r\n    if (this.state.facingMode === \"user\") this.setState({facingMode: \"environment\"});\r\n    else if (this.state.facingMode === \"environment\") this.setState({facingMode: \"user\"});\r\n  }\r\n\r\n  async runFacemesh(){\r\n    require('@tensorflow/tfjs-backend-webgl');\r\n    const net = await facemesh.load();\r\n    console.log(\"Facemesh model loaded.\");\r\n    this.setState({startAt:Date.now()});\r\n    const Interval_ID = setInterval(() => {\r\n      this.real_time_facemesh(net);\r\n    }, this.capture_interval);\r\n    this.setState({ID:Interval_ID,\r\n      real_time_inferencing:true});\r\n  }\r\n\r\n  async real_time_facemesh(net) {\r\n    if (this.state.wait){\r\n      this.setState({wait_till:Date.now()+3000});\r\n      this.setState({wait:false});\r\n    }\r\n    if (\r\n      typeof this.webcamRef.current !== \"undefined\" &&\r\n      this.webcamRef.current !== null &&\r\n      this.webcamRef.current.video.readyState === 4\r\n    ) {\r\n      const video = this.webcamRef.current.video;\r\n      const videoWidth = this.webcamRef.current.video.videoWidth;\r\n      const videoHeight = this.webcamRef.current.video.videoHeight;\r\n      this.webcamRef.current.video.width = videoWidth;\r\n      this.webcamRef.current.video.height = videoHeight;\r\n      this.canvasRef.current.width = videoWidth;\r\n      this.canvasRef.current.height = videoHeight;\r\n      const face = await net.estimateFaces(video);\r\n      const ctx = this.canvasRef.current.getContext(\"2d\");\r\n      drawMesh(face, ctx);\r\n    }\r\n  }\r\n\r\n  async runPosenet(){\r\n    require('@tensorflow/tfjs-backend-webgl');\r\n    const net = await posenet.load();\r\n    console.log(\"PoseNet model loaded.\");\r\n    this.setState({startAt:Date.now()});\r\n    const Interval_ID = setInterval(() => {\r\n      this.real_time_posenet(net);\r\n    }, this.capture_interval);\r\n    this.setState({ID:Interval_ID,\r\n      real_time_inferencing:true});\r\n  }\r\n\r\n  async real_time_posenet(net) {\r\n    if (this.state.wait){\r\n      this.setState({wait_till:Date.now()+3000,\r\n        wait:false});\r\n    }\r\n    if (\r\n      typeof this.webcamRef.current !== \"undefined\" &&\r\n      this.webcamRef.current !== null &&\r\n      this.webcamRef.current.video.readyState === 4\r\n    ) {\r\n      const video = this.webcamRef.current.video;\r\n      const videoWidth = this.webcamRef.current.video.videoWidth;\r\n      const videoHeight = this.webcamRef.current.video.videoHeight;\r\n      this.webcamRef.current.video.width = videoWidth;\r\n      this.webcamRef.current.video.height = videoHeight;\r\n      this.canvasRef.current.width = videoWidth;\r\n      this.canvasRef.current.height = videoHeight;\r\n      const pose = await net.estimateSinglePose(video);\r\n      const ctx = this.canvasRef.current.getContext(\"2d\");\r\n      drawKeypoints(pose[\"keypoints\"], 0.6, ctx);\r\n      drawSkeleton(pose[\"keypoints\"], 0.7, ctx);\r\n    }\r\n  }\r\n\r\n  async switch_style(){\r\n    await this.setState({raw: !this.state.raw});\r\n    this.compose_chart();\r\n  }\r\n\r\n  compose_chart(){\r\n    let time_array_1_L = [];\r\n    let time_array_1_R = [];\r\n    let count_array_1_L = [];\r\n    let count_array_1_R = [];\r\n    let label_1_L = \"\";\r\n    let label_1_R = \"\";\r\n    let time_array_2_L = [];\r\n    let time_array_2_R = [];\r\n    let count_array_2_L = [];\r\n    let count_array_2_R = [];\r\n    let label_2_L = \"\";\r\n    let label_2_R = \"\";\r\n    let time_array_3_L = [];\r\n    let time_array_3_R = [];\r\n    let count_array_3_L = [];\r\n    let count_array_3_R = [];\r\n    let label_3_L = \"\";\r\n    let label_3_R = \"\";\r\n    let time_array_4_L = [];\r\n    let time_array_4_R = [];\r\n    let count_array_4_L = [];\r\n    let count_array_4_R = [];\r\n    let label_4_L = \"\";\r\n    let label_4_R = \"\";\r\n    let real_dist_v = document.getElementById(\"real_measurement_v\").value;\r\n    let real_dist_h = document.getElementById(\"real_measurement_h\").value;\r\n    let avg_fps = this.state.hand_dist_array_L.length / \r\n                 (this.state.dist_time_array_L[this.state.dist_time_array_L.length - 1] - \r\n                  this.state.dist_time_array_L[0]);\r\n    this.setState({avg_fps:avg_fps});\r\n    \r\n    if (this.state.raw){\r\n      // Print Data Raw\r\n      if (this.state.dist_array_L.length > 100){\r\n        time_array_1_L = this.state.dist_time_array_L.slice(10, this.state.dist_time_array_L.length-20);\r\n        count_array_1_L = this.state.dist_array_L.slice(10, this.state.dist_array_L.length-20);\r\n      }\r\n      else {\r\n        time_array_1_L = [...this.state.dist_time_array_L];\r\n        count_array_1_L = [...this.state.dist_array_L];\r\n      }\r\n      if (this.state.dist_array_R.length > 100){\r\n        time_array_1_R = this.state.dist_time_array_R.slice(10, this.state.dist_time_array_R.length-20);\r\n        count_array_1_R = this.state.dist_array_R.slice(10, this.state.dist_array_R.length-20);\r\n      }\r\n      else {\r\n        time_array_1_R = [...this.state.dist_time_array_R];\r\n        count_array_1_R = [...this.state.dist_array_R];\r\n      }\r\n      if (this.state.rotate_array_L.length > 100){\r\n        time_array_2_L = this.state.rotate_time_array_L.slice(10, this.state.rotate_time_array_L.length-20);\r\n        count_array_2_L = this.state.rotate_array_L.slice(10, this.state.rotate_array_L.length-20);\r\n      }\r\n      else {\r\n        time_array_2_L = [...this.state.rotate_time_array_L];\r\n        count_array_2_L = [...this.state.rotate_array_L];\r\n      }\r\n      if (this.state.rotate_array_R.length > 100){\r\n        time_array_2_R = this.state.rotate_time_array_R.slice(10, this.state.rotate_time_array_R.length-20);\r\n        count_array_2_R = this.state.rotate_array_R.slice(10, this.state.rotate_array_R.length-20);\r\n      }\r\n      else {\r\n        time_array_2_R = [...this.state.rotate_time_array_R];\r\n        count_array_2_R = [...this.state.rotate_array_R];\r\n      }\r\n      if (this.state.fist_array_L.length > 100){\r\n        time_array_3_L = this.state.fist_time_array_L.slice(10, this.state.fist_time_array_L.length-20);\r\n        count_array_3_L = this.state.fist_array_L.slice(10, this.state.fist_array_L.length-20);\r\n      }\r\n      else {\r\n        time_array_3_L = [...this.state.fist_time_array_L];\r\n        count_array_3_L = [...this.state.fist_array_L];\r\n      }\r\n      if (this.state.fist_array_R.length > 100){\r\n        time_array_3_R = this.state.fist_time_array_R.slice(10, this.state.fist_time_array_R.length-20);\r\n        count_array_3_R = this.state.fist_array_R.slice(10, this.state.fist_array_R.length-20);\r\n      }\r\n      else {\r\n        time_array_3_R = [...this.state.fist_time_array_R];\r\n        count_array_3_R = [...this.state.fist_array_R];\r\n      }\r\n      if (this.state.still_array_L.length > 100){\r\n        time_array_4_L = this.state.still_time_array_L.slice(10, this.state.still_time_array_L.length-20);\r\n        count_array_4_L = this.state.still_array_L.slice(10, this.state.still_array_L.length-20);\r\n      }\r\n      else {\r\n        time_array_4_L = [...this.state.still_time_array_L];\r\n        count_array_4_L = [...this.state.still_array_L];\r\n      }\r\n      if (this.state.still_array_R.length > 100){\r\n        time_array_4_R = this.state.still_time_array_R.slice(10, this.state.still_time_array_R.length-20);\r\n        count_array_4_R = this.state.still_array_R.slice(10, this.state.still_array_R.length-20);\r\n      }\r\n      else {\r\n        time_array_4_R = [...this.state.still_time_array_R];\r\n        count_array_4_R = [...this.state.still_array_R];\r\n      }\r\n      \r\n      // Change to Real Life Measurement\r\n      if (real_dist_v > 0.0001 && real_dist_h > 0.0001){\r\n        label_1_L = \"Distance between Index and Thumb (cm)\";\r\n        label_1_R = \"Distance between Index and Thumb (cm)\";\r\n        label_2_L = \"Relative Location between Left and Right of Hand (cm)\";\r\n        label_2_R = \"Relative Location between Left and Right of Hand (cm)\";\r\n        label_3_L = \"Relative Location between Tip of Fingers and Finger Joints (cm)\";\r\n        label_3_R = \"Relative Location between Tip of Fingers and Finger Joints (cm)\";\r\n        label_4_L = \"Relative Location Moved (cm)\";\r\n        label_4_R = \"Relative Location Moved (cm)\";\r\n        let i = 0;\r\n        let tmp = 0;\r\n        for (i = 0; i < count_array_1_L.length; i++){\r\n          tmp = count_array_1_L[i];\r\n          count_array_1_L[i] = tmp*real_dist_h;\r\n        }\r\n        for (i = 0; i < count_array_1_R.length; i++){\r\n          tmp = count_array_1_R[i];\r\n          count_array_1_R[i] = tmp*real_dist_h;\r\n        }\r\n        for (i = 0; i < count_array_2_L.length; i++){\r\n          tmp = count_array_2_L[i];\r\n          count_array_2_L[i] = tmp*real_dist_v;\r\n        }\r\n        for (i = 0; i < count_array_2_R.length; i++){\r\n          tmp = count_array_2_R[i];\r\n          count_array_2_R[i] = tmp*real_dist_v;\r\n        }\r\n        for (i = 0; i < count_array_3_L.length; i++){\r\n          tmp = count_array_3_L[i];\r\n          count_array_3_L[i] = tmp*real_dist_h;\r\n        }\r\n        for (i = 0; i < count_array_3_R.length; i++){\r\n          tmp = count_array_3_R[i];\r\n          count_array_3_R[i] = tmp*real_dist_h;\r\n        }\r\n        for (i = 0; i < count_array_4_L.length; i++){\r\n          tmp = count_array_4_L[i];\r\n          count_array_4_L[i] = tmp*real_dist_h;\r\n        }\r\n        for (i = 0; i < count_array_4_R.length; i++){\r\n          tmp = count_array_4_R[i];\r\n          count_array_4_R[i] = tmp*real_dist_h;\r\n        }\r\n      }\r\n      else{\r\n        label_1_L = \"Distance between Index and Thumb (cm)\";\r\n        label_1_R = \"Distance between Index and Thumb (cm)\";\r\n        label_2_L = \"Relative Location between Left and Right of Hand (cm)\";\r\n        label_2_R = \"Relative Location between Left and Right of Hand (cm)\";\r\n        label_3_L = \"Relative Location between Tip of Fingers and Finger Joints (cm)\";\r\n        label_3_R = \"Relative Location between Tip of Fingers and Finger Joints (cm)\";\r\n        label_4_L = \"Relative Location Moved (cm)\";\r\n        label_4_R = \"Relative Location Moved (cm)\";\r\n      }\r\n    }\r\n    /*\r\n    else{\r\n      \r\n      // Recalculate Tapping Data\r\n      console.log(\"Use Avg\");\r\n      let d_array = [];\r\n      let frames = (1000/this.capture_interval);\r\n      for (let i = 1; i < this.state.dist_array.length; i++) d_array = [...d_array, Math.abs(this.state.dist_array[i-1] - this.state.dist_array[i])];\r\n      for (let i = 0; i < d_array.length - frames; i++){\r\n        let total = 0.0;\r\n        for (let j = 0; j < frames; j++) total += d_array[i+j];\r\n        count_array_1 = [...count_array_1, total / frames];\r\n        time_array_1 = [...time_array_1, this.state.dist_time_array[i]];\r\n      }\r\n\r\n      d_array = [];\r\n      for (let i = 1; i < this.state.rotate_array.length; i++) d_array = [...d_array, Math.abs(this.state.rotate_array[i-1] - this.state.rotate_array[i])];\r\n      for (let i = 0; i < d_array.length - frames; i++){\r\n        let total = 0.0;\r\n        for (let j = 0; j < frames; j++) total += d_array[i+j];\r\n        count_array_2 = [...count_array_2, total / frames];\r\n        time_array_2 = [...time_array_2, this.state.rotate_time_array[i]];\r\n      }\r\n\r\n      d_array = [];\r\n      for (let i = 1; i < this.state.fist_array.length; i++) d_array = [...d_array, Math.abs(this.state.fist_array[i-1] - this.state.fist_array[i])];\r\n      for (let i = 0; i < d_array.length - frames; i++){\r\n        let total = 0.0;\r\n        for (let j = 0; j < frames; j++) total += d_array[i+j];\r\n        count_array_3 = [...count_array_3, total / frames];\r\n        time_array_3 = [...time_array_3, this.state.fist_time_array[i]];\r\n      }\r\n\r\n      d_array = [];\r\n      for (let i = 1; i < this.state.still_array.length; i++) d_array = [...d_array, Math.abs(this.state.still_array[i-1] - this.state.still_array[i])];\r\n      for (let i = 0; i < d_array.length - frames; i++){\r\n        let total = 0.0;\r\n        for (let j = 0; j < frames; j++) total += d_array[i+j];\r\n        count_array_4 = [...count_array_4, total / frames];\r\n        time_array_4 = [...time_array_4, this.state.still_time_array[i]];\r\n      }\r\n      if (this.state.still_array.length > 100){\r\n        time_array_4 = this.state.still_time_array.slice(20, this.state.still_time_array.length-20);\r\n        count_array_4 = this.state.still_array.slice(20, this.state.still_array.length-20);\r\n      }\r\n      else {\r\n        time_array_4 = [...this.state.still_time_array];\r\n        count_array_4 = [...this.state.still_array];\r\n      }\r\n\r\n      // Change to Real Life Measurement\r\n      if (real_dist > 0.0001){\r\n        label_1 = \"Average Distance between Index and Thumb per Second (cm)\";\r\n        label_2 = \"Average Distance between Left and Right of Hand per Second (cm)\";\r\n        label_3 = \"Average Distance Location between Tip of Fingers and Finger Joints per Second (cm)\";\r\n        label_4 = \"Relative Location Moved per Second (cm)\";\r\n        let i = 0;\r\n        let tmp = 0;\r\n        for (i = 0; i < count_array_1.length; i++){\r\n          tmp = count_array_1[i];\r\n          count_array_1[i] = tmp*real_dist;\r\n        }\r\n        for (i = 0; i < count_array_2.length; i++){\r\n          tmp = count_array_2[i];\r\n          count_array_2[i] = tmp*real_dist;\r\n        }\r\n        for (i = 0; i < count_array_3.length; i++){\r\n          tmp = count_array_3[i];\r\n          count_array_3[i] = tmp*real_dist;\r\n        }\r\n        for (i = 0; i < count_array_4.length; i++){\r\n          tmp = count_array_4[i];\r\n          count_array_4[i] = tmp*real_dist;\r\n        }\r\n      }\r\n      else{\r\n        label_1 = \"Average Distance between Index and Thumb per Second (Relative Scale)\";\r\n        label_2 = \"Average Distance between Left and Right of Hand per Second (Relative Scale)\";\r\n        label_3 = \"Average Distance Location between Tip of Fingers and Finger Joints per Second (Relative Scale)\";\r\n        label_4 = \"Relative Location Moved per Second (Relative Scale)\";\r\n      }\r\n      \r\n    }\r\n    */\r\n    // Setup Graphs\r\n    const data1_L = {\r\n      labels: time_array_1_L,\r\n      datasets: [        \r\n        {\r\n          label: label_1_L,\r\n          fill: false,\r\n          lineTension: 0.3,\r\n          backgroundColor: 'rgba(75,192,192,0.4)',\r\n          borderColor: 'rgba(75,192,192,1)',\r\n          borderCapStyle: 'butt',\r\n          borderDash: [],\r\n          borderDashOffset: 0.0,\r\n          borderJoinStyle: 'miter',\r\n          pointBorderColor: 'rgba(75,192,192,1)',\r\n          pointBackgroundColor: '#fff',\r\n          pointBorderWidth: 1,\r\n          pointHoverRadius: 5,\r\n          pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n          pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n          pointHoverBorderWidth: 2,\r\n          pointRadius: 1,\r\n          pointHitRadius: 10,\r\n          data: count_array_1_L\r\n        }\r\n      ]\r\n    };\r\n    const data1_R = {\r\n      labels: time_array_1_R,\r\n      datasets: [        \r\n        {\r\n          label: label_1_R,\r\n          fill: false,\r\n          lineTension: 0.3,\r\n          backgroundColor: 'rgba(75,192,192,0.4)',\r\n          borderColor: 'rgba(75,192,192,1)',\r\n          borderCapStyle: 'butt',\r\n          borderDash: [],\r\n          borderDashOffset: 0.0,\r\n          borderJoinStyle: 'miter',\r\n          pointBorderColor: 'rgba(75,192,192,1)',\r\n          pointBackgroundColor: '#fff',\r\n          pointBorderWidth: 1,\r\n          pointHoverRadius: 5,\r\n          pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n          pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n          pointHoverBorderWidth: 2,\r\n          pointRadius: 1,\r\n          pointHitRadius: 10,\r\n          data: count_array_1_R\r\n        }\r\n      ]\r\n    };\r\n    const data2_L = {\r\n      labels: time_array_2_L,\r\n      datasets: [        \r\n        {\r\n          label: label_2_L,\r\n          fill: false,\r\n          lineTension: 0.1,\r\n          backgroundColor: 'rgba(192,75,192,0.4)',\r\n          borderColor: 'rgba(192,75,192,1)',\r\n          borderCapStyle: 'butt',\r\n          borderDash: [],\r\n          borderDashOffset: 0.0,\r\n          borderJoinStyle: 'miter',\r\n          pointBorderColor: 'rgba(192,75,192,1)',\r\n          pointBackgroundColor: '#fff',\r\n          pointBorderWidth: 1,\r\n          pointHoverRadius: 5,\r\n          pointHoverBackgroundColor: 'rgba(192,75,192,1)',\r\n          pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n          pointHoverBorderWidth: 2,\r\n          pointRadius: 1,\r\n          pointHitRadius: 10,\r\n          data: count_array_2_L \r\n        },\r\n      ]\r\n    };\r\n    const data2_R = {\r\n      labels: time_array_2_R,\r\n      datasets: [        \r\n        {\r\n          label: label_2_R,\r\n          fill: false,\r\n          lineTension: 0.1,\r\n          backgroundColor: 'rgba(192,75,192,0.4)',\r\n          borderColor: 'rgba(192,75,192,1)',\r\n          borderCapStyle: 'butt',\r\n          borderDash: [],\r\n          borderDashOffset: 0.0,\r\n          borderJoinStyle: 'miter',\r\n          pointBorderColor: 'rgba(192,75,192,1)',\r\n          pointBackgroundColor: '#fff',\r\n          pointBorderWidth: 1,\r\n          pointHoverRadius: 5,\r\n          pointHoverBackgroundColor: 'rgba(192,75,192,1)',\r\n          pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n          pointHoverBorderWidth: 2,\r\n          pointRadius: 1,\r\n          pointHitRadius: 10,\r\n          data: count_array_2_R \r\n        },\r\n      ]\r\n    };\r\n    const data3_L = {\r\n      labels: time_array_3_L,\r\n      datasets: [        \r\n        {\r\n          label: label_3_L,\r\n          fill: false,\r\n          lineTension: 0.1,\r\n          backgroundColor: 'rgba(192,192,75,0.4)',\r\n          borderColor: 'rgba(192,192,75,1)',\r\n          borderCapStyle: 'butt',\r\n          borderDash: [],\r\n          borderDashOffset: 0.0,\r\n          borderJoinStyle: 'miter',\r\n          pointBorderColor: 'rgba(192,192,75,1)',\r\n          pointBackgroundColor: '#fff',\r\n          pointBorderWidth: 1,\r\n          pointHoverRadius: 5,\r\n          pointHoverBackgroundColor: 'rgba(192,192,75,1)',\r\n          pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n          pointHoverBorderWidth: 2,\r\n          pointRadius: 1,\r\n          pointHitRadius: 10,\r\n          data: count_array_3_L\r\n        }\r\n      ]\r\n    };\r\n    const data3_R = {\r\n      labels: time_array_3_R,\r\n      datasets: [        \r\n        {\r\n          label: label_3_R,\r\n          fill: false,\r\n          lineTension: 0.1,\r\n          backgroundColor: 'rgba(192,192,75,0.4)',\r\n          borderColor: 'rgba(192,192,75,1)',\r\n          borderCapStyle: 'butt',\r\n          borderDash: [],\r\n          borderDashOffset: 0.0,\r\n          borderJoinStyle: 'miter',\r\n          pointBorderColor: 'rgba(192,192,75,1)',\r\n          pointBackgroundColor: '#fff',\r\n          pointBorderWidth: 1,\r\n          pointHoverRadius: 5,\r\n          pointHoverBackgroundColor: 'rgba(192,192,75,1)',\r\n          pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n          pointHoverBorderWidth: 2,\r\n          pointRadius: 1,\r\n          pointHitRadius: 10,\r\n          data: count_array_3_R\r\n        }\r\n      ]\r\n    };\r\n    const data4_L = {\r\n      labels: time_array_4_L,\r\n      datasets: [        \r\n        {\r\n          label: label_4_L,\r\n          fill: false,\r\n          lineTension: 0.1,\r\n          backgroundColor: 'rgba(75,192,75,0.4)',\r\n          borderColor: 'rgba(75,192,75,1)',\r\n          borderCapStyle: 'butt',\r\n          borderDash: [],\r\n          borderDashOffset: 0.0,\r\n          borderJoinStyle: 'miter',\r\n          pointBorderColor: 'rgba(75,192,75,1)',\r\n          pointBackgroundColor: '#fff',\r\n          pointBorderWidth: 1,\r\n          pointHoverRadius: 5,\r\n          pointHoverBackgroundColor: 'rgba(75,192,75,1)',\r\n          pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n          pointHoverBorderWidth: 2,\r\n          pointRadius: 1,\r\n          pointHitRadius: 10,\r\n          data: count_array_4_L\r\n        }\r\n      ]\r\n    };\r\n    const data4_R = {\r\n      labels: time_array_4_R,\r\n      datasets: [        \r\n        {\r\n          label: label_4_R,\r\n          fill: false,\r\n          lineTension: 0.1,\r\n          backgroundColor: 'rgba(75,192,75,0.4)',\r\n          borderColor: 'rgba(75,192,75,1)',\r\n          borderCapStyle: 'butt',\r\n          borderDash: [],\r\n          borderDashOffset: 0.0,\r\n          borderJoinStyle: 'miter',\r\n          pointBorderColor: 'rgba(75,192,75,1)',\r\n          pointBackgroundColor: '#fff',\r\n          pointBorderWidth: 1,\r\n          pointHoverRadius: 5,\r\n          pointHoverBackgroundColor: 'rgba(75,192,75,1)',\r\n          pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n          pointHoverBorderWidth: 2,\r\n          pointRadius: 1,\r\n          pointHitRadius: 10,\r\n          data: count_array_4_R\r\n        }\r\n      ]\r\n    };\r\n    this.setState({chart_data1_L:data1_L});\r\n    this.setState({chart_data1_R:data1_R});\r\n    this.setState({chart_data2_L:data2_L});\r\n    this.setState({chart_data2_R:data2_R});\r\n    this.setState({chart_data3_L:data3_L});\r\n    this.setState({chart_data3_R:data3_R});\r\n    this.setState({chart_data4_L:data4_L});\r\n    this.setState({chart_data4_R:data4_R});\r\n    this.setState({chart_ready:true});\r\n  }\r\n\r\n  switch_button(){\r\n    if (this.state.button_mode === true){\r\n      this.setState({button_mode:false});\r\n      this.compose_chart();\r\n    }\r\n    else{\r\n      this.setState({button_mode:true})\r\n    }\r\n  }\r\n\r\n  increment_tap1(){\r\n    if (this.state.last_pressed !== 1){\r\n      let current_moment = (Date.now() - this.state.startAt)/1000\r\n      this.setState({last_pressed:1})\r\n      this.setState({dist_array:[...this.state.dist_array, 1.0]});\r\n      this.setState({dist_time_array:[...this.state.dist_time_array, current_moment]});\r\n      this.setState({tap_count:[...this.state.tap_count, current_moment]});\r\n    }\r\n  }\r\n\r\n  increment_tap2(){\r\n    if (this.state.last_pressed !== 2){\r\n      let current_moment = (Date.now() - this.state.startAt)/1000\r\n      this.setState({last_pressed:2})\r\n      this.setState({dist_array:[...this.state.dist_array, 1.0]});\r\n      this.setState({dist_time_array:[...this.state.dist_time_array, current_moment]});\r\n      this.setState({tap_count:[...this.state.tap_count, current_moment]});\r\n    }\r\n  }\r\n\r\n  norm(lm1, lm2){\r\n    return sqrt(pow(lm1[0]-lm2[0], 2)+pow(lm1[1]-lm2[1], 2))\r\n  }\r\n\r\n  reset_counter(){\r\n    clearInterval(this.state.ID);\r\n    const ctx = this.canvasRef.current.getContext(\"2d\");\r\n    ctx.clearRect(0,0, this.canvasRef.current.width, this.canvasRef.current.height);\r\n    this.setState({\r\n      ID : 0,\r\n      tap_count : [],\r\n      rotate_count : [],\r\n      fist_count : [],\r\n      last_hand_L: [],\r\n      last_hand_R: [],\r\n      index_passed : 0,\r\n      min_dist: 0,\r\n      max_dist: 99.0,\r\n      rotate_passed : 0,\r\n      last_pressed:0,\r\n\r\n      real_time_inferencing:false,\r\n      recording:false,\r\n      button_mode:false,\r\n      chart_ready:false,\r\n      finger_done : false,\r\n      rotate_done : false,\r\n      fist_done : false,\r\n\r\n      hand_dist_array_L : [],\r\n      hand_dist_array_R : [],\r\n      hand_rotate_array_L : [],\r\n      hand_rotate_array_R : [],\r\n      hand_fist_array_L : [],\r\n      hand_fist_array_R : [],\r\n      hand_still_array_L : [],\r\n      hand_still_array_R : [],\r\n\r\n      dist_array_L : [],\r\n      dist_time_array_L : [],\r\n      dist_record_L : [],\r\n      dist_time_record_L : [],\r\n      dist_array_R : [],\r\n      dist_time_array_R : [],\r\n      dist_record_R : [],\r\n      dist_time_record_R : [],\r\n\r\n      rotate_array_L : [],\r\n      rotate_time_array_L : [],\r\n      rotate_record_L : [],\r\n      rotate_time_record_L : [],\r\n      rotate_array_R : [],\r\n      rotate_time_array_R : [],\r\n      rotate_record_R : [],\r\n      rotate_time_record_R : [],\r\n\r\n      fist_array_L : [],\r\n      fist_time_array_L : [],\r\n      fist_record_L : [],\r\n      fist_time_record_L : [],\r\n      fist_array_R : [],\r\n      fist_time_array_R : [],\r\n      fist_record_R : [],\r\n      fist_time_record_R : [],\r\n\r\n      still_array_L : [],\r\n      still_time_array_L : [],\r\n      still_record_L : [],\r\n      still_time_record_L : [],\r\n      still_array_R : [],\r\n      still_time_array_R : [],\r\n      still_record_R : [],\r\n      still_time_record_R : [],\r\n\r\n      chart_data1_L : null,\r\n      chart_data1_R : null,\r\n      chart_data2_L : null,\r\n      chart_data2_R : null,\r\n      chart_data3_L : null,\r\n      chart_data3_R : null,\r\n      chart_data4_L : null,\r\n      chart_data4_R : null,\r\n\r\n      stage:0,\r\n      wait : false,\r\n      wait_till : 0,\r\n\r\n      startAt: Date.now(),\r\n      dead_frame: 0,\r\n      raw: true,\r\n      facingMode: \"user\",\r\n      avg_fps: 0,\r\n    });\r\n  }\r\n\r\n  sleep = (milliseconds) => {\r\n    return new Promise(resolve => setTimeout(resolve, milliseconds))\r\n  }\r\n\r\n  async runHandpose() {\r\n    const ctx = this.canvasRef.current.getContext(\"2d\");\r\n    writeText(ctx, { text: 'Loading', x: 180, y: 70 });\r\n    require('@tensorflow/tfjs-backend-webgl');\r\n    const net = await handpose.load();\r\n    ctx.clearRect(0,0, this.canvasRef.current.width, this.canvasRef.current.height);\r\n    //const uploadJSONInput = document.getElementById('upload-json');\r\n    //const uploadWeightsInput = document.getElementById('upload-weights');\r\n    //const model = await tf.loadLayersModel(tf.io.browserFiles([uploadJSONInput.files[0], uploadWeightsInput.files[0]]));\r\n    console.log(\"Handpose model loaded.\");\r\n    this.setState({startAt:Date.now()});\r\n    const Interval_ID = setInterval(() => {\r\n      this.real_time_inference(net);\r\n    }, this.capture_interval);\r\n    this.setState({ID:Interval_ID,\r\n      real_time_inferencing:true,\r\n      wait:true,\r\n      stage:this.state.stage + 1});\r\n  };\r\n\r\n  async real_time_inference(net) {\r\n    if (this.state.wait){\r\n      this.setState({wait_till:Date.now()+3000});\r\n      this.setState({wait:false});\r\n    }\r\n    if (\r\n      typeof this.webcamRef.current !== \"undefined\" &&\r\n      this.webcamRef.current !== null &&\r\n      this.webcamRef.current.video.readyState === 4\r\n    ) {\r\n      const video = this.webcamRef.current.video;\r\n      const videoWidth = this.webcamRef.current.video.videoWidth;\r\n      const videoHeight = this.webcamRef.current.video.videoHeight;\r\n      this.webcamRef.current.video.width = videoWidth;\r\n      this.webcamRef.current.video.height = videoHeight;\r\n      this.canvasRef.current.width = videoWidth;\r\n      this.canvasRef.current.height = videoHeight;\r\n      const hand = await net.estimateHands(video);\r\n      const ctx = this.canvasRef.current.getContext(\"2d\");\r\n      \r\n      //check if waiting\r\n      if (Date.now() < this.state.wait_till){\r\n        if (hand.length > 0) drawHand_tap (hand, ctx);\r\n        \r\n        //count down 3, 2, 1\r\n        if (this.state.wait_till - Date.now() < 1000) writeText(ctx, { text: '1', x: 180, y: 70 });\r\n        else if (this.state.wait_till - Date.now() < 2000) writeText(ctx, { text: '2', x: 140, y: 70 });\r\n        else if (this.state.wait_till - Date.now() < 3000) writeText(ctx, { text: '3', x: 100, y: 70 });\r\n      }\r\n      else {\r\n        switch(this.state.stage){\r\n          case 1:\r\n            this.setState({hand_dist_array_L:[...this.state.hand_dist_array_L, hand]});\r\n            break;\r\n          case 2:\r\n            this.setState({hand_dist_array_R:[...this.state.hand_dist_array_R, hand]});\r\n            break;\r\n          case 3:\r\n            this.setState({hand_rotate_array_L:[...this.state.hand_rotate_array_L, hand]});\r\n            break;\r\n          case 4:\r\n            this.setState({hand_rotate_array_R:[...this.state.hand_rotate_array_R, hand]});\r\n            break;\r\n          case 5:\r\n            this.setState({hand_fist_array_L:[...this.state.hand_fist_array_L, hand]});\r\n            break;\r\n          case 6:\r\n            this.setState({hand_fist_array_R:[...this.state.hand_fist_array_R, hand]});\r\n            break;\r\n          case 7:\r\n            this.setState({hand_still_array_L:[...this.state.hand_still_array_L, hand]});\r\n            break;\r\n          case 8:\r\n            this.setState({hand_still_array_R:[...this.state.hand_still_array_R, hand]});\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n        if (hand.length > 0){\r\n          hand.forEach((prediction) => {\r\n            this.setState({dead_frame: 0});\r\n            const landmarks = prediction.landmarks\r\n\r\n            let pawn_dist = this.norm(landmarks[0], landmarks[2]);\r\n            let y_dist = this.norm(landmarks[0], landmarks[12]);\r\n            let current_moment = (Date.now() - this.state.startAt)/1000\r\n            let index_dist = null;\r\n            let current_dist = null;\r\n            let rotate_dist = null;\r\n            let fist_dist = null;\r\n            let total_move = null;\r\n            let pinky_rest = null;\r\n            let ring_rest = null;\r\n            let middle_rest = null;\r\n            let index_rest = null;\r\n            let thumb_rest = null;\r\n\r\n            switch (this.state.stage){\r\n              case 1:\r\n                drawHand_tap (hand, ctx);\r\n                index_dist = this.norm(landmarks[4], landmarks[8]);\r\n                current_dist = index_dist/pawn_dist;\r\n                this.setState({dist_array_L:[...this.state.dist_array_L, current_dist],\r\n                  dist_time_array_L:[...this.state.dist_time_array_L, current_moment],\r\n                });\r\n                if (this.state.index_passed === 0 && (current_dist - this.state.min_dist) > 0.2){\r\n                  this.setState({index_passed:1,\r\n                    max_dist: current_dist});\r\n                }\r\n                if (this.state.index_passed === 1 && current_dist > this.state.max_dist){\r\n                  this.setState({max_dist: current_dist});\r\n                }\r\n                if (this.state.index_passed === 1 && (this.state.max_dist - current_dist) > 0.2){\r\n                  this.setState({index_passed:0,\r\n                    min_dist: current_dist,\r\n                    tap_count:[...this.state.tap_count, current_moment]});\r\n                }\r\n                if (this.state.index_passed === 0 && current_dist < this.state.min_dist){\r\n                  this.setState({min_dist: current_dist});\r\n                }\r\n                break;\r\n              case 2:\r\n                drawHand_tap (hand, ctx);\r\n                index_dist = this.norm(landmarks[4], landmarks[8]);\r\n                current_dist = index_dist/pawn_dist;\r\n                this.setState({dist_array_R:[...this.state.dist_array_R, current_dist],\r\n                  dist_time_array_R:[...this.state.dist_time_array_R, current_moment],\r\n                });\r\n                if (this.state.index_passed === 0 && (current_dist - this.state.min_dist) > 0.2){\r\n                  this.setState({index_passed:1,\r\n                    max_dist: current_dist});\r\n                }\r\n                if (this.state.index_passed === 1 && current_dist > this.state.max_dist){\r\n                  this.setState({max_dist: current_dist});\r\n                }\r\n                if (this.state.index_passed === 1 && (this.state.max_dist - current_dist) > 0.2){\r\n                  this.setState({index_passed:0,\r\n                    min_dist: current_dist,\r\n                    tap_count:[...this.state.tap_count, current_moment]});\r\n                }\r\n                if (this.state.index_passed === 0 && current_dist < this.state.min_dist){\r\n                  this.setState({min_dist: current_dist});\r\n                }\r\n                break;\r\n              case 3:\r\n                drawHand_rotate (hand, ctx, this.state.rotate_passed);\r\n                rotate_dist = (landmarks[2][0] - landmarks[17][0]) / y_dist;\r\n                this.setState({rotate_array_L:[...this.state.rotate_array_L, rotate_dist],\r\n                  rotate_time_array_L:[...this.state.rotate_time_array_L, current_moment],\r\n                });\r\n                if (this.state.rotate_passed === 0){\r\n                  if (rotate_dist >= 0.2) this.setState({rotate_passed:1});\r\n                  if (rotate_dist <= -0.2) this.setState({rotate_passed:-1});\r\n                }\r\n                if (this.state.rotate_passed === 1 && rotate_dist <= -0.2){\r\n                  this.setState({rotate_passed:-1});\r\n                }\r\n                if (this.state.rotate_passed === -1 && rotate_dist >= 0.2){\r\n                  this.setState({rotate_passed:1,\r\n                    rotate_count:[...this.state.rotate_count, current_moment]});\r\n                }\r\n                break;\r\n              case 4:\r\n                drawHand_rotate (hand, ctx, this.state.rotate_passed);\r\n                rotate_dist = (landmarks[2][0] - landmarks[17][0]) / y_dist;\r\n                this.setState({rotate_array_R:[...this.state.rotate_array_R, rotate_dist],\r\n                  rotate_time_array_R:[...this.state.rotate_time_array_R, current_moment],\r\n                });\r\n                if (this.state.rotate_passed === 0){\r\n                  if (rotate_dist >= 0.2) this.setState({rotate_passed:1});\r\n                  if (rotate_dist <= -0.2) this.setState({rotate_passed:-1});\r\n                }\r\n                if (this.state.rotate_passed === 1 && rotate_dist <= -0.2){\r\n                  this.setState({rotate_passed:-1});\r\n                }\r\n                if (this.state.rotate_passed === -1 && rotate_dist >= 0.2){\r\n                  this.setState({rotate_passed:1,\r\n                    rotate_count:[...this.state.rotate_count, current_moment]});\r\n                }\r\n                break;\r\n              case 5:\r\n                drawHand_fist (hand, ctx, this.state.fist_passed);\r\n                fist_dist =((landmarks[8][1] - landmarks[5][1])+\r\n                            (landmarks[12][1] - landmarks[9][1])+\r\n                            (landmarks[16][1] - landmarks[13][1])+\r\n                            (landmarks[20][1] - landmarks[17][1]))/\r\n                            (4*pawn_dist)\r\n                this.setState({fist_array_L:[...this.state.fist_array_L, fist_dist],\r\n                  fist_time_array_L:[...this.state.fist_time_array_L, current_moment],\r\n                });\r\n                if (fist_dist >= 0.0){this.setState({fist_passed:1})}\r\n                if (fist_dist < -0.4 && this.state.fist_passed === 1){\r\n                  this.setState({fist_passed:0,\r\n                    fist_count:[...this.state.fist_count, current_moment]});\r\n                }\r\n                break;\r\n              case 6:\r\n                drawHand_fist (hand, ctx, this.state.fist_passed);\r\n                fist_dist =((landmarks[8][1] - landmarks[5][1])+\r\n                            (landmarks[12][1] - landmarks[9][1])+\r\n                            (landmarks[16][1] - landmarks[13][1])+\r\n                            (landmarks[20][1] - landmarks[17][1]))/\r\n                            (4*pawn_dist)\r\n                this.setState({fist_array_R:[...this.state.fist_array_R, fist_dist],\r\n                  fist_time_array_R:[...this.state.fist_time_array_R, current_moment],\r\n                });\r\n                if (fist_dist >= 0.0){this.setState({fist_passed:1})}\r\n                if (fist_dist < -0.4 && this.state.fist_passed === 1){\r\n                  this.setState({fist_passed:0,\r\n                    fist_count:[...this.state.fist_count, current_moment]});\r\n                }\r\n                break;\r\n              case 7:\r\n                total_move = 0.0;\r\n                if (this.state.last_hand_L.length > 0){\r\n                  let moved = [];\r\n                  pinky_rest = Math.abs(this.norm(landmarks[0], landmarks[4]) - this.norm(this.state.last_hand_L[0], this.state.last_hand_L[4]))/pawn_dist;\r\n                  ring_rest = Math.abs(this.norm(landmarks[0], landmarks[8]) - this.norm(this.state.last_hand_L[0], this.state.last_hand_L[8]))/pawn_dist;\r\n                  middle_rest = Math.abs(this.norm(landmarks[0], landmarks[12]) - this.norm(this.state.last_hand_L[0], this.state.last_hand_L[12]))/pawn_dist;\r\n                  index_rest = Math.abs(this.norm(landmarks[0], landmarks[16]) - this.norm(this.state.last_hand_L[0], this.state.last_hand_L[16]))/pawn_dist;\r\n                  thumb_rest = Math.abs(this.norm(landmarks[0], landmarks[20]) - this.norm(this.state.last_hand_L[0], this.state.last_hand_L[20]))/pawn_dist;\r\n                  if (pinky_rest > 0.05) moved = [...moved, 4];\r\n                  if (ring_rest > 0.05) moved = [...moved, 8];\r\n                  if (middle_rest > 0.05) moved = [...moved, 12];\r\n                  if (index_rest > 0.05) moved = [...moved, 16];\r\n                  if (thumb_rest > 0.05) moved = [...moved, 20];\r\n                  total_move += pinky_rest+ring_rest+middle_rest+index_rest+thumb_rest;\r\n                  drawHand_still (hand, ctx, moved);\r\n                }\r\n                else{\r\n                  this.setState({last_hand_L: landmarks});\r\n                }\r\n                this.setState({still_array_L:[...this.state.still_array_L, total_move],\r\n                  still_time_array_L:[...this.state.still_time_array_L, current_moment],\r\n                });\r\n                break;\r\n              case 8:\r\n                total_move = 0.0;\r\n                if (this.state.last_hand_R.length > 0){\r\n                  let moved = [];\r\n                  pinky_rest = Math.abs(this.norm(landmarks[0], landmarks[4]) - this.norm(this.state.last_hand_R[0], this.state.last_hand_R[4]))/pawn_dist;\r\n                  ring_rest = Math.abs(this.norm(landmarks[0], landmarks[8]) - this.norm(this.state.last_hand_R[0], this.state.last_hand_R[8]))/pawn_dist;\r\n                  middle_rest = Math.abs(this.norm(landmarks[0], landmarks[12]) - this.norm(this.state.last_hand_R[0], this.state.last_hand_R[12]))/pawn_dist;\r\n                  index_rest = Math.abs(this.norm(landmarks[0], landmarks[16]) - this.norm(this.state.last_hand_R[0], this.state.last_hand_R[16]))/pawn_dist;\r\n                  thumb_rest = Math.abs(this.norm(landmarks[0], landmarks[20]) - this.norm(this.state.last_hand_R[0], this.state.last_hand_R[20]))/pawn_dist;\r\n                  if (pinky_rest > 0.05) moved = [...moved, 4];\r\n                  if (ring_rest > 0.05) moved = [...moved, 8];\r\n                  if (middle_rest > 0.05) moved = [...moved, 12];\r\n                  if (index_rest > 0.05) moved = [...moved, 16];\r\n                  if (thumb_rest > 0.05) moved = [...moved, 20];\r\n                  total_move += pinky_rest+ring_rest+middle_rest+index_rest+thumb_rest;\r\n                  drawHand_still (hand, ctx, moved);\r\n                }\r\n                else{\r\n                  this.setState({last_hand_R: landmarks});\r\n                }\r\n                this.setState({still_array_R:[...this.state.still_array_R, total_move],\r\n                  still_time_array_R:[...this.state.still_time_array_R, current_moment],\r\n                });\r\n                break;\r\n              default:\r\n                console.log(\"Should Not Print\");\r\n                break;\r\n            }\r\n          });\r\n        }\r\n        else {\r\n          // Warning message for hand off screen\r\n          if (this.state.dead_frame > 9) writeText(ctx, { text: 'Hand Off Screen', x: 180, y: 70 });\r\n          this.setState({dead_frame: this.state.dead_frame + 1});\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  async next_step(){\r\n    if (this.state.stage !== 8)\r\n      this.setState({stage:this.state.stage + 1,\r\n        wait:true});\r\n    else{\r\n      clearInterval(this.state.ID);\r\n      this.setState({real_time_inferencing:false,\r\n        recording:false,\r\n        stage:0});\r\n      this.compose_chart();\r\n      const ctx = this.canvasRef.current.getContext(\"2d\");\r\n      ctx.clearRect(0,0, this.canvasRef.current.width, this.canvasRef.current.height);\r\n    }\r\n  }\r\n\r\n  async stop_tapping() {\r\n    this.setState({finger_done:true});\r\n    this.setState({wait:true});\r\n  }\r\n\r\n  async stop_rotating() {\r\n    this.setState({rotate_done:true});\r\n    this.setState({wait:true});\r\n  }\r\n\r\n  async stop_gripping() {\r\n    this.setState({fist_done:true});\r\n    this.setState({wait:true});\r\n  }\r\n\r\n  stop_real_time_inference() {\r\n    clearInterval(this.state.ID);\r\n    this.setState({real_time_inferencing:false,\r\n                   finger_done:false,\r\n                   rotate_done:false,\r\n                   fist_done:false});\r\n    this.compose_chart();\r\n    const ctx = this.canvasRef.current.getContext(\"2d\");\r\n    ctx.clearRect(0,0, this.canvasRef.current.width, this.canvasRef.current.height);\r\n  }\r\n\r\n  async record_video(){\r\n    this.setState({startAt:Date.now()});\r\n    console.log(\"Handpose model loaded.\");\r\n    const Interval_ID = setInterval(() => {\r\n      this.concat_frame();\r\n    }, this.capture_interval);\r\n    this.setState({ID:Interval_ID,\r\n      recording:true,\r\n      wait:true,\r\n      stage:this.state.stage + 1});\r\n  }\r\n\r\n  async concat_frame() {\r\n    if (this.state.wait){\r\n      this.setState({wait_till:Date.now()+3000,\r\n        wait:false});\r\n    }\r\n    if (\r\n      typeof this.webcamRef.current !== \"undefined\" &&\r\n      this.webcamRef.current !== null &&\r\n      this.webcamRef.current.video.readyState === 4\r\n    ) {\r\n      if (Date.now() < this.state.wait_till){\r\n        //console.log(\"Waiting till \", this.state.wait_till);\r\n        //count down 3, 2, 1\r\n        const ctx = this.canvasRef.current.getContext(\"2d\");\r\n        if (this.state.wait_till - Date.now() < 250) ctx.clearRect(0,0, this.canvasRef.current.width, this.canvasRef.current.height);\r\n        else if (this.state.wait_till - Date.now() < 1000) writeText(ctx, { text: '1', x: 180, y: 70 });\r\n        else if (this.state.wait_till - Date.now() < 2000) writeText(ctx, { text: '2', x: 140, y: 70 });\r\n        else if (this.state.wait_till - Date.now() < 3000) writeText(ctx, { text: '3', x: 100, y: 70 });\r\n      }\r\n      else {\r\n        let current_moment = (Date.now() - this.state.startAt)/1000;\r\n        const image = this.webcamRef.current.getScreenshot();      \r\n        var img = document.createElement(\"img\");\r\n        img.src = image;\r\n        img.onload = function(){\r\n          if (this.state.finger_done === false){\r\n            this.setState({dist_record:[...this.state.dist_record, img],\r\n              dist_time_record:[...this.state.dist_time_record, current_moment]});\r\n          }\r\n\r\n          else if (this.state.finger_done === true && this.state.rotate_done === false){\r\n            this.setState({rotate_record:[...this.state.rotate_record, img],\r\n              rotate_time_record:[...this.state.rotate_time_record, current_moment]});\r\n          }\r\n\r\n          else if (this.state.rotate_done === true && this.state.fist_done === false){\r\n            this.setState({fist_record:[...this.state.fist_record, img],\r\n              fist_time_record:[...this.state.fist_time_record, current_moment]});\r\n          }\r\n\r\n          if (this.state.fist_done === true ){\r\n            this.setState({still_record:[...this.state.still_record, img],\r\n              still_time_record:[...this.state.still_time_record, current_moment]});\r\n          }\r\n        }.bind(this)\r\n      }\r\n    }\r\n  }\r\n\r\n  async inference() {\r\n    require('@tensorflow/tfjs-backend-webgl');\r\n    const net = await handpose.load();\r\n    console.log(\"Handpose model loaded.\");\r\n\r\n    // Run prediction on recorded tapping data\r\n    for (let i = 0; i<this.state.dist_record.length; i++){\r\n      const hand = await net.estimateHands(this.state.dist_record[i]);\r\n      if (hand.length > 0){\r\n        hand.forEach((prediction) => { \r\n          // Calculate relative distance\r\n          const landmarks = prediction.landmarks\r\n          let index_dist = this.norm(landmarks[4], landmarks[8]);\r\n          let pawn_dist = this.norm(landmarks[0], landmarks[2]);\r\n          let current_dist = index_dist/pawn_dist;\r\n\r\n          // Record distance\r\n          this.setState({dist_array:[...this.state.dist_array, current_dist],\r\n            dist_time_array:[...this.state.dist_time_array, this.state.dist_time_record[i]],\r\n            hand_dist_array:[...this.state.hand_dist_array, hand]});\r\n          \r\n          // Perform counting\r\n          if (this.state.index_passed === 0 && (current_dist - this.state.min_dist) > 0.05){\r\n            this.setState({index_passed:1,\r\n              max_dist: current_dist});\r\n          }\r\n          if (this.state.index_passed === 1 && current_dist > this.state.max_dist){\r\n            this.setState({max_dist: current_dist});\r\n          }\r\n          if (this.state.index_passed === 1 && (this.state.max_dist - current_dist) > 0.05){\r\n            this.setState({index_passed:0,\r\n              min_dist: current_dist,\r\n              tap_count:[...this.state.tap_count, this.state.dist_time_record[i]]});\r\n          }\r\n          if (this.state.index_passed === 0 && current_dist < this.state.min_dist){\r\n            this.setState({min_dist: current_dist});\r\n          }\r\n          //console.log(\"INDEX COUNT:\", this.state.tap_count);\r\n        });\r\n      }\r\n    }\r\n\r\n    // Run prediction on recorded rotation data\r\n    for (let i = 0; i<this.state.rotate_record.length; i++){\r\n      const hand = await net.estimateHands(this.state.rotate_record[i]);\r\n      if (hand.length > 0){\r\n        hand.forEach((prediction) => {\r\n          const landmarks = prediction.landmarks\r\n          let pawn_dist = this.norm(landmarks[0], landmarks[12]);\r\n          let rotate_dist = (landmarks[2][0] - landmarks[17][0]) / pawn_dist;\r\n          //this.setState({pawn_rotate_array:[...this.state.pawn_rotate_array, pawn_dist]});\r\n          this.setState({rotate_array:[...this.state.rotate_array, rotate_dist],\r\n            rotate_time_array:[...this.state.rotate_time_array, this.state.rotate_time_record[i]],\r\n            hand_rotate_array:[...this.state.hand_rotate_array, hand]});\r\n          if (this.state.rotate_passed === 0){\r\n            if (rotate_dist >= 0.2) this.setState({rotate_passed:1});\r\n            if (rotate_dist <= -0.2) this.setState({rotate_passed:-1});\r\n          }\r\n          if (this.state.rotate_passed === 1 && rotate_dist <= -0.2){\r\n            this.setState({rotate_passed:-1});\r\n          }\r\n          if (this.state.rotate_passed === -1 && rotate_dist >= 0.2){\r\n            this.setState({rotate_passed:1, \r\n              rotate_count:[...this.state.rotate_count, this.state.rotate_time_record[i]]});\r\n          }\r\n          //console.log(\"ROTATE COUNT:\", this.state.rotate_count);\r\n        });\r\n      }\r\n    }\r\n\r\n    // Run prediction on recorded gripping data\r\n    for (let i = 0; i<this.state.fist_record.length; i++){\r\n      const hand = await net.estimateHands(this.state.fist_record[i]);\r\n      if (hand.length > 0){\r\n        hand.forEach((prediction) => {\r\n          const landmarks = prediction.landmarks\r\n          let pawn_dist = this.norm(landmarks[0], landmarks[2]);\r\n          let fist_dist =  ((landmarks[8][1] - landmarks[5][1])+\r\n            (landmarks[12][1] - landmarks[9][1])+\r\n            (landmarks[16][1] - landmarks[13][1])+\r\n            (landmarks[20][1] - landmarks[17][1]))/\r\n            (4*pawn_dist)\r\n          //this.setState({pawn_fist_array:[...this.state.pawn_fist_array, pawn_dist]});\r\n          this.setState({fist_array:[...this.state.fist_array, fist_dist],\r\n            fist_time_array:[...this.state.fist_time_array, this.state.fist_time_record[i]],\r\n            hand_fist_array:[...this.state.hand_fist_array, hand]});\r\n          if (fist_dist >= 0.0){this.setState({fist_passed:1})}\r\n          if (fist_dist < -0.4 && this.state.fist_passed === 1){\r\n            this.setState({fist_passed:0});\r\n            this.setState({fist_count:[...this.state.fist_count, this.state.fist_time_record[i]]});\r\n          }\r\n          //console.log(\"FIST COUNT:\", this.state.fist_count);\r\n        });\r\n      }\r\n    }\r\n\r\n    // Run prediction on recorded postural data\r\n    for (let i = 0; i<this.state.still_record.length; i++){\r\n      const hand = await net.estimateHands(this.state.still_record[i]);\r\n      if (hand.length > 0){\r\n        hand.forEach((prediction) => {\r\n          const landmarks = prediction.landmarks\r\n          let pawn_dist = this.norm(landmarks[0], landmarks[2]);\r\n          let total_move;\r\n          let i;\r\n          let moved = [];\r\n          if (this.state.last_hand.length > 0){\r\n            total_move = 0.0;\r\n            for (i = 0; i < 21; i++){\r\n              let move_dist = this.norm(landmarks[i], this.state.last_hand[i]) / pawn_dist;\r\n              total_move += move_dist;\r\n              if ( move_dist > 0.1){\r\n                moved = [...moved, i];\r\n              }\r\n            }\r\n          }\r\n          //console.log(\"TOTAL MOVED:\", total_move);\r\n          //this.setState({pawn_fist_array:[...this.state.pawn_fist_array, pawn_dist]});\r\n          this.setState({still_array:[...this.state.still_array, total_move],\r\n            still_time_array:[...this.state.still_time_array, this.state.still_time_record[i]],\r\n            hand_still_array:[...this.state.hand_still_array, hand],\r\n            last_hand: landmarks,\r\n          });\r\n        });\r\n      }\r\n    }\r\n\r\n    this.setState({record:[]});\r\n  }\r\n\r\n  async stop_record() {\r\n    clearInterval(this.state.ID);\r\n    await this.inference();\r\n    this.setState({recording:false,\r\n      finger_done:false,\r\n      rotate_done:false,\r\n      fist_done:false});\r\n    this.compose_chart();\r\n  }\r\n\r\n  exportToJson = (objectData, filename) => {\r\n    let contentType = \"application/json;charset=utf-8;\";\r\n    if (window.navigator && window.navigator.msSaveOrOpenBlob) {\r\n      var blob = new Blob([decodeURIComponent(encodeURI(JSON.stringify(objectData)))], { type: contentType });\r\n      navigator.msSaveOrOpenBlob(blob, filename);\r\n    } else {\r\n      var a = document.createElement('a');\r\n      a.download = filename;\r\n      a.href = 'data:' + contentType + ',' + encodeURIComponent(JSON.stringify(objectData));\r\n      a.target = '_blank';\r\n      document.body.appendChild(a);\r\n      a.click();\r\n      document.body.removeChild(a);\r\n    }\r\n  }\r\n \r\n  getArray = () => {\r\n    let dict = {\r\n      tap_count : this.state.tap_count,\r\n      rotate_count : this.state.rotate_count,\r\n      fist_count : this.state.fist_count,\r\n      dist_array : this.state.dist_array,\r\n      dist_time_array : this.state.dist_time_array,\r\n      dist_record : this.state.dist_record,\r\n      dist_time_record : this.state.dist_time_record,\r\n      rotate_array : this.state.rotate_array,\r\n      rotate_time_array : this.state.rotate_time_array,\r\n      rotate_record : this.state.rotate_record,\r\n      rotate_time_record : this.state.rotate_time_record,\r\n      fist_array : this.state.fist_array,\r\n      fist_time_array : this.state.fist_time_array,\r\n      fist_record : this.state.fist_record,\r\n      fist_time_record : this.state.fist_time_record,\r\n      still_array : this.state.still_array,\r\n      still_time_array : this.state.still_time_array,\r\n      still_record : this.state.still_record,\r\n      still_time_record : this.state.still_time_record,\r\n      startAt: this.state.startAt,\r\n      avg_fps: this.state.avg_fps,\r\n      hand_dist_array : this.state.hand_dist_array,\r\n      hand_rotate_array : this.state.hand_rotate_array,\r\n      hand_fist_array : this.state.hand_fist_array,\r\n      hand_still_array : this.state.hand_still_array,\r\n    }\r\n    this.exportToJson(dict, \"state\");\r\n  }\r\n\r\n  render(){\r\n    const videoConstraints = {\r\n      facingMode: this.state.facingMode\r\n    };\r\n    let button_1 = null;\r\n    let button_2 = null;\r\n    switch(this.state.stage){\r\n      case 1:\r\n        button_1 = <Button disabled={this.state.recording} variant=\"contained\" color=\"primary\"  onClick={this.next_step}>Finish Finger Tapping Left (Real Time)</Button>;\r\n        button_2 = <Button disabled={this.state.real_time_inferencing} variant=\"contained\" color=\"secondary\" onClick={this.next_step}>Finish Finger Tapping Left (Record)</Button>;\r\n        break;\r\n      case 2:\r\n        button_1 = <Button disabled={this.state.recording} variant=\"contained\" color=\"primary\"  onClick={this.next_step}>Finish Finger Tapping Right (Real Time)</Button>;\r\n        button_2 = <Button disabled={this.state.real_time_inferencing} variant=\"contained\" color=\"secondary\" onClick={this.next_step}>Finish Finger Tapping Right (Record)</Button>;\r\n        break;\r\n      case 3:\r\n        button_1 = <Button disabled={this.state.recording} variant=\"contained\" color=\"primary\"  onClick={this.next_step}>Finish Rotation Left (Real Time)</Button>;\r\n        button_2 = <Button disabled={this.state.real_time_inferencing} variant=\"contained\" color=\"secondary\" onClick={this.next_step}>Finish Rotation Left (Record)</Button>;\r\n        break;\r\n      case 4:\r\n        button_1 = <Button disabled={this.state.recording} variant=\"contained\" color=\"primary\"  onClick={this.next_step}>Finish Rotation Right (Real Time)</Button>;\r\n        button_2 = <Button disabled={this.state.real_time_inferencing} variant=\"contained\" color=\"secondary\" onClick={this.next_step}>Finish Rotation Right (Record)</Button>;\r\n        break;\r\n      case 5:\r\n        button_1 = <Button disabled={this.state.recording} variant=\"contained\" color=\"primary\"  onClick={this.next_step}>Finish Gripping Left (Real Time)</Button>;\r\n        button_2 = <Button disabled={this.state.real_time_inferencing} variant=\"contained\" color=\"secondary\" onClick={this.next_step}>Finish Gripping Left (Record)</Button>;\r\n        break;\r\n      case 6:\r\n        button_1 = <Button disabled={this.state.recording} variant=\"contained\" color=\"primary\"  onClick={this.next_step}>Finish Gripping Right (Real Time)</Button>;\r\n        button_2 = <Button disabled={this.state.real_time_inferencing} variant=\"contained\" color=\"secondary\" onClick={this.next_step}>Finish Gripping Right (Record)</Button>;\r\n        break;\r\n      case 7:\r\n        button_1 = <Button disabled={this.state.recording} variant=\"contained\" color=\"primary\"  onClick={this.next_step}>Finish Resting Left (Real Time)</Button>;\r\n        button_2 = <Button disabled={this.state.real_time_inferencing} variant=\"contained\" color=\"secondary\" onClick={this.next_step}>Finish Resting Left (Record)</Button>;\r\n        break;\r\n      case 8:\r\n        button_1 = <Button disabled={this.state.recording} variant=\"contained\" color=\"primary\"  onClick={this.next_step}>Finish Resting Right (Real Time)</Button>;\r\n        button_2 = <Button disabled={this.state.real_time_inferencing} variant=\"contained\" color=\"secondary\" onClick={this.next_step}>Finish Resting Right (Record)</Button>;\r\n        break;\r\n      default:\r\n        button_1 = <Button disabled={this.state.recording} variant=\"contained\" color=\"primary\"  onClick={this.runHandpose}>Start Test (Real Time)</Button>;\r\n        button_2 = <Button disabled={this.state.real_time_inferencing} variant=\"contained\" color=\"secondary\" onClick={this.record_video}>Start Test (Record)</Button>;\r\n        break;\r\n    }\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n        <Webcam\r\n          ref={this.webcamRef}\r\n          videoConstraints={videoConstraints}\r\n          style={{\r\n            position: \"absolute\",\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            left: 0,\r\n            right: 0,\r\n            textAlign: \"center\",\r\n            zindex: 9,\r\n            width: \"auto\",\r\n            height: \"auto\",\r\n          }}\r\n        />\r\n        <canvas\r\n          ref={this.canvasRef}\r\n          style={{\r\n            position: \"absolute\",\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            left: 0,\r\n            right: 0,\r\n            textAlign: \"center\",\r\n            zindex: 9,\r\n            width: \"auto\",\r\n            height: \"auto\",\r\n          }}\r\n        />\r\n        </header>\r\n          {this.state.button_mode ? (\r\n            <div>\r\n              <button onClick={this.increment_tap1} id=\"button1\">Index Finger</button>\r\n              <button onClick={this.increment_tap2} id=\"button2\">Middle Finger</button>\r\n            </div>\r\n          ) : (\r\n            <div></div>\r\n          )}\r\n\r\n          <div>\r\n            <div>{button_1}</div>\r\n            <div>{button_2}</div>\r\n            <div>\r\n              <Button disabled={this.state.recording||this.state.real_time_inferencing} variant=\"outlined\" color=\"secondary\" onClick={this.reset_counter}>\r\n                Reset All\r\n              </Button>\r\n            </div>\r\n          </div>\r\n          <div>\r\n            <h5>\r\n              Finger Tapping Count:{this.state.tap_count.length}&nbsp;&nbsp;&nbsp;&nbsp;\r\n              Rotate Count:{this.state.rotate_count.length}&nbsp;&nbsp;&nbsp;&nbsp;\r\n              Gripping Count: {this.state.fist_count.length}&nbsp;&nbsp;&nbsp;&nbsp;\r\n              FPS: {this.state.avg_fps}\r\n            </h5>\r\n          </div>\r\n          <div>\r\n            <img src={handline} className=\"handline\" alt='anything'/>\r\n            <small>Enter Vertical Distance (cm)</small>\r\n            <input type=\"number\" id=\"real_measurement_v\" onChange={this.compose_chart} step=\"0.001\" min='0' max='20'></input>\r\n            <small>Enter Horizontal Distance (cm)</small>\r\n            <input type=\"number\" id=\"real_measurement_h\" onChange={this.compose_chart} step=\"0.001\" min='0' max='20'></input>\r\n            <button disabled={!this.state.chart_ready} onClick={this.switch_style}>Switch Chart Style</button>\r\n            <button onClick={this.switch_cam}>Switch Camera</button>\r\n          </div>\r\n          <div>\r\n            <small>Experimental Features</small>\r\n            <button disabled={this.state.recording||this.state.real_time_inferencing} onClick={this.runPosenet}>PoseNet</button>\r\n            <button disabled={this.state.recording||this.state.real_time_inferencing} onClick={this.runFacemesh}>Facemesh</button>\r\n            <button disabled={this.state.recording||this.state.real_time_inferencing} onClick={this.switch_button}>Switch On/Off Button</button>\r\n          </div>\r\n          <div>\r\n            {this.state.chart_ready ? (\r\n              <div>\r\n                <Line data={this.state.chart_data1_L} />\r\n                <Line data={this.state.chart_data1_R} />\r\n                <Line data={this.state.chart_data2_L} />\r\n                <Line data={this.state.chart_data2_R} />\r\n                <Line data={this.state.chart_data3_L} />\r\n                <Line data={this.state.chart_data3_R} />\r\n                <Line data={this.state.chart_data4_L} />\r\n                <Line data={this.state.chart_data4_R} />\r\n              </div>\r\n            ) : (\r\n              <div/>\r\n            )}\r\n            <div>\r\n              <input type=\"file\" id=\"upload-json\"></input>\r\n            </div>\r\n            <div>\r\n              <input type=\"file\" id=\"upload-weights\"></input>\r\n            </div>\r\n            <button onClick={this.getArray}>Get Array</button>\r\n          </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}