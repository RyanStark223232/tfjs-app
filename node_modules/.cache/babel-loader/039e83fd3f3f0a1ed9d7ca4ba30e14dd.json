{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2017 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class GatherProgram {\n  constructor(aShape, indicesLength, axis) {\n    this.variableNames = ['A', 'indices'];\n    const outputShape = aShape.slice();\n    outputShape[axis] = indicesLength;\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const sourceCoords = getSourceCoords(aShape, axis);\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        setOutput(getA(${sourceCoords}));\n      }\n    `;\n  }\n\n}\n\nfunction getSourceCoords(aShape, axis) {\n  const rank = aShape.length;\n\n  if (rank > 4) {\n    throw Error(`Gather for rank ${rank} is not yet supported`);\n  }\n\n  if (rank === 1) {\n    return `int(getIndices(resRC))`;\n  }\n\n  const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n  const sourceCoords = [];\n\n  for (let i = 0; i < aShape.length; i++) {\n    if (i === axis) {\n      sourceCoords.push(`int(getIndices(${currentCoords[i]}))`);\n    } else {\n      sourceCoords.push(`${currentCoords[i]}`);\n    }\n  }\n\n  return sourceCoords.join();\n}","map":{"version":3,"sources":["../src/gather_gpu.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAGH,SAAQ,iBAAR,QAAgC,mBAAhC;AAEA,OAAM,MAAO,aAAP,CAAoB;AAMxB,EAAA,WAAA,CAAY,MAAZ,EAA8B,aAA9B,EAAqD,IAArD,EAAiE;AALjE,SAAA,aAAA,GAAgB,CAAC,GAAD,EAAM,SAAN,CAAhB;AAME,UAAM,WAAW,GAAa,MAAM,CAAC,KAAP,EAA9B;AACA,IAAA,WAAW,CAAC,IAAD,CAAX,GAAoB,aAApB;AACA,SAAK,WAAL,GAAmB,WAAnB;AACA,SAAK,IAAL,GAAY,WAAW,CAAC,MAAxB;AACA,UAAM,KAAK,GAAG,iBAAiB,CAAC,KAAK,IAAN,CAA/B;AACA,UAAM,YAAY,GAAG,eAAe,CAAC,MAAD,EAAS,IAAT,CAApC;AAEA,SAAK,QAAL,GAAgB;;UAEV,KAAK;yBACU,YAAY;;AAEhC,KALD;AAMD;;AApBuB;;AAuB1B,SAAS,eAAT,CAAyB,MAAzB,EAA2C,IAA3C,EAAuD;AACrD,QAAM,IAAI,GAAG,MAAM,CAAC,MAApB;;AACA,MAAI,IAAI,GAAG,CAAX,EAAc;AACZ,UAAM,KAAK,CAAC,mBAAmB,IAAI,uBAAxB,CAAX;AACD;;AACD,MAAI,IAAI,KAAK,CAAb,EAAgB;AACd,WAAO,wBAAP;AACD;;AAED,QAAM,aAAa,GAAG,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,SAAlC,CAAtB;AAEA,QAAM,YAAY,GAAG,EAArB;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAAM,CAAC,MAA3B,EAAmC,CAAC,EAApC,EAAwC;AACtC,QAAI,CAAC,KAAK,IAAV,EAAgB;AACd,MAAA,YAAY,CAAC,IAAb,CAAkB,kBAAkB,aAAa,CAAC,CAAD,CAAG,IAApD;AACD,KAFD,MAEO;AACL,MAAA,YAAY,CAAC,IAAb,CAAkB,GAAG,aAAa,CAAC,CAAD,CAAG,EAArC;AACD;AACF;;AACD,SAAO,YAAY,CAAC,IAAb,EAAP;AACD","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2017 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { getCoordsDataType } from './shader_compiler';\r\nexport class GatherProgram {\r\n    constructor(aShape, indicesLength, axis) {\r\n        this.variableNames = ['A', 'indices'];\r\n        const outputShape = aShape.slice();\r\n        outputShape[axis] = indicesLength;\r\n        this.outputShape = outputShape;\r\n        this.rank = outputShape.length;\r\n        const dtype = getCoordsDataType(this.rank);\r\n        const sourceCoords = getSourceCoords(aShape, axis);\r\n        this.userCode = `\r\n      void main() {\r\n        ${dtype} resRC = getOutputCoords();\r\n        setOutput(getA(${sourceCoords}));\r\n      }\r\n    `;\r\n    }\r\n}\r\nfunction getSourceCoords(aShape, axis) {\r\n    const rank = aShape.length;\r\n    if (rank > 4) {\r\n        throw Error(`Gather for rank ${rank} is not yet supported`);\r\n    }\r\n    if (rank === 1) {\r\n        return `int(getIndices(resRC))`;\r\n    }\r\n    const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\r\n    const sourceCoords = [];\r\n    for (let i = 0; i < aShape.length; i++) {\r\n        if (i === axis) {\r\n            sourceCoords.push(`int(getIndices(${currentCoords[i]}))`);\r\n        }\r\n        else {\r\n            sourceCoords.push(`${currentCoords[i]}`);\r\n        }\r\n    }\r\n    return sourceCoords.join();\r\n}\r\n//# sourceMappingURL=gather_gpu.js.map"]},"metadata":{},"sourceType":"module"}