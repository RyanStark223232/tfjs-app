{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2017 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport * as util from '../util';\nexport function assertParamsConsistent(shapes, axis) {\n  var rank = shapes[0].length;\n  shapes.forEach(function (shape, i) {\n    util.assert(shape.length === rank, function () {\n      return \"Error in concat\".concat(rank, \"D: rank of tensors[\").concat(i, \"] must be the same \") + \"as the rank of the rest (\".concat(rank, \")\");\n    });\n  });\n  util.assert(axis >= 0 && axis < rank, function () {\n    return \"Error in concat\".concat(rank, \"D: axis must be between 0 and \").concat(rank - 1, \".\");\n  });\n  var firstShape = shapes[0];\n  shapes.forEach(function (shape, i) {\n    for (var r = 0; r < rank; r++) {\n      util.assert(r === axis || shape[r] === firstShape[r], function () {\n        return \"Error in concat\".concat(rank, \"D: Shape of tensors[\").concat(i, \"] (\").concat(shape, \") \") + \"does not match the shape of the rest (\".concat(firstShape, \") \") + \"along the non-concatenated axis \".concat(i, \".\");\n      });\n    }\n  });\n}\nexport function computeOutShape(shapes, axis) {\n  var outputShape = shapes[0].slice();\n\n  for (var i = 1; i < shapes.length; i++) {\n    outputShape[axis] += shapes[i][axis];\n  }\n\n  return outputShape;\n}","map":{"version":3,"sources":["../../src/ops/concat_util.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,OAAO,KAAK,IAAZ,MAAsB,SAAtB;AAEA,OAAM,SAAU,sBAAV,CAAiC,MAAjC,EAAqD,IAArD,EAAiE;AACrE,MAAM,IAAI,GAAG,MAAM,CAAC,CAAD,CAAN,CAAU,MAAvB;AACA,EAAA,MAAM,CAAC,OAAP,CAAe,UAAC,KAAD,EAAQ,CAAR,EAAa;AAC1B,IAAA,IAAI,CAAC,MAAL,CACI,KAAK,CAAC,MAAN,KAAiB,IADrB,EAEI;AAAA,aACI,yBAAkB,IAAlB,gCAA4C,CAA5C,8DAC4B,IAD5B,MADJ;AAAA,KAFJ;AAKD,GAND;AAQA,EAAA,IAAI,CAAC,MAAL,CACI,IAAI,IAAI,CAAR,IAAa,IAAI,GAAG,IADxB,EAEI;AAAA,oCAAwB,IAAxB,2CAA6D,IAAI,GAAG,CAApE;AAAA,GAFJ;AAIA,MAAM,UAAU,GAAG,MAAM,CAAC,CAAD,CAAzB;AACA,EAAA,MAAM,CAAC,OAAP,CAAe,UAAC,KAAD,EAAQ,CAAR,EAAa;AAC1B,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,IAApB,EAA0B,CAAC,EAA3B,EAA+B;AAC7B,MAAA,IAAI,CAAC,MAAL,CACK,CAAC,KAAK,IAAP,IAAiB,KAAK,CAAC,CAAD,CAAL,KAAa,UAAU,CAAC,CAAD,CAD5C,EAEI;AAAA,eAAM,yBAAkB,IAAlB,iCAA6C,CAA7C,gBAAoD,KAApD,0DACuC,UADvC,oDAEiC,CAFjC,MAAN;AAAA,OAFJ;AAKD;AACF,GARD;AASD;AAED,OAAM,SAAU,eAAV,CAA0B,MAA1B,EAA8C,IAA9C,EAA0D;AAC9D,MAAM,WAAW,GAAG,MAAM,CAAC,CAAD,CAAN,CAAU,KAAV,EAApB;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAAM,CAAC,MAA3B,EAAmC,CAAC,EAApC,EAAwC;AACtC,IAAA,WAAW,CAAC,IAAD,CAAX,IAAqB,MAAM,CAAC,CAAD,CAAN,CAAU,IAAV,CAArB;AACD;;AACD,SAAO,WAAP;AACD","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2017 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport * as util from '../util';\r\nexport function assertParamsConsistent(shapes, axis) {\r\n    const rank = shapes[0].length;\r\n    shapes.forEach((shape, i) => {\r\n        util.assert(shape.length === rank, () => `Error in concat${rank}D: rank of tensors[${i}] must be the same ` +\r\n            `as the rank of the rest (${rank})`);\r\n    });\r\n    util.assert(axis >= 0 && axis < rank, () => `Error in concat${rank}D: axis must be between 0 and ${rank - 1}.`);\r\n    const firstShape = shapes[0];\r\n    shapes.forEach((shape, i) => {\r\n        for (let r = 0; r < rank; r++) {\r\n            util.assert((r === axis) || (shape[r] === firstShape[r]), () => `Error in concat${rank}D: Shape of tensors[${i}] (${shape}) ` +\r\n                `does not match the shape of the rest (${firstShape}) ` +\r\n                `along the non-concatenated axis ${i}.`);\r\n        }\r\n    });\r\n}\r\nexport function computeOutShape(shapes, axis) {\r\n    const outputShape = shapes[0].slice();\r\n    for (let i = 1; i < shapes.length; i++) {\r\n        outputShape[axis] += shapes[i][axis];\r\n    }\r\n    return outputShape;\r\n}\r\n//# sourceMappingURL=concat_util.js.map"]},"metadata":{},"sourceType":"module"}