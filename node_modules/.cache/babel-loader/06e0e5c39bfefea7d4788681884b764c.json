{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\nimport { reverse } from './reverse';\n/**\r\n * Reverses a `tf.Tensor2D` along a specified axis.\r\n *\r\n * @param x The input tensor.\r\n * @param axis The set of dimensions to reverse. Must be in the\r\n *     range [-rank(x), rank(x)). Defaults to all axes.\r\n */\n\nfunction reverse2d_(x, axis) {\n  var $x = convertToTensor(x, 'x', 'reverse');\n  util.assert($x.rank === 2, function () {\n    return \"Error in reverse2D: x must be rank 2 but got rank \".concat($x.rank, \".\");\n  });\n  return reverse($x, axis);\n}\n\nexport var reverse2d = op({\n  reverse2d_: reverse2d_\n});","map":{"version":3,"sources":["../../src/ops/reverse_2d.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAGH,SAAQ,eAAR,QAA8B,oBAA9B;AAEA,OAAO,KAAK,IAAZ,MAAsB,SAAtB;AACA,SAAQ,EAAR,QAAiB,aAAjB;AACA,SAAQ,OAAR,QAAsB,WAAtB;AAEA;;;;;;AAMG;;AACH,SAAS,UAAT,CAAoB,CAApB,EAA4C,IAA5C,EAAkE;AAChE,MAAM,EAAE,GAAG,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,SAAT,CAA1B;AACA,EAAA,IAAI,CAAC,MAAL,CACI,EAAE,CAAC,IAAH,KAAY,CADhB,EAEI;AAAA,uEAA2D,EAAE,CAAC,IAA9D;AAAA,GAFJ;AAGA,SAAO,OAAO,CAAC,EAAD,EAAK,IAAL,CAAd;AACD;;AAED,OAAO,IAAM,SAAS,GAAG,EAAE,CAAC;AAAC,EAAA,UAAU,EAAV;AAAD,CAAD,CAApB","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { convertToTensor } from '../tensor_util_env';\r\nimport * as util from '../util';\r\nimport { op } from './operation';\r\nimport { reverse } from './reverse';\r\n/**\r\n * Reverses a `tf.Tensor2D` along a specified axis.\r\n *\r\n * @param x The input tensor.\r\n * @param axis The set of dimensions to reverse. Must be in the\r\n *     range [-rank(x), rank(x)). Defaults to all axes.\r\n */\r\nfunction reverse2d_(x, axis) {\r\n    const $x = convertToTensor(x, 'x', 'reverse');\r\n    util.assert($x.rank === 2, () => `Error in reverse2D: x must be rank 2 but got rank ${$x.rank}.`);\r\n    return reverse($x, axis);\r\n}\r\nexport const reverse2d = op({ reverse2d_ });\r\n//# sourceMappingURL=reverse_2d.js.map"]},"metadata":{},"sourceType":"module"}