{"ast":null,"code":"import _slicedToArray from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { Pow } from '../kernel_names';\nimport * as broadcast_util from '../ops/broadcast_util';\nimport { cast } from '../ops/cast';\nimport { greater } from '../ops/greater';\nimport { log } from '../ops/log';\nimport { mul } from '../ops/mul';\nimport { pow } from '../ops/pow';\nimport { reshape } from '../ops/reshape';\nimport { scalar } from '../ops/scalar';\nimport { sub } from '../ops/sub';\nimport { sum } from '../ops/sum';\nimport { where } from '../ops/where';\nimport { zerosLike } from '../ops/zeros_like';\nexport var powGradConfig = {\n  kernelName: Pow,\n  inputsToSave: ['a', 'b'],\n  outputsToSave: [true],\n  gradFunc: function gradFunc(dy, saved) {\n    var _saved = _slicedToArray(saved, 3),\n        a = _saved[0],\n        b = _saved[1],\n        y = _saved[2];\n\n    var base = a;\n    var exp = b;\n    var outShape = broadcast_util.assertAndGetBroadcastShape(base.shape, exp.shape);\n\n    var derBase = function derBase() {\n      var expFloat = cast(exp, 'float32');\n      var res = mul(dy, mul(expFloat, pow(base, sub(expFloat, scalar(1)))));\n      var reduceAxes = broadcast_util.getReductionAxes(base.shape, outShape);\n\n      if (reduceAxes.length > 0) {\n        res = sum(res, reduceAxes);\n      }\n\n      return reshape(res, base.shape);\n    };\n\n    var derExp = function derExp() {\n      var condition = greater(base, 0);\n      var logBase = where(condition, log(base), zerosLike(base));\n      var res = mul(dy, mul(y, logBase));\n      var reduceAxes = broadcast_util.getReductionAxes(exp.shape, outShape);\n\n      if (reduceAxes.length > 0) {\n        res = sum(res, reduceAxes);\n      }\n\n      return reshape(res, exp.shape);\n    };\n\n    return {\n      a: derBase,\n      b: derExp\n    };\n  }\n};","map":{"version":3,"sources":["../../src/gradients/Pow_grad.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AACH,SAAQ,GAAR,QAAkB,iBAAlB;AAEA,OAAO,KAAK,cAAZ,MAAgC,uBAAhC;AACA,SAAQ,IAAR,QAAmB,aAAnB;AACA,SAAQ,OAAR,QAAsB,gBAAtB;AACA,SAAQ,GAAR,QAAkB,YAAlB;AACA,SAAQ,GAAR,QAAkB,YAAlB;AACA,SAAQ,GAAR,QAAkB,YAAlB;AACA,SAAQ,OAAR,QAAsB,gBAAtB;AACA,SAAQ,MAAR,QAAqB,eAArB;AACA,SAAQ,GAAR,QAAkB,YAAlB;AACA,SAAQ,GAAR,QAAkB,YAAlB;AACA,SAAQ,KAAR,QAAoB,cAApB;AACA,SAAQ,SAAR,QAAwB,mBAAxB;AAGA,OAAO,IAAM,aAAa,GAAe;AACvC,EAAA,UAAU,EAAE,GAD2B;AAEvC,EAAA,YAAY,EAAE,CAAC,GAAD,EAAM,GAAN,CAFyB;AAGvC,EAAA,aAAa,EAAE,CAAC,IAAD,CAHwB;AAIvC,EAAA,QAAQ,EAAE,kBAAC,EAAD,EAAa,KAAb,EAAgC;AAAA,gCACtB,KADsB;AAAA,QACjC,CADiC;AAAA,QAC9B,CAD8B;AAAA,QAC3B,CAD2B;;AAExC,QAAM,IAAI,GAAG,CAAb;AACA,QAAM,GAAG,GAAG,CAAZ;AACA,QAAM,QAAQ,GACV,cAAc,CAAC,0BAAf,CAA0C,IAAI,CAAC,KAA/C,EAAsD,GAAG,CAAC,KAA1D,CADJ;;AAGA,QAAM,OAAO,GAAG,SAAV,OAAU,GAAK;AACnB,UAAM,QAAQ,GAAG,IAAI,CAAC,GAAD,EAAM,SAAN,CAArB;AACA,UAAI,GAAG,GAAG,GAAG,CAAC,EAAD,EAAK,GAAG,CAAC,QAAD,EAAW,GAAG,CAAC,IAAD,EAAO,GAAG,CAAC,QAAD,EAAW,MAAM,CAAC,CAAD,CAAjB,CAAV,CAAd,CAAR,CAAb;AACA,UAAM,UAAU,GAAG,cAAc,CAAC,gBAAf,CAAgC,IAAI,CAAC,KAArC,EAA4C,QAA5C,CAAnB;;AACA,UAAI,UAAU,CAAC,MAAX,GAAoB,CAAxB,EAA2B;AACzB,QAAA,GAAG,GAAG,GAAG,CAAC,GAAD,EAAM,UAAN,CAAT;AACD;;AACD,aAAO,OAAO,CAAC,GAAD,EAAM,IAAI,CAAC,KAAX,CAAd;AACD,KARD;;AASA,QAAM,MAAM,GAAG,SAAT,MAAS,GAAK;AAClB,UAAM,SAAS,GAAG,OAAO,CAAC,IAAD,EAAO,CAAP,CAAzB;AACA,UAAM,OAAO,GAAG,KAAK,CAAC,SAAD,EAAY,GAAG,CAAC,IAAD,CAAf,EAAuB,SAAS,CAAC,IAAD,CAAhC,CAArB;AACA,UAAI,GAAG,GAAG,GAAG,CAAC,EAAD,EAAK,GAAG,CAAC,CAAD,EAAI,OAAJ,CAAR,CAAb;AACA,UAAM,UAAU,GAAG,cAAc,CAAC,gBAAf,CAAgC,GAAG,CAAC,KAApC,EAA2C,QAA3C,CAAnB;;AACA,UAAI,UAAU,CAAC,MAAX,GAAoB,CAAxB,EAA2B;AACzB,QAAA,GAAG,GAAG,GAAG,CAAC,GAAD,EAAM,UAAN,CAAT;AACD;;AACD,aAAO,OAAO,CAAC,GAAD,EAAM,GAAG,CAAC,KAAV,CAAd;AACD,KATD;;AAUA,WAAO;AAAC,MAAA,CAAC,EAAE,OAAJ;AAAa,MAAA,CAAC,EAAE;AAAhB,KAAP;AACD;AA/BsC,CAAlC","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { Pow } from '../kernel_names';\r\nimport * as broadcast_util from '../ops/broadcast_util';\r\nimport { cast } from '../ops/cast';\r\nimport { greater } from '../ops/greater';\r\nimport { log } from '../ops/log';\r\nimport { mul } from '../ops/mul';\r\nimport { pow } from '../ops/pow';\r\nimport { reshape } from '../ops/reshape';\r\nimport { scalar } from '../ops/scalar';\r\nimport { sub } from '../ops/sub';\r\nimport { sum } from '../ops/sum';\r\nimport { where } from '../ops/where';\r\nimport { zerosLike } from '../ops/zeros_like';\r\nexport const powGradConfig = {\r\n    kernelName: Pow,\r\n    inputsToSave: ['a', 'b'],\r\n    outputsToSave: [true],\r\n    gradFunc: (dy, saved) => {\r\n        const [a, b, y] = saved;\r\n        const base = a;\r\n        const exp = b;\r\n        const outShape = broadcast_util.assertAndGetBroadcastShape(base.shape, exp.shape);\r\n        const derBase = () => {\r\n            const expFloat = cast(exp, 'float32');\r\n            let res = mul(dy, mul(expFloat, pow(base, sub(expFloat, scalar(1)))));\r\n            const reduceAxes = broadcast_util.getReductionAxes(base.shape, outShape);\r\n            if (reduceAxes.length > 0) {\r\n                res = sum(res, reduceAxes);\r\n            }\r\n            return reshape(res, base.shape);\r\n        };\r\n        const derExp = () => {\r\n            const condition = greater(base, 0);\r\n            const logBase = where(condition, log(base), zerosLike(base));\r\n            let res = mul(dy, mul(y, logBase));\r\n            const reduceAxes = broadcast_util.getReductionAxes(exp.shape, outShape);\r\n            if (reduceAxes.length > 0) {\r\n                res = sum(res, reduceAxes);\r\n            }\r\n            return reshape(res, exp.shape);\r\n        };\r\n        return { a: derBase, b: derExp };\r\n    }\r\n};\r\n//# sourceMappingURL=Pow_grad.js.map"]},"metadata":{},"sourceType":"module"}