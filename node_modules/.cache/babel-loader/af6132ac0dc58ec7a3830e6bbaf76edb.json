{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { Reshape } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\r\n * Reshapes a `tf.Tensor` to a given shape.\r\n *\r\n * Given an input tensor, returns a new tensor with the same values as the\r\n * input tensor with shape `shape`.\r\n *\r\n * If one component of shape is the special value -1, the size of that\r\n * dimension is computed so that the total size remains constant. In\r\n * particular, a shape of [-1] flattens into 1-D. At most one component of\r\n * shape can be -1.\r\n *\r\n * If shape is 1-D or higher, then the operation returns a tensor with shape\r\n * shape filled with the values of tensor. In this case, the number of\r\n * elements implied by shape must be the same as the number of elements in\r\n * tensor.\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([1, 2, 3, 4]);\r\n * x.reshape([2, 2]).print();\r\n * ```\r\n *\r\n * @param x The input tensor to be reshaped.\r\n * @param shape An array of integers defining the output tensor shape.\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\r\n */\n\nfunction reshape_(x, shape) {\n  const $x = convertToTensor(x, 'x', 'reshape', null);\n  const inputs = {\n    x: $x\n  };\n  const attrs = {\n    shape\n  };\n\n  const forward = (backend, save) => {\n    shape = util.inferFromImplicitShape(shape, $x.size);\n    util.assert($x.size === util.sizeFromShape(shape), () => 'new shape and old shape must have the same number of elements.');\n    save([$x]);\n    return backend.reshape($x, shape);\n  };\n\n  return ENGINE.runKernelFunc(forward, inputs, null\n  /* grad */\n  , Reshape, attrs);\n}\n\nexport const reshape = op({\n  reshape_\n});","map":{"version":3,"sources":["../../src/ops/reshape.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAGH,SAAQ,MAAR,QAAkC,WAAlC;AACA,SAAQ,OAAR,QAAmD,iBAAnD;AAIA,SAAQ,eAAR,QAA8B,oBAA9B;AAEA,OAAO,KAAK,IAAZ,MAAsB,SAAtB;AAEA,SAAQ,EAAR,QAAiB,aAAjB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBG;;AACH,SAAS,QAAT,CACI,CADJ,EAC0B,KAD1B,EAC4C;AAC1C,QAAM,EAAE,GAAG,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,SAAT,EAAoB,IAApB,CAA1B;AAEA,QAAM,MAAM,GAAkB;AAAC,IAAA,CAAC,EAAE;AAAJ,GAA9B;AACA,QAAM,KAAK,GAAiB;AAAC,IAAA;AAAD,GAA5B;;AACA,QAAM,OAAO,GACI,CAAC,OAAD,EAAyB,IAAzB,KAA+C;AAC9D,IAAA,KAAK,GAAG,IAAI,CAAC,sBAAL,CAA4B,KAA5B,EAAmC,EAAE,CAAC,IAAtC,CAAR;AACA,IAAA,IAAI,CAAC,MAAL,CACI,EAAE,CAAC,IAAH,KAAY,IAAI,CAAC,aAAL,CAAmB,KAAnB,CADhB,EAEI,MAAM,gEAFV;AAGA,IAAA,IAAI,CAAC,CAAC,EAAD,CAAD,CAAJ;AACA,WAAO,OAAO,CAAC,OAAR,CAAgB,EAAhB,EAAoB,KAApB,CAAP;AACD,GARD;;AASA,SAAO,MAAM,CAAC,aAAP,CACH,OADG,EACM,MADN,EACsC;AAAK;AAD3C,IACuD,OADvD,EAEH,KAFG,CAAP;AAGD;;AACD,OAAO,MAAM,OAAO,GAAG,EAAE,CAAC;AAAC,EAAA;AAAD,CAAD,CAAlB","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { ENGINE } from '../engine';\r\nimport { Reshape } from '../kernel_names';\r\nimport { convertToTensor } from '../tensor_util_env';\r\nimport * as util from '../util';\r\nimport { op } from './operation';\r\n/**\r\n * Reshapes a `tf.Tensor` to a given shape.\r\n *\r\n * Given an input tensor, returns a new tensor with the same values as the\r\n * input tensor with shape `shape`.\r\n *\r\n * If one component of shape is the special value -1, the size of that\r\n * dimension is computed so that the total size remains constant. In\r\n * particular, a shape of [-1] flattens into 1-D. At most one component of\r\n * shape can be -1.\r\n *\r\n * If shape is 1-D or higher, then the operation returns a tensor with shape\r\n * shape filled with the values of tensor. In this case, the number of\r\n * elements implied by shape must be the same as the number of elements in\r\n * tensor.\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([1, 2, 3, 4]);\r\n * x.reshape([2, 2]).print();\r\n * ```\r\n *\r\n * @param x The input tensor to be reshaped.\r\n * @param shape An array of integers defining the output tensor shape.\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\r\n */\r\nfunction reshape_(x, shape) {\r\n    const $x = convertToTensor(x, 'x', 'reshape', null);\r\n    const inputs = { x: $x };\r\n    const attrs = { shape };\r\n    const forward = (backend, save) => {\r\n        shape = util.inferFromImplicitShape(shape, $x.size);\r\n        util.assert($x.size === util.sizeFromShape(shape), () => 'new shape and old shape must have the same number of elements.');\r\n        save([$x]);\r\n        return backend.reshape($x, shape);\r\n    };\r\n    return ENGINE.runKernelFunc(forward, inputs, null /* grad */, Reshape, attrs);\r\n}\r\nexport const reshape = op({ reshape_ });\r\n//# sourceMappingURL=reshape.js.map"]},"metadata":{},"sourceType":"module"}