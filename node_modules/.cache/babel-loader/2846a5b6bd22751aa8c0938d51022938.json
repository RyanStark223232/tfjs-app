{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { createStd } from '../../function/statistics/std';\nimport { isBigNumber, isNumber, isCollection } from '../../utils/is';\nimport { errorTransform } from './utils/errorTransform';\nvar name = 'std';\nvar dependencies = ['typed', 'sqrt', 'variance'];\n/**\r\n * Attach a transform function to math.std\r\n * Adds a property transform containing the transform function.\r\n *\r\n * This transform changed the `dim` parameter of function std\r\n * from one-based to zero based\r\n */\n\nexport var createStdTransform = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      sqrt = _ref.sqrt,\n      variance = _ref.variance;\n  var std = createStd({\n    typed: typed,\n    sqrt: sqrt,\n    variance: variance\n  });\n  return typed('std', {\n    '...any': function any(args) {\n      // change last argument dim from one-based to zero-based\n      if (args.length >= 2 && isCollection(args[0])) {\n        var dim = args[1];\n\n        if (isNumber(dim)) {\n          args[1] = dim - 1;\n        } else if (isBigNumber(dim)) {\n          args[1] = dim.minus(1);\n        }\n      }\n\n      try {\n        return std.apply(null, args);\n      } catch (err) {\n        throw errorTransform(err);\n      }\n    }\n  });\n}, {\n  isTransformFunction: true\n});","map":{"version":3,"sources":["C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/mathjs/es/expression/transform/std.transform.js"],"names":["factory","createStd","isBigNumber","isNumber","isCollection","errorTransform","name","dependencies","createStdTransform","_ref","typed","sqrt","variance","std","any","args","length","dim","minus","apply","err","isTransformFunction"],"mappings":"AAAA,SAASA,OAAT,QAAwB,qBAAxB;AACA,SAASC,SAAT,QAA0B,+BAA1B;AACA,SAASC,WAAT,EAAsBC,QAAtB,EAAgCC,YAAhC,QAAoD,gBAApD;AACA,SAASC,cAAT,QAA+B,wBAA/B;AACA,IAAIC,IAAI,GAAG,KAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,MAAV,EAAkB,UAAlB,CAAnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIC,kBAAkB,GAAG,eAAeR,OAAO,CAACM,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AACzF,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAAA,MACIC,IAAI,GAAGF,IAAI,CAACE,IADhB;AAAA,MAEIC,QAAQ,GAAGH,IAAI,CAACG,QAFpB;AAGA,MAAIC,GAAG,GAAGZ,SAAS,CAAC;AAClBS,IAAAA,KAAK,EAAEA,KADW;AAElBC,IAAAA,IAAI,EAAEA,IAFY;AAGlBC,IAAAA,QAAQ,EAAEA;AAHQ,GAAD,CAAnB;AAKA,SAAOF,KAAK,CAAC,KAAD,EAAQ;AAClB,cAAU,SAASI,GAAT,CAAaC,IAAb,EAAmB;AAC3B;AACA,UAAIA,IAAI,CAACC,MAAL,IAAe,CAAf,IAAoBZ,YAAY,CAACW,IAAI,CAAC,CAAD,CAAL,CAApC,EAA+C;AAC7C,YAAIE,GAAG,GAAGF,IAAI,CAAC,CAAD,CAAd;;AAEA,YAAIZ,QAAQ,CAACc,GAAD,CAAZ,EAAmB;AACjBF,UAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUE,GAAG,GAAG,CAAhB;AACD,SAFD,MAEO,IAAIf,WAAW,CAACe,GAAD,CAAf,EAAsB;AAC3BF,UAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUE,GAAG,CAACC,KAAJ,CAAU,CAAV,CAAV;AACD;AACF;;AAED,UAAI;AACF,eAAOL,GAAG,CAACM,KAAJ,CAAU,IAAV,EAAgBJ,IAAhB,CAAP;AACD,OAFD,CAEE,OAAOK,GAAP,EAAY;AACZ,cAAMf,cAAc,CAACe,GAAD,CAApB;AACD;AACF;AAlBiB,GAAR,CAAZ;AAoBD,CA7BqD,EA6BnD;AACDC,EAAAA,mBAAmB,EAAE;AADpB,CA7BmD,CAA/C","sourcesContent":["import { factory } from '../../utils/factory';\r\nimport { createStd } from '../../function/statistics/std';\r\nimport { isBigNumber, isNumber, isCollection } from '../../utils/is';\r\nimport { errorTransform } from './utils/errorTransform';\r\nvar name = 'std';\r\nvar dependencies = ['typed', 'sqrt', 'variance'];\r\n/**\r\n * Attach a transform function to math.std\r\n * Adds a property transform containing the transform function.\r\n *\r\n * This transform changed the `dim` parameter of function std\r\n * from one-based to zero based\r\n */\r\n\r\nexport var createStdTransform = /* #__PURE__ */factory(name, dependencies, function (_ref) {\r\n  var typed = _ref.typed,\r\n      sqrt = _ref.sqrt,\r\n      variance = _ref.variance;\r\n  var std = createStd({\r\n    typed: typed,\r\n    sqrt: sqrt,\r\n    variance: variance\r\n  });\r\n  return typed('std', {\r\n    '...any': function any(args) {\r\n      // change last argument dim from one-based to zero-based\r\n      if (args.length >= 2 && isCollection(args[0])) {\r\n        var dim = args[1];\r\n\r\n        if (isNumber(dim)) {\r\n          args[1] = dim - 1;\r\n        } else if (isBigNumber(dim)) {\r\n          args[1] = dim.minus(1);\r\n        }\r\n      }\r\n\r\n      try {\r\n        return std.apply(null, args);\r\n      } catch (err) {\r\n        throw errorTransform(err);\r\n      }\r\n    }\r\n  });\r\n}, {\r\n  isTransformFunction: true\r\n});"]},"metadata":{},"sourceType":"module"}