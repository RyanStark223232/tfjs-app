{"ast":null,"code":"import _classCallCheck from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nexport var BatchNormPackedProgram = function BatchNormPackedProgram(xShape, meanShape, varianceShape, offsetShape, scaleShape, varianceEpsilon) {\n  _classCallCheck(this, BatchNormPackedProgram);\n\n  this.packedInputs = true;\n  this.packedOutput = true;\n  this.variableNames = ['x', 'mean', 'variance'];\n  backend_util.assertAndGetBroadcastShape(xShape, meanShape);\n  backend_util.assertAndGetBroadcastShape(xShape, varianceShape);\n  var offsetSnippet = 'vec4(0.0)';\n\n  if (offsetShape != null) {\n    backend_util.assertAndGetBroadcastShape(xShape, offsetShape);\n    this.variableNames.push('offset');\n    offsetSnippet = 'getOffsetAtOutCoords()';\n  }\n\n  var scaleSnippet = 'vec4(1.0)';\n\n  if (scaleShape != null) {\n    backend_util.assertAndGetBroadcastShape(xShape, scaleShape);\n    this.variableNames.push('scale');\n    scaleSnippet = 'getScaleAtOutCoords()';\n  }\n\n  this.outputShape = xShape;\n  this.userCode = \"\\n      void main() {\\n        vec4 offset = \".concat(offsetSnippet, \";\\n        vec4 scale = \").concat(scaleSnippet, \";\\n\\n        vec4 x = getXAtOutCoords();\\n        vec4 mean = getMeanAtOutCoords();\\n        vec4 variance = getVarianceAtOutCoords();\\n\\n        vec4 inv = scale * inversesqrt(variance + vec4(\").concat(varianceEpsilon, \"));\\n\\n        setOutput((x - mean) * inv + offset);\\n      }\\n    \");\n};","map":{"version":3,"sources":["../src/batchnorm_packed_gpu.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,YAAR,QAA2B,uBAA3B;AAGA,WAAa,sBAAb,GAOE,gCACI,MADJ,EACsB,SADtB,EAC2C,aAD3C,EAEI,WAFJ,EAEgC,UAFhC,EAGI,eAHJ,EAG2B;AAAA;;AAN3B,OAAA,YAAA,GAAe,IAAf;AACA,OAAA,YAAA,GAAe,IAAf;AAME,OAAK,aAAL,GAAqB,CAAC,GAAD,EAAM,MAAN,EAAc,UAAd,CAArB;AACA,EAAA,YAAY,CAAC,0BAAb,CAAwC,MAAxC,EAAgD,SAAhD;AACA,EAAA,YAAY,CAAC,0BAAb,CAAwC,MAAxC,EAAgD,aAAhD;AAEA,MAAI,aAAa,GAAG,WAApB;;AACA,MAAI,WAAW,IAAI,IAAnB,EAAyB;AACvB,IAAA,YAAY,CAAC,0BAAb,CAAwC,MAAxC,EAAgD,WAAhD;AACA,SAAK,aAAL,CAAmB,IAAnB,CAAwB,QAAxB;AACA,IAAA,aAAa,GAAG,wBAAhB;AACD;;AAED,MAAI,YAAY,GAAG,WAAnB;;AACA,MAAI,UAAU,IAAI,IAAlB,EAAwB;AACtB,IAAA,YAAY,CAAC,0BAAb,CAAwC,MAAxC,EAAgD,UAAhD;AACA,SAAK,aAAL,CAAmB,IAAnB,CAAwB,OAAxB;AACA,IAAA,YAAY,GAAG,uBAAf;AACD;;AAED,OAAK,WAAL,GAAmB,MAAnB;AACA,OAAK,QAAL,0DAEoB,aAFpB,qCAGmB,YAHnB,8MASqD,eATrD;AAcD,CA5CH","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { backend_util } from '@tensorflow/tfjs-core';\r\nexport class BatchNormPackedProgram {\r\n    constructor(xShape, meanShape, varianceShape, offsetShape, scaleShape, varianceEpsilon) {\r\n        this.packedInputs = true;\r\n        this.packedOutput = true;\r\n        this.variableNames = ['x', 'mean', 'variance'];\r\n        backend_util.assertAndGetBroadcastShape(xShape, meanShape);\r\n        backend_util.assertAndGetBroadcastShape(xShape, varianceShape);\r\n        let offsetSnippet = 'vec4(0.0)';\r\n        if (offsetShape != null) {\r\n            backend_util.assertAndGetBroadcastShape(xShape, offsetShape);\r\n            this.variableNames.push('offset');\r\n            offsetSnippet = 'getOffsetAtOutCoords()';\r\n        }\r\n        let scaleSnippet = 'vec4(1.0)';\r\n        if (scaleShape != null) {\r\n            backend_util.assertAndGetBroadcastShape(xShape, scaleShape);\r\n            this.variableNames.push('scale');\r\n            scaleSnippet = 'getScaleAtOutCoords()';\r\n        }\r\n        this.outputShape = xShape;\r\n        this.userCode = `\r\n      void main() {\r\n        vec4 offset = ${offsetSnippet};\r\n        vec4 scale = ${scaleSnippet};\r\n\r\n        vec4 x = getXAtOutCoords();\r\n        vec4 mean = getMeanAtOutCoords();\r\n        vec4 variance = getVarianceAtOutCoords();\r\n\r\n        vec4 inv = scale * inversesqrt(variance + vec4(${varianceEpsilon}));\r\n\r\n        setOutput((x - mean) * inv + offset);\r\n      }\r\n    `;\r\n    }\r\n}\r\n//# sourceMappingURL=batchnorm_packed_gpu.js.map"]},"metadata":{},"sourceType":"module"}