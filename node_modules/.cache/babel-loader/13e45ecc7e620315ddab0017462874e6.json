{"ast":null,"code":"import _slicedToArray from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nexport var ResizeBilinearPackedProgram = function ResizeBilinearPackedProgram(inputShape, newHeight, newWidth, alignCorners) {\n  _classCallCheck(this, ResizeBilinearPackedProgram);\n\n  this.variableNames = ['A'];\n  this.packedInputs = true;\n  this.packedOutput = true;\n  this.outputShape = [];\n\n  var _inputShape = _slicedToArray(inputShape, 4),\n      batch = _inputShape[0],\n      oldHeight = _inputShape[1],\n      oldWidth = _inputShape[2],\n      depth = _inputShape[3];\n\n  this.outputShape = [batch, newHeight, newWidth, depth];\n  var effectiveInSize = [alignCorners && newHeight > 1 ? oldHeight - 1 : oldHeight, alignCorners && newWidth > 1 ? oldWidth - 1 : oldWidth];\n  var effectiveOutSize = [alignCorners && newHeight > 1 ? newHeight - 1 : newHeight, alignCorners && newWidth > 1 ? newWidth - 1 : newWidth];\n  this.userCode = \"\\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\\n          \".concat(effectiveInSize[0] / effectiveOutSize[0], \",\\n          \").concat(effectiveInSize[1] / effectiveOutSize[1], \",\\n          \").concat(effectiveInSize[1] / effectiveOutSize[1], \");\\n      const vec3 inputShapeRC = vec3(\").concat(oldHeight, \".0, \").concat(oldWidth, \".0,\\n                                     \").concat(oldWidth, \".0);\\n\\n      float getAValue(int b, int r, int c, int d) {\\n        return getChannel(getA(b, r, c, d), vec2(c, d));\\n      }\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n        // Calculate values for next column in yRC.z.\\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\\n\\n        // Fractional source index.\\n        vec3 sourceFracIndexRC = vec3(yRC) * effectiveInputOverOutputRatioRC;\\n\\n        // Compute the four integer indices.\\n        ivec3 sourceFloorRC = ivec3(sourceFracIndexRC);\\n        ivec3 sourceCeilRC = ivec3(\\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\\n\\n        // Should we calculate next column and row elements in 2x2 packed cell.\\n        bool hasNextCol = d < \").concat(depth - 1, \";\\n        bool hasNextRow = coords.z < \").concat(newWidth - 1, \";\\n\\n        // In parallel, construct four corners for all four components in\\n        // packed 2x2 cell.\\n        vec4 topLeft = vec4(\\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\\n                     : 0.0,\\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\\n                     : 0.0,\\n          (hasNextRow && hasNextCol) ?\\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\\n\\n        vec4 bottomLeft = vec4(\\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\\n                     : 0.0,\\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\\n                     : 0.0,\\n          (hasNextRow && hasNextCol) ?\\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\\n\\n        vec4 topRight = vec4(\\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\\n                     : 0.0,\\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\\n                     : 0.0,\\n          (hasNextRow && hasNextCol) ?\\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\\n\\n        vec4 bottomRight = vec4(\\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\\n                     : 0.0,\\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\\n                     : 0.0,\\n          (hasNextRow && hasNextCol) ?\\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\\n\\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\\n\\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\\n        vec4 newValue = mix(top, bottom, fracRC.x);\\n\\n        setOutput(newValue);\\n      }\\n    \");\n};","map":{"version":3,"sources":["../src/resize_bilinear_packed_gpu.ts"],"names":[],"mappings":";;;AAAA;;;;;;;;;;;;;;;AAeG;AAIH,WAAa,2BAAb,GAOE,qCACI,UADJ,EACkD,SADlD,EAEI,QAFJ,EAEsB,YAFtB,EAE2C;AAAA;;AAR3C,OAAA,aAAA,GAAgB,CAAC,GAAD,CAAhB;AACA,OAAA,YAAA,GAAe,IAAf;AACA,OAAA,YAAA,GAAe,IAAf;AACA,OAAA,WAAA,GAAwB,EAAxB;;AAK2C,mCACG,UADH;AAAA,MAClC,KADkC;AAAA,MAC3B,SAD2B;AAAA,MAChB,QADgB;AAAA,MACN,KADM;;AAEzC,OAAK,WAAL,GAAmB,CAAC,KAAD,EAAQ,SAAR,EAAmB,QAAnB,EAA6B,KAA7B,CAAnB;AAEA,MAAM,eAAe,GAAqB,CACvC,YAAY,IAAI,SAAS,GAAG,CAA7B,GAAkC,SAAS,GAAG,CAA9C,GAAkD,SADV,EAEvC,YAAY,IAAI,QAAQ,GAAG,CAA5B,GAAiC,QAAQ,GAAG,CAA5C,GAAgD,QAFR,CAA1C;AAKA,MAAM,gBAAgB,GAAqB,CACxC,YAAY,IAAI,SAAS,GAAG,CAA7B,GAAkC,SAAS,GAAG,CAA9C,GAAkD,SADT,EAExC,YAAY,IAAI,QAAQ,GAAG,CAA5B,GAAiC,QAAQ,GAAG,CAA5C,GAAgD,QAFP,CAA3C;AAKA,OAAK,QAAL,mFAEQ,eAAe,CAAC,CAAD,CAAf,GAAqB,gBAAgB,CAAC,CAAD,CAF7C,0BAGQ,eAAe,CAAC,CAAD,CAAf,GAAqB,gBAAgB,CAAC,CAAD,CAH7C,0BAIQ,eAAe,CAAC,CAAD,CAAf,GAAqB,gBAAgB,CAAC,CAAD,CAJ7C,sDAKmC,SALnC,iBAKmD,QALnD,uDAMmC,QANnC,myBA4B4B,KAAK,GAAG,CA5BpC,qDA6BmC,QAAQ,GAAG,CA7B9C;AA8ED,CArGH","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nexport class ResizeBilinearPackedProgram {\r\n    constructor(inputShape, newHeight, newWidth, alignCorners) {\r\n        this.variableNames = ['A'];\r\n        this.packedInputs = true;\r\n        this.packedOutput = true;\r\n        this.outputShape = [];\r\n        const [batch, oldHeight, oldWidth, depth] = inputShape;\r\n        this.outputShape = [batch, newHeight, newWidth, depth];\r\n        const effectiveInSize = [\r\n            (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\r\n            (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\r\n        ];\r\n        const effectiveOutSize = [\r\n            (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\r\n            (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\r\n        ];\r\n        this.userCode = `\r\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\r\n          ${effectiveInSize[0] / effectiveOutSize[0]},\r\n          ${effectiveInSize[1] / effectiveOutSize[1]},\r\n          ${effectiveInSize[1] / effectiveOutSize[1]});\r\n      const vec3 inputShapeRC = vec3(${oldHeight}.0, ${oldWidth}.0,\r\n                                     ${oldWidth}.0);\r\n\r\n      float getAValue(int b, int r, int c, int d) {\r\n        return getChannel(getA(b, r, c, d), vec2(c, d));\r\n      }\r\n\r\n      void main() {\r\n        ivec4 coords = getOutputCoords();\r\n        int b = coords[0];\r\n        int d = coords[3];\r\n        // Calculate values for next column in yRC.z.\r\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\r\n\r\n        // Fractional source index.\r\n        vec3 sourceFracIndexRC = vec3(yRC) * effectiveInputOverOutputRatioRC;\r\n\r\n        // Compute the four integer indices.\r\n        ivec3 sourceFloorRC = ivec3(sourceFracIndexRC);\r\n        ivec3 sourceCeilRC = ivec3(\r\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\r\n\r\n        // Should we calculate next column and row elements in 2x2 packed cell.\r\n        bool hasNextCol = d < ${depth - 1};\r\n        bool hasNextRow = coords.z < ${newWidth - 1};\r\n\r\n        // In parallel, construct four corners for all four components in\r\n        // packed 2x2 cell.\r\n        vec4 topLeft = vec4(\r\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\r\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\r\n                     : 0.0,\r\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\r\n                     : 0.0,\r\n          (hasNextRow && hasNextCol) ?\r\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\r\n\r\n        vec4 bottomLeft = vec4(\r\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\r\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\r\n                     : 0.0,\r\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\r\n                     : 0.0,\r\n          (hasNextRow && hasNextCol) ?\r\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\r\n\r\n        vec4 topRight = vec4(\r\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\r\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\r\n                     : 0.0,\r\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\r\n                     : 0.0,\r\n          (hasNextRow && hasNextCol) ?\r\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\r\n\r\n        vec4 bottomRight = vec4(\r\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\r\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\r\n                     : 0.0,\r\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\r\n                     : 0.0,\r\n          (hasNextRow && hasNextCol) ?\r\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\r\n\r\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\r\n\r\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\r\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\r\n        vec4 newValue = mix(top, bottom, fracRC.x);\r\n\r\n        setOutput(newValue);\r\n      }\r\n    `;\r\n    }\r\n}\r\n//# sourceMappingURL=resize_bilinear_packed_gpu.js.map"]},"metadata":{},"sourceType":"module"}