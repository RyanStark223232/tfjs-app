{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { assert } from '../util';\n/**\r\n * Monitor Promise.all progress, fire onProgress callback function.\r\n *\r\n * @param promises Promise list going to be monitored\r\n * @param onProgress Callback function. Fired when a promise resolved.\r\n * @param startFraction Optional fraction start. Default to 0.\r\n * @param endFraction Optional fraction end. Default to 1.\r\n */\n\nexport function monitorPromisesProgress(promises, onProgress, startFraction, endFraction) {\n  checkPromises(promises);\n  startFraction = startFraction == null ? 0 : startFraction;\n  endFraction = endFraction == null ? 1 : endFraction;\n  checkFraction(startFraction, endFraction);\n  var resolvedPromise = 0;\n\n  var registerMonitor = function registerMonitor(promise) {\n    promise.then(function (value) {\n      var fraction = startFraction + ++resolvedPromise / promises.length * (endFraction - startFraction); // pass fraction as parameter to callback function.\n\n      onProgress(fraction);\n      return value;\n    });\n    return promise;\n  };\n\n  function checkPromises(promises) {\n    assert(promises != null && Array.isArray(promises) && promises.length > 0, function () {\n      return 'promises must be a none empty array';\n    });\n  }\n\n  function checkFraction(startFraction, endFraction) {\n    assert(startFraction >= 0 && startFraction <= 1, function () {\n      return \"Progress fraction must be in range [0, 1], but \" + \"got startFraction \".concat(startFraction);\n    });\n    assert(endFraction >= 0 && endFraction <= 1, function () {\n      return \"Progress fraction must be in range [0, 1], but \" + \"got endFraction \".concat(endFraction);\n    });\n    assert(endFraction >= startFraction, function () {\n      return \"startFraction must be no more than endFraction, but \" + \"got startFraction \".concat(startFraction, \" and endFraction \") + \"\".concat(endFraction);\n    });\n  }\n\n  return Promise.all(promises.map(registerMonitor));\n}","map":{"version":3,"sources":["../../src/io/progress.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,MAAR,QAAqB,SAArB;AAIA;;;;;;;AAOG;;AACH,OAAM,SAAU,uBAAV,CACF,QADE,EACiC,UADjC,EAEF,aAFE,EAEsB,WAFtB,EAE0C;AAC9C,EAAA,aAAa,CAAC,QAAD,CAAb;AACA,EAAA,aAAa,GAAG,aAAa,IAAI,IAAjB,GAAwB,CAAxB,GAA4B,aAA5C;AACA,EAAA,WAAW,GAAG,WAAW,IAAI,IAAf,GAAsB,CAAtB,GAA0B,WAAxC;AACA,EAAA,aAAa,CAAC,aAAD,EAAgB,WAAhB,CAAb;AACA,MAAI,eAAe,GAAG,CAAtB;;AAEA,MAAM,eAAe,GAAG,SAAlB,eAAkB,CAAC,OAAD,EAAyB;AAC/C,IAAA,OAAO,CAAC,IAAR,CAAa,UAAA,KAAK,EAAG;AACnB,UAAM,QAAQ,GAAG,aAAa,GAC1B,EAAE,eAAF,GAAoB,QAAQ,CAAC,MAA7B,IAAuC,WAAW,GAAG,aAArD,CADJ,CADmB,CAGnB;;AACA,MAAA,UAAU,CAAC,QAAD,CAAV;AACA,aAAO,KAAP;AACD,KAND;AAOA,WAAO,OAAP;AACD,GATD;;AAWA,WAAS,aAAT,CAAuB,QAAvB,EAAwD;AACtD,IAAA,MAAM,CACF,QAAQ,IAAI,IAAZ,IAAoB,KAAK,CAAC,OAAN,CAAc,QAAd,CAApB,IAA+C,QAAQ,CAAC,MAAT,GAAkB,CAD/D,EAEF;AAAA,aAAM,qCAAN;AAAA,KAFE,CAAN;AAGD;;AAED,WAAS,aAAT,CAAuB,aAAvB,EAA8C,WAA9C,EAAiE;AAC/D,IAAA,MAAM,CACF,aAAa,IAAI,CAAjB,IAAsB,aAAa,IAAI,CADrC,EAEF;AAAA,aAAM,gFACmB,aADnB,CAAN;AAAA,KAFE,CAAN;AAIA,IAAA,MAAM,CACF,WAAW,IAAI,CAAf,IAAoB,WAAW,IAAI,CADjC,EAEF;AAAA,aAAM,8EACiB,WADjB,CAAN;AAAA,KAFE,CAAN;AAIA,IAAA,MAAM,CACF,WAAW,IAAI,aADb,EAEF;AAAA,aAAM,qFACmB,aADnB,mCAEC,WAFD,CAAN;AAAA,KAFE,CAAN;AAKD;;AAED,SAAO,OAAO,CAAC,GAAR,CAAY,QAAQ,CAAC,GAAT,CAAa,eAAb,CAAZ,CAAP;AACD","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { assert } from '../util';\r\n/**\r\n * Monitor Promise.all progress, fire onProgress callback function.\r\n *\r\n * @param promises Promise list going to be monitored\r\n * @param onProgress Callback function. Fired when a promise resolved.\r\n * @param startFraction Optional fraction start. Default to 0.\r\n * @param endFraction Optional fraction end. Default to 1.\r\n */\r\nexport function monitorPromisesProgress(promises, onProgress, startFraction, endFraction) {\r\n    checkPromises(promises);\r\n    startFraction = startFraction == null ? 0 : startFraction;\r\n    endFraction = endFraction == null ? 1 : endFraction;\r\n    checkFraction(startFraction, endFraction);\r\n    let resolvedPromise = 0;\r\n    const registerMonitor = (promise) => {\r\n        promise.then(value => {\r\n            const fraction = startFraction +\r\n                ++resolvedPromise / promises.length * (endFraction - startFraction);\r\n            // pass fraction as parameter to callback function.\r\n            onProgress(fraction);\r\n            return value;\r\n        });\r\n        return promise;\r\n    };\r\n    function checkPromises(promises) {\r\n        assert(promises != null && Array.isArray(promises) && promises.length > 0, () => 'promises must be a none empty array');\r\n    }\r\n    function checkFraction(startFraction, endFraction) {\r\n        assert(startFraction >= 0 && startFraction <= 1, () => `Progress fraction must be in range [0, 1], but ` +\r\n            `got startFraction ${startFraction}`);\r\n        assert(endFraction >= 0 && endFraction <= 1, () => `Progress fraction must be in range [0, 1], but ` +\r\n            `got endFraction ${endFraction}`);\r\n        assert(endFraction >= startFraction, () => `startFraction must be no more than endFraction, but ` +\r\n            `got startFraction ${startFraction} and endFraction ` +\r\n            `${endFraction}`);\r\n    }\r\n    return Promise.all(promises.map(registerMonitor));\r\n}\r\n//# sourceMappingURL=progress.js.map"]},"metadata":{},"sourceType":"module"}