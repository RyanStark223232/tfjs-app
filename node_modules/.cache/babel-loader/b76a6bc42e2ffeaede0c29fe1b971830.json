{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { deepMap } from '../../utils/collection';\nvar name = 'acos';\nvar dependencies = ['typed', 'config', 'Complex'];\nexport var createAcos = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      Complex = _ref.Complex;\n  /**\r\n   * Calculate the inverse cosine of a value.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.acos(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.acos(0.5)           // returns number 1.0471975511965979\r\n   *    math.acos(math.cos(1.5)) // returns number 1.5\r\n   *\r\n   *    math.acos(2)             // returns Complex 0 + 1.3169578969248166 i\r\n   *\r\n   * See also:\r\n   *\r\n   *    cos, atan, asin\r\n   *\r\n   * @param {number | BigNumber | Complex | Array | Matrix} x  Function input\r\n   * @return {number | BigNumber | Complex | Array | Matrix} The arc cosine of x\r\n   */\n\n  return typed(name, {\n    number: function number(x) {\n      if (x >= -1 && x <= 1 || config.predictable) {\n        return Math.acos(x);\n      } else {\n        return new Complex(x, 0).acos();\n      }\n    },\n    Complex: function Complex(x) {\n      return x.acos();\n    },\n    BigNumber: function BigNumber(x) {\n      return x.acos();\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, this);\n    }\n  });\n});","map":{"version":3,"sources":["C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/mathjs/es/function/trigonometry/acos.js"],"names":["factory","deepMap","name","dependencies","createAcos","_ref","typed","config","Complex","number","x","predictable","Math","acos","BigNumber","ArrayMatrix"],"mappings":"AAAA,SAASA,OAAT,QAAwB,qBAAxB;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,IAAIC,IAAI,GAAG,MAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,SAApB,CAAnB;AACA,OAAO,IAAIC,UAAU,GAAG,eAAeJ,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AACjF,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAAA,MACIC,MAAM,GAAGF,IAAI,CAACE,MADlB;AAAA,MAEIC,OAAO,GAAGH,IAAI,CAACG,OAFnB;AAIA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOF,KAAK,CAACJ,IAAD,EAAO;AACjBO,IAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBC,CAAhB,EAAmB;AACzB,UAAIA,CAAC,IAAI,CAAC,CAAN,IAAWA,CAAC,IAAI,CAAhB,IAAqBH,MAAM,CAACI,WAAhC,EAA6C;AAC3C,eAAOC,IAAI,CAACC,IAAL,CAAUH,CAAV,CAAP;AACD,OAFD,MAEO;AACL,eAAO,IAAIF,OAAJ,CAAYE,CAAZ,EAAe,CAAf,EAAkBG,IAAlB,EAAP;AACD;AACF,KAPgB;AAQjBL,IAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBE,CAAjB,EAAoB;AAC3B,aAAOA,CAAC,CAACG,IAAF,EAAP;AACD,KAVgB;AAWjBC,IAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBJ,CAAnB,EAAsB;AAC/B,aAAOA,CAAC,CAACG,IAAF,EAAP;AACD,KAbgB;AAcjB,sBAAkB,SAASE,WAAT,CAAqBL,CAArB,EAAwB;AACxC,aAAOT,OAAO,CAACS,CAAD,EAAI,IAAJ,CAAd;AACD;AAhBgB,GAAP,CAAZ;AAkBD,CA9C6C,CAAvC","sourcesContent":["import { factory } from '../../utils/factory';\r\nimport { deepMap } from '../../utils/collection';\r\nvar name = 'acos';\r\nvar dependencies = ['typed', 'config', 'Complex'];\r\nexport var createAcos = /* #__PURE__ */factory(name, dependencies, function (_ref) {\r\n  var typed = _ref.typed,\r\n      config = _ref.config,\r\n      Complex = _ref.Complex;\r\n\r\n  /**\r\n   * Calculate the inverse cosine of a value.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.acos(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.acos(0.5)           // returns number 1.0471975511965979\r\n   *    math.acos(math.cos(1.5)) // returns number 1.5\r\n   *\r\n   *    math.acos(2)             // returns Complex 0 + 1.3169578969248166 i\r\n   *\r\n   * See also:\r\n   *\r\n   *    cos, atan, asin\r\n   *\r\n   * @param {number | BigNumber | Complex | Array | Matrix} x  Function input\r\n   * @return {number | BigNumber | Complex | Array | Matrix} The arc cosine of x\r\n   */\r\n  return typed(name, {\r\n    number: function number(x) {\r\n      if (x >= -1 && x <= 1 || config.predictable) {\r\n        return Math.acos(x);\r\n      } else {\r\n        return new Complex(x, 0).acos();\r\n      }\r\n    },\r\n    Complex: function Complex(x) {\r\n      return x.acos();\r\n    },\r\n    BigNumber: function BigNumber(x) {\r\n      return x.acos();\r\n    },\r\n    'Array | Matrix': function ArrayMatrix(x) {\r\n      return deepMap(x, this);\r\n    }\r\n  });\r\n});"]},"metadata":{},"sourceType":"module"}