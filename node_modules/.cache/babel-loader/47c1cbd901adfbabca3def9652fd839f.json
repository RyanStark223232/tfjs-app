{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2017 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nexport class ArgMinMaxProgram {\n  constructor(reduceInfo, op, firstPass) {\n    this.variableNames = ['A'];\n    const {\n      windowSize,\n      batchSize,\n      outSize\n    } = reduceInfo;\n\n    if (!firstPass) {\n      this.variableNames.push('bestIndicesA');\n    }\n\n    this.outputShape = [batchSize, outSize];\n    const compOp = op === 'max' ? '>' : '<';\n    const indexSnippet = firstPass ? 'inOffset + i;' : 'round(getBestIndicesA(batch, inOffset + i));';\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${windowSize}; i++) {\n          int inIdx = ${indexSnippet};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${compOp} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `;\n  }\n\n}","map":{"version":3,"sources":["../src/argminmax_gpu.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAKH,OAAM,MAAO,gBAAP,CAAuB;AAK3B,EAAA,WAAA,CACI,UADJ,EACyC,EADzC,EAEI,SAFJ,EAEsB;AANtB,SAAA,aAAA,GAAgB,CAAC,GAAD,CAAhB;AAOE,UAAM;AAAC,MAAA,UAAD;AAAa,MAAA,SAAb;AAAwB,MAAA;AAAxB,QAAmC,UAAzC;;AACA,QAAI,CAAC,SAAL,EAAgB;AACd,WAAK,aAAL,CAAmB,IAAnB,CAAwB,cAAxB;AACD;;AACD,SAAK,WAAL,GAAmB,CAAC,SAAD,EAAY,OAAZ,CAAnB;AACA,UAAM,MAAM,GAAI,EAAE,KAAK,KAAR,GAAiB,GAAjB,GAAuB,GAAtC;AACA,UAAM,YAAY,GAAG,SAAS,GAC1B,eAD0B,GAE1B,8CAFJ;AAIA,SAAK,QAAL,GAAgB;;;;;kCAKc,UAAU;;;;;8BAKd,UAAU;wBAChB,YAAY;;0BAEV,MAAM;;;;;;;AAO3B,KApBD;AAqBD;;AAvC0B","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2017 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nexport class ArgMinMaxProgram {\r\n    constructor(reduceInfo, op, firstPass) {\r\n        this.variableNames = ['A'];\r\n        const { windowSize, batchSize, outSize } = reduceInfo;\r\n        if (!firstPass) {\r\n            this.variableNames.push('bestIndicesA');\r\n        }\r\n        this.outputShape = [batchSize, outSize];\r\n        const compOp = (op === 'max') ? '>' : '<';\r\n        const indexSnippet = firstPass ?\r\n            'inOffset + i;' :\r\n            'round(getBestIndicesA(batch, inOffset + i));';\r\n        this.userCode = `\r\n      void main() {\r\n        ivec2 coords = getOutputCoords();\r\n        int batch = coords[0];\r\n        int outIdx = coords[1];\r\n        int inOffset = outIdx * ${windowSize};\r\n\r\n        int bestIndex = inOffset;\r\n        float bestValue = getA(batch, bestIndex);\r\n\r\n        for (int i = 0; i < ${windowSize}; i++) {\r\n          int inIdx = ${indexSnippet};\r\n          float candidate = getA(batch, inIdx);\r\n          if (candidate ${compOp} bestValue) {\r\n            bestValue = candidate;\r\n            bestIndex = inIdx;\r\n          }\r\n        }\r\n        setOutput(float(bestIndex));\r\n      }\r\n    `;\r\n    }\r\n}\r\n//# sourceMappingURL=argminmax_gpu.js.map"]},"metadata":{},"sourceType":"module"}