{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { OneHot } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\r\n * Creates a one-hot `tf.Tensor`. The locations represented by `indices` take\r\n * value `onValue` (defaults to 1), while all other locations take value\r\n * `offValue` (defaults to 0). If `indices` is rank `R`, the output has rank\r\n * `R+1` with the last axis of size `depth`.\r\n *\r\n * ```js\r\n * tf.oneHot(tf.tensor1d([0, 1], 'int32'), 3).print();\r\n * ```\r\n *\r\n * @param indices `tf.Tensor` of indices with dtype `int32`.\r\n * @param depth The depth of the one hot dimension.\r\n * @param onValue A number used to fill in the output when the index matches\r\n * the location.\r\n * @param offValue A number used to fill in the output when the index does\r\n *     not match the location.\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Creation'}\r\n */\n\nfunction oneHot_(indices, depth, onValue = 1, offValue = 0) {\n  if (depth < 2) {\n    throw new Error(`Error in oneHot: depth must be >=2, but it is ${depth}`);\n  }\n\n  const $indices = convertToTensor(indices, 'indices', 'oneHot', 'int32');\n  const outShape = [...$indices.shape, depth];\n\n  const forward = (backend, save) => {\n    save([$indices]);\n    return reshape(backend.oneHot(reshape($indices, [$indices.size]), depth, onValue, offValue), outShape);\n  };\n\n  const inputs = {\n    indices: $indices\n  };\n  const attrs = {\n    depth,\n    onValue,\n    offValue\n  };\n  return ENGINE.runKernelFunc(forward, inputs, null\n  /* grad */\n  , OneHot, attrs);\n}\n\nexport const oneHot = op({\n  oneHot_\n});","map":{"version":3,"sources":["../../src/ops/one_hot.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,MAAR,QAAkC,WAAlC;AACA,SAAQ,MAAR,QAAgD,iBAAhD;AAIA,SAAQ,eAAR,QAA8B,oBAA9B;AAGA,SAAQ,EAAR,QAAiB,aAAjB;AACA,SAAQ,OAAR,QAAsB,WAAtB;AAEA;;;;;;;;;;;;;;;;;;AAkBG;;AACH,SAAS,OAAT,CACI,OADJ,EACgC,KADhC,EAC+C,OAAO,GAAG,CADzD,EAEI,QAAQ,GAAG,CAFf,EAEgB;AACd,MAAI,KAAK,GAAG,CAAZ,EAAe;AACb,UAAM,IAAI,KAAJ,CAAU,iDAAiD,KAAK,EAAhE,CAAN;AACD;;AACD,QAAM,QAAQ,GAAG,eAAe,CAAC,OAAD,EAAU,SAAV,EAAqB,QAArB,EAA+B,OAA/B,CAAhC;AACA,QAAM,QAAQ,GAAG,CAAC,GAAG,QAAQ,CAAC,KAAb,EAAoB,KAApB,CAAjB;;AAEA,QAAM,OAAO,GAAwB,CAAC,OAAD,EAAU,IAAV,KAAkB;AACrD,IAAA,IAAI,CAAC,CAAC,QAAD,CAAD,CAAJ;AACA,WAAO,OAAO,CACV,OAAO,CAAC,MAAR,CACI,OAAO,CAAC,QAAD,EAAW,CAAC,QAAQ,CAAC,IAAV,CAAX,CADX,EACwC,KADxC,EAC+C,OAD/C,EACwD,QADxD,CADU,EAGV,QAHU,CAAd;AAID,GAND;;AAQA,QAAM,MAAM,GAAiB;AAAC,IAAA,OAAO,EAAE;AAAV,GAA7B;AACA,QAAM,KAAK,GAAgB;AAAC,IAAA,KAAD;AAAQ,IAAA,OAAR;AAAiB,IAAA;AAAjB,GAA3B;AAEA,SAAO,MAAM,CAAC,aAAP,CACH,OADG,EACM,MADN,EAC2C;AAAK;AADhD,IAC4D,MAD5D,EAEH,KAFG,CAAP;AAGD;;AAED,OAAO,MAAM,MAAM,GAAG,EAAE,CAAC;AAAC,EAAA;AAAD,CAAD,CAAjB","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { ENGINE } from '../engine';\r\nimport { OneHot } from '../kernel_names';\r\nimport { convertToTensor } from '../tensor_util_env';\r\nimport { op } from './operation';\r\nimport { reshape } from './reshape';\r\n/**\r\n * Creates a one-hot `tf.Tensor`. The locations represented by `indices` take\r\n * value `onValue` (defaults to 1), while all other locations take value\r\n * `offValue` (defaults to 0). If `indices` is rank `R`, the output has rank\r\n * `R+1` with the last axis of size `depth`.\r\n *\r\n * ```js\r\n * tf.oneHot(tf.tensor1d([0, 1], 'int32'), 3).print();\r\n * ```\r\n *\r\n * @param indices `tf.Tensor` of indices with dtype `int32`.\r\n * @param depth The depth of the one hot dimension.\r\n * @param onValue A number used to fill in the output when the index matches\r\n * the location.\r\n * @param offValue A number used to fill in the output when the index does\r\n *     not match the location.\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Creation'}\r\n */\r\nfunction oneHot_(indices, depth, onValue = 1, offValue = 0) {\r\n    if (depth < 2) {\r\n        throw new Error(`Error in oneHot: depth must be >=2, but it is ${depth}`);\r\n    }\r\n    const $indices = convertToTensor(indices, 'indices', 'oneHot', 'int32');\r\n    const outShape = [...$indices.shape, depth];\r\n    const forward = (backend, save) => {\r\n        save([$indices]);\r\n        return reshape(backend.oneHot(reshape($indices, [$indices.size]), depth, onValue, offValue), outShape);\r\n    };\r\n    const inputs = { indices: $indices };\r\n    const attrs = { depth, onValue, offValue };\r\n    return ENGINE.runKernelFunc(forward, inputs, null /* grad */, OneHot, attrs);\r\n}\r\nexport const oneHot = op({ oneHot_ });\r\n//# sourceMappingURL=one_hot.js.map"]},"metadata":{},"sourceType":"module"}