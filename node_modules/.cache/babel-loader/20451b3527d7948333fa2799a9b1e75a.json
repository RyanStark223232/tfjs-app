{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { Minimum } from '../kernel_names';\nimport { makeTypesMatch } from '../tensor_util';\nimport { convertToTensor } from '../tensor_util_env';\nimport { assertAndGetBroadcastShape } from './broadcast_util';\nimport { cast } from './cast';\nimport { op } from './operation';\n/**\r\n * Returns the min of a and b (`a < b ? a : b`) element-wise.\r\n * Supports broadcasting.\r\n *\r\n * We also expose `minimumStrict` which has the same signature as this op and\r\n * asserts that `a` and `b` are the same shape (does not broadcast).\r\n *\r\n * ```js\r\n * const a = tf.tensor1d([1, 4, 3, 16]);\r\n * const b = tf.tensor1d([1, 2, 9, 4]);\r\n *\r\n * a.minimum(b).print();  // or tf.minimum(a, b)\r\n * ```\r\n *\r\n * ```js\r\n * // Broadcast minimum a with b.\r\n * const a = tf.tensor1d([2, 4, 6, 8]);\r\n * const b = tf.scalar(5);\r\n *\r\n * a.minimum(b).print();  // or tf.minimum(a, b)\r\n * ```\r\n *\r\n * @param a The first tensor.\r\n * @param b The second tensor. Must have the same type as `a`.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\r\n */\n\nfunction minimum_(a, b) {\n  let $a = convertToTensor(a, 'a', 'minimum');\n  let $b = convertToTensor(b, 'b', 'minimum');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  if ($a.dtype === 'bool') {\n    $a = cast($a, 'int32');\n    $b = cast($b, 'int32');\n  }\n\n  assertAndGetBroadcastShape($a.shape, $b.shape);\n\n  const forward = (backend, save) => {\n    const res = backend.minimum($a, $b);\n    save([$a, $b]);\n    return res;\n  };\n\n  const inputs = {\n    a: $a,\n    b: $b\n  };\n  return ENGINE.runKernelFunc(forward, inputs, null\n  /* gradient */\n  , Minimum);\n}\n\nexport const minimum = op({\n  minimum_\n});","map":{"version":3,"sources":["../../src/ops/minimum.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,MAAR,QAAkC,WAAlC;AACA,SAAQ,OAAR,QAAqC,iBAArC;AAGA,SAAQ,cAAR,QAA6B,gBAA7B;AACA,SAAQ,eAAR,QAA8B,oBAA9B;AAGA,SAAQ,0BAAR,QAAyC,kBAAzC;AACA,SAAQ,IAAR,QAAmB,QAAnB;AACA,SAAQ,EAAR,QAAiB,aAAjB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BG;;AACH,SAAS,QAAT,CACI,CADJ,EAC0B,CAD1B,EAC8C;AAC5C,MAAI,EAAE,GAAG,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,SAAT,CAAxB;AACA,MAAI,EAAE,GAAG,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,SAAT,CAAxB;AACA,GAAC,EAAD,EAAK,EAAL,IAAW,cAAc,CAAC,EAAD,EAAK,EAAL,CAAzB;;AAEA,MAAI,EAAE,CAAC,KAAH,KAAa,MAAjB,EAAyB;AACvB,IAAA,EAAE,GAAG,IAAI,CAAC,EAAD,EAAK,OAAL,CAAT;AACA,IAAA,EAAE,GAAG,IAAI,CAAC,EAAD,EAAK,OAAL,CAAT;AACD;;AAED,EAAA,0BAA0B,CAAC,EAAE,CAAC,KAAJ,EAAW,EAAE,CAAC,KAAd,CAA1B;;AAEA,QAAM,OAAO,GAAwB,CAAC,OAAD,EAAU,IAAV,KAAkB;AACrD,UAAM,GAAG,GAAG,OAAO,CAAC,OAAR,CAAgB,EAAhB,EAAoB,EAApB,CAAZ;AACA,IAAA,IAAI,CAAC,CAAC,EAAD,EAAK,EAAL,CAAD,CAAJ;AACA,WAAO,GAAP;AACD,GAJD;;AAKA,QAAM,MAAM,GAAkB;AAAC,IAAA,CAAC,EAAE,EAAJ;AAAQ,IAAA,CAAC,EAAE;AAAX,GAA9B;AAEA,SAAO,MAAM,CAAC,aAAP,CACI,OADJ,EACa,MADb,EAC6C;AAAK;AADlD,IAEI,OAFJ,CAAP;AAGD;;AAED,OAAO,MAAM,OAAO,GAAG,EAAE,CAAC;AAAC,EAAA;AAAD,CAAD,CAAlB","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { ENGINE } from '../engine';\r\nimport { Minimum } from '../kernel_names';\r\nimport { makeTypesMatch } from '../tensor_util';\r\nimport { convertToTensor } from '../tensor_util_env';\r\nimport { assertAndGetBroadcastShape } from './broadcast_util';\r\nimport { cast } from './cast';\r\nimport { op } from './operation';\r\n/**\r\n * Returns the min of a and b (`a < b ? a : b`) element-wise.\r\n * Supports broadcasting.\r\n *\r\n * We also expose `minimumStrict` which has the same signature as this op and\r\n * asserts that `a` and `b` are the same shape (does not broadcast).\r\n *\r\n * ```js\r\n * const a = tf.tensor1d([1, 4, 3, 16]);\r\n * const b = tf.tensor1d([1, 2, 9, 4]);\r\n *\r\n * a.minimum(b).print();  // or tf.minimum(a, b)\r\n * ```\r\n *\r\n * ```js\r\n * // Broadcast minimum a with b.\r\n * const a = tf.tensor1d([2, 4, 6, 8]);\r\n * const b = tf.scalar(5);\r\n *\r\n * a.minimum(b).print();  // or tf.minimum(a, b)\r\n * ```\r\n *\r\n * @param a The first tensor.\r\n * @param b The second tensor. Must have the same type as `a`.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\r\n */\r\nfunction minimum_(a, b) {\r\n    let $a = convertToTensor(a, 'a', 'minimum');\r\n    let $b = convertToTensor(b, 'b', 'minimum');\r\n    [$a, $b] = makeTypesMatch($a, $b);\r\n    if ($a.dtype === 'bool') {\r\n        $a = cast($a, 'int32');\r\n        $b = cast($b, 'int32');\r\n    }\r\n    assertAndGetBroadcastShape($a.shape, $b.shape);\r\n    const forward = (backend, save) => {\r\n        const res = backend.minimum($a, $b);\r\n        save([$a, $b]);\r\n        return res;\r\n    };\r\n    const inputs = { a: $a, b: $b };\r\n    return ENGINE.runKernelFunc(forward, inputs, null /* gradient */, Minimum);\r\n}\r\nexport const minimum = op({ minimum_ });\r\n//# sourceMappingURL=minimum.js.map"]},"metadata":{},"sourceType":"module"}