{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nexport class ResizeNearestNeigborBackpropProgram {\n  constructor(dy, x, alignCorners) {\n    this.variableNames = ['dy'];\n    this.outputShape = [];\n    this.outputShape = x.shape;\n    const [, xHeight, xWidth] = x.shape;\n    const [, yHeight, yWidth] = dy.shape; // In the backwards pass, we want to find the pixels that were generated for\n    // each pixel in the input image the forward pass and add the corresponding\n    // coefficient from dy to the gradient (with some interpolation).\n\n    const effectiveXSize = [alignCorners && yHeight > 1 ? xHeight - 1 : xHeight, alignCorners && yWidth > 1 ? xWidth - 1 : xWidth];\n    const effectiveYSize = [alignCorners && yHeight > 1 ? yHeight - 1 : yHeight, alignCorners && yWidth > 1 ? yWidth - 1 : yWidth];\n    const heightScale = effectiveXSize[0] / effectiveYSize[0];\n    const widthScale = effectiveXSize[1] / effectiveYSize[1];\n    const invHeightScale = 1 / heightScale;\n    const invWidthScale = 1 / widthScale; // This defines the size of the window of values around a particular\n    // index in dy that we want to search for contributions to dx.\n\n    const winHeight = Math.ceil(invHeightScale) * 2 + 2;\n    const winWidth = Math.ceil(invWidthScale) * 2 + 2;\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${heightScale});\n        const float widthScale = float(${widthScale});\n\n        const float invHeightScale = float(${invHeightScale});\n        const float invWidthScale = float(${invWidthScale});\n\n        const int winHeight = int(${winHeight});\n        const int winWidth = int(${winWidth});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${yHeight}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${yWidth}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${effectiveXSize[0]}) *\n                (float(dyR) / float(${effectiveYSize[0]}));\n\n            float sourceFracCol =\n                float(${effectiveXSize[1]}) *\n                  (float(dyC) / float(${effectiveYSize[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${xHeight}) - 1),\n                ${alignCorners} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${xWidth}) - 1),\n                ${alignCorners} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `;\n  }\n\n}","map":{"version":3,"sources":["../src/resize_nearest_neighbor_backprop_gpu.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAKH,OAAM,MAAO,mCAAP,CAA0C;AAK9C,EAAA,WAAA,CAAY,EAAZ,EAA0B,CAA1B,EAAuC,YAAvC,EAA4D;AAJ5D,SAAA,aAAA,GAAgB,CAAC,IAAD,CAAhB;AACA,SAAA,WAAA,GAAwB,EAAxB;AAIE,SAAK,WAAL,GAAmB,CAAC,CAAC,KAArB;AACA,UAAM,GAAG,OAAH,EAAY,MAAZ,IAAwB,CAAC,CAAC,KAAhC;AACA,UAAM,GAAG,OAAH,EAAY,MAAZ,IAAsB,EAAE,CAAC,KAA/B,CAH0D,CAK1D;AACA;AACA;;AAEA,UAAM,cAAc,GAAqB,CACtC,YAAY,IAAI,OAAO,GAAG,CAA3B,GAAgC,OAAO,GAAG,CAA1C,GAA8C,OADP,EAEtC,YAAY,IAAI,MAAM,GAAG,CAA1B,GAA+B,MAAM,GAAG,CAAxC,GAA4C,MAFL,CAAzC;AAKA,UAAM,cAAc,GAAqB,CACtC,YAAY,IAAI,OAAO,GAAG,CAA3B,GAAgC,OAAO,GAAG,CAA1C,GAA8C,OADP,EAEtC,YAAY,IAAI,MAAM,GAAG,CAA1B,GAA+B,MAAM,GAAG,CAAxC,GAA4C,MAFL,CAAzC;AAKA,UAAM,WAAW,GAAG,cAAc,CAAC,CAAD,CAAd,GAAoB,cAAc,CAAC,CAAD,CAAtD;AACA,UAAM,UAAU,GAAG,cAAc,CAAC,CAAD,CAAd,GAAoB,cAAc,CAAC,CAAD,CAArD;AAEA,UAAM,cAAc,GAAG,IAAI,WAA3B;AACA,UAAM,aAAa,GAAG,IAAI,UAA1B,CAvB0D,CAyB1D;AACA;;AACA,UAAM,SAAS,GAAI,IAAI,CAAC,IAAL,CAAU,cAAV,IAA4B,CAA7B,GAAkC,CAApD;AACA,UAAM,QAAQ,GAAI,IAAI,CAAC,IAAL,CAAU,aAAV,IAA2B,CAA5B,GAAiC,CAAlD;AAEA,SAAK,QAAL,GAAgB;;;;;;;;;;0CAUsB,WAAW;yCACZ,UAAU;;6CAEN,cAAc;4CACf,aAAa;;oCAErB,SAAS;mCACV,QAAQ;;;;;;;;;;;;;;kCAcT,OAAO;;;;;;;;oCAQL,MAAM;;;;;sBAKpB,cAAc,CAAC,CAAD,CAAG;sCACD,cAAc,CAAC,CAAD,CAAG;;;wBAG/B,cAAc,CAAC,CAAD,CAAG;wCACD,cAAc,CAAC,CAAD,CAAG;;;4BAG7B,OAAO;kBACjB,YAAY;;;;4BAIF,MAAM;kBAChB,YAAY;;;;;;;;;;;;AAYzB,KAtED;AAuED;;AA1G6C","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nexport class ResizeNearestNeigborBackpropProgram {\r\n    constructor(dy, x, alignCorners) {\r\n        this.variableNames = ['dy'];\r\n        this.outputShape = [];\r\n        this.outputShape = x.shape;\r\n        const [, xHeight, xWidth,] = x.shape;\r\n        const [, yHeight, yWidth] = dy.shape;\r\n        // In the backwards pass, we want to find the pixels that were generated for\r\n        // each pixel in the input image the forward pass and add the corresponding\r\n        // coefficient from dy to the gradient (with some interpolation).\r\n        const effectiveXSize = [\r\n            (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\r\n            (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\r\n        ];\r\n        const effectiveYSize = [\r\n            (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\r\n            (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\r\n        ];\r\n        const heightScale = effectiveXSize[0] / effectiveYSize[0];\r\n        const widthScale = effectiveXSize[1] / effectiveYSize[1];\r\n        const invHeightScale = 1 / heightScale;\r\n        const invWidthScale = 1 / widthScale;\r\n        // This defines the size of the window of values around a particular\r\n        // index in dy that we want to search for contributions to dx.\r\n        const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\r\n        const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\r\n        this.userCode = `\r\n      void main() {\r\n        ivec4 coords = getOutputCoords();\r\n        int b = coords[0];\r\n        int d = coords[3];\r\n        int r = coords[1];\r\n        int c = coords[2];\r\n\r\n        float accumulator = 0.0;\r\n\r\n        const float heightScale = float(${heightScale});\r\n        const float widthScale = float(${widthScale});\r\n\r\n        const float invHeightScale = float(${invHeightScale});\r\n        const float invWidthScale = float(${invWidthScale});\r\n\r\n        const int winHeight = int(${winHeight});\r\n        const int winWidth = int(${winWidth});\r\n\r\n        // Compute bounds for where in dy we will look\r\n        float startRLerp = floor(float(r) * invHeightScale);\r\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\r\n\r\n        float startCLerp = floor(float(c) * invWidthScale);\r\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\r\n\r\n        // Loop over dy\r\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\r\n          int dyR = dyROffset + startDyR;\r\n\r\n          // Guard against the window exceeding the bounds of dy\r\n          if (dyR < 0 || dyR >= ${yHeight}) {\r\n            continue;\r\n          }\r\n\r\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\r\n            int dyC = dyCOffset + startDyC;\r\n\r\n            // Guard against the window exceeding the bounds of dy\r\n            if (dyC < 0 || dyC >= ${yWidth}) {\r\n              continue;\r\n            }\r\n\r\n            float sourceFracRow =\r\n              float(${effectiveXSize[0]}) *\r\n                (float(dyR) / float(${effectiveYSize[0]}));\r\n\r\n            float sourceFracCol =\r\n                float(${effectiveXSize[1]}) *\r\n                  (float(dyC) / float(${effectiveYSize[1]}));\r\n\r\n            int sourceNearestRow = int(min(\r\n                float(int(${xHeight}) - 1),\r\n                ${alignCorners} ? float(round(sourceFracRow)) :\r\n                                  float(floor(sourceFracRow))));\r\n\r\n            int sourceNearestCol = int(min(\r\n                float(int(${xWidth}) - 1),\r\n                ${alignCorners} ? float(round(sourceFracCol)) :\r\n                                  float(floor(sourceFracCol))));\r\n\r\n            if (r == sourceNearestRow && c == sourceNearestCol) {\r\n              accumulator += getDy(b, dyR, dyC, d);\r\n            }\r\n          }\r\n        }\r\n        // End loop over dy\r\n\r\n        setOutput(accumulator);\r\n      }\r\n    `;\r\n    }\r\n}\r\n//# sourceMappingURL=resize_nearest_neighbor_backprop_gpu.js.map"]},"metadata":{},"sourceType":"module"}