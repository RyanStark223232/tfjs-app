{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { OnesLike } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { complex } from './complex';\nimport { imag } from './imag';\nimport { op } from './operation';\nimport { real } from './real';\nimport { zerosLike } from './zeros_like';\n/**\r\n * Creates a `tf.Tensor` with all elements set to 1 with the same shape as the\r\n * given tensor.\r\n *\r\n * ```js\r\n * const x = tf.tensor([1, 2]);\r\n * tf.onesLike(x).print();\r\n * ```\r\n * @param x A tensor.\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Creation'}\r\n */\n\nfunction onesLike_(x) {\n  var $x = convertToTensor(x, 'x', 'onesLike');\n\n  var forward = function forward(backend, save) {\n    if ($x.dtype === 'complex64') {\n      var r = onesLike(real($x));\n      var i = zerosLike(imag($x));\n      return complex(r, i);\n    }\n\n    return backend.onesLike($x);\n  };\n\n  var inputs = {\n    x: $x\n  };\n  return ENGINE.runKernelFunc(forward, inputs, null\n  /* grad */\n  , OnesLike);\n}\n\nexport var onesLike = op({\n  onesLike_: onesLike_\n});","map":{"version":3,"sources":["../../src/ops/ones_like.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,MAAR,QAAkC,WAAlC;AACA,SAAQ,QAAR,QAAuC,iBAAvC;AAGA,SAAQ,eAAR,QAA8B,oBAA9B;AAGA,SAAQ,OAAR,QAAsB,WAAtB;AACA,SAAQ,IAAR,QAAmB,QAAnB;AACA,SAAQ,EAAR,QAAiB,aAAjB;AACA,SAAQ,IAAR,QAAmB,QAAnB;AACA,SAAQ,SAAR,QAAwB,cAAxB;AAEA;;;;;;;;;;;AAWG;;AACH,SAAS,SAAT,CAAqC,CAArC,EAAoD;AAClD,MAAM,EAAE,GAAG,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,UAAT,CAA1B;;AAEA,MAAM,OAAO,GAAwB,SAA/B,OAA+B,CAAC,OAAD,EAAU,IAAV,EAAkB;AACrD,QAAI,EAAE,CAAC,KAAH,KAAa,WAAjB,EAA8B;AAC5B,UAAM,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC,EAAD,CAAL,CAAlB;AACA,UAAM,CAAC,GAAG,SAAS,CAAC,IAAI,CAAC,EAAD,CAAL,CAAnB;AACA,aAAO,OAAO,CAAC,CAAD,EAAI,CAAJ,CAAd;AACD;;AAED,WAAO,OAAO,CAAC,QAAR,CAAiB,EAAjB,CAAP;AACD,GARD;;AAUA,MAAM,MAAM,GAAmB;AAAC,IAAA,CAAC,EAAE;AAAJ,GAA/B;AACA,SAAO,MAAM,CAAC,aAAP,CACI,OADJ,EACa,MADb,EAC6C;AAAK;AADlD,IAEI,QAFJ,CAAP;AAGD;;AAED,OAAO,IAAM,QAAQ,GAAG,EAAE,CAAC;AAAC,EAAA,SAAS,EAAT;AAAD,CAAD,CAAnB","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { ENGINE } from '../engine';\r\nimport { OnesLike } from '../kernel_names';\r\nimport { convertToTensor } from '../tensor_util_env';\r\nimport { complex } from './complex';\r\nimport { imag } from './imag';\r\nimport { op } from './operation';\r\nimport { real } from './real';\r\nimport { zerosLike } from './zeros_like';\r\n/**\r\n * Creates a `tf.Tensor` with all elements set to 1 with the same shape as the\r\n * given tensor.\r\n *\r\n * ```js\r\n * const x = tf.tensor([1, 2]);\r\n * tf.onesLike(x).print();\r\n * ```\r\n * @param x A tensor.\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Creation'}\r\n */\r\nfunction onesLike_(x) {\r\n    const $x = convertToTensor(x, 'x', 'onesLike');\r\n    const forward = (backend, save) => {\r\n        if ($x.dtype === 'complex64') {\r\n            const r = onesLike(real($x));\r\n            const i = zerosLike(imag($x));\r\n            return complex(r, i);\r\n        }\r\n        return backend.onesLike($x);\r\n    };\r\n    const inputs = { x: $x };\r\n    return ENGINE.runKernelFunc(forward, inputs, null /* grad */, OnesLike);\r\n}\r\nexport const onesLike = op({ onesLike_ });\r\n//# sourceMappingURL=ones_like.js.map"]},"metadata":{},"sourceType":"module"}