{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { getGlslDifferences } from './glsl_version';\nimport * as shader_util from './shader_compiler_util';\nimport { getDenseTexShape, PackingScheme } from './tex_util';\nexport class DecodeMatrixPackedProgram {\n  constructor(outputShape) {\n    this.variableNames = ['A'];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    this.outPackingScheme = PackingScheme.DENSE;\n    const texShape = getDenseTexShape(outputShape);\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.userCode = `\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], outputShape)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${texShape[0]}, ${texShape[1]}));\n        int index = 4 * (resTexRC.x * ${texShape[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n\n}","map":{"version":3,"sources":["../src/decode_matrix_packed_gpu.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,kBAAR,QAAiC,gBAAjC;AAEA,OAAO,KAAK,WAAZ,MAA6B,wBAA7B;AACA,SAAQ,gBAAR,EAA0B,aAA1B,QAA8C,YAA9C;AAEA,OAAM,MAAO,yBAAP,CAAgC;AAQpC,EAAA,WAAA,CAAY,WAAZ,EAAiD;AAPjD,SAAA,aAAA,GAAgB,CAAC,GAAD,CAAhB;AAEA,SAAA,YAAA,GAAe,IAAf;AACA,SAAA,YAAA,GAAe,IAAf;AAEA,SAAA,gBAAA,GAAmB,aAAa,CAAC,KAAjC;AAGE,UAAM,QAAQ,GAAG,gBAAgB,CAAC,WAAD,CAAjC;AACA,UAAM,IAAI,GAAG,kBAAkB,EAA/B;AACA,SAAK,WAAL,GAAmB,WAAnB;AAEA,SAAK,QAAL,GAAgB;;UAGZ,WAAW,CAAC,kCAAZ,CACI,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CADJ,EACqB,WADrB,CACiC;;;;;;iBAMxB,QAAQ,CAAC,CAAD,CAAG,KAAK,QAAQ,CAAC,CAAD,CAAG;wCACJ,QAAQ,CAAC,CAAD,CAAG;;;;;;;;;;UAUzC,IAAI,CAAC,MAAM;;AAEhB,KAvBD;AAwBD;;AArCmC","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { getGlslDifferences } from './glsl_version';\r\nimport * as shader_util from './shader_compiler_util';\r\nimport { getDenseTexShape, PackingScheme } from './tex_util';\r\nexport class DecodeMatrixPackedProgram {\r\n    constructor(outputShape) {\r\n        this.variableNames = ['A'];\r\n        this.packedInputs = true;\r\n        this.packedOutput = true;\r\n        this.outPackingScheme = PackingScheme.DENSE;\r\n        const texShape = getDenseTexShape(outputShape);\r\n        const glsl = getGlslDifferences();\r\n        this.outputShape = outputShape;\r\n        this.userCode = `\r\n      ivec3 outCoordsFromFlatIndex(int index) {\r\n        ${shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], outputShape)}\r\n        return ivec3(r, c, d);\r\n      }\r\n\r\n      void main() {\r\n        ivec2 resTexRC = ivec2(resultUV.yx *\r\n          vec2(${texShape[0]}, ${texShape[1]}));\r\n        int index = 4 * (resTexRC.x * ${texShape[1]} + resTexRC.y);\r\n\r\n        vec4 result = vec4(0.);\r\n\r\n        for (int i=0; i<4; i++) {\r\n          int flatIndex = index + i;\r\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\r\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\r\n        }\r\n\r\n        ${glsl.output} = result;\r\n      }\r\n    `;\r\n    }\r\n}\r\n//# sourceMappingURL=decode_matrix_packed_gpu.js.map"]},"metadata":{},"sourceType":"module"}