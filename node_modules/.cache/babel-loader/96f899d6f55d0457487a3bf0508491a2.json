{"ast":null,"code":"import _classCallCheck from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { getGlslDifferences } from './glsl_version';\nexport var Im2ColPackedProgram = function Im2ColPackedProgram(outputShape, inputShape, convInfo) {\n  _classCallCheck(this, Im2ColPackedProgram);\n\n  this.variableNames = ['A'];\n  this.packedInputs = true;\n  this.packedOutput = true;\n  this.outputShape = outputShape;\n  var filterWidth = convInfo.filterWidth,\n      inChannels = convInfo.inChannels,\n      strideWidth = convInfo.strideWidth,\n      strideHeight = convInfo.strideHeight,\n      padInfo = convInfo.padInfo,\n      outWidth = convInfo.outWidth,\n      dilationWidth = convInfo.dilationWidth,\n      dilationHeight = convInfo.dilationHeight,\n      dataFormat = convInfo.dataFormat;\n  var left = padInfo.left,\n      top = padInfo.top;\n  var itemsPerBlockRow = inChannels * filterWidth;\n  var glsl = getGlslDifferences();\n  var isChannelsLast = dataFormat === 'channelsLast';\n  var rowDim = isChannelsLast ? 0 : 1;\n  var colDim = isChannelsLast ? 1 : 2;\n  var unrolled = \"\";\n\n  for (var row = 0; row <= 1; row++) {\n    for (var col = 0; col <= 1; col++) {\n      unrolled += \"\\n          blockIndex = rc.y + \".concat(col, \";\\n          pos = rc.x + \").concat(row, \";\\n\\n          if(blockIndex < \").concat(outputShape[1], \" && pos < \").concat(outputShape[0], \") {\\n            offsetY = int(blockIndex / (\").concat(outWidth, \")) * \").concat(strideHeight, \" - \").concat(top, \";\\n            d0 = offsetY + \").concat(dilationHeight, \" * (pos / \").concat(itemsPerBlockRow, \");\\n\\n            if(d0 < \").concat(inputShape[rowDim], \" && d0 >= 0) {\\n\\n              offsetX = int(mod(float(blockIndex), \").concat(outWidth, \".) * \").concat(strideWidth, \". - \").concat(left, \".);\\n              d1 = offsetX + \").concat(dilationWidth, \" * (int(mod(float(pos), \").concat(itemsPerBlockRow, \".) / \").concat(inChannels, \".));\\n\\n              if(d1 < \").concat(inputShape[colDim], \" && d1 >= 0) {\\n\\n                ch = int(mod(float(pos), \").concat(inChannels, \".));\\n\\n                if (\").concat(isChannelsLast, \") {\\n                  innerDims = vec2(d1, ch);\\n                  result[\").concat(row * 2 + col, \"] = getChannel(\\n                    getA(d0, int(innerDims.x),\\n                    int(innerDims.y)), innerDims);\\n                } else {\\n                  innerDims = vec2(d0, d1);\\n                  result[\").concat(row * 2 + col, \"] = getChannel(\\n                    getA(ch, int(innerDims.x),\\n                    int(innerDims.y)), innerDims);\\n                }\\n              }\\n            }\\n          }\\n        \");\n    }\n  }\n\n  this.userCode = \"\\n      void main() {\\n        ivec2 rc = getOutputCoords();\\n\\n        vec4 result = vec4(0);\\n\\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\\n        vec2 innerDims;\\n\\n        \".concat(unrolled, \"\\n\\n        \").concat(glsl.output, \" = result;\\n      }\\n    \");\n};","map":{"version":3,"sources":["../src/im2col_packed_gpu.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AAGH,SAAQ,kBAAR,QAAiC,gBAAjC;AAGA,WAAa,mBAAb,GAOE,6BACI,WADJ,EAC2B,UAD3B,EAEI,QAFJ,EAEqC;AAAA;;AARrC,OAAA,aAAA,GAAgB,CAAC,GAAD,CAAhB;AACA,OAAA,YAAA,GAAe,IAAf;AACA,OAAA,YAAA,GAAe,IAAf;AAOE,OAAK,WAAL,GAAmB,WAAnB;AADmC,MAIjC,WAJiC,GAa/B,QAb+B,CAIjC,WAJiC;AAAA,MAKjC,UALiC,GAa/B,QAb+B,CAKjC,UALiC;AAAA,MAMjC,WANiC,GAa/B,QAb+B,CAMjC,WANiC;AAAA,MAOjC,YAPiC,GAa/B,QAb+B,CAOjC,YAPiC;AAAA,MAQjC,OARiC,GAa/B,QAb+B,CAQjC,OARiC;AAAA,MASjC,QATiC,GAa/B,QAb+B,CASjC,QATiC;AAAA,MAUjC,aAViC,GAa/B,QAb+B,CAUjC,aAViC;AAAA,MAWjC,cAXiC,GAa/B,QAb+B,CAWjC,cAXiC;AAAA,MAYjC,UAZiC,GAa/B,QAb+B,CAYjC,UAZiC;AAAA,MAc5B,IAd4B,GAcf,OAde,CAc5B,IAd4B;AAAA,MActB,GAdsB,GAcf,OAde,CActB,GAdsB;AAenC,MAAM,gBAAgB,GAAG,UAAU,GAAG,WAAtC;AACA,MAAM,IAAI,GAAG,kBAAkB,EAA/B;AACA,MAAM,cAAc,GAAG,UAAU,KAAK,cAAtC;AACA,MAAM,MAAM,GAAG,cAAc,GAAG,CAAH,GAAO,CAApC;AACA,MAAM,MAAM,GAAG,cAAc,GAAG,CAAH,GAAO,CAApC;AAEA,MAAI,QAAQ,KAAZ;;AAEA,OAAK,IAAI,GAAG,GAAG,CAAf,EAAkB,GAAG,IAAI,CAAzB,EAA4B,GAAG,EAA/B,EAAmC;AACjC,SAAK,IAAI,GAAG,GAAG,CAAf,EAAkB,GAAG,IAAI,CAAzB,EAA4B,GAAG,EAA/B,EAAmC;AACjC,MAAA,QAAQ,8CACgB,GADhB,uCAES,GAFT,4CAIY,WAAW,CAAC,CAAD,CAJvB,uBAIuC,WAAW,CAAC,CAAD,CAJlD,0DAK0B,QAL1B,kBAK0C,YAL1C,gBAMJ,GANI,2CAOa,cAPb,uBAOwC,gBAPxC,uCASM,UAAU,CAAC,MAAD,CAThB,kFAWqC,QAXrC,kBAYJ,WAZI,iBAYc,IAZd,+CAae,aAbf,qCAcJ,gBAdI,kBAcoB,UAdpB,2CAgBQ,UAAU,CAAC,MAAD,CAhBlB,wEAkB2B,UAlB3B,yCAoBM,cApBN,wFAsBW,GAAG,GAAG,CAAN,GAAU,GAtBrB,kOA2BW,GAAG,GAAG,CAAN,GAAU,GA3BrB,kMAAR;AAmCD;AACF;;AAED,OAAK,QAAL,8MASM,QATN,yBAWM,IAAI,CAAC,MAXX;AAcD,CAtFH","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { getGlslDifferences } from './glsl_version';\r\nexport class Im2ColPackedProgram {\r\n    constructor(outputShape, inputShape, convInfo) {\r\n        this.variableNames = ['A'];\r\n        this.packedInputs = true;\r\n        this.packedOutput = true;\r\n        this.outputShape = outputShape;\r\n        const { filterWidth, inChannels, strideWidth, strideHeight, padInfo, outWidth, dilationWidth, dilationHeight, dataFormat } = convInfo;\r\n        const { left, top } = padInfo;\r\n        const itemsPerBlockRow = inChannels * filterWidth;\r\n        const glsl = getGlslDifferences();\r\n        const isChannelsLast = dataFormat === 'channelsLast';\r\n        const rowDim = isChannelsLast ? 0 : 1;\r\n        const colDim = isChannelsLast ? 1 : 2;\r\n        let unrolled = ``;\r\n        for (let row = 0; row <= 1; row++) {\r\n            for (let col = 0; col <= 1; col++) {\r\n                unrolled += `\r\n          blockIndex = rc.y + ${col};\r\n          pos = rc.x + ${row};\r\n\r\n          if(blockIndex < ${outputShape[1]} && pos < ${outputShape[0]}) {\r\n            offsetY = int(blockIndex / (${outWidth})) * ${strideHeight} - ${top};\r\n            d0 = offsetY + ${dilationHeight} * (pos / ${itemsPerBlockRow});\r\n\r\n            if(d0 < ${inputShape[rowDim]} && d0 >= 0) {\r\n\r\n              offsetX = int(mod(float(blockIndex), ${outWidth}.) * ${strideWidth}. - ${left}.);\r\n              d1 = offsetX + ${dilationWidth} * (int(mod(float(pos), ${itemsPerBlockRow}.) / ${inChannels}.));\r\n\r\n              if(d1 < ${inputShape[colDim]} && d1 >= 0) {\r\n\r\n                ch = int(mod(float(pos), ${inChannels}.));\r\n\r\n                if (${isChannelsLast}) {\r\n                  innerDims = vec2(d1, ch);\r\n                  result[${row * 2 + col}] = getChannel(\r\n                    getA(d0, int(innerDims.x),\r\n                    int(innerDims.y)), innerDims);\r\n                } else {\r\n                  innerDims = vec2(d0, d1);\r\n                  result[${row * 2 + col}] = getChannel(\r\n                    getA(ch, int(innerDims.x),\r\n                    int(innerDims.y)), innerDims);\r\n                }\r\n              }\r\n            }\r\n          }\r\n        `;\r\n            }\r\n        }\r\n        this.userCode = `\r\n      void main() {\r\n        ivec2 rc = getOutputCoords();\r\n\r\n        vec4 result = vec4(0);\r\n\r\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\r\n        vec2 innerDims;\r\n\r\n        ${unrolled}\r\n\r\n        ${glsl.output} = result;\r\n      }\r\n    `;\r\n    }\r\n}\r\n//# sourceMappingURL=im2col_packed_gpu.js.map"]},"metadata":{},"sourceType":"module"}