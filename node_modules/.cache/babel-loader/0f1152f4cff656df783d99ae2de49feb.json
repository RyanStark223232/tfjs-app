{"ast":null,"code":"import { factory } from '../utils/factory';\nimport { deepMap } from '../utils/collection';\nvar name = 'boolean';\nvar dependencies = ['typed'];\nexport var createBoolean = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n  /**\r\n   * Create a boolean or convert a string or number to a boolean.\r\n   * In case of a number, `true` is returned for non-zero numbers, and `false` in\r\n   * case of zero.\r\n   * Strings can be `'true'` or `'false'`, or can contain a number.\r\n   * When value is a matrix, all elements will be converted to boolean.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.boolean(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.boolean(0)     // returns false\r\n   *    math.boolean(1)     // returns true\r\n   *    math.boolean(-3)     // returns true\r\n   *    math.boolean('true')     // returns true\r\n   *    math.boolean('false')     // returns false\r\n   *    math.boolean([1, 0, 1, 1])     // returns [true, false, true, true]\r\n   *\r\n   * See also:\r\n   *\r\n   *    bignumber, complex, index, matrix, string, unit\r\n   *\r\n   * @param {string | number | boolean | Array | Matrix | null} value  A value of any type\r\n   * @return {boolean | Array | Matrix} The boolean value\r\n   */\n\n  return typed(name, {\n    '': function _() {\n      return false;\n    },\n    \"boolean\": function boolean(x) {\n      return x;\n    },\n    number: function number(x) {\n      return !!x;\n    },\n    \"null\": function _null(x) {\n      return false;\n    },\n    BigNumber: function BigNumber(x) {\n      return !x.isZero();\n    },\n    string: function string(x) {\n      // try case insensitive\n      var lcase = x.toLowerCase();\n\n      if (lcase === 'true') {\n        return true;\n      } else if (lcase === 'false') {\n        return false;\n      } // test whether value is a valid number\n\n\n      var num = Number(x);\n\n      if (x !== '' && !isNaN(num)) {\n        return !!num;\n      }\n\n      throw new Error('Cannot convert \"' + x + '\" to a boolean');\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, this);\n    }\n  });\n});","map":{"version":3,"sources":["C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/mathjs/es/type/boolean.js"],"names":["factory","deepMap","name","dependencies","createBoolean","_ref","typed","_","boolean","x","number","_null","BigNumber","isZero","string","lcase","toLowerCase","num","Number","isNaN","Error","ArrayMatrix"],"mappings":"AAAA,SAASA,OAAT,QAAwB,kBAAxB;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,IAAIC,IAAI,GAAG,SAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,CAAnB;AACA,OAAO,IAAIC,aAAa,GAAG,eAAeJ,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AACpF,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOA,KAAK,CAACJ,IAAD,EAAO;AACjB,QAAI,SAASK,CAAT,GAAa;AACf,aAAO,KAAP;AACD,KAHgB;AAIjB,eAAW,SAASC,OAAT,CAAiBC,CAAjB,EAAoB;AAC7B,aAAOA,CAAP;AACD,KANgB;AAOjBC,IAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBD,CAAhB,EAAmB;AACzB,aAAO,CAAC,CAACA,CAAT;AACD,KATgB;AAUjB,YAAQ,SAASE,KAAT,CAAeF,CAAf,EAAkB;AACxB,aAAO,KAAP;AACD,KAZgB;AAajBG,IAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBH,CAAnB,EAAsB;AAC/B,aAAO,CAACA,CAAC,CAACI,MAAF,EAAR;AACD,KAfgB;AAgBjBC,IAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBL,CAAhB,EAAmB;AACzB;AACA,UAAIM,KAAK,GAAGN,CAAC,CAACO,WAAF,EAAZ;;AAEA,UAAID,KAAK,KAAK,MAAd,EAAsB;AACpB,eAAO,IAAP;AACD,OAFD,MAEO,IAAIA,KAAK,KAAK,OAAd,EAAuB;AAC5B,eAAO,KAAP;AACD,OARwB,CAQvB;;;AAGF,UAAIE,GAAG,GAAGC,MAAM,CAACT,CAAD,CAAhB;;AAEA,UAAIA,CAAC,KAAK,EAAN,IAAY,CAACU,KAAK,CAACF,GAAD,CAAtB,EAA6B;AAC3B,eAAO,CAAC,CAACA,GAAT;AACD;;AAED,YAAM,IAAIG,KAAJ,CAAU,qBAAqBX,CAArB,GAAyB,gBAAnC,CAAN;AACD,KAlCgB;AAmCjB,sBAAkB,SAASY,WAAT,CAAqBZ,CAArB,EAAwB;AACxC,aAAOR,OAAO,CAACQ,CAAD,EAAI,IAAJ,CAAd;AACD;AArCgB,GAAP,CAAZ;AAuCD,CArEgD,CAA1C","sourcesContent":["import { factory } from '../utils/factory';\r\nimport { deepMap } from '../utils/collection';\r\nvar name = 'boolean';\r\nvar dependencies = ['typed'];\r\nexport var createBoolean = /* #__PURE__ */factory(name, dependencies, function (_ref) {\r\n  var typed = _ref.typed;\r\n\r\n  /**\r\n   * Create a boolean or convert a string or number to a boolean.\r\n   * In case of a number, `true` is returned for non-zero numbers, and `false` in\r\n   * case of zero.\r\n   * Strings can be `'true'` or `'false'`, or can contain a number.\r\n   * When value is a matrix, all elements will be converted to boolean.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.boolean(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.boolean(0)     // returns false\r\n   *    math.boolean(1)     // returns true\r\n   *    math.boolean(-3)     // returns true\r\n   *    math.boolean('true')     // returns true\r\n   *    math.boolean('false')     // returns false\r\n   *    math.boolean([1, 0, 1, 1])     // returns [true, false, true, true]\r\n   *\r\n   * See also:\r\n   *\r\n   *    bignumber, complex, index, matrix, string, unit\r\n   *\r\n   * @param {string | number | boolean | Array | Matrix | null} value  A value of any type\r\n   * @return {boolean | Array | Matrix} The boolean value\r\n   */\r\n  return typed(name, {\r\n    '': function _() {\r\n      return false;\r\n    },\r\n    \"boolean\": function boolean(x) {\r\n      return x;\r\n    },\r\n    number: function number(x) {\r\n      return !!x;\r\n    },\r\n    \"null\": function _null(x) {\r\n      return false;\r\n    },\r\n    BigNumber: function BigNumber(x) {\r\n      return !x.isZero();\r\n    },\r\n    string: function string(x) {\r\n      // try case insensitive\r\n      var lcase = x.toLowerCase();\r\n\r\n      if (lcase === 'true') {\r\n        return true;\r\n      } else if (lcase === 'false') {\r\n        return false;\r\n      } // test whether value is a valid number\r\n\r\n\r\n      var num = Number(x);\r\n\r\n      if (x !== '' && !isNaN(num)) {\r\n        return !!num;\r\n      }\r\n\r\n      throw new Error('Cannot convert \"' + x + '\" to a boolean');\r\n    },\r\n    'Array | Matrix': function ArrayMatrix(x) {\r\n      return deepMap(x, this);\r\n    }\r\n  });\r\n});"]},"metadata":{},"sourceType":"module"}