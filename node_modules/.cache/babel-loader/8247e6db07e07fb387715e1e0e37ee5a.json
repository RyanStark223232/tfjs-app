{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\n\n/**\r\n * Classes and functions for model management across multiple storage mediums.\r\n *\r\n * Supported client actions:\r\n * - Listing models on all registered storage mediums.\r\n * - Remove model by URL from any registered storage mediums, by using URL\r\n *   string.\r\n * - Moving or copying model from one path to another in the same medium or from\r\n *   one medium to another, by using URL strings.\r\n */\nimport { assert } from '../util';\nimport { IORouterRegistry } from './router_registry';\nconst URL_SCHEME_SUFFIX = '://';\nexport class ModelStoreManagerRegistry {\n  constructor() {\n    this.managers = {};\n  }\n\n  static getInstance() {\n    if (ModelStoreManagerRegistry.instance == null) {\n      ModelStoreManagerRegistry.instance = new ModelStoreManagerRegistry();\n    }\n\n    return ModelStoreManagerRegistry.instance;\n  }\n  /**\r\n   * Register a save-handler router.\r\n   *\r\n   * @param saveRouter A function that maps a URL-like string onto an instance\r\n   * of `IOHandler` with the `save` method defined or `null`.\r\n   */\n\n\n  static registerManager(scheme, manager) {\n    assert(scheme != null, () => 'scheme must not be undefined or null.');\n\n    if (scheme.endsWith(URL_SCHEME_SUFFIX)) {\n      scheme = scheme.slice(0, scheme.indexOf(URL_SCHEME_SUFFIX));\n    }\n\n    assert(scheme.length > 0, () => 'scheme must not be an empty string.');\n    const registry = ModelStoreManagerRegistry.getInstance();\n    assert(registry.managers[scheme] == null, () => `A model store manager is already registered for scheme '${scheme}'.`);\n    registry.managers[scheme] = manager;\n  }\n\n  static getManager(scheme) {\n    const manager = this.getInstance().managers[scheme];\n\n    if (manager == null) {\n      throw new Error(`Cannot find model manager for scheme '${scheme}'`);\n    }\n\n    return manager;\n  }\n\n  static getSchemes() {\n    return Object.keys(this.getInstance().managers);\n  }\n\n}\n/**\r\n * Helper method for parsing a URL string into a scheme and a path.\r\n *\r\n * @param url E.g., 'localstorage://my-model'\r\n * @returns A dictionary with two fields: scheme and path.\r\n *   Scheme: e.g., 'localstorage' in the example above.\r\n *   Path: e.g., 'my-model' in the example above.\r\n */\n\nfunction parseURL(url) {\n  if (url.indexOf(URL_SCHEME_SUFFIX) === -1) {\n    throw new Error(`The url string provided does not contain a scheme. ` + `Supported schemes are: ` + `${ModelStoreManagerRegistry.getSchemes().join(',')}`);\n  }\n\n  return {\n    scheme: url.split(URL_SCHEME_SUFFIX)[0],\n    path: url.split(URL_SCHEME_SUFFIX)[1]\n  };\n}\n\nasync function cloneModelInternal(sourceURL, destURL, deleteSource = false) {\n  assert(sourceURL !== destURL, () => `Old path and new path are the same: '${sourceURL}'`);\n  const loadHandlers = IORouterRegistry.getLoadHandlers(sourceURL);\n  assert(loadHandlers.length > 0, () => `Copying failed because no load handler is found for source URL ${sourceURL}.`);\n  assert(loadHandlers.length < 2, () => `Copying failed because more than one (${loadHandlers.length}) ` + `load handlers for source URL ${sourceURL}.`);\n  const loadHandler = loadHandlers[0];\n  const saveHandlers = IORouterRegistry.getSaveHandlers(destURL);\n  assert(saveHandlers.length > 0, () => `Copying failed because no save handler is found for destination ` + `URL ${destURL}.`);\n  assert(saveHandlers.length < 2, () => `Copying failed because more than one (${loadHandlers.length}) ` + `save handlers for destination URL ${destURL}.`);\n  const saveHandler = saveHandlers[0];\n  const sourceScheme = parseURL(sourceURL).scheme;\n  const sourcePath = parseURL(sourceURL).path;\n  const sameMedium = sourceScheme === parseURL(sourceURL).scheme;\n  const modelArtifacts = await loadHandler.load(); // If moving within the same storage medium, remove the old model as soon as\n  // the loading is done. Without doing this, it is possible that the combined\n  // size of the two models will cause the cloning to fail.\n\n  if (deleteSource && sameMedium) {\n    await ModelStoreManagerRegistry.getManager(sourceScheme).removeModel(sourcePath);\n  }\n\n  const saveResult = await saveHandler.save(modelArtifacts); // If moving between mediums, the deletion is done after the save succeeds.\n  // This guards against the case in which saving to the destination medium\n  // fails.\n\n  if (deleteSource && !sameMedium) {\n    await ModelStoreManagerRegistry.getManager(sourceScheme).removeModel(sourcePath);\n  }\n\n  return saveResult.modelArtifactsInfo;\n}\n/**\r\n * List all models stored in registered storage mediums.\r\n *\r\n * For a web browser environment, the registered mediums are Local Storage and\r\n * IndexedDB.\r\n *\r\n * ```js\r\n * // First create and save a model.\r\n * const model = tf.sequential();\r\n * model.add(tf.layers.dense(\r\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\r\n * await model.save('localstorage://demo/management/model1');\r\n *\r\n * // Then list existing models.\r\n * console.log(JSON.stringify(await tf.io.listModels()));\r\n *\r\n * // Delete the model.\r\n * await tf.io.removeModel('localstorage://demo/management/model1');\r\n *\r\n * // List models again.\r\n * console.log(JSON.stringify(await tf.io.listModels()));\r\n * ```\r\n *\r\n * @returns A `Promise` of a dictionary mapping URLs of existing models to\r\n * their model artifacts info. URLs include medium-specific schemes, e.g.,\r\n *   'indexeddb://my/model/1'. Model artifacts info include type of the\r\n * model's topology, byte sizes of the topology, weights, etc.\r\n *\r\n * @doc {\r\n *   heading: 'Models',\r\n *   subheading: 'Management',\r\n *   namespace: 'io',\r\n *   ignoreCI: true\r\n * }\r\n */\n\n\nasync function listModels() {\n  const schemes = ModelStoreManagerRegistry.getSchemes();\n  const out = {};\n\n  for (const scheme of schemes) {\n    const schemeOut = await ModelStoreManagerRegistry.getManager(scheme).listModels();\n\n    for (const path in schemeOut) {\n      const url = scheme + URL_SCHEME_SUFFIX + path;\n      out[url] = schemeOut[path];\n    }\n  }\n\n  return out;\n}\n/**\r\n * Remove a model specified by URL from a reigstered storage medium.\r\n *\r\n * ```js\r\n * // First create and save a model.\r\n * const model = tf.sequential();\r\n * model.add(tf.layers.dense(\r\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\r\n * await model.save('localstorage://demo/management/model1');\r\n *\r\n * // Then list existing models.\r\n * console.log(JSON.stringify(await tf.io.listModels()));\r\n *\r\n * // Delete the model.\r\n * await tf.io.removeModel('localstorage://demo/management/model1');\r\n *\r\n * // List models again.\r\n * console.log(JSON.stringify(await tf.io.listModels()));\r\n * ```\r\n *\r\n * @param url A URL to a stored model, with a scheme prefix, e.g.,\r\n *   'localstorage://my-model-1', 'indexeddb://my/model/2'.\r\n * @returns ModelArtifactsInfo of the deleted model (if and only if deletion\r\n *   is successful).\r\n * @throws Error if deletion fails, e.g., if no model exists at `path`.\r\n *\r\n * @doc {\r\n *   heading: 'Models',\r\n *   subheading: 'Management',\r\n *   namespace: 'io',\r\n *   ignoreCI: true\r\n * }\r\n */\n\n\nasync function removeModel(url) {\n  const schemeAndPath = parseURL(url);\n  const manager = ModelStoreManagerRegistry.getManager(schemeAndPath.scheme);\n  return manager.removeModel(schemeAndPath.path);\n}\n/**\r\n * Copy a model from one URL to another.\r\n *\r\n * This function supports:\r\n *\r\n * 1. Copying within a storage medium, e.g.,\r\n *    `tf.io.copyModel('localstorage://model-1', 'localstorage://model-2')`\r\n * 2. Copying between two storage mediums, e.g.,\r\n *    `tf.io.copyModel('localstorage://model-1', 'indexeddb://model-1')`\r\n *\r\n * ```js\r\n * // First create and save a model.\r\n * const model = tf.sequential();\r\n * model.add(tf.layers.dense(\r\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\r\n * await model.save('localstorage://demo/management/model1');\r\n *\r\n * // Then list existing models.\r\n * console.log(JSON.stringify(await tf.io.listModels()));\r\n *\r\n * // Copy the model, from Local Storage to IndexedDB.\r\n * await tf.io.copyModel(\r\n *     'localstorage://demo/management/model1',\r\n *     'indexeddb://demo/management/model1');\r\n *\r\n * // List models again.\r\n * console.log(JSON.stringify(await tf.io.listModels()));\r\n *\r\n * // Remove both models.\r\n * await tf.io.removeModel('localstorage://demo/management/model1');\r\n * await tf.io.removeModel('indexeddb://demo/management/model1');\r\n * ```\r\n *\r\n * @param sourceURL Source URL of copying.\r\n * @param destURL Destination URL of copying.\r\n * @returns ModelArtifactsInfo of the copied model (if and only if copying\r\n *   is successful).\r\n * @throws Error if copying fails, e.g., if no model exists at `sourceURL`, or\r\n *   if `oldPath` and `newPath` are identical.\r\n *\r\n * @doc {\r\n *   heading: 'Models',\r\n *   subheading: 'Management',\r\n *   namespace: 'io',\r\n *   ignoreCI: true\r\n * }\r\n */\n\n\nasync function copyModel(sourceURL, destURL) {\n  const deleteSource = false;\n  return cloneModelInternal(sourceURL, destURL, deleteSource);\n}\n/**\r\n * Move a model from one URL to another.\r\n *\r\n * This function supports:\r\n *\r\n * 1. Moving within a storage medium, e.g.,\r\n *    `tf.io.moveModel('localstorage://model-1', 'localstorage://model-2')`\r\n * 2. Moving between two storage mediums, e.g.,\r\n *    `tf.io.moveModel('localstorage://model-1', 'indexeddb://model-1')`\r\n *\r\n * ```js\r\n * // First create and save a model.\r\n * const model = tf.sequential();\r\n * model.add(tf.layers.dense(\r\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\r\n * await model.save('localstorage://demo/management/model1');\r\n *\r\n * // Then list existing models.\r\n * console.log(JSON.stringify(await tf.io.listModels()));\r\n *\r\n * // Move the model, from Local Storage to IndexedDB.\r\n * await tf.io.moveModel(\r\n *     'localstorage://demo/management/model1',\r\n *     'indexeddb://demo/management/model1');\r\n *\r\n * // List models again.\r\n * console.log(JSON.stringify(await tf.io.listModels()));\r\n *\r\n * // Remove the moved model.\r\n * await tf.io.removeModel('indexeddb://demo/management/model1');\r\n * ```\r\n *\r\n * @param sourceURL Source URL of moving.\r\n * @param destURL Destination URL of moving.\r\n * @returns ModelArtifactsInfo of the copied model (if and only if copying\r\n *   is successful).\r\n * @throws Error if moving fails, e.g., if no model exists at `sourceURL`, or\r\n *   if `oldPath` and `newPath` are identical.\r\n *\r\n * @doc {\r\n *   heading: 'Models',\r\n *   subheading: 'Management',\r\n *   namespace: 'io',\r\n *   ignoreCI: true\r\n * }\r\n */\n\n\nasync function moveModel(sourceURL, destURL) {\n  const deleteSource = true;\n  return cloneModelInternal(sourceURL, destURL, deleteSource);\n}\n\nexport { moveModel, copyModel, removeModel, listModels };","map":{"version":3,"sources":["../../src/io/model_management.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\n/**\r\n * Classes and functions for model management across multiple storage mediums.\r\n *\r\n * Supported client actions:\r\n * - Listing models on all registered storage mediums.\r\n * - Remove model by URL from any registered storage mediums, by using URL\r\n *   string.\r\n * - Moving or copying model from one path to another in the same medium or from\r\n *   one medium to another, by using URL strings.\r\n */\r\nimport { assert } from '../util';\r\nimport { IORouterRegistry } from './router_registry';\r\nconst URL_SCHEME_SUFFIX = '://';\r\nexport class ModelStoreManagerRegistry {\r\n    constructor() {\r\n        this.managers = {};\r\n    }\r\n    static getInstance() {\r\n        if (ModelStoreManagerRegistry.instance == null) {\r\n            ModelStoreManagerRegistry.instance = new ModelStoreManagerRegistry();\r\n        }\r\n        return ModelStoreManagerRegistry.instance;\r\n    }\r\n    /**\r\n     * Register a save-handler router.\r\n     *\r\n     * @param saveRouter A function that maps a URL-like string onto an instance\r\n     * of `IOHandler` with the `save` method defined or `null`.\r\n     */\r\n    static registerManager(scheme, manager) {\r\n        assert(scheme != null, () => 'scheme must not be undefined or null.');\r\n        if (scheme.endsWith(URL_SCHEME_SUFFIX)) {\r\n            scheme = scheme.slice(0, scheme.indexOf(URL_SCHEME_SUFFIX));\r\n        }\r\n        assert(scheme.length > 0, () => 'scheme must not be an empty string.');\r\n        const registry = ModelStoreManagerRegistry.getInstance();\r\n        assert(registry.managers[scheme] == null, () => `A model store manager is already registered for scheme '${scheme}'.`);\r\n        registry.managers[scheme] = manager;\r\n    }\r\n    static getManager(scheme) {\r\n        const manager = this.getInstance().managers[scheme];\r\n        if (manager == null) {\r\n            throw new Error(`Cannot find model manager for scheme '${scheme}'`);\r\n        }\r\n        return manager;\r\n    }\r\n    static getSchemes() {\r\n        return Object.keys(this.getInstance().managers);\r\n    }\r\n}\r\n/**\r\n * Helper method for parsing a URL string into a scheme and a path.\r\n *\r\n * @param url E.g., 'localstorage://my-model'\r\n * @returns A dictionary with two fields: scheme and path.\r\n *   Scheme: e.g., 'localstorage' in the example above.\r\n *   Path: e.g., 'my-model' in the example above.\r\n */\r\nfunction parseURL(url) {\r\n    if (url.indexOf(URL_SCHEME_SUFFIX) === -1) {\r\n        throw new Error(`The url string provided does not contain a scheme. ` +\r\n            `Supported schemes are: ` +\r\n            `${ModelStoreManagerRegistry.getSchemes().join(',')}`);\r\n    }\r\n    return {\r\n        scheme: url.split(URL_SCHEME_SUFFIX)[0],\r\n        path: url.split(URL_SCHEME_SUFFIX)[1],\r\n    };\r\n}\r\nasync function cloneModelInternal(sourceURL, destURL, deleteSource = false) {\r\n    assert(sourceURL !== destURL, () => `Old path and new path are the same: '${sourceURL}'`);\r\n    const loadHandlers = IORouterRegistry.getLoadHandlers(sourceURL);\r\n    assert(loadHandlers.length > 0, () => `Copying failed because no load handler is found for source URL ${sourceURL}.`);\r\n    assert(loadHandlers.length < 2, () => `Copying failed because more than one (${loadHandlers.length}) ` +\r\n        `load handlers for source URL ${sourceURL}.`);\r\n    const loadHandler = loadHandlers[0];\r\n    const saveHandlers = IORouterRegistry.getSaveHandlers(destURL);\r\n    assert(saveHandlers.length > 0, () => `Copying failed because no save handler is found for destination ` +\r\n        `URL ${destURL}.`);\r\n    assert(saveHandlers.length < 2, () => `Copying failed because more than one (${loadHandlers.length}) ` +\r\n        `save handlers for destination URL ${destURL}.`);\r\n    const saveHandler = saveHandlers[0];\r\n    const sourceScheme = parseURL(sourceURL).scheme;\r\n    const sourcePath = parseURL(sourceURL).path;\r\n    const sameMedium = sourceScheme === parseURL(sourceURL).scheme;\r\n    const modelArtifacts = await loadHandler.load();\r\n    // If moving within the same storage medium, remove the old model as soon as\r\n    // the loading is done. Without doing this, it is possible that the combined\r\n    // size of the two models will cause the cloning to fail.\r\n    if (deleteSource && sameMedium) {\r\n        await ModelStoreManagerRegistry.getManager(sourceScheme)\r\n            .removeModel(sourcePath);\r\n    }\r\n    const saveResult = await saveHandler.save(modelArtifacts);\r\n    // If moving between mediums, the deletion is done after the save succeeds.\r\n    // This guards against the case in which saving to the destination medium\r\n    // fails.\r\n    if (deleteSource && !sameMedium) {\r\n        await ModelStoreManagerRegistry.getManager(sourceScheme)\r\n            .removeModel(sourcePath);\r\n    }\r\n    return saveResult.modelArtifactsInfo;\r\n}\r\n/**\r\n * List all models stored in registered storage mediums.\r\n *\r\n * For a web browser environment, the registered mediums are Local Storage and\r\n * IndexedDB.\r\n *\r\n * ```js\r\n * // First create and save a model.\r\n * const model = tf.sequential();\r\n * model.add(tf.layers.dense(\r\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\r\n * await model.save('localstorage://demo/management/model1');\r\n *\r\n * // Then list existing models.\r\n * console.log(JSON.stringify(await tf.io.listModels()));\r\n *\r\n * // Delete the model.\r\n * await tf.io.removeModel('localstorage://demo/management/model1');\r\n *\r\n * // List models again.\r\n * console.log(JSON.stringify(await tf.io.listModels()));\r\n * ```\r\n *\r\n * @returns A `Promise` of a dictionary mapping URLs of existing models to\r\n * their model artifacts info. URLs include medium-specific schemes, e.g.,\r\n *   'indexeddb://my/model/1'. Model artifacts info include type of the\r\n * model's topology, byte sizes of the topology, weights, etc.\r\n *\r\n * @doc {\r\n *   heading: 'Models',\r\n *   subheading: 'Management',\r\n *   namespace: 'io',\r\n *   ignoreCI: true\r\n * }\r\n */\r\nasync function listModels() {\r\n    const schemes = ModelStoreManagerRegistry.getSchemes();\r\n    const out = {};\r\n    for (const scheme of schemes) {\r\n        const schemeOut = await ModelStoreManagerRegistry.getManager(scheme).listModels();\r\n        for (const path in schemeOut) {\r\n            const url = scheme + URL_SCHEME_SUFFIX + path;\r\n            out[url] = schemeOut[path];\r\n        }\r\n    }\r\n    return out;\r\n}\r\n/**\r\n * Remove a model specified by URL from a reigstered storage medium.\r\n *\r\n * ```js\r\n * // First create and save a model.\r\n * const model = tf.sequential();\r\n * model.add(tf.layers.dense(\r\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\r\n * await model.save('localstorage://demo/management/model1');\r\n *\r\n * // Then list existing models.\r\n * console.log(JSON.stringify(await tf.io.listModels()));\r\n *\r\n * // Delete the model.\r\n * await tf.io.removeModel('localstorage://demo/management/model1');\r\n *\r\n * // List models again.\r\n * console.log(JSON.stringify(await tf.io.listModels()));\r\n * ```\r\n *\r\n * @param url A URL to a stored model, with a scheme prefix, e.g.,\r\n *   'localstorage://my-model-1', 'indexeddb://my/model/2'.\r\n * @returns ModelArtifactsInfo of the deleted model (if and only if deletion\r\n *   is successful).\r\n * @throws Error if deletion fails, e.g., if no model exists at `path`.\r\n *\r\n * @doc {\r\n *   heading: 'Models',\r\n *   subheading: 'Management',\r\n *   namespace: 'io',\r\n *   ignoreCI: true\r\n * }\r\n */\r\nasync function removeModel(url) {\r\n    const schemeAndPath = parseURL(url);\r\n    const manager = ModelStoreManagerRegistry.getManager(schemeAndPath.scheme);\r\n    return manager.removeModel(schemeAndPath.path);\r\n}\r\n/**\r\n * Copy a model from one URL to another.\r\n *\r\n * This function supports:\r\n *\r\n * 1. Copying within a storage medium, e.g.,\r\n *    `tf.io.copyModel('localstorage://model-1', 'localstorage://model-2')`\r\n * 2. Copying between two storage mediums, e.g.,\r\n *    `tf.io.copyModel('localstorage://model-1', 'indexeddb://model-1')`\r\n *\r\n * ```js\r\n * // First create and save a model.\r\n * const model = tf.sequential();\r\n * model.add(tf.layers.dense(\r\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\r\n * await model.save('localstorage://demo/management/model1');\r\n *\r\n * // Then list existing models.\r\n * console.log(JSON.stringify(await tf.io.listModels()));\r\n *\r\n * // Copy the model, from Local Storage to IndexedDB.\r\n * await tf.io.copyModel(\r\n *     'localstorage://demo/management/model1',\r\n *     'indexeddb://demo/management/model1');\r\n *\r\n * // List models again.\r\n * console.log(JSON.stringify(await tf.io.listModels()));\r\n *\r\n * // Remove both models.\r\n * await tf.io.removeModel('localstorage://demo/management/model1');\r\n * await tf.io.removeModel('indexeddb://demo/management/model1');\r\n * ```\r\n *\r\n * @param sourceURL Source URL of copying.\r\n * @param destURL Destination URL of copying.\r\n * @returns ModelArtifactsInfo of the copied model (if and only if copying\r\n *   is successful).\r\n * @throws Error if copying fails, e.g., if no model exists at `sourceURL`, or\r\n *   if `oldPath` and `newPath` are identical.\r\n *\r\n * @doc {\r\n *   heading: 'Models',\r\n *   subheading: 'Management',\r\n *   namespace: 'io',\r\n *   ignoreCI: true\r\n * }\r\n */\r\nasync function copyModel(sourceURL, destURL) {\r\n    const deleteSource = false;\r\n    return cloneModelInternal(sourceURL, destURL, deleteSource);\r\n}\r\n/**\r\n * Move a model from one URL to another.\r\n *\r\n * This function supports:\r\n *\r\n * 1. Moving within a storage medium, e.g.,\r\n *    `tf.io.moveModel('localstorage://model-1', 'localstorage://model-2')`\r\n * 2. Moving between two storage mediums, e.g.,\r\n *    `tf.io.moveModel('localstorage://model-1', 'indexeddb://model-1')`\r\n *\r\n * ```js\r\n * // First create and save a model.\r\n * const model = tf.sequential();\r\n * model.add(tf.layers.dense(\r\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\r\n * await model.save('localstorage://demo/management/model1');\r\n *\r\n * // Then list existing models.\r\n * console.log(JSON.stringify(await tf.io.listModels()));\r\n *\r\n * // Move the model, from Local Storage to IndexedDB.\r\n * await tf.io.moveModel(\r\n *     'localstorage://demo/management/model1',\r\n *     'indexeddb://demo/management/model1');\r\n *\r\n * // List models again.\r\n * console.log(JSON.stringify(await tf.io.listModels()));\r\n *\r\n * // Remove the moved model.\r\n * await tf.io.removeModel('indexeddb://demo/management/model1');\r\n * ```\r\n *\r\n * @param sourceURL Source URL of moving.\r\n * @param destURL Destination URL of moving.\r\n * @returns ModelArtifactsInfo of the copied model (if and only if copying\r\n *   is successful).\r\n * @throws Error if moving fails, e.g., if no model exists at `sourceURL`, or\r\n *   if `oldPath` and `newPath` are identical.\r\n *\r\n * @doc {\r\n *   heading: 'Models',\r\n *   subheading: 'Management',\r\n *   namespace: 'io',\r\n *   ignoreCI: true\r\n * }\r\n */\r\nasync function moveModel(sourceURL, destURL) {\r\n    const deleteSource = true;\r\n    return cloneModelInternal(sourceURL, destURL, deleteSource);\r\n}\r\nexport { moveModel, copyModel, removeModel, listModels };\r\n//# sourceMappingURL=model_management.js.map"]},"metadata":{},"sourceType":"module"}