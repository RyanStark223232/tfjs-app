{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { Slice } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\nimport * as slice_util from './slice_util';\n/**\r\n * Extracts a slice from a `tf.Tensor` starting at coordinates `begin`\r\n * and is of size `size`.\r\n *\r\n * Also available are stricter rank-specific methods with the same signature\r\n * as this method that assert that `x` is of the given rank:\r\n *   - `tf.slice1d`\r\n *   - `tf.slice2d`\r\n *   - `tf.slice3d`\r\n *   - `tf.slice4d`\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([1, 2, 3, 4]);\r\n *\r\n * x.slice([1], [2]).print();\r\n * ```\r\n *\r\n * ```js\r\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\r\n *\r\n * x.slice([1, 0], [1, 2]).print();\r\n * ```\r\n * @param x The input `tf.Tensor` to slice from.\r\n * @param begin The coordinates to start the slice from. The length can be\r\n *     less than the rank of x - the rest of the axes will have implicit 0 as\r\n *     start. Can also be a single number, in which case it specifies the\r\n *     first axis.\r\n * @param size The size of the slice. The length can be less than the rank of\r\n *     x - the rest of the axes will have implicit -1. A value of -1 requests\r\n *     the rest of the dimensions in the axis. Can also be a single number,\r\n *     in which case it specifies the size of the first axis.\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\r\n */\n\nfunction slice_(x, begin, size) {\n  const $x = convertToTensor(x, 'x', 'slice');\n\n  if ($x.rank === 0) {\n    throw new Error('Slicing scalar is not possible');\n  }\n\n  const forward = (backend, save) => {\n    const [begin_, size_] = slice_util.parseSliceParams($x, begin, size);\n    slice_util.assertParamsValid($x, begin_, size_);\n    save([$x]);\n    return backend.slice($x, begin_, size_);\n  };\n\n  const inputs = {\n    x: $x\n  };\n  const attrs = {\n    begin,\n    size\n  };\n  return ENGINE.runKernelFunc(forward, inputs, null\n  /* grad */\n  , Slice, attrs);\n}\n\nexport const slice = op({\n  slice_\n});","map":{"version":3,"sources":["../../src/ops/slice.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,MAAR,QAAkC,WAAlC;AACA,SAAQ,KAAR,QAA6C,iBAA7C;AAIA,SAAQ,eAAR,QAA8B,oBAA9B;AAGA,SAAQ,EAAR,QAAiB,aAAjB;AACA,OAAO,KAAK,UAAZ,MAA4B,cAA5B;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCG;;AACH,SAAS,MAAT,CACI,CADJ,EACqB,KADrB,EAC6C,IAD7C,EACmE;AACjE,QAAM,EAAE,GAAG,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,OAAT,CAA1B;;AAEA,MAAI,EAAE,CAAC,IAAH,KAAY,CAAhB,EAAmB;AACjB,UAAM,IAAI,KAAJ,CAAU,gCAAV,CAAN;AACD;;AAED,QAAM,OAAO,GAAwB,CAAC,OAAD,EAAU,IAAV,KAAkB;AACrD,UAAM,CAAC,MAAD,EAAS,KAAT,IAAkB,UAAU,CAAC,gBAAX,CAA4B,EAA5B,EAAgC,KAAhC,EAAuC,IAAvC,CAAxB;AACA,IAAA,UAAU,CAAC,iBAAX,CAA6B,EAA7B,EAAiC,MAAjC,EAAyC,KAAzC;AACA,IAAA,IAAI,CAAC,CAAC,EAAD,CAAD,CAAJ;AACA,WAAO,OAAO,CAAC,KAAR,CAAc,EAAd,EAAkB,MAAlB,EAA0B,KAA1B,CAAP;AACD,GALD;;AAOA,QAAM,MAAM,GAAgB;AAAC,IAAA,CAAC,EAAE;AAAJ,GAA5B;AACA,QAAM,KAAK,GAAe;AAAC,IAAA,KAAD;AAAQ,IAAA;AAAR,GAA1B;AAEA,SAAO,MAAM,CAAC,aAAP,CACI,OADJ,EACa,MADb,EAC6C;AAAK;AADlD,IAC8D,KAD9D,EAEI,KAFJ,CAAP;AAGD;;AAED,OAAO,MAAM,KAAK,GAAG,EAAE,CAAC;AAAC,EAAA;AAAD,CAAD,CAAhB","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { ENGINE } from '../engine';\r\nimport { Slice } from '../kernel_names';\r\nimport { convertToTensor } from '../tensor_util_env';\r\nimport { op } from './operation';\r\nimport * as slice_util from './slice_util';\r\n/**\r\n * Extracts a slice from a `tf.Tensor` starting at coordinates `begin`\r\n * and is of size `size`.\r\n *\r\n * Also available are stricter rank-specific methods with the same signature\r\n * as this method that assert that `x` is of the given rank:\r\n *   - `tf.slice1d`\r\n *   - `tf.slice2d`\r\n *   - `tf.slice3d`\r\n *   - `tf.slice4d`\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([1, 2, 3, 4]);\r\n *\r\n * x.slice([1], [2]).print();\r\n * ```\r\n *\r\n * ```js\r\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\r\n *\r\n * x.slice([1, 0], [1, 2]).print();\r\n * ```\r\n * @param x The input `tf.Tensor` to slice from.\r\n * @param begin The coordinates to start the slice from. The length can be\r\n *     less than the rank of x - the rest of the axes will have implicit 0 as\r\n *     start. Can also be a single number, in which case it specifies the\r\n *     first axis.\r\n * @param size The size of the slice. The length can be less than the rank of\r\n *     x - the rest of the axes will have implicit -1. A value of -1 requests\r\n *     the rest of the dimensions in the axis. Can also be a single number,\r\n *     in which case it specifies the size of the first axis.\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\r\n */\r\nfunction slice_(x, begin, size) {\r\n    const $x = convertToTensor(x, 'x', 'slice');\r\n    if ($x.rank === 0) {\r\n        throw new Error('Slicing scalar is not possible');\r\n    }\r\n    const forward = (backend, save) => {\r\n        const [begin_, size_] = slice_util.parseSliceParams($x, begin, size);\r\n        slice_util.assertParamsValid($x, begin_, size_);\r\n        save([$x]);\r\n        return backend.slice($x, begin_, size_);\r\n    };\r\n    const inputs = { x: $x };\r\n    const attrs = { begin, size };\r\n    return ENGINE.runKernelFunc(forward, inputs, null /* grad */, Slice, attrs);\r\n}\r\nexport const slice = op({ slice_ });\r\n//# sourceMappingURL=slice.js.map"]},"metadata":{},"sourceType":"module"}