{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { Complex } from '@tensorflow/tfjs-core';\nexport function complex(args) {\n  var inputs = args.inputs,\n      backend = args.backend;\n  var real = inputs.real,\n      imag = inputs.imag;\n  var realVals = backend.data.get(real.dataId).values;\n  var imagVals = backend.data.get(imag.dataId).values;\n  var complexInfo = backend.makeTensorInfo(real.shape, 'complex64');\n  var complex = backend.data.get(complexInfo.dataId); // The complex tensor owns the underlying real and imag tensorInfos, only the\n  // complex tensor tracks refCount, when complexData is disposed the\n  // underlying tensorData will be disposed.\n\n  complex.complexTensorInfos = {\n    real: backend.makeTensorInfo(real.shape, 'float32', realVals),\n    imag: backend.makeTensorInfo(imag.shape, 'float32', imagVals)\n  };\n  return complexInfo;\n}\nexport var complexConfig = {\n  kernelName: Complex,\n  backendName: 'cpu',\n  kernelFunc: complex\n};","map":{"version":3,"sources":["../../src/kernels/Complex.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,OAAR,QAAuF,uBAAvF;AAIA,OAAM,SAAU,OAAV,CAAkB,IAAlB,EAAwE;AAAA,MAErE,MAFqE,GAElD,IAFkD,CAErE,MAFqE;AAAA,MAE7D,OAF6D,GAElD,IAFkD,CAE7D,OAF6D;AAAA,MAGrE,IAHqE,GAGvD,MAHuD,CAGrE,IAHqE;AAAA,MAG/D,IAH+D,GAGvD,MAHuD,CAG/D,IAH+D;AAK5E,MAAM,QAAQ,GAAG,OAAO,CAAC,IAAR,CAAa,GAAb,CAAiB,IAAI,CAAC,MAAtB,EAA8B,MAA/C;AACA,MAAM,QAAQ,GAAG,OAAO,CAAC,IAAR,CAAa,GAAb,CAAiB,IAAI,CAAC,MAAtB,EAA8B,MAA/C;AAEA,MAAM,WAAW,GAAG,OAAO,CAAC,cAAR,CAAuB,IAAI,CAAC,KAA5B,EAAmC,WAAnC,CAApB;AAEA,MAAM,OAAO,GAAG,OAAO,CAAC,IAAR,CAAa,GAAb,CAAiB,WAAW,CAAC,MAA7B,CAAhB,CAV4E,CAY5E;AACA;AACA;;AACA,EAAA,OAAO,CAAC,kBAAR,GAA6B;AAC3B,IAAA,IAAI,EAAE,OAAO,CAAC,cAAR,CAAuB,IAAI,CAAC,KAA5B,EAAmC,SAAnC,EAA8C,QAA9C,CADqB;AAE3B,IAAA,IAAI,EAAE,OAAO,CAAC,cAAR,CAAuB,IAAI,CAAC,KAA5B,EAAmC,SAAnC,EAA8C,QAA9C;AAFqB,GAA7B;AAKA,SAAO,WAAP;AACD;AAED,OAAO,IAAM,aAAa,GAAiB;AACzC,EAAA,UAAU,EAAE,OAD6B;AAEzC,EAAA,WAAW,EAAE,KAF4B;AAGzC,EAAA,UAAU,EAAE;AAH6B,CAApC","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { Complex } from '@tensorflow/tfjs-core';\r\nexport function complex(args) {\r\n    const { inputs, backend } = args;\r\n    const { real, imag } = inputs;\r\n    const realVals = backend.data.get(real.dataId).values;\r\n    const imagVals = backend.data.get(imag.dataId).values;\r\n    const complexInfo = backend.makeTensorInfo(real.shape, 'complex64');\r\n    const complex = backend.data.get(complexInfo.dataId);\r\n    // The complex tensor owns the underlying real and imag tensorInfos, only the\r\n    // complex tensor tracks refCount, when complexData is disposed the\r\n    // underlying tensorData will be disposed.\r\n    complex.complexTensorInfos = {\r\n        real: backend.makeTensorInfo(real.shape, 'float32', realVals),\r\n        imag: backend.makeTensorInfo(imag.shape, 'float32', imagVals)\r\n    };\r\n    return complexInfo;\r\n}\r\nexport const complexConfig = {\r\n    kernelName: Complex,\r\n    backendName: 'cpu',\r\n    kernelFunc: complex\r\n};\r\n//# sourceMappingURL=Complex.js.map"]},"metadata":{},"sourceType":"module"}