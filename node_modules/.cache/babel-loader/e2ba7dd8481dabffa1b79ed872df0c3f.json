{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { whereImpl } from '../backends/where_impl';\nimport { convertToTensor } from '../tensor_util_env';\n/**\r\n * Returns the coordinates of true elements of condition.\r\n *\r\n * The coordinates are returned in a 2-D tensor where the first dimension (rows)\r\n * represents the number of true elements, and the second dimension (columns)\r\n * represents the coordinates of the true elements. Keep in mind, the shape of\r\n * the output tensor can vary depending on how many true values there are in\r\n * input. Indices are output in row-major order. The resulting tensor has the\r\n * shape `[numTrueElems, condition.rank]`.\r\n *\r\n * This is analogous to calling the python `tf.where(cond)` without an x or y.\r\n *\r\n * ```js\r\n * const cond = tf.tensor1d([false, false, true], 'bool');\r\n * const result = await tf.whereAsync(cond);\r\n * result.print();\r\n * ```\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Logical'}\r\n */\n\nfunction whereAsync_(_x) {\n  return _whereAsync_.apply(this, arguments);\n}\n\nfunction _whereAsync_() {\n  _whereAsync_ = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(condition) {\n    var $condition, vals, res;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            $condition = convertToTensor(condition, 'condition', 'whereAsync', 'bool');\n            _context.next = 3;\n            return $condition.data();\n\n          case 3:\n            vals = _context.sent;\n            res = whereImpl($condition.shape, vals);\n\n            if (condition !== $condition) {\n              $condition.dispose();\n            }\n\n            return _context.abrupt(\"return\", res);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _whereAsync_.apply(this, arguments);\n}\n\nexport var whereAsync = whereAsync_;","map":{"version":3,"sources":["../../src/ops/where_async.ts"],"names":[],"mappings":";;;AAAA;;;;;;;;;;;;;;;AAeG;AACH,SAAQ,SAAR,QAAwB,wBAAxB;AAEA,SAAQ,eAAR,QAA8B,oBAA9B;AAGA;;;;;;;;;;;;;;;;;;;AAmBG;;SACY,W;;;;;0EAAf,iBAA2B,SAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AACQ,YAAA,UADR,GAEM,eAAe,CAAC,SAAD,EAAY,WAAZ,EAAyB,YAAzB,EAAuC,MAAvC,CAFrB;AAAA;AAAA,mBAGqB,UAAU,CAAC,IAAX,EAHrB;;AAAA;AAGQ,YAAA,IAHR;AAIQ,YAAA,GAJR,GAIc,SAAS,CAAC,UAAU,CAAC,KAAZ,EAAmB,IAAnB,CAJvB;;AAKE,gBAAI,SAAS,KAAK,UAAlB,EAA8B;AAC5B,cAAA,UAAU,CAAC,OAAX;AACD;;AAPH,6CAQS,GART;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAWA,OAAO,IAAM,UAAU,GAAG,WAAnB","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { whereImpl } from '../backends/where_impl';\r\nimport { convertToTensor } from '../tensor_util_env';\r\n/**\r\n * Returns the coordinates of true elements of condition.\r\n *\r\n * The coordinates are returned in a 2-D tensor where the first dimension (rows)\r\n * represents the number of true elements, and the second dimension (columns)\r\n * represents the coordinates of the true elements. Keep in mind, the shape of\r\n * the output tensor can vary depending on how many true values there are in\r\n * input. Indices are output in row-major order. The resulting tensor has the\r\n * shape `[numTrueElems, condition.rank]`.\r\n *\r\n * This is analogous to calling the python `tf.where(cond)` without an x or y.\r\n *\r\n * ```js\r\n * const cond = tf.tensor1d([false, false, true], 'bool');\r\n * const result = await tf.whereAsync(cond);\r\n * result.print();\r\n * ```\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Logical'}\r\n */\r\nasync function whereAsync_(condition) {\r\n    const $condition = convertToTensor(condition, 'condition', 'whereAsync', 'bool');\r\n    const vals = await $condition.data();\r\n    const res = whereImpl($condition.shape, vals);\r\n    if (condition !== $condition) {\r\n        $condition.dispose();\r\n    }\r\n    return res;\r\n}\r\nexport const whereAsync = whereAsync_;\r\n//# sourceMappingURL=where_async.js.map"]},"metadata":{},"sourceType":"module"}