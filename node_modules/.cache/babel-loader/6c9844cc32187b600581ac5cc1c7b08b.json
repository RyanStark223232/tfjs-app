{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { Slice } from '../kernel_names';\nimport { pad } from '../ops/pad';\nimport { parseSliceParams } from '../ops/slice_util';\nexport const sliceGradConfig = {\n  kernelName: Slice,\n  inputsToSave: ['x'],\n  gradFunc: (dy, saved, attrs) => {\n    const [x] = saved;\n    const {\n      begin,\n      size\n    } = attrs;\n    const inputShape = x.shape;\n    const [begin_, size_] = parseSliceParams(x, begin, size); // Create an Nx2 padding where the first column represents how many\n    // zeros are prepended (at start) for each dimension, and the second\n    // column indicates how many zeros are appended (at end).\n    // The number of zeros to append is the shape of the input\n    // elementwise-subtracted by both the begin vector and sizes vector.\n\n    const paddings = [];\n\n    for (let i = 0; i < dy.rank; i++) {\n      paddings.push([begin_[i], inputShape[i] - begin_[i] - size_[i]]);\n    }\n\n    return {\n      x: () => pad(dy, paddings)\n    };\n  }\n};","map":{"version":3,"sources":["../../src/gradients/Slice_grad.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,KAAR,QAAgC,iBAAhC;AAEA,SAAQ,GAAR,QAAkB,YAAlB;AACA,SAAQ,gBAAR,QAA+B,mBAA/B;AAGA,OAAO,MAAM,eAAe,GAAe;AACzC,EAAA,UAAU,EAAE,KAD6B;AAEzC,EAAA,YAAY,EAAE,CAAC,GAAD,CAF2B;AAGzC,EAAA,QAAQ,EAAE,CAAC,EAAD,EAAa,KAAb,EAA8B,KAA9B,KAAqD;AAC7D,UAAM,CAAC,CAAD,IAAM,KAAZ;AACA,UAAM;AAAC,MAAA,KAAD;AAAQ,MAAA;AAAR,QAAgB,KAAtB;AAEA,UAAM,UAAU,GAAG,CAAC,CAAC,KAArB;AACA,UAAM,CAAC,MAAD,EAAS,KAAT,IAAkB,gBAAgB,CAAC,CAAD,EAAI,KAAJ,EAAW,IAAX,CAAxC,CAL6D,CAO7D;AACA;AACA;AAEA;AACA;;AACA,UAAM,QAAQ,GAA4B,EAA1C;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,EAAE,CAAC,IAAvB,EAA6B,CAAC,EAA9B,EAAkC;AAChC,MAAA,QAAQ,CAAC,IAAT,CAAc,CAAC,MAAM,CAAC,CAAD,CAAP,EAAY,UAAU,CAAC,CAAD,CAAV,GAAgB,MAAM,CAAC,CAAD,CAAtB,GAA4B,KAAK,CAAC,CAAD,CAA7C,CAAd;AACD;;AACD,WAAO;AAAC,MAAA,CAAC,EAAE,MAAM,GAAG,CAAC,EAAD,EAAK,QAAL;AAAb,KAAP;AACD;AArBwC,CAApC","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { Slice } from '../kernel_names';\r\nimport { pad } from '../ops/pad';\r\nimport { parseSliceParams } from '../ops/slice_util';\r\nexport const sliceGradConfig = {\r\n    kernelName: Slice,\r\n    inputsToSave: ['x'],\r\n    gradFunc: (dy, saved, attrs) => {\r\n        const [x] = saved;\r\n        const { begin, size } = attrs;\r\n        const inputShape = x.shape;\r\n        const [begin_, size_] = parseSliceParams(x, begin, size);\r\n        // Create an Nx2 padding where the first column represents how many\r\n        // zeros are prepended (at start) for each dimension, and the second\r\n        // column indicates how many zeros are appended (at end).\r\n        // The number of zeros to append is the shape of the input\r\n        // elementwise-subtracted by both the begin vector and sizes vector.\r\n        const paddings = [];\r\n        for (let i = 0; i < dy.rank; i++) {\r\n            paddings.push([begin_[i], inputShape[i] - begin_[i] - size_[i]]);\r\n        }\r\n        return { x: () => pad(dy, paddings) };\r\n    }\r\n};\r\n//# sourceMappingURL=Slice_grad.js.map"]},"metadata":{},"sourceType":"module"}