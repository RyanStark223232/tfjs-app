{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2017 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nexport class LRNProgram {\n  constructor(xShape, radius, bias, alpha, beta) {\n    this.variableNames = ['x'];\n    this.outputShape = [];\n    const rad = radius;\n    const maxD = xShape[3] - 1;\n    this.outputShape = xShape; // optimize pow(bias + alpha * sum, -beta)\n    // src: https://github.com/tensorflow/tensorflow/..\n    // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..\n    // tensorflow/core/kernels/mkl_lrn_op.cc#L320\n\n    let powOperator;\n    const basis = `float(${bias}) + float(${alpha}) * sum`;\n\n    if (beta === 0.5) {\n      powOperator = `inversesqrt(${basis})`;\n    } else if (beta === 1.0) {\n      powOperator = `1.0/(${basis})`;\n    } else {\n      powOperator = `exp(log(${basis}) * float(-${beta}));`;\n    }\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${rad}; j <= ${rad}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${maxD}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${powOperator};\n        setOutput(val);\n      }\n    `;\n  }\n\n}","map":{"version":3,"sources":["../src/lrn_gpu.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAIH,OAAM,MAAO,UAAP,CAAiB;AAKrB,EAAA,WAAA,CACI,MADJ,EACsB,MADtB,EACsC,IADtC,EACoD,KADpD,EAEI,IAFJ,EAEgB;AANhB,SAAA,aAAA,GAAgB,CAAC,GAAD,CAAhB;AACA,SAAA,WAAA,GAAwB,EAAxB;AAME,UAAM,GAAG,GAAG,MAAZ;AACA,UAAM,IAAI,GAAG,MAAM,CAAC,CAAD,CAAN,GAAY,CAAzB;AACA,SAAK,WAAL,GAAmB,MAAnB,CAHc,CAKd;AACA;AACA;AACA;;AACA,QAAI,WAAJ;AACA,UAAM,KAAK,GAAG,SAAS,IAAI,aAAa,KAAK,SAA7C;;AACA,QAAI,IAAI,KAAK,GAAb,EAAkB;AAChB,MAAA,WAAW,GAAG,eAAe,KAAK,GAAlC;AACD,KAFD,MAEO,IAAI,IAAI,KAAK,GAAb,EAAkB;AACvB,MAAA,WAAW,GAAG,QAAQ,KAAK,GAA3B;AACD,KAFM,MAEA;AACL,MAAA,WAAW,GAAG,WAAW,KAAK,cAAc,IAAI,KAAhD;AACD;;AAED,SAAK,QAAL,GAAgB;;;;;;;;;wBASI,GAAG,UAAU,GAAG;;oCAEJ,IAAI;;;;;0BAKd,WAAW;;;AAGhC,KAnBD;AAoBD;;AA9CoB","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2017 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nexport class LRNProgram {\r\n    constructor(xShape, radius, bias, alpha, beta) {\r\n        this.variableNames = ['x'];\r\n        this.outputShape = [];\r\n        const rad = radius;\r\n        const maxD = xShape[3] - 1;\r\n        this.outputShape = xShape;\r\n        // optimize pow(bias + alpha * sum, -beta)\r\n        // src: https://github.com/tensorflow/tensorflow/..\r\n        // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..\r\n        // tensorflow/core/kernels/mkl_lrn_op.cc#L320\r\n        let powOperator;\r\n        const basis = `float(${bias}) + float(${alpha}) * sum`;\r\n        if (beta === 0.5) {\r\n            powOperator = `inversesqrt(${basis})`;\r\n        }\r\n        else if (beta === 1.0) {\r\n            powOperator = `1.0/(${basis})`;\r\n        }\r\n        else {\r\n            powOperator = `exp(log(${basis}) * float(-${beta}));`;\r\n        }\r\n        this.userCode = `\r\n      void main() {\r\n        ivec4 coords = getOutputCoords();\r\n        int b = coords[0];\r\n        int r = coords[1];\r\n        int c = coords[2];\r\n        int d = coords[3];\r\n        float x = getX(b, r, c, d);\r\n        float sum = 0.0;\r\n        for (int j = -${rad}; j <= ${rad}; j++) {\r\n          int idx = d + j;\r\n          if (idx >= 0 && idx <=  ${maxD}) {\r\n            float z = getX(b, r, c, idx);\r\n            sum += z * z;\r\n          }\r\n        }\r\n        float val = x * ${powOperator};\r\n        setOutput(val);\r\n      }\r\n    `;\r\n    }\r\n}\r\n//# sourceMappingURL=lrn_gpu.js.map"]},"metadata":{},"sourceType":"module"}