{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2017 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from './engine';\nimport { inferShape } from './tensor_util_env';\nimport { arraysEqual, flatten, isString, isTypedArray } from './util';\nvar TEST_EPSILON_FLOAT32 = 1e-3;\nexport var TEST_EPSILON_FLOAT16 = 1e-1;\nexport function expectArraysClose(actual, expected, epsilon) {\n  if (epsilon == null) {\n    epsilon = testEpsilon();\n  }\n\n  return expectArraysPredicate(actual, expected, function (a, b) {\n    return areClose(a, b, epsilon);\n  });\n}\nexport function testEpsilon() {\n  return ENGINE.backend.floatPrecision() === 32 ? TEST_EPSILON_FLOAT32 : TEST_EPSILON_FLOAT16;\n}\n\nfunction expectArraysPredicate(actual, expected, predicate) {\n  var checkClassType = true;\n\n  if (isTypedArray(actual) || isTypedArray(expected)) {\n    checkClassType = false;\n  }\n\n  if (isTypedArray(actual) && isTypedArray(expected)) {\n    checkClassType = true;\n  }\n\n  if (checkClassType) {\n    var aType = actual.constructor.name;\n    var bType = expected.constructor.name;\n\n    if (aType !== bType) {\n      throw new Error(\"Arrays are of different type. Actual: \".concat(aType, \". \") + \"Expected: \".concat(bType));\n    }\n  }\n\n  if (Array.isArray(actual) && Array.isArray(expected)) {\n    var actualShape = inferShape(actual);\n    var expectedShape = inferShape(expected);\n\n    if (!arraysEqual(actualShape, expectedShape)) {\n      throw new Error(\"Arrays have different shapes. \" + \"Actual: [\".concat(actualShape, \"]. Expected: [\").concat(expectedShape, \"]\"));\n    }\n  }\n\n  var actualFlat = isTypedArray(actual) ? actual : flatten(actual);\n  var expectedFlat = isTypedArray(expected) ? expected : flatten(expected);\n\n  if (actualFlat.length !== expectedFlat.length) {\n    throw new Error(\"Arrays have different lengths actual: \".concat(actualFlat.length, \" vs \") + \"expected: \".concat(expectedFlat.length, \".\\n\") + \"Actual:   \".concat(actualFlat, \".\\n\") + \"Expected: \".concat(expectedFlat, \".\"));\n  }\n\n  for (var i = 0; i < expectedFlat.length; ++i) {\n    var a = actualFlat[i];\n    var e = expectedFlat[i];\n\n    if (!predicate(a, e)) {\n      throw new Error(\"Arrays differ: actual[\".concat(i, \"] = \").concat(a, \", expected[\").concat(i, \"] = \").concat(e, \".\\n\") + \"Actual:   \".concat(actualFlat, \".\\n\") + \"Expected: \".concat(expectedFlat, \".\"));\n    }\n  }\n}\n\nexport function expectPromiseToFail(fn, done) {\n  fn().then(function () {\n    return done.fail();\n  }, function () {\n    return done();\n  });\n}\nexport function expectArraysEqual(actual, expected) {\n  var exp = typeof expected === 'string' || typeof expected === 'number' || typeof expected === 'boolean' ? [expected] : expected;\n\n  if (isString(actual) || isString(actual[0]) || isString(expected) || isString(expected[0])) {\n    // tslint:disable-next-line: triple-equals\n    return expectArraysPredicate(actual, exp, function (a, b) {\n      return a == b;\n    });\n  }\n\n  return expectArraysPredicate(actual, expected, function (a, b) {\n    return areClose(a, b, 0);\n  });\n}\nexport function expectNumbersClose(a, e, epsilon) {\n  if (epsilon == null) {\n    epsilon = testEpsilon();\n  }\n\n  if (!areClose(a, e, epsilon)) {\n    throw new Error(\"Numbers differ: actual === \".concat(a, \", expected === \").concat(e));\n  }\n}\n\nfunction areClose(a, e, epsilon) {\n  if (!isFinite(a) && !isFinite(e)) {\n    return true;\n  }\n\n  if (isNaN(a) || isNaN(e) || Math.abs(a - e) > epsilon) {\n    return false;\n  }\n\n  return true;\n}\n\nexport function expectValuesInRange(actual, low, high) {\n  for (var i = 0; i < actual.length; i++) {\n    if (actual[i] < low || actual[i] > high) {\n      throw new Error(\"Value out of range:\".concat(actual[i], \" low: \").concat(low, \", high: \").concat(high));\n    }\n  }\n}\nexport function expectArrayBuffersEqual(actual, expected) {\n  // Safari & Jasmine don't like comparing ArrayBuffers directly. Wrapping in\n  // a Float32Array solves this issue.\n  expect(new Float32Array(actual)).toEqual(new Float32Array(expected));\n}","map":{"version":3,"sources":["../src/test_util.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2017 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { ENGINE } from './engine';\r\nimport { inferShape } from './tensor_util_env';\r\nimport { arraysEqual, flatten, isString, isTypedArray } from './util';\r\nconst TEST_EPSILON_FLOAT32 = 1e-3;\r\nexport const TEST_EPSILON_FLOAT16 = 1e-1;\r\nexport function expectArraysClose(actual, expected, epsilon) {\r\n    if (epsilon == null) {\r\n        epsilon = testEpsilon();\r\n    }\r\n    return expectArraysPredicate(actual, expected, (a, b) => areClose(a, b, epsilon));\r\n}\r\nexport function testEpsilon() {\r\n    return ENGINE.backend.floatPrecision() === 32 ? TEST_EPSILON_FLOAT32 :\r\n        TEST_EPSILON_FLOAT16;\r\n}\r\nfunction expectArraysPredicate(actual, expected, predicate) {\r\n    let checkClassType = true;\r\n    if (isTypedArray(actual) || isTypedArray(expected)) {\r\n        checkClassType = false;\r\n    }\r\n    if (isTypedArray(actual) && isTypedArray(expected)) {\r\n        checkClassType = true;\r\n    }\r\n    if (checkClassType) {\r\n        const aType = actual.constructor.name;\r\n        const bType = expected.constructor.name;\r\n        if (aType !== bType) {\r\n            throw new Error(`Arrays are of different type. Actual: ${aType}. ` +\r\n                `Expected: ${bType}`);\r\n        }\r\n    }\r\n    if (Array.isArray(actual) && Array.isArray(expected)) {\r\n        const actualShape = inferShape(actual);\r\n        const expectedShape = inferShape(expected);\r\n        if (!arraysEqual(actualShape, expectedShape)) {\r\n            throw new Error(`Arrays have different shapes. ` +\r\n                `Actual: [${actualShape}]. Expected: [${expectedShape}]`);\r\n        }\r\n    }\r\n    const actualFlat = isTypedArray(actual) ? actual : flatten(actual);\r\n    const expectedFlat = isTypedArray(expected) ?\r\n        expected :\r\n        flatten(expected);\r\n    if (actualFlat.length !== expectedFlat.length) {\r\n        throw new Error(`Arrays have different lengths actual: ${actualFlat.length} vs ` +\r\n            `expected: ${expectedFlat.length}.\\n` +\r\n            `Actual:   ${actualFlat}.\\n` +\r\n            `Expected: ${expectedFlat}.`);\r\n    }\r\n    for (let i = 0; i < expectedFlat.length; ++i) {\r\n        const a = actualFlat[i];\r\n        const e = expectedFlat[i];\r\n        if (!predicate(a, e)) {\r\n            throw new Error(`Arrays differ: actual[${i}] = ${a}, expected[${i}] = ${e}.\\n` +\r\n                `Actual:   ${actualFlat}.\\n` +\r\n                `Expected: ${expectedFlat}.`);\r\n        }\r\n    }\r\n}\r\nexport function expectPromiseToFail(fn, done) {\r\n    fn().then(() => done.fail(), () => done());\r\n}\r\nexport function expectArraysEqual(actual, expected) {\r\n    const exp = typeof expected === 'string' || typeof expected === 'number' ||\r\n        typeof expected === 'boolean' ?\r\n        [expected] :\r\n        expected;\r\n    if (isString(actual) || isString(actual[0]) ||\r\n        isString(expected) || isString(expected[0])) {\r\n        // tslint:disable-next-line: triple-equals\r\n        return expectArraysPredicate(actual, exp, (a, b) => a == b);\r\n    }\r\n    return expectArraysPredicate(actual, expected, (a, b) => areClose(a, b, 0));\r\n}\r\nexport function expectNumbersClose(a, e, epsilon) {\r\n    if (epsilon == null) {\r\n        epsilon = testEpsilon();\r\n    }\r\n    if (!areClose(a, e, epsilon)) {\r\n        throw new Error(`Numbers differ: actual === ${a}, expected === ${e}`);\r\n    }\r\n}\r\nfunction areClose(a, e, epsilon) {\r\n    if (!isFinite(a) && !isFinite(e)) {\r\n        return true;\r\n    }\r\n    if (isNaN(a) || isNaN(e) || Math.abs(a - e) > epsilon) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\nexport function expectValuesInRange(actual, low, high) {\r\n    for (let i = 0; i < actual.length; i++) {\r\n        if (actual[i] < low || actual[i] > high) {\r\n            throw new Error(`Value out of range:${actual[i]} low: ${low}, high: ${high}`);\r\n        }\r\n    }\r\n}\r\nexport function expectArrayBuffersEqual(actual, expected) {\r\n    // Safari & Jasmine don't like comparing ArrayBuffers directly. Wrapping in\r\n    // a Float32Array solves this issue.\r\n    expect(new Float32Array(actual)).toEqual(new Float32Array(expected));\r\n}\r\n//# sourceMappingURL=test_util.js.map"]},"metadata":{},"sourceType":"module"}