{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { inferShape } from '../tensor_util_env';\nimport { assertNonNull } from '../util';\nimport { makeTensor } from './tensor_ops_util';\n/**\r\n * Creates rank-4 `tf.Tensor` with the provided values, shape and dtype.\r\n *\r\n * The same functionality can be achieved with `tf.tensor`, but in general\r\n * we recommend using `tf.tensor4d` as it makes the code more readable.\r\n *\r\n *  ```js\r\n * // Pass a nested array.\r\n * tf.tensor4d([[[[1], [2]], [[3], [4]]]]).print();\r\n * ```\r\n * ```js\r\n * // Pass a flat array and specify a shape.\r\n * tf.tensor4d([1, 2, 3, 4], [1, 2, 2, 1]).print();\r\n * ```\r\n *\r\n * @param values The values of the tensor. Can be nested array of numbers,\r\n *     or a flat array, or a `TypedArray`.\r\n * @param shape The shape of the tensor. Optional. If not provided,\r\n *   it is inferred from `values`.\r\n * @param dtype The data type.\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Creation'}\r\n */\n\nexport function tensor4d(values, shape, dtype) {\n  assertNonNull(values);\n\n  if (shape != null && shape.length !== 4) {\n    throw new Error('tensor4d() requires shape to have four numbers');\n  }\n\n  var inferredShape = inferShape(values, dtype);\n\n  if (inferredShape.length !== 4 && inferredShape.length !== 1) {\n    throw new Error('tensor4d() requires values to be number[][][][] or flat/TypedArray');\n  }\n\n  if (inferredShape.length === 1 && shape == null) {\n    throw new Error('tensor4d() requires shape to be provided when `values` ' + 'are a flat array');\n  }\n\n  return makeTensor(values, shape, inferredShape, dtype);\n}","map":{"version":3,"sources":["../../src/ops/tensor4d.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAGH,SAAQ,UAAR,QAAyB,oBAAzB;AAGA,SAAQ,aAAR,QAA4B,SAA5B;AACA,SAAQ,UAAR,QAAyB,mBAAzB;AAEA;;;;;;;;;;;;;;;;;;;;;;AAsBG;;AACH,OAAM,SAAU,QAAV,CACF,MADE,EACoB,KADpB,EAEF,KAFE,EAEc;AAClB,EAAA,aAAa,CAAC,MAAD,CAAb;;AACA,MAAI,KAAK,IAAI,IAAT,IAAiB,KAAK,CAAC,MAAN,KAAiB,CAAtC,EAAyC;AACvC,UAAM,IAAI,KAAJ,CAAU,gDAAV,CAAN;AACD;;AACD,MAAM,aAAa,GAAG,UAAU,CAAC,MAAD,EAAS,KAAT,CAAhC;;AACA,MAAI,aAAa,CAAC,MAAd,KAAyB,CAAzB,IAA8B,aAAa,CAAC,MAAd,KAAyB,CAA3D,EAA8D;AAC5D,UAAM,IAAI,KAAJ,CACF,oEADE,CAAN;AAED;;AACD,MAAI,aAAa,CAAC,MAAd,KAAyB,CAAzB,IAA8B,KAAK,IAAI,IAA3C,EAAiD;AAC/C,UAAM,IAAI,KAAJ,CACF,4DACA,kBAFE,CAAN;AAGD;;AACD,SAAO,UAAU,CAAC,MAAD,EAAS,KAAT,EAAgB,aAAhB,EAA+B,KAA/B,CAAjB;AACD","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { inferShape } from '../tensor_util_env';\r\nimport { assertNonNull } from '../util';\r\nimport { makeTensor } from './tensor_ops_util';\r\n/**\r\n * Creates rank-4 `tf.Tensor` with the provided values, shape and dtype.\r\n *\r\n * The same functionality can be achieved with `tf.tensor`, but in general\r\n * we recommend using `tf.tensor4d` as it makes the code more readable.\r\n *\r\n *  ```js\r\n * // Pass a nested array.\r\n * tf.tensor4d([[[[1], [2]], [[3], [4]]]]).print();\r\n * ```\r\n * ```js\r\n * // Pass a flat array and specify a shape.\r\n * tf.tensor4d([1, 2, 3, 4], [1, 2, 2, 1]).print();\r\n * ```\r\n *\r\n * @param values The values of the tensor. Can be nested array of numbers,\r\n *     or a flat array, or a `TypedArray`.\r\n * @param shape The shape of the tensor. Optional. If not provided,\r\n *   it is inferred from `values`.\r\n * @param dtype The data type.\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Creation'}\r\n */\r\nexport function tensor4d(values, shape, dtype) {\r\n    assertNonNull(values);\r\n    if (shape != null && shape.length !== 4) {\r\n        throw new Error('tensor4d() requires shape to have four numbers');\r\n    }\r\n    const inferredShape = inferShape(values, dtype);\r\n    if (inferredShape.length !== 4 && inferredShape.length !== 1) {\r\n        throw new Error('tensor4d() requires values to be number[][][][] or flat/TypedArray');\r\n    }\r\n    if (inferredShape.length === 1 && shape == null) {\r\n        throw new Error('tensor4d() requires shape to be provided when `values` ' +\r\n            'are a flat array');\r\n    }\r\n    return makeTensor(values, shape, inferredShape, dtype);\r\n}\r\n//# sourceMappingURL=tensor4d.js.map"]},"metadata":{},"sourceType":"module"}