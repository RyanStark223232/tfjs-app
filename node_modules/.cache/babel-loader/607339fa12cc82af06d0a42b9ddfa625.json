{"ast":null,"code":"import _classCallCheck from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nexport var EPSILON_FLOAT32 = 1e-7;\nexport var EPSILON_FLOAT16 = 1e-4;\n/** Convenient class for storing tensor-related data. */\n\nexport var DataStorage = /*#__PURE__*/function () {\n  function DataStorage(backend, dataMover) {\n    _classCallCheck(this, DataStorage);\n\n    this.backend = backend;\n    this.dataMover = dataMover;\n    this.data = new WeakMap();\n    this.dataIdsCount = 0;\n  }\n\n  _createClass(DataStorage, [{\n    key: \"get\",\n    value: function get(dataId) {\n      if (!this.data.has(dataId)) {\n        this.dataMover.moveData(this.backend, dataId);\n      }\n\n      return this.data.get(dataId);\n    }\n  }, {\n    key: \"set\",\n    value: function set(dataId, value) {\n      this.dataIdsCount++;\n      this.data.set(dataId, value);\n    }\n  }, {\n    key: \"has\",\n    value: function has(dataId) {\n      return this.data.has(dataId);\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(dataId) {\n      this.dataIdsCount--;\n      return this.data.delete(dataId);\n    }\n  }, {\n    key: \"numDataIds\",\n    value: function numDataIds() {\n      return this.dataIdsCount;\n    }\n  }]);\n\n  return DataStorage;\n}();\n/**\r\n * The interface that defines the kernels that should be implemented when\r\n * adding a new backend. New backends don't need to implement every one of the\r\n * methods, this can be done gradually (throw an error for unimplemented\r\n * methods).\r\n */\n\nexport var KernelBackend = /*#__PURE__*/function () {\n  function KernelBackend() {\n    _classCallCheck(this, KernelBackend);\n  }\n\n  _createClass(KernelBackend, [{\n    key: \"time\",\n    value: function time(f) {\n      return notYetImplemented('time');\n    }\n  }, {\n    key: \"read\",\n    value: function read(dataId) {\n      return notYetImplemented('read');\n    }\n  }, {\n    key: \"readSync\",\n    value: function readSync(dataId) {\n      return notYetImplemented('readSync');\n    }\n  }, {\n    key: \"numDataIds\",\n    value: function numDataIds() {\n      return notYetImplemented('numDataIds');\n    }\n  }, {\n    key: \"disposeData\",\n    value: function disposeData(dataId) {\n      return notYetImplemented('disposeData');\n    }\n  }, {\n    key: \"write\",\n    value: function write(values, shape, dtype) {\n      return notYetImplemented('write');\n    }\n  }, {\n    key: \"move\",\n    value: function move(dataId, values, shape, dtype) {\n      return notYetImplemented('move');\n    }\n  }, {\n    key: \"memory\",\n    value: function memory() {\n      return notYetImplemented('memory');\n    }\n    /** Returns the highest precision for floats in bits (e.g. 16 or 32) */\n\n  }, {\n    key: \"floatPrecision\",\n    value: function floatPrecision() {\n      return notYetImplemented('floatPrecision');\n    }\n    /** Returns the smallest representable number.  */\n\n  }, {\n    key: \"epsilon\",\n    value: function epsilon() {\n      return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n    }\n  }, {\n    key: \"batchMatMul\",\n    value: function batchMatMul(a, b, transposeA, transposeB) {\n      return notYetImplemented('batchMatMul');\n    }\n  }, {\n    key: \"fusedBatchMatMul\",\n    value: function fusedBatchMatMul(_ref) {\n      var a = _ref.a,\n          b = _ref.b,\n          transposeA = _ref.transposeA,\n          transposeB = _ref.transposeB,\n          bias = _ref.bias,\n          activation = _ref.activation,\n          preluActivationWeights = _ref.preluActivationWeights;\n      return notYetImplemented('fusedBatchMatMul');\n    }\n  }, {\n    key: \"slice\",\n    value: function slice(x, begin, size) {\n      return notYetImplemented('slice');\n    }\n  }, {\n    key: \"stridedSlice\",\n    value: function stridedSlice(x, begin, end, strides) {\n      return notYetImplemented('stridedSlice');\n    }\n  }, {\n    key: \"unstack\",\n    value: function unstack(x, axis) {\n      return notYetImplemented('unstack');\n    }\n  }, {\n    key: \"reverse\",\n    value: function reverse(a, axis) {\n      return notYetImplemented('reverse');\n    }\n  }, {\n    key: \"concat\",\n    value: function concat(tensors, axis) {\n      return notYetImplemented('concat');\n    }\n  }, {\n    key: \"neg\",\n    value: function neg(a) {\n      return notYetImplemented('neg');\n    }\n  }, {\n    key: \"add\",\n    value: function add(a, b) {\n      return notYetImplemented('add');\n    }\n  }, {\n    key: \"addN\",\n    value: function addN(tensors) {\n      return notYetImplemented('addN');\n    }\n  }, {\n    key: \"subtract\",\n    value: function subtract(a, b) {\n      return notYetImplemented('subtract');\n    }\n  }, {\n    key: \"multiply\",\n    value: function multiply(a, b) {\n      return notYetImplemented('multiply');\n    }\n  }, {\n    key: \"realDivide\",\n    value: function realDivide(a, b) {\n      return notYetImplemented('realDivide');\n    }\n  }, {\n    key: \"floorDiv\",\n    value: function floorDiv(a, b) {\n      return notYetImplemented('floorDiv');\n    }\n  }, {\n    key: \"sum\",\n    value: function sum(x, axes) {\n      return notYetImplemented('sum');\n    }\n  }, {\n    key: \"prod\",\n    value: function prod(x, axes) {\n      return notYetImplemented('prod');\n    }\n  }, {\n    key: \"unsortedSegmentSum\",\n    value: function unsortedSegmentSum(x, segmentIds, numSegments) {\n      return notYetImplemented('unsortedSegmentSum');\n    }\n  }, {\n    key: \"argMin\",\n    value: function argMin(x, axis) {\n      return notYetImplemented('argMin');\n    }\n  }, {\n    key: \"argMax\",\n    value: function argMax(x, axis) {\n      return notYetImplemented('argMax');\n    }\n  }, {\n    key: \"equal\",\n    value: function equal(a, b) {\n      return notYetImplemented('equal');\n    }\n  }, {\n    key: \"notEqual\",\n    value: function notEqual(a, b) {\n      return notYetImplemented('notEqual');\n    }\n  }, {\n    key: \"less\",\n    value: function less(a, b) {\n      return notYetImplemented('less');\n    }\n  }, {\n    key: \"lessEqual\",\n    value: function lessEqual(a, b) {\n      return notYetImplemented('lessEqual');\n    }\n  }, {\n    key: \"greater\",\n    value: function greater(a, b) {\n      return notYetImplemented('greater');\n    }\n  }, {\n    key: \"greaterEqual\",\n    value: function greaterEqual(a, b) {\n      return notYetImplemented('greaterEqual');\n    }\n  }, {\n    key: \"logicalNot\",\n    value: function logicalNot(a) {\n      return notYetImplemented('logicalNot');\n    }\n  }, {\n    key: \"logicalAnd\",\n    value: function logicalAnd(a, b) {\n      return notYetImplemented('logicalAnd');\n    }\n  }, {\n    key: \"logicalOr\",\n    value: function logicalOr(a, b) {\n      return notYetImplemented('logicalOr');\n    }\n  }, {\n    key: \"where\",\n    value: function where(condition) {\n      return notYetImplemented('where');\n    }\n  }, {\n    key: \"select\",\n    value: function select(condition, a, b) {\n      return notYetImplemented('select');\n    }\n  }, {\n    key: \"topk\",\n    value: function topk(x, k, sorted) {\n      return notYetImplemented('topk');\n    }\n  }, {\n    key: \"min\",\n    value: function min(x, axes) {\n      return notYetImplemented('min');\n    }\n  }, {\n    key: \"minimum\",\n    value: function minimum(a, b) {\n      return notYetImplemented('minimum');\n    }\n  }, {\n    key: \"mod\",\n    value: function mod(a, b) {\n      return notYetImplemented('mod');\n    }\n  }, {\n    key: \"max\",\n    value: function max(x, axes) {\n      return notYetImplemented('max');\n    }\n  }, {\n    key: \"maximum\",\n    value: function maximum(a, b) {\n      return notYetImplemented('maximum');\n    }\n  }, {\n    key: \"all\",\n    value: function all(x, axes) {\n      return notYetImplemented('all');\n    }\n  }, {\n    key: \"any\",\n    value: function any(x, axes) {\n      return notYetImplemented('any');\n    }\n  }, {\n    key: \"squaredDifference\",\n    value: function squaredDifference(a, b) {\n      return notYetImplemented('squaredDifference');\n    }\n  }, {\n    key: \"ceil\",\n    value: function ceil(x) {\n      return notYetImplemented('ceil');\n    }\n  }, {\n    key: \"floor\",\n    value: function floor(x) {\n      return notYetImplemented('floor');\n    }\n  }, {\n    key: \"round\",\n    value: function round(x) {\n      return notYetImplemented('round');\n    }\n  }, {\n    key: \"sign\",\n    value: function sign(x) {\n      return notYetImplemented('sign');\n    }\n  }, {\n    key: \"isNaN\",\n    value: function isNaN(x) {\n      return notYetImplemented('isNaN');\n    }\n  }, {\n    key: \"isInf\",\n    value: function isInf(x) {\n      return notYetImplemented('isInf');\n    }\n  }, {\n    key: \"isFinite\",\n    value: function isFinite(x) {\n      return notYetImplemented('isFinite');\n    }\n  }, {\n    key: \"pow\",\n    value: function pow(a, b) {\n      return notYetImplemented('pow');\n    }\n  }, {\n    key: \"exp\",\n    value: function exp(x) {\n      return notYetImplemented('exp');\n    }\n  }, {\n    key: \"expm1\",\n    value: function expm1(x) {\n      return notYetImplemented('expm1');\n    }\n  }, {\n    key: \"softmax\",\n    value: function softmax(x, dim) {\n      return notYetImplemented('softmax');\n    }\n  }, {\n    key: \"log\",\n    value: function log(x) {\n      return notYetImplemented('log');\n    }\n  }, {\n    key: \"log1p\",\n    value: function log1p(x) {\n      return notYetImplemented('log1p');\n    }\n  }, {\n    key: \"sqrt\",\n    value: function sqrt(x) {\n      return notYetImplemented('sqrt');\n    }\n  }, {\n    key: \"rsqrt\",\n    value: function rsqrt(x) {\n      return notYetImplemented('rsqrt');\n    }\n  }, {\n    key: \"square\",\n    value: function square(x) {\n      return notYetImplemented('square');\n    }\n  }, {\n    key: \"reciprocal\",\n    value: function reciprocal(x) {\n      return notYetImplemented('reciprocal');\n    }\n  }, {\n    key: \"relu\",\n    value: function relu(x) {\n      return notYetImplemented('relu');\n    }\n  }, {\n    key: \"relu6\",\n    value: function relu6(x) {\n      return notYetImplemented('relu6');\n    }\n  }, {\n    key: \"prelu\",\n    value: function prelu(x, a) {\n      return notYetImplemented('prelu');\n    }\n  }, {\n    key: \"elu\",\n    value: function elu(x) {\n      return notYetImplemented('elu');\n    }\n  }, {\n    key: \"eluDer\",\n    value: function eluDer(dy, y) {\n      return notYetImplemented('eluDer');\n    }\n  }, {\n    key: \"selu\",\n    value: function selu(x) {\n      return notYetImplemented('selu');\n    }\n  }, {\n    key: \"int\",\n    value: function int(x) {\n      return notYetImplemented('int');\n    }\n  }, {\n    key: \"clip\",\n    value: function clip(x, min, max) {\n      return notYetImplemented('clip');\n    }\n  }, {\n    key: \"abs\",\n    value: function abs(x) {\n      return notYetImplemented('abs');\n    }\n  }, {\n    key: \"complexAbs\",\n    value: function complexAbs(x) {\n      return notYetImplemented('complexAbs');\n    }\n  }, {\n    key: \"sigmoid\",\n    value: function sigmoid(x) {\n      return notYetImplemented('sigmoid');\n    }\n  }, {\n    key: \"softplus\",\n    value: function softplus(x) {\n      return notYetImplemented('softplus');\n    }\n  }, {\n    key: \"sin\",\n    value: function sin(x) {\n      return notYetImplemented('sin');\n    }\n  }, {\n    key: \"cos\",\n    value: function cos(x) {\n      return notYetImplemented('cos');\n    }\n  }, {\n    key: \"tan\",\n    value: function tan(x) {\n      return notYetImplemented('tan');\n    }\n  }, {\n    key: \"asin\",\n    value: function asin(x) {\n      return notYetImplemented('asin');\n    }\n  }, {\n    key: \"acos\",\n    value: function acos(x) {\n      return notYetImplemented('acos');\n    }\n  }, {\n    key: \"atan\",\n    value: function atan(x) {\n      return notYetImplemented('atan');\n    }\n  }, {\n    key: \"atan2\",\n    value: function atan2(a, b) {\n      return notYetImplemented('atan2');\n    }\n  }, {\n    key: \"sinh\",\n    value: function sinh(x) {\n      return notYetImplemented('sinh');\n    }\n  }, {\n    key: \"cosh\",\n    value: function cosh(x) {\n      return notYetImplemented('cosh');\n    }\n  }, {\n    key: \"tanh\",\n    value: function tanh(x) {\n      return notYetImplemented('tanh');\n    }\n  }, {\n    key: \"asinh\",\n    value: function asinh(x) {\n      return notYetImplemented('asinh');\n    }\n  }, {\n    key: \"acosh\",\n    value: function acosh(x) {\n      return notYetImplemented('acosh');\n    }\n  }, {\n    key: \"atanh\",\n    value: function atanh(x) {\n      return notYetImplemented('atanh');\n    }\n  }, {\n    key: \"erf\",\n    value: function erf(x) {\n      return notYetImplemented('erf');\n    }\n  }, {\n    key: \"step\",\n    value: function step(x, alpha) {\n      return notYetImplemented('step');\n    }\n  }, {\n    key: \"fusedConv2d\",\n    value: function fusedConv2d(_ref2) {\n      var input = _ref2.input,\n          filter = _ref2.filter,\n          convInfo = _ref2.convInfo,\n          bias = _ref2.bias,\n          activation = _ref2.activation,\n          preluActivationWeights = _ref2.preluActivationWeights;\n      return notYetImplemented('fusedConv2d');\n    }\n  }, {\n    key: \"conv2d\",\n    value: function conv2d(x, filter, convInfo) {\n      return notYetImplemented('conv2d');\n    }\n  }, {\n    key: \"conv2dDerInput\",\n    value: function conv2dDerInput(dy, filter, convInfo) {\n      return notYetImplemented('conv2dDerInput');\n    }\n  }, {\n    key: \"conv2dDerFilter\",\n    value: function conv2dDerFilter(x, dY, convInfo) {\n      return notYetImplemented('conv2dDerFilter');\n    }\n  }, {\n    key: \"fusedDepthwiseConv2D\",\n    value: function fusedDepthwiseConv2D(_ref3) {\n      var input = _ref3.input,\n          filter = _ref3.filter,\n          convInfo = _ref3.convInfo,\n          bias = _ref3.bias,\n          activation = _ref3.activation,\n          preluActivationWeights = _ref3.preluActivationWeights;\n      return notYetImplemented('fusedDepthwiseConv2D');\n    }\n  }, {\n    key: \"depthwiseConv2D\",\n    value: function depthwiseConv2D(input, filter, convInfo) {\n      return notYetImplemented('depthwiseConv2D');\n    }\n  }, {\n    key: \"depthwiseConv2DDerInput\",\n    value: function depthwiseConv2DDerInput(dy, filter, convInfo) {\n      return notYetImplemented('depthwiseConv2DDerInput');\n    }\n  }, {\n    key: \"depthwiseConv2DDerFilter\",\n    value: function depthwiseConv2DDerFilter(x, dY, convInfo) {\n      return notYetImplemented('depthwiseConv2DDerFilter');\n    }\n  }, {\n    key: \"conv3d\",\n    value: function conv3d(x, filter, convInfo) {\n      return notYetImplemented('conv3d');\n    }\n  }, {\n    key: \"conv3dDerInput\",\n    value: function conv3dDerInput(dy, filter, convInfo) {\n      return notYetImplemented('conv3dDerInput');\n    }\n  }, {\n    key: \"conv3dDerFilter\",\n    value: function conv3dDerFilter(x, dY, convInfo) {\n      return notYetImplemented('conv3dDerFilter');\n    }\n  }, {\n    key: \"maxPool\",\n    value: function maxPool(x, convInfo) {\n      return notYetImplemented('maxPool');\n    }\n  }, {\n    key: \"maxPoolBackprop\",\n    value: function maxPoolBackprop(dy, x, y, convInfo) {\n      return notYetImplemented('maxPoolBackprop');\n    }\n  }, {\n    key: \"avgPool\",\n    value: function avgPool(x, convInfo) {\n      return notYetImplemented('avgPool');\n    }\n  }, {\n    key: \"avgPoolBackprop\",\n    value: function avgPoolBackprop(dy, x, convInfo) {\n      return notYetImplemented('avgPoolBackprop');\n    }\n  }, {\n    key: \"avgPool3d\",\n    value: function avgPool3d(x, convInfo) {\n      return notYetImplemented('avgPool3d');\n    }\n  }, {\n    key: \"avgPool3dBackprop\",\n    value: function avgPool3dBackprop(dy, x, convInfo) {\n      return notYetImplemented('avgPool3dBackprop');\n    }\n  }, {\n    key: \"maxPool3d\",\n    value: function maxPool3d(x, convInfo) {\n      return notYetImplemented('maxPool3d');\n    }\n  }, {\n    key: \"maxPool3dBackprop\",\n    value: function maxPool3dBackprop(dy, x, y, convInfo) {\n      return notYetImplemented('maxPool3dBackprop');\n    }\n  }, {\n    key: \"reshape\",\n    value: function reshape(x, shape) {\n      return notYetImplemented('reshape');\n    }\n  }, {\n    key: \"cast\",\n    value: function cast(x, dtype) {\n      return notYetImplemented('cast');\n    }\n  }, {\n    key: \"tile\",\n    value: function tile(x, reps) {\n      return notYetImplemented('tile');\n    }\n  }, {\n    key: \"pad\",\n    value: function pad(x, paddings, constantValue) {\n      return notYetImplemented('pad');\n    }\n  }, {\n    key: \"transpose\",\n    value: function transpose(x, perm) {\n      return notYetImplemented('transpose');\n    }\n  }, {\n    key: \"gather\",\n    value: function gather(x, indices, axis) {\n      return notYetImplemented('gather');\n    }\n  }, {\n    key: \"gatherND\",\n    value: function gatherND(x, indices) {\n      return notYetImplemented('gatherND');\n    }\n  }, {\n    key: \"scatterND\",\n    value: function scatterND(indices, updates, shape) {\n      return notYetImplemented('scatterND');\n    }\n  }, {\n    key: \"batchToSpaceND\",\n    value: function batchToSpaceND(x, blockShape, crops) {\n      return notYetImplemented('batchToSpaceND');\n    }\n  }, {\n    key: \"spaceToBatchND\",\n    value: function spaceToBatchND(x, blockShape, paddings) {\n      return notYetImplemented('spaceToBatchND');\n    }\n  }, {\n    key: \"resizeBilinear\",\n    value: function resizeBilinear(x, newHeight, newWidth, alignCorners) {\n      return notYetImplemented('resizeBilinear');\n    }\n  }, {\n    key: \"resizeBilinearBackprop\",\n    value: function resizeBilinearBackprop(dy, x, alignCorners) {\n      return notYetImplemented('resizeBilinearBackprop');\n    }\n  }, {\n    key: \"resizeNearestNeighbor\",\n    value: function resizeNearestNeighbor(x, newHEight, newWidth, alignCorners) {\n      return notYetImplemented('resizeNearestNeighbor');\n    }\n  }, {\n    key: \"resizeNearestNeighborBackprop\",\n    value: function resizeNearestNeighborBackprop(dy, x, alignCorners) {\n      return notYetImplemented('resizeNearestNeighborBackprop');\n    }\n  }, {\n    key: \"batchNorm\",\n    value: function batchNorm(x, mean, variance, offset, scale, varianceEpsilon) {\n      return notYetImplemented('batchNorm');\n    }\n  }, {\n    key: \"localResponseNormalization4D\",\n    value: function localResponseNormalization4D(x, radius, bias, alpha, beta) {\n      return notYetImplemented('localResponseNormalization4D');\n    }\n  }, {\n    key: \"LRNGrad\",\n    value: function LRNGrad(dy, inputImage, outputImage, radius, bias, alpha, beta) {\n      return notYetImplemented('LRNGrad');\n    }\n  }, {\n    key: \"multinomial\",\n    value: function multinomial(logits, normalized, numSamples, seed) {\n      return notYetImplemented('multinomial');\n    }\n  }, {\n    key: \"oneHot\",\n    value: function oneHot(indices, depth, onValue, offValue) {\n      return notYetImplemented('oneHot');\n    }\n  }, {\n    key: \"cumsum\",\n    value: function cumsum(x, axis, exclusive, reverse) {\n      return notYetImplemented('cumsum');\n    }\n  }, {\n    key: \"nonMaxSuppression\",\n    value: function nonMaxSuppression(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold) {\n      return notYetImplemented('nonMaxSuppression');\n    }\n  }, {\n    key: \"fft\",\n    value: function fft(x) {\n      return notYetImplemented('fft');\n    }\n  }, {\n    key: \"ifft\",\n    value: function ifft(x) {\n      return notYetImplemented('ifft');\n    }\n  }, {\n    key: \"complex\",\n    value: function complex(real, imag) {\n      return notYetImplemented('complex');\n    }\n  }, {\n    key: \"real\",\n    value: function real(input) {\n      return notYetImplemented('real');\n    }\n  }, {\n    key: \"imag\",\n    value: function imag(input) {\n      return notYetImplemented('imag');\n    }\n  }, {\n    key: \"cropAndResize\",\n    value: function cropAndResize(image, boxes, boxIndex, cropSize, method, extrapolationValue) {\n      return notYetImplemented('cropAndResize');\n    }\n  }, {\n    key: \"depthToSpace\",\n    value: function depthToSpace(x, blockSize, dataFormat) {\n      return notYetImplemented('depthToSpace');\n    } // Aligns with the \"SplitV\" kernel in TensorFlow.\n\n  }, {\n    key: \"split\",\n    value: function split(value, sizeSplits, axis) {\n      return notYetImplemented('split');\n    }\n  }, {\n    key: \"sparseToDense\",\n    value: function sparseToDense(sparseIndices, sparseValues, outputShape, defaultValue) {\n      return notYetImplemented('sparseToDense');\n    }\n  }, {\n    key: \"diag\",\n    value: function diag(x) {\n      return notYetImplemented('diag');\n    }\n  }, {\n    key: \"fill\",\n    value: function fill(shape, value, dtype) {\n      return notYetImplemented('fill');\n    }\n  }, {\n    key: \"onesLike\",\n    value: function onesLike(x) {\n      return notYetImplemented('onesLike');\n    }\n  }, {\n    key: \"zerosLike\",\n    value: function zerosLike(x) {\n      return notYetImplemented('zerosLike');\n    }\n  }, {\n    key: \"linspace\",\n    value: function linspace(start, stop, num) {\n      return notYetImplemented('linspace');\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      return notYetImplemented('dispose');\n    }\n  }]);\n\n  return KernelBackend;\n}();\n\nfunction notYetImplemented(kernelName) {\n  throw new Error(\"'\".concat(kernelName, \"' not yet implemented or not found in the registry. \") + \"This kernel may not be supported by the tfjs backend you have chosen\");\n}","map":{"version":3,"sources":["../../src/backends/backend.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nexport const EPSILON_FLOAT32 = 1e-7;\r\nexport const EPSILON_FLOAT16 = 1e-4;\r\n/** Convenient class for storing tensor-related data. */\r\nexport class DataStorage {\r\n    constructor(backend, dataMover) {\r\n        this.backend = backend;\r\n        this.dataMover = dataMover;\r\n        this.data = new WeakMap();\r\n        this.dataIdsCount = 0;\r\n    }\r\n    get(dataId) {\r\n        if (!this.data.has(dataId)) {\r\n            this.dataMover.moveData(this.backend, dataId);\r\n        }\r\n        return this.data.get(dataId);\r\n    }\r\n    set(dataId, value) {\r\n        this.dataIdsCount++;\r\n        this.data.set(dataId, value);\r\n    }\r\n    has(dataId) {\r\n        return this.data.has(dataId);\r\n    }\r\n    delete(dataId) {\r\n        this.dataIdsCount--;\r\n        return this.data.delete(dataId);\r\n    }\r\n    numDataIds() {\r\n        return this.dataIdsCount;\r\n    }\r\n}\r\n/**\r\n * The interface that defines the kernels that should be implemented when\r\n * adding a new backend. New backends don't need to implement every one of the\r\n * methods, this can be done gradually (throw an error for unimplemented\r\n * methods).\r\n */\r\nexport class KernelBackend {\r\n    time(f) {\r\n        return notYetImplemented('time');\r\n    }\r\n    read(dataId) {\r\n        return notYetImplemented('read');\r\n    }\r\n    readSync(dataId) {\r\n        return notYetImplemented('readSync');\r\n    }\r\n    numDataIds() {\r\n        return notYetImplemented('numDataIds');\r\n    }\r\n    disposeData(dataId) {\r\n        return notYetImplemented('disposeData');\r\n    }\r\n    write(values, shape, dtype) {\r\n        return notYetImplemented('write');\r\n    }\r\n    move(dataId, values, shape, dtype) {\r\n        return notYetImplemented('move');\r\n    }\r\n    memory() {\r\n        return notYetImplemented('memory');\r\n    }\r\n    /** Returns the highest precision for floats in bits (e.g. 16 or 32) */\r\n    floatPrecision() {\r\n        return notYetImplemented('floatPrecision');\r\n    }\r\n    /** Returns the smallest representable number.  */\r\n    epsilon() {\r\n        return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\r\n    }\r\n    batchMatMul(a, b, transposeA, transposeB) {\r\n        return notYetImplemented('batchMatMul');\r\n    }\r\n    fusedBatchMatMul({ a, b, transposeA, transposeB, bias, activation, preluActivationWeights }) {\r\n        return notYetImplemented('fusedBatchMatMul');\r\n    }\r\n    slice(x, begin, size) {\r\n        return notYetImplemented('slice');\r\n    }\r\n    stridedSlice(x, begin, end, strides) {\r\n        return notYetImplemented('stridedSlice');\r\n    }\r\n    unstack(x, axis) {\r\n        return notYetImplemented('unstack');\r\n    }\r\n    reverse(a, axis) {\r\n        return notYetImplemented('reverse');\r\n    }\r\n    concat(tensors, axis) {\r\n        return notYetImplemented('concat');\r\n    }\r\n    neg(a) {\r\n        return notYetImplemented('neg');\r\n    }\r\n    add(a, b) {\r\n        return notYetImplemented('add');\r\n    }\r\n    addN(tensors) {\r\n        return notYetImplemented('addN');\r\n    }\r\n    subtract(a, b) {\r\n        return notYetImplemented('subtract');\r\n    }\r\n    multiply(a, b) {\r\n        return notYetImplemented('multiply');\r\n    }\r\n    realDivide(a, b) {\r\n        return notYetImplemented('realDivide');\r\n    }\r\n    floorDiv(a, b) {\r\n        return notYetImplemented('floorDiv');\r\n    }\r\n    sum(x, axes) {\r\n        return notYetImplemented('sum');\r\n    }\r\n    prod(x, axes) {\r\n        return notYetImplemented('prod');\r\n    }\r\n    unsortedSegmentSum(x, segmentIds, numSegments) {\r\n        return notYetImplemented('unsortedSegmentSum');\r\n    }\r\n    argMin(x, axis) {\r\n        return notYetImplemented('argMin');\r\n    }\r\n    argMax(x, axis) {\r\n        return notYetImplemented('argMax');\r\n    }\r\n    equal(a, b) {\r\n        return notYetImplemented('equal');\r\n    }\r\n    notEqual(a, b) {\r\n        return notYetImplemented('notEqual');\r\n    }\r\n    less(a, b) {\r\n        return notYetImplemented('less');\r\n    }\r\n    lessEqual(a, b) {\r\n        return notYetImplemented('lessEqual');\r\n    }\r\n    greater(a, b) {\r\n        return notYetImplemented('greater');\r\n    }\r\n    greaterEqual(a, b) {\r\n        return notYetImplemented('greaterEqual');\r\n    }\r\n    logicalNot(a) {\r\n        return notYetImplemented('logicalNot');\r\n    }\r\n    logicalAnd(a, b) {\r\n        return notYetImplemented('logicalAnd');\r\n    }\r\n    logicalOr(a, b) {\r\n        return notYetImplemented('logicalOr');\r\n    }\r\n    where(condition) {\r\n        return notYetImplemented('where');\r\n    }\r\n    select(condition, a, b) {\r\n        return notYetImplemented('select');\r\n    }\r\n    topk(x, k, sorted) {\r\n        return notYetImplemented('topk');\r\n    }\r\n    min(x, axes) {\r\n        return notYetImplemented('min');\r\n    }\r\n    minimum(a, b) {\r\n        return notYetImplemented('minimum');\r\n    }\r\n    mod(a, b) {\r\n        return notYetImplemented('mod');\r\n    }\r\n    max(x, axes) {\r\n        return notYetImplemented('max');\r\n    }\r\n    maximum(a, b) {\r\n        return notYetImplemented('maximum');\r\n    }\r\n    all(x, axes) {\r\n        return notYetImplemented('all');\r\n    }\r\n    any(x, axes) {\r\n        return notYetImplemented('any');\r\n    }\r\n    squaredDifference(a, b) {\r\n        return notYetImplemented('squaredDifference');\r\n    }\r\n    ceil(x) {\r\n        return notYetImplemented('ceil');\r\n    }\r\n    floor(x) {\r\n        return notYetImplemented('floor');\r\n    }\r\n    round(x) {\r\n        return notYetImplemented('round');\r\n    }\r\n    sign(x) {\r\n        return notYetImplemented('sign');\r\n    }\r\n    isNaN(x) {\r\n        return notYetImplemented('isNaN');\r\n    }\r\n    isInf(x) {\r\n        return notYetImplemented('isInf');\r\n    }\r\n    isFinite(x) {\r\n        return notYetImplemented('isFinite');\r\n    }\r\n    pow(a, b) {\r\n        return notYetImplemented('pow');\r\n    }\r\n    exp(x) {\r\n        return notYetImplemented('exp');\r\n    }\r\n    expm1(x) {\r\n        return notYetImplemented('expm1');\r\n    }\r\n    softmax(x, dim) {\r\n        return notYetImplemented('softmax');\r\n    }\r\n    log(x) {\r\n        return notYetImplemented('log');\r\n    }\r\n    log1p(x) {\r\n        return notYetImplemented('log1p');\r\n    }\r\n    sqrt(x) {\r\n        return notYetImplemented('sqrt');\r\n    }\r\n    rsqrt(x) {\r\n        return notYetImplemented('rsqrt');\r\n    }\r\n    square(x) {\r\n        return notYetImplemented('square');\r\n    }\r\n    reciprocal(x) {\r\n        return notYetImplemented('reciprocal');\r\n    }\r\n    relu(x) {\r\n        return notYetImplemented('relu');\r\n    }\r\n    relu6(x) {\r\n        return notYetImplemented('relu6');\r\n    }\r\n    prelu(x, a) {\r\n        return notYetImplemented('prelu');\r\n    }\r\n    elu(x) {\r\n        return notYetImplemented('elu');\r\n    }\r\n    eluDer(dy, y) {\r\n        return notYetImplemented('eluDer');\r\n    }\r\n    selu(x) {\r\n        return notYetImplemented('selu');\r\n    }\r\n    int(x) {\r\n        return notYetImplemented('int');\r\n    }\r\n    clip(x, min, max) {\r\n        return notYetImplemented('clip');\r\n    }\r\n    abs(x) {\r\n        return notYetImplemented('abs');\r\n    }\r\n    complexAbs(x) {\r\n        return notYetImplemented('complexAbs');\r\n    }\r\n    sigmoid(x) {\r\n        return notYetImplemented('sigmoid');\r\n    }\r\n    softplus(x) {\r\n        return notYetImplemented('softplus');\r\n    }\r\n    sin(x) {\r\n        return notYetImplemented('sin');\r\n    }\r\n    cos(x) {\r\n        return notYetImplemented('cos');\r\n    }\r\n    tan(x) {\r\n        return notYetImplemented('tan');\r\n    }\r\n    asin(x) {\r\n        return notYetImplemented('asin');\r\n    }\r\n    acos(x) {\r\n        return notYetImplemented('acos');\r\n    }\r\n    atan(x) {\r\n        return notYetImplemented('atan');\r\n    }\r\n    atan2(a, b) {\r\n        return notYetImplemented('atan2');\r\n    }\r\n    sinh(x) {\r\n        return notYetImplemented('sinh');\r\n    }\r\n    cosh(x) {\r\n        return notYetImplemented('cosh');\r\n    }\r\n    tanh(x) {\r\n        return notYetImplemented('tanh');\r\n    }\r\n    asinh(x) {\r\n        return notYetImplemented('asinh');\r\n    }\r\n    acosh(x) {\r\n        return notYetImplemented('acosh');\r\n    }\r\n    atanh(x) {\r\n        return notYetImplemented('atanh');\r\n    }\r\n    erf(x) {\r\n        return notYetImplemented('erf');\r\n    }\r\n    step(x, alpha) {\r\n        return notYetImplemented('step');\r\n    }\r\n    fusedConv2d({ input, filter, convInfo, bias, activation, preluActivationWeights }) {\r\n        return notYetImplemented('fusedConv2d');\r\n    }\r\n    conv2d(x, filter, convInfo) {\r\n        return notYetImplemented('conv2d');\r\n    }\r\n    conv2dDerInput(dy, filter, convInfo) {\r\n        return notYetImplemented('conv2dDerInput');\r\n    }\r\n    conv2dDerFilter(x, dY, convInfo) {\r\n        return notYetImplemented('conv2dDerFilter');\r\n    }\r\n    fusedDepthwiseConv2D({ input, filter, convInfo, bias, activation, preluActivationWeights }) {\r\n        return notYetImplemented('fusedDepthwiseConv2D');\r\n    }\r\n    depthwiseConv2D(input, filter, convInfo) {\r\n        return notYetImplemented('depthwiseConv2D');\r\n    }\r\n    depthwiseConv2DDerInput(dy, filter, convInfo) {\r\n        return notYetImplemented('depthwiseConv2DDerInput');\r\n    }\r\n    depthwiseConv2DDerFilter(x, dY, convInfo) {\r\n        return notYetImplemented('depthwiseConv2DDerFilter');\r\n    }\r\n    conv3d(x, filter, convInfo) {\r\n        return notYetImplemented('conv3d');\r\n    }\r\n    conv3dDerInput(dy, filter, convInfo) {\r\n        return notYetImplemented('conv3dDerInput');\r\n    }\r\n    conv3dDerFilter(x, dY, convInfo) {\r\n        return notYetImplemented('conv3dDerFilter');\r\n    }\r\n    maxPool(x, convInfo) {\r\n        return notYetImplemented('maxPool');\r\n    }\r\n    maxPoolBackprop(dy, x, y, convInfo) {\r\n        return notYetImplemented('maxPoolBackprop');\r\n    }\r\n    avgPool(x, convInfo) {\r\n        return notYetImplemented('avgPool');\r\n    }\r\n    avgPoolBackprop(dy, x, convInfo) {\r\n        return notYetImplemented('avgPoolBackprop');\r\n    }\r\n    avgPool3d(x, convInfo) {\r\n        return notYetImplemented('avgPool3d');\r\n    }\r\n    avgPool3dBackprop(dy, x, convInfo) {\r\n        return notYetImplemented('avgPool3dBackprop');\r\n    }\r\n    maxPool3d(x, convInfo) {\r\n        return notYetImplemented('maxPool3d');\r\n    }\r\n    maxPool3dBackprop(dy, x, y, convInfo) {\r\n        return notYetImplemented('maxPool3dBackprop');\r\n    }\r\n    reshape(x, shape) {\r\n        return notYetImplemented('reshape');\r\n    }\r\n    cast(x, dtype) {\r\n        return notYetImplemented('cast');\r\n    }\r\n    tile(x, reps) {\r\n        return notYetImplemented('tile');\r\n    }\r\n    pad(x, paddings, constantValue) {\r\n        return notYetImplemented('pad');\r\n    }\r\n    transpose(x, perm) {\r\n        return notYetImplemented('transpose');\r\n    }\r\n    gather(x, indices, axis) {\r\n        return notYetImplemented('gather');\r\n    }\r\n    gatherND(x, indices) {\r\n        return notYetImplemented('gatherND');\r\n    }\r\n    scatterND(indices, updates, shape) {\r\n        return notYetImplemented('scatterND');\r\n    }\r\n    batchToSpaceND(x, blockShape, crops) {\r\n        return notYetImplemented('batchToSpaceND');\r\n    }\r\n    spaceToBatchND(x, blockShape, paddings) {\r\n        return notYetImplemented('spaceToBatchND');\r\n    }\r\n    resizeBilinear(x, newHeight, newWidth, alignCorners) {\r\n        return notYetImplemented('resizeBilinear');\r\n    }\r\n    resizeBilinearBackprop(dy, x, alignCorners) {\r\n        return notYetImplemented('resizeBilinearBackprop');\r\n    }\r\n    resizeNearestNeighbor(x, newHEight, newWidth, alignCorners) {\r\n        return notYetImplemented('resizeNearestNeighbor');\r\n    }\r\n    resizeNearestNeighborBackprop(dy, x, alignCorners) {\r\n        return notYetImplemented('resizeNearestNeighborBackprop');\r\n    }\r\n    batchNorm(x, mean, variance, offset, scale, varianceEpsilon) {\r\n        return notYetImplemented('batchNorm');\r\n    }\r\n    localResponseNormalization4D(x, radius, bias, alpha, beta) {\r\n        return notYetImplemented('localResponseNormalization4D');\r\n    }\r\n    LRNGrad(dy, inputImage, outputImage, radius, bias, alpha, beta) {\r\n        return notYetImplemented('LRNGrad');\r\n    }\r\n    multinomial(logits, normalized, numSamples, seed) {\r\n        return notYetImplemented('multinomial');\r\n    }\r\n    oneHot(indices, depth, onValue, offValue) {\r\n        return notYetImplemented('oneHot');\r\n    }\r\n    cumsum(x, axis, exclusive, reverse) {\r\n        return notYetImplemented('cumsum');\r\n    }\r\n    nonMaxSuppression(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold) {\r\n        return notYetImplemented('nonMaxSuppression');\r\n    }\r\n    fft(x) {\r\n        return notYetImplemented('fft');\r\n    }\r\n    ifft(x) {\r\n        return notYetImplemented('ifft');\r\n    }\r\n    complex(real, imag) {\r\n        return notYetImplemented('complex');\r\n    }\r\n    real(input) {\r\n        return notYetImplemented('real');\r\n    }\r\n    imag(input) {\r\n        return notYetImplemented('imag');\r\n    }\r\n    cropAndResize(image, boxes, boxIndex, cropSize, method, extrapolationValue) {\r\n        return notYetImplemented('cropAndResize');\r\n    }\r\n    depthToSpace(x, blockSize, dataFormat) {\r\n        return notYetImplemented('depthToSpace');\r\n    }\r\n    // Aligns with the \"SplitV\" kernel in TensorFlow.\r\n    split(value, sizeSplits, axis) {\r\n        return notYetImplemented('split');\r\n    }\r\n    sparseToDense(sparseIndices, sparseValues, outputShape, defaultValue) {\r\n        return notYetImplemented('sparseToDense');\r\n    }\r\n    diag(x) {\r\n        return notYetImplemented('diag');\r\n    }\r\n    fill(shape, value, dtype) {\r\n        return notYetImplemented('fill');\r\n    }\r\n    onesLike(x) {\r\n        return notYetImplemented('onesLike');\r\n    }\r\n    zerosLike(x) {\r\n        return notYetImplemented('zerosLike');\r\n    }\r\n    linspace(start, stop, num) {\r\n        return notYetImplemented('linspace');\r\n    }\r\n    dispose() {\r\n        return notYetImplemented('dispose');\r\n    }\r\n}\r\nfunction notYetImplemented(kernelName) {\r\n    throw new Error(`'${kernelName}' not yet implemented or not found in the registry. ` +\r\n        `This kernel may not be supported by the tfjs backend you have chosen`);\r\n}\r\n//# sourceMappingURL=backend.js.map"]},"metadata":{},"sourceType":"module"}