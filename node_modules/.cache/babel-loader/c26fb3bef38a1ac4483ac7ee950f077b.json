{"ast":null,"code":"import _slicedToArray from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { MaxPoolWithArgmax } from '@tensorflow/tfjs-core';\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nimport { maxPoolWithArgmaxImpl } from './MaxPoolWithArgmax_impl';\nexport var maxPoolWithArgmaxConfig = {\n  kernelName: MaxPoolWithArgmax,\n  backendName: 'webgl',\n  kernelFunc: function kernelFunc(_ref) {\n    var inputs = _ref.inputs,\n        attrs = _ref.attrs,\n        backend = _ref.backend;\n    var x = inputs.x;\n    var filterSize = attrs.filterSize,\n        strides = attrs.strides,\n        pad = attrs.pad,\n        includeBatchInIndex = attrs.includeBatchInIndex;\n    var webglBackend = backend;\n    util.assert(x.shape.length === 4, function () {\n      return \"Error in maxPool: input must be rank 4 but got rank \".concat(x.shape.length, \".\");\n    });\n    var dilations = [1, 1];\n    util.assert(backend_util.eitherStridesOrDilationsAreOne(strides, dilations), function () {\n      return 'Error in maxPool: Either strides or dilations must be 1. ' + \"Got strides \".concat(strides, \" and dilations '\").concat(dilations, \"'\");\n    });\n    var convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, dilations, pad);\n\n    var _maxPoolWithArgmaxImp = maxPoolWithArgmaxImpl(x, includeBatchInIndex, convInfo, webglBackend),\n        _maxPoolWithArgmaxImp2 = _slicedToArray(_maxPoolWithArgmaxImp, 2),\n        result = _maxPoolWithArgmaxImp2[0],\n        indexes = _maxPoolWithArgmaxImp2[1];\n\n    return [result, indexes];\n  }\n};","map":{"version":3,"sources":["../../src/kernels/MaxPoolWithArgmax.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,iBAAR,QAAiF,uBAAjF;AACA,SAAQ,YAAR,EAAoC,IAApC,QAA+C,uBAA/C;AAIA,SAAQ,qBAAR,QAAoC,0BAApC;AAEA,OAAO,IAAM,uBAAuB,GAAiB;AACnD,EAAA,UAAU,EAAE,iBADuC;AAEnD,EAAA,WAAW,EAAE,OAFsC;AAGnD,EAAA,UAAU,EAAE,0BAA6B;AAAA,QAA3B,MAA2B,QAA3B,MAA2B;AAAA,QAAnB,KAAmB,QAAnB,KAAmB;AAAA,QAAZ,OAAY,QAAZ,OAAY;AAAA,QAChC,CADgC,GAC3B,MAD2B,CAChC,CADgC;AAAA,QAEhC,UAFgC,GAGnC,KAHmC,CAEhC,UAFgC;AAAA,QAEpB,OAFoB,GAGnC,KAHmC,CAEpB,OAFoB;AAAA,QAEX,GAFW,GAGnC,KAHmC,CAEX,GAFW;AAAA,QAEN,mBAFM,GAGnC,KAHmC,CAEN,mBAFM;AAIvC,QAAM,YAAY,GAAG,OAArB;AAEA,IAAA,IAAI,CAAC,MAAL,CACI,CAAC,CAAC,KAAF,CAAQ,MAAR,KAAmB,CADvB,EAEI;AAAA,2EACI,CAAC,CAAC,KAAF,CAAQ,MADZ;AAAA,KAFJ;AAIA,QAAM,SAAS,GAAqB,CAAC,CAAD,EAAI,CAAJ,CAApC;AACA,IAAA,IAAI,CAAC,MAAL,CACI,YAAY,CAAC,8BAAb,CAA4C,OAA5C,EAAqD,SAArD,CADJ,EAEI;AAAA,aAAM,oFACa,OADb,6BACuC,SADvC,MAAN;AAAA,KAFJ;AAKA,QAAM,QAAQ,GAAG,YAAY,CAAC,iBAAb,CACb,CAAC,CAAC,KADW,EACgC,UADhC,EAC4C,OAD5C,EAEb,SAFa,EAEF,GAFE,CAAjB;;AAhBuC,gCAqBnC,qBAAqB,CAAC,CAAD,EAAI,mBAAJ,EAAyB,QAAzB,EAAmC,YAAnC,CArBc;AAAA;AAAA,QAoBhC,MApBgC;AAAA,QAoBxB,OApBwB;;AAsBvC,WAAO,CAAC,MAAD,EAAS,OAAT,CAAP;AACD;AA1BkD,CAA9C","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { MaxPoolWithArgmax } from '@tensorflow/tfjs-core';\r\nimport { backend_util, util } from '@tensorflow/tfjs-core';\r\nimport { maxPoolWithArgmaxImpl } from './MaxPoolWithArgmax_impl';\r\nexport const maxPoolWithArgmaxConfig = {\r\n    kernelName: MaxPoolWithArgmax,\r\n    backendName: 'webgl',\r\n    kernelFunc: ({ inputs, attrs, backend }) => {\r\n        const { x } = inputs;\r\n        const { filterSize, strides, pad, includeBatchInIndex } = attrs;\r\n        const webglBackend = backend;\r\n        util.assert(x.shape.length === 4, () => `Error in maxPool: input must be rank 4 but got rank ${x.shape.length}.`);\r\n        const dilations = [1, 1];\r\n        util.assert(backend_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in maxPool: Either strides or dilations must be 1. ' +\r\n            `Got strides ${strides} and dilations '${dilations}'`);\r\n        const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, dilations, pad);\r\n        const [result, indexes] = maxPoolWithArgmaxImpl(x, includeBatchInIndex, convInfo, webglBackend);\r\n        return [result, indexes];\r\n    }\r\n};\r\n//# sourceMappingURL=MaxPoolWithArgmax.js.map"]},"metadata":{},"sourceType":"module"}