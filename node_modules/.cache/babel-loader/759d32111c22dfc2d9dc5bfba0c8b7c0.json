{"ast":null,"code":"import _classCallCheck from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport var ArgMinMaxPackedProgram = function ArgMinMaxPackedProgram(shape, windowSize, op, firstPass) {\n  _classCallCheck(this, ArgMinMaxPackedProgram);\n\n  this.variableNames = ['A'];\n  this.packedInputs = true;\n  this.packedOutput = true;\n  util.assert(shape.length > 2, function () {\n    return \"Packed arg\".concat(op.charAt(0).toUpperCase() + op.slice(1), \" supports only inputs with rank above 2.\");\n  });\n  var inSize = shape[shape.length - 1];\n  var outSize = Math.ceil(inSize / windowSize);\n  this.outputShape = shape.slice(0, -1);\n\n  if (outSize > 1) {\n    this.outputShape.push(outSize);\n  }\n\n  if (!firstPass) {\n    this.variableNames.push('bestIndicesA');\n  }\n\n  var outShape = this.outputShape;\n  var rank = outShape.length;\n  var dtype = getCoordsDataType(rank);\n  var coords = getChannels('coords', rank);\n  var sourceLocSetup;\n  var sourceRank;\n\n  if (outSize === 1) {\n    sourceRank = rank + 1;\n    var sourceLocDType = getCoordsDataType(sourceRank);\n    sourceLocSetup = \"\\n        \".concat(sourceLocDType, \" sourceLocR = \").concat(sourceLocDType, \"(\").concat(coords.join(), \", 0);\\n        ++\").concat(coords[rank - 1], \";\\n        \").concat(sourceLocDType, \" sourceLocG = \").concat(sourceLocDType, \"(\").concat(coords.join(), \", 0);\\n        ++\").concat(coords[rank - 2], \";\\n        \").concat(sourceLocDType, \" sourceLocA = \").concat(sourceLocDType, \"(\").concat(coords.join(), \", 0);\\n        --\").concat(coords[rank - 1], \";\\n        \").concat(sourceLocDType, \" sourceLocB = \").concat(sourceLocDType, \"(\").concat(coords.join(), \", 0);\\n        --\").concat(coords[rank - 2], \";\");\n  } else {\n    sourceRank = rank;\n    sourceLocSetup = \"\\n        \".concat(dtype, \" sourceLocR = coords;\\n        ++\").concat(coords[rank - 1], \";\\n        \").concat(dtype, \" sourceLocG = coords;\\n        ++\").concat(coords[rank - 2], \";\\n        \").concat(dtype, \" sourceLocA = coords;\\n        --\").concat(coords[rank - 1], \";\\n        \").concat(dtype, \" sourceLocB = coords;\\n        --\").concat(coords[rank - 2], \";\");\n  }\n\n  var channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, sourceRank);\n  var inChannel = '.' + channels[sourceRank - 1]; // e.g. \".b\" for rank 3.\n\n  var intChannels = channels.map(function (x) {\n    return 'int ' + x;\n  });\n  var srcRCoords = getChannels('sourceLocR', sourceRank - 1).concat('inIdx.r');\n  var srcGCoords = getChannels('sourceLocG', sourceRank - 1).concat('inIdx.g');\n  var srcBCoords = getChannels('sourceLocB', sourceRank - 1).concat('inIdx.b');\n  var srcACoords = getChannels('sourceLocA', sourceRank - 1).concat('inIdx.a');\n  var compOp = op === 'max' ? 'greaterThan' : 'lessThan';\n  var fetchCandidateIdx = firstPass ? '' : \"\\n          inIdx = round(vec4(getBestIndicesAChannel(\".concat(srcRCoords.join(), \"),\\n                             getBestIndicesAChannel(\").concat(srcGCoords.join(), \"),\\n                             getBestIndicesAChannel(\").concat(srcBCoords.join(), \"),\\n                             getBestIndicesAChannel(\").concat(srcACoords.join(), \")));\");\n  var fetchValue = \"vec4(\\n            getAChannel(\".concat(srcRCoords.join(), \"),\\n            hasNextCol ? getAChannel(\").concat(srcGCoords.join(), \") : 0.,\\n            hasNextRow ? getAChannel(\").concat(srcBCoords.join(), \") : 0.,\\n            hasNextRow && hasNextCol ? getAChannel(\").concat(srcACoords.join(), \") : 0.)\");\n  var getBestIndicesAChannelSnippet = firstPass ? '' : \"\\n      float getBestIndicesAChannel(\".concat(intChannels.join(), \") {\\n        return getChannel(getBestIndicesA(\").concat(channels.join(), \"),\\n                                          vec2(\").concat(channels.slice(-2).join(), \"));\\n      }\");\n  this.userCode = \"\\n      float getAChannel(\".concat(intChannels.join(), \") {\\n        return getChannel(getA(\").concat(channels.join(), \"),\\n                               vec2(\").concat(channels.slice(-2).join(), \"));\\n      }\\n      \").concat(getBestIndicesAChannelSnippet, \"\\n      void main() {\\n        \").concat(dtype, \" coords = getOutputCoords();\\n        bool hasNextCol = \").concat(coords[rank - 1], \" < \").concat(outShape[rank - 1] - 1, \";\\n        bool hasNextRow = \").concat(coords[rank - 2], \" < \").concat(outShape[rank - 2] - 1, \";\\n        \").concat(sourceLocSetup, \"\\n        ivec4 srcIdx = ivec4(sourceLocR\").concat(inChannel, \", sourceLocG\").concat(inChannel, \",\\n          sourceLocB\").concat(inChannel, \", sourceLocA\").concat(inChannel, \") * \").concat(windowSize, \";\\n        ivec4 inIdx = srcIdx;\\n        vec4 bestIndex = vec4(inIdx);\\n        vec4 bestValue = \").concat(fetchValue, \";\\n\\n        for (int i = 0; i < \").concat(windowSize, \"; i++) {\\n          inIdx = srcIdx;\\n          \").concat(fetchCandidateIdx, \"\\n          vec4 candidate = \").concat(fetchValue, \";\\n          bvec4 nan = isnan(candidate);\\n          bvec4 replace = bvec4(\\n            vec4(\").concat(compOp, \"(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\\n\\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\\n                           replace.y  ? candidate.y : bestValue.y,\\n                           replace.z  ? candidate.z : bestValue.z,\\n                           replace.w  ? candidate.w : bestValue.w);\\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\\n          srcIdx++;\\n        }\\n        setOutput(bestIndex);\\n      }\\n    \");\n};","map":{"version":3,"sources":["../src/argminmax_packed_gpu.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { util } from '@tensorflow/tfjs-core';\r\nimport { getChannels } from './packing_util';\r\nimport { getCoordsDataType } from './shader_compiler';\r\nexport class ArgMinMaxPackedProgram {\r\n    constructor(shape, windowSize, op, firstPass) {\r\n        this.variableNames = ['A'];\r\n        this.packedInputs = true;\r\n        this.packedOutput = true;\r\n        util.assert(shape.length > 2, () => `Packed arg${op.charAt(0).toUpperCase() +\r\n            op.slice(1)} supports only inputs with rank above 2.`);\r\n        const inSize = shape[shape.length - 1];\r\n        const outSize = Math.ceil(inSize / windowSize);\r\n        this.outputShape = shape.slice(0, -1);\r\n        if (outSize > 1) {\r\n            this.outputShape.push(outSize);\r\n        }\r\n        if (!firstPass) {\r\n            this.variableNames.push('bestIndicesA');\r\n        }\r\n        const outShape = this.outputShape;\r\n        const rank = outShape.length;\r\n        const dtype = getCoordsDataType(rank);\r\n        const coords = getChannels('coords', rank);\r\n        let sourceLocSetup;\r\n        let sourceRank;\r\n        if (outSize === 1) {\r\n            sourceRank = rank + 1;\r\n            const sourceLocDType = getCoordsDataType(sourceRank);\r\n            sourceLocSetup = `\r\n        ${sourceLocDType} sourceLocR = ${sourceLocDType}(${coords.join()}, 0);\r\n        ++${coords[rank - 1]};\r\n        ${sourceLocDType} sourceLocG = ${sourceLocDType}(${coords.join()}, 0);\r\n        ++${coords[rank - 2]};\r\n        ${sourceLocDType} sourceLocA = ${sourceLocDType}(${coords.join()}, 0);\r\n        --${coords[rank - 1]};\r\n        ${sourceLocDType} sourceLocB = ${sourceLocDType}(${coords.join()}, 0);\r\n        --${coords[rank - 2]};`;\r\n        }\r\n        else {\r\n            sourceRank = rank;\r\n            sourceLocSetup = `\r\n        ${dtype} sourceLocR = coords;\r\n        ++${coords[rank - 1]};\r\n        ${dtype} sourceLocG = coords;\r\n        ++${coords[rank - 2]};\r\n        ${dtype} sourceLocA = coords;\r\n        --${coords[rank - 1]};\r\n        ${dtype} sourceLocB = coords;\r\n        --${coords[rank - 2]};`;\r\n        }\r\n        const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, sourceRank);\r\n        const inChannel = '.' + channels[sourceRank - 1]; // e.g. \".b\" for rank 3.\r\n        const intChannels = channels.map(x => 'int ' + x);\r\n        const srcRCoords = getChannels('sourceLocR', sourceRank - 1).concat('inIdx.r');\r\n        const srcGCoords = getChannels('sourceLocG', sourceRank - 1).concat('inIdx.g');\r\n        const srcBCoords = getChannels('sourceLocB', sourceRank - 1).concat('inIdx.b');\r\n        const srcACoords = getChannels('sourceLocA', sourceRank - 1).concat('inIdx.a');\r\n        const compOp = (op === 'max') ? 'greaterThan' : 'lessThan';\r\n        const fetchCandidateIdx = firstPass ? '' : `\r\n          inIdx = round(vec4(getBestIndicesAChannel(${srcRCoords.join()}),\r\n                             getBestIndicesAChannel(${srcGCoords.join()}),\r\n                             getBestIndicesAChannel(${srcBCoords.join()}),\r\n                             getBestIndicesAChannel(${srcACoords.join()})));`;\r\n        const fetchValue = `vec4(\r\n            getAChannel(${srcRCoords.join()}),\r\n            hasNextCol ? getAChannel(${srcGCoords.join()}) : 0.,\r\n            hasNextRow ? getAChannel(${srcBCoords.join()}) : 0.,\r\n            hasNextRow && hasNextCol ? getAChannel(${srcACoords.join()}) : 0.)`;\r\n        const getBestIndicesAChannelSnippet = firstPass ? '' : `\r\n      float getBestIndicesAChannel(${intChannels.join()}) {\r\n        return getChannel(getBestIndicesA(${channels.join()}),\r\n                                          vec2(${channels.slice(-2).join()}));\r\n      }`;\r\n        this.userCode = `\r\n      float getAChannel(${intChannels.join()}) {\r\n        return getChannel(getA(${channels.join()}),\r\n                               vec2(${channels.slice(-2).join()}));\r\n      }\r\n      ${getBestIndicesAChannelSnippet}\r\n      void main() {\r\n        ${dtype} coords = getOutputCoords();\r\n        bool hasNextCol = ${coords[rank - 1]} < ${outShape[rank - 1] - 1};\r\n        bool hasNextRow = ${coords[rank - 2]} < ${outShape[rank - 2] - 1};\r\n        ${sourceLocSetup}\r\n        ivec4 srcIdx = ivec4(sourceLocR${inChannel}, sourceLocG${inChannel},\r\n          sourceLocB${inChannel}, sourceLocA${inChannel}) * ${windowSize};\r\n        ivec4 inIdx = srcIdx;\r\n        vec4 bestIndex = vec4(inIdx);\r\n        vec4 bestValue = ${fetchValue};\r\n\r\n        for (int i = 0; i < ${windowSize}; i++) {\r\n          inIdx = srcIdx;\r\n          ${fetchCandidateIdx}\r\n          vec4 candidate = ${fetchValue};\r\n          bvec4 nan = isnan(candidate);\r\n          bvec4 replace = bvec4(\r\n            vec4(${compOp}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\r\n\r\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\r\n                           replace.y  ? candidate.y : bestValue.y,\r\n                           replace.z  ? candidate.z : bestValue.z,\r\n                           replace.w  ? candidate.w : bestValue.w);\r\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\r\n          srcIdx++;\r\n        }\r\n        setOutput(bestIndex);\r\n      }\r\n    `;\r\n    }\r\n}\r\n//# sourceMappingURL=argminmax_packed_gpu.js.map"]},"metadata":{},"sourceType":"module"}