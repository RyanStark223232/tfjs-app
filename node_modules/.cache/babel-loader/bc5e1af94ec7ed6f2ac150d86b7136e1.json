{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { deepMap } from '../../utils/collection';\nimport { signNumber } from '../../plain/number';\nvar name = 'sign';\nvar dependencies = ['typed', 'BigNumber', 'Fraction', 'complex'];\nexport var createSign = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      _BigNumber = _ref.BigNumber,\n      complex = _ref.complex,\n      _Fraction = _ref.Fraction;\n  /**\r\n   * Compute the sign of a value. The sign of a value x is:\r\n   *\r\n   * -  1 when x > 0\r\n   * - -1 when x < 0\r\n   * -  0 when x == 0\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.sign(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.sign(3.5)               // returns 1\r\n   *    math.sign(-4.2)              // returns -1\r\n   *    math.sign(0)                 // returns 0\r\n   *\r\n   *    math.sign([3, 5, -2, 0, 2])  // returns [1, 1, -1, 0, 1]\r\n   *\r\n   * See also:\r\n   *\r\n   *    abs\r\n   *\r\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x\r\n   *            The number for which to determine the sign\r\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}e\r\n   *            The sign of `x`\r\n   */\n\n  return typed(name, {\n    number: signNumber,\n    Complex: function Complex(x) {\n      return x.im === 0 ? complex(signNumber(x.re)) : x.sign();\n    },\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(x.cmp(0));\n    },\n    Fraction: function Fraction(x) {\n      return new _Fraction(x.s, 1);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since sign(0) = 0\n      return deepMap(x, this, true);\n    },\n    Unit: function Unit(x) {\n      return this(x.value);\n    }\n  });\n});","map":{"version":3,"sources":["C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/mathjs/es/function/arithmetic/sign.js"],"names":["factory","deepMap","signNumber","name","dependencies","createSign","_ref","typed","_BigNumber","BigNumber","complex","_Fraction","Fraction","number","Complex","x","im","re","sign","cmp","s","ArrayMatrix","Unit","value"],"mappings":"AAAA,SAASA,OAAT,QAAwB,qBAAxB;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,SAASC,UAAT,QAA2B,oBAA3B;AACA,IAAIC,IAAI,GAAG,MAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,WAAV,EAAuB,UAAvB,EAAmC,SAAnC,CAAnB;AACA,OAAO,IAAIC,UAAU,GAAG,eAAeL,OAAO,CAACG,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AACjF,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAAA,MACIC,UAAU,GAAGF,IAAI,CAACG,SADtB;AAAA,MAEIC,OAAO,GAAGJ,IAAI,CAACI,OAFnB;AAAA,MAGIC,SAAS,GAAGL,IAAI,CAACM,QAHrB;AAKA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOL,KAAK,CAACJ,IAAD,EAAO;AACjBU,IAAAA,MAAM,EAAEX,UADS;AAEjBY,IAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBC,CAAjB,EAAoB;AAC3B,aAAOA,CAAC,CAACC,EAAF,KAAS,CAAT,GAAaN,OAAO,CAACR,UAAU,CAACa,CAAC,CAACE,EAAH,CAAX,CAApB,GAAyCF,CAAC,CAACG,IAAF,EAAhD;AACD,KAJgB;AAKjBT,IAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBM,CAAnB,EAAsB;AAC/B,aAAO,IAAIP,UAAJ,CAAeO,CAAC,CAACI,GAAF,CAAM,CAAN,CAAf,CAAP;AACD,KAPgB;AAQjBP,IAAAA,QAAQ,EAAE,SAASA,QAAT,CAAkBG,CAAlB,EAAqB;AAC7B,aAAO,IAAIJ,SAAJ,CAAcI,CAAC,CAACK,CAAhB,EAAmB,CAAnB,CAAP;AACD,KAVgB;AAWjB,sBAAkB,SAASC,WAAT,CAAqBN,CAArB,EAAwB;AACxC;AACA,aAAOd,OAAO,CAACc,CAAD,EAAI,IAAJ,EAAU,IAAV,CAAd;AACD,KAdgB;AAejBO,IAAAA,IAAI,EAAE,SAASA,IAAT,CAAcP,CAAd,EAAiB;AACrB,aAAO,KAAKA,CAAC,CAACQ,KAAP,CAAP;AACD;AAjBgB,GAAP,CAAZ;AAmBD,CAvD6C,CAAvC","sourcesContent":["import { factory } from '../../utils/factory';\r\nimport { deepMap } from '../../utils/collection';\r\nimport { signNumber } from '../../plain/number';\r\nvar name = 'sign';\r\nvar dependencies = ['typed', 'BigNumber', 'Fraction', 'complex'];\r\nexport var createSign = /* #__PURE__ */factory(name, dependencies, function (_ref) {\r\n  var typed = _ref.typed,\r\n      _BigNumber = _ref.BigNumber,\r\n      complex = _ref.complex,\r\n      _Fraction = _ref.Fraction;\r\n\r\n  /**\r\n   * Compute the sign of a value. The sign of a value x is:\r\n   *\r\n   * -  1 when x > 0\r\n   * - -1 when x < 0\r\n   * -  0 when x == 0\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.sign(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.sign(3.5)               // returns 1\r\n   *    math.sign(-4.2)              // returns -1\r\n   *    math.sign(0)                 // returns 0\r\n   *\r\n   *    math.sign([3, 5, -2, 0, 2])  // returns [1, 1, -1, 0, 1]\r\n   *\r\n   * See also:\r\n   *\r\n   *    abs\r\n   *\r\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x\r\n   *            The number for which to determine the sign\r\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}e\r\n   *            The sign of `x`\r\n   */\r\n  return typed(name, {\r\n    number: signNumber,\r\n    Complex: function Complex(x) {\r\n      return x.im === 0 ? complex(signNumber(x.re)) : x.sign();\r\n    },\r\n    BigNumber: function BigNumber(x) {\r\n      return new _BigNumber(x.cmp(0));\r\n    },\r\n    Fraction: function Fraction(x) {\r\n      return new _Fraction(x.s, 1);\r\n    },\r\n    'Array | Matrix': function ArrayMatrix(x) {\r\n      // deep map collection, skip zeros since sign(0) = 0\r\n      return deepMap(x, this, true);\r\n    },\r\n    Unit: function Unit(x) {\r\n      return this(x.value);\r\n    }\r\n  });\r\n});"]},"metadata":{},"sourceType":"module"}