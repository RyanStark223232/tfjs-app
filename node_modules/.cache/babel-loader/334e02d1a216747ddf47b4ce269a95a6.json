{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\wongh\\\\Documents\\\\GitHub\\\\tfjs-app\\\\src\\\\App.js\";\nimport React from \"react\";\nimport Button from '@material-ui/core/Button';\nimport * as handpose from \"@tensorflow-models/handpose\";\nimport * as posenet from \"@tensorflow-models/posenet\";\nimport * as facemesh from \"@tensorflow-models/facemesh\"; //import * as tf from '@tensorflow/tfjs-core';\n\nimport Webcam from \"react-webcam\";\nimport \"./App.css\";\nimport { drawHand_tap, drawHand_rotate, drawHand_fist, drawHand_still, writeText, drawKeypoints, drawSkeleton, drawMesh } from \"./utilities\";\nimport { sqrt, pow } from \"mathjs\";\nimport { Line } from 'react-chartjs-2';\nimport handline from './HandLines1.jpg';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.sleep = milliseconds => {\n      return new Promise(resolve => setTimeout(resolve, milliseconds));\n    };\n\n    this.exportToJson = (objectData, filename) => {\n      let contentType = \"application/json;charset=utf-8;\";\n\n      if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n        var blob = new Blob([decodeURIComponent(encodeURI(JSON.stringify(objectData)))], {\n          type: contentType\n        });\n        navigator.msSaveOrOpenBlob(blob, filename);\n      } else {\n        var a = document.createElement('a');\n        a.download = filename;\n        a.href = 'data:' + contentType + ',' + encodeURIComponent(JSON.stringify(objectData));\n        a.target = '_blank';\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n      }\n    };\n\n    this.getArray = () => {\n      let remark = document.getElementById(\"Remarks\").value;\n      let dict = {\n        remark: remark,\n        dist_array_L: this.state.dist_array_L,\n        dist_time_array_L: this.state.dist_time_array_L,\n        rotate_array_L: this.state.rotate_array_L,\n        rotate_time_array_L: this.state.rotate_time_array_L,\n        fist_array_L: this.state.fist_array_L,\n        fist_time_array_L: this.state.fist_time_array_L,\n        still_array_L: this.state.still_array_L,\n        still_time_array_L: this.state.still_time_array_L,\n        hand_dist_array_L: this.state.hand_dist_array_L,\n        hand_rotate_array_L: this.state.hand_rotate_array_L,\n        hand_fist_array_L: this.state.hand_fist_array_L,\n        hand_still_array_L: this.state.hand_still_array_L,\n        dist_array_R: this.state.dist_array_R,\n        dist_time_array_R: this.state.dist_time_array_R,\n        rotate_array_R: this.state.rotate_array_R,\n        rotate_time_array_R: this.state.rotate_time_array_R,\n        fist_array_R: this.state.fist_array_R,\n        fist_time_array_R: this.state.fist_time_array_R,\n        still_array_R: this.state.still_array_R,\n        still_time_array_R: this.state.still_time_array_R,\n        hand_dist_array_R: this.state.hand_dist_array_R,\n        hand_rotate_array_R: this.state.hand_rotate_array_R,\n        hand_fist_array_R: this.state.hand_fist_array_R,\n        hand_still_array_R: this.state.hand_still_array_R\n      };\n      let PD = document.getElementById(\"PD\").value;\n      let Score = document.getElementById(\"Score\").value;\n      console.log(PD, Score);\n      this.exportToJson(dict, \"state_\" + PD + \"_\" + Score);\n    };\n\n    this.state = {\n      ID: 0,\n      tap_count: [],\n      rotate_count: [],\n      fist_count: [],\n      last_hand_L: [],\n      last_hand_R: [],\n      index_passed: 0,\n      min_dist: 0,\n      max_dist: 999.0,\n      rotate_passed: 0,\n      last_pressed: 0,\n      real_time_inferencing: false,\n      recording: false,\n      button_mode: false,\n      chart_ready: false,\n      finger_done: false,\n      rotate_done: false,\n      fist_done: false,\n      hand_dist_array_L: [],\n      hand_dist_array_R: [],\n      hand_rotate_array_L: [],\n      hand_rotate_array_R: [],\n      hand_fist_array_L: [],\n      hand_fist_array_R: [],\n      hand_still_array_L: [],\n      hand_still_array_R: [],\n      dist_array_L: [],\n      dist_time_array_L: [],\n      dist_record_L: [],\n      dist_time_record_L: [],\n      dist_array_R: [],\n      dist_time_array_R: [],\n      dist_record_R: [],\n      dist_time_record_R: [],\n      rotate_array_L: [],\n      rotate_time_array_L: [],\n      rotate_record_L: [],\n      rotate_time_record_L: [],\n      rotate_array_R: [],\n      rotate_time_array_R: [],\n      rotate_record_R: [],\n      rotate_time_record_R: [],\n      fist_array_L: [],\n      fist_time_array_L: [],\n      fist_record_L: [],\n      fist_time_record_L: [],\n      fist_array_R: [],\n      fist_time_array_R: [],\n      fist_record_R: [],\n      fist_time_record_R: [],\n      still_array_L: [],\n      still_time_array_L: [],\n      still_record_L: [],\n      still_time_record_L: [],\n      still_array_R: [],\n      still_time_array_R: [],\n      still_record_R: [],\n      still_time_record_R: [],\n      chart_data1_L: null,\n      chart_data1_R: null,\n      chart_data2_L: null,\n      chart_data2_R: null,\n      chart_data3_L: null,\n      chart_data3_R: null,\n      chart_data4_L: null,\n      chart_data4_R: null,\n      stage: 0,\n      wait: false,\n      wait_till: 0,\n      max_tremor_L: 0.0,\n      max_tremor_R: 0.0,\n      startAt: Date.now(),\n      dead_frame: 0,\n      raw: true,\n      facingMode: \"user\",\n      avg_fps: 0\n    };\n    this.webcamRef = /*#__PURE__*/React.createRef(null);\n    this.canvasRef = /*#__PURE__*/React.createRef(null);\n    this.videoConstraints = {\n      facingMode: \"user\"\n    };\n    this.capture_interval = 50;\n    this.runHandpose = this.runHandpose.bind(this);\n    this.stop_real_time_inference = this.stop_real_time_inference.bind(this);\n    this.stop_tapping = this.stop_tapping.bind(this);\n    this.stop_rotating = this.stop_rotating.bind(this);\n    this.stop_gripping = this.stop_gripping.bind(this);\n    this.stop_record = this.stop_record.bind(this);\n    this.record_video = this.record_video.bind(this);\n    this.concat_frame = this.concat_frame.bind(this);\n    this.inference = this.inference.bind(this);\n    this.reset_counter = this.reset_counter.bind(this);\n    this.increment_tap1 = this.increment_tap1.bind(this);\n    this.increment_tap2 = this.increment_tap2.bind(this);\n    this.switch_button = this.switch_button.bind(this);\n    this.compose_chart = this.compose_chart.bind(this);\n    this.runPosenet = this.runPosenet.bind(this);\n    this.real_time_posenet = this.real_time_posenet.bind(this);\n    this.runFacemesh = this.runFacemesh.bind(this);\n    this.real_time_facemesh = this.real_time_facemesh.bind(this);\n    this.switch_style = this.switch_style.bind(this);\n    this.switch_cam = this.switch_cam.bind(this);\n    this.getArray = this.getArray.bind(this);\n    this.exportToJson = this.exportToJson.bind(this);\n    this.next_step = this.next_step.bind(this);\n  }\n\n  switch_cam() {\n    if (this.state.facingMode === \"user\") this.setState({\n      facingMode: \"environment\"\n    });else if (this.state.facingMode === \"environment\") this.setState({\n      facingMode: \"user\"\n    });\n  }\n\n  async runFacemesh() {\n    require('@tensorflow/tfjs-backend-webgl');\n\n    const net = await facemesh.load();\n    console.log(\"Facemesh model loaded.\");\n    this.setState({\n      startAt: Date.now()\n    });\n    const Interval_ID = setInterval(() => {\n      this.real_time_facemesh(net);\n    }, this.capture_interval);\n    this.setState({\n      ID: Interval_ID,\n      real_time_inferencing: true\n    });\n  }\n\n  async real_time_facemesh(net) {\n    if (this.state.wait) {\n      this.setState({\n        wait_till: Date.now() + 3000\n      });\n      this.setState({\n        wait: false\n      });\n    }\n\n    if (typeof this.webcamRef.current !== \"undefined\" && this.webcamRef.current !== null && this.webcamRef.current.video.readyState === 4) {\n      const video = this.webcamRef.current.video;\n      const videoWidth = this.webcamRef.current.video.videoWidth;\n      const videoHeight = this.webcamRef.current.video.videoHeight;\n      this.webcamRef.current.video.width = videoWidth;\n      this.webcamRef.current.video.height = videoHeight;\n      this.canvasRef.current.width = videoWidth;\n      this.canvasRef.current.height = videoHeight;\n      const face = await net.estimateFaces(video);\n      const ctx = this.canvasRef.current.getContext(\"2d\");\n      drawMesh(face, ctx);\n    }\n  }\n\n  async runPosenet() {\n    require('@tensorflow/tfjs-backend-webgl');\n\n    const net = await posenet.load();\n    console.log(\"PoseNet model loaded.\");\n    this.setState({\n      startAt: Date.now()\n    });\n    const Interval_ID = setInterval(() => {\n      this.real_time_posenet(net);\n    }, this.capture_interval);\n    this.setState({\n      ID: Interval_ID,\n      real_time_inferencing: true\n    });\n  }\n\n  async real_time_posenet(net) {\n    if (this.state.wait) {\n      this.setState({\n        wait_till: Date.now() + 3000,\n        wait: false\n      });\n    }\n\n    if (typeof this.webcamRef.current !== \"undefined\" && this.webcamRef.current !== null && this.webcamRef.current.video.readyState === 4) {\n      const video = this.webcamRef.current.video;\n      const videoWidth = this.webcamRef.current.video.videoWidth;\n      const videoHeight = this.webcamRef.current.video.videoHeight;\n      this.webcamRef.current.video.width = videoWidth;\n      this.webcamRef.current.video.height = videoHeight;\n      this.canvasRef.current.width = videoWidth;\n      this.canvasRef.current.height = videoHeight;\n      const pose = await net.estimateSinglePose(video);\n      const ctx = this.canvasRef.current.getContext(\"2d\");\n      drawKeypoints(pose[\"keypoints\"], 0.6, ctx);\n      drawSkeleton(pose[\"keypoints\"], 0.7, ctx);\n    }\n  }\n\n  async switch_style() {\n    await this.setState({\n      raw: !this.state.raw\n    });\n    this.compose_chart();\n  }\n\n  compose_chart() {\n    let time_array_1_L = [];\n    let time_array_1_R = [];\n    let count_array_1_L = [];\n    let count_array_1_R = [];\n    let label_1_L = \"\";\n    let label_1_R = \"\";\n    let time_array_2_L = [];\n    let time_array_2_R = [];\n    let count_array_2_L = [];\n    let count_array_2_R = [];\n    let label_2_L = \"\";\n    let label_2_R = \"\";\n    let time_array_3_L = [];\n    let time_array_3_R = [];\n    let count_array_3_L = [];\n    let count_array_3_R = [];\n    let label_3_L = \"\";\n    let label_3_R = \"\";\n    let time_array_4_L = [];\n    let time_array_4_R = [];\n    let count_array_4_L = [];\n    let count_array_4_R = [];\n    let label_4_L = \"\";\n    let label_4_R = \"\";\n    let real_dist_v = document.getElementById(\"real_measurement_v\").value;\n    let real_dist_h = document.getElementById(\"real_measurement_h\").value;\n    let avg_fps = this.state.hand_dist_array_L.length / (this.state.dist_time_array_L[this.state.dist_time_array_L.length - 1] - this.state.dist_time_array_L[0]);\n    this.setState({\n      avg_fps: avg_fps\n    });\n\n    if (this.state.raw) {\n      // Print Data Raw\n      if (this.state.dist_array_L.length > 100) {\n        time_array_1_L = this.state.dist_time_array_L.slice(10, this.state.dist_time_array_L.length - 20);\n        count_array_1_L = this.state.dist_array_L.slice(10, this.state.dist_array_L.length - 20);\n      } else {\n        time_array_1_L = [...this.state.dist_time_array_L];\n        count_array_1_L = [...this.state.dist_array_L];\n      }\n\n      if (this.state.dist_array_R.length > 100) {\n        time_array_1_R = this.state.dist_time_array_R.slice(10, this.state.dist_time_array_R.length - 20);\n        count_array_1_R = this.state.dist_array_R.slice(10, this.state.dist_array_R.length - 20);\n      } else {\n        time_array_1_R = [...this.state.dist_time_array_R];\n        count_array_1_R = [...this.state.dist_array_R];\n      }\n\n      if (this.state.rotate_array_L.length > 100) {\n        time_array_2_L = this.state.rotate_time_array_L.slice(10, this.state.rotate_time_array_L.length - 20);\n        count_array_2_L = this.state.rotate_array_L.slice(10, this.state.rotate_array_L.length - 20);\n      } else {\n        time_array_2_L = [...this.state.rotate_time_array_L];\n        count_array_2_L = [...this.state.rotate_array_L];\n      }\n\n      if (this.state.rotate_array_R.length > 100) {\n        time_array_2_R = this.state.rotate_time_array_R.slice(10, this.state.rotate_time_array_R.length - 20);\n        count_array_2_R = this.state.rotate_array_R.slice(10, this.state.rotate_array_R.length - 20);\n      } else {\n        time_array_2_R = [...this.state.rotate_time_array_R];\n        count_array_2_R = [...this.state.rotate_array_R];\n      }\n\n      if (this.state.fist_array_L.length > 100) {\n        time_array_3_L = this.state.fist_time_array_L.slice(10, this.state.fist_time_array_L.length - 20);\n        count_array_3_L = this.state.fist_array_L.slice(10, this.state.fist_array_L.length - 20);\n      } else {\n        time_array_3_L = [...this.state.fist_time_array_L];\n        count_array_3_L = [...this.state.fist_array_L];\n      }\n\n      if (this.state.fist_array_R.length > 100) {\n        time_array_3_R = this.state.fist_time_array_R.slice(10, this.state.fist_time_array_R.length - 20);\n        count_array_3_R = this.state.fist_array_R.slice(10, this.state.fist_array_R.length - 20);\n      } else {\n        time_array_3_R = [...this.state.fist_time_array_R];\n        count_array_3_R = [...this.state.fist_array_R];\n      }\n\n      if (this.state.still_array_L.length > 100) {\n        time_array_4_L = this.state.still_time_array_L.slice(10, this.state.still_time_array_L.length - 20);\n        count_array_4_L = this.state.still_array_L.slice(10, this.state.still_array_L.length - 20);\n      } else {\n        time_array_4_L = [...this.state.still_time_array_L];\n        count_array_4_L = [...this.state.still_array_L];\n      }\n\n      if (this.state.still_array_R.length > 100) {\n        time_array_4_R = this.state.still_time_array_R.slice(10, this.state.still_time_array_R.length - 20);\n        count_array_4_R = this.state.still_array_R.slice(10, this.state.still_array_R.length - 20);\n      } else {\n        time_array_4_R = [...this.state.still_time_array_R];\n        count_array_4_R = [...this.state.still_array_R];\n      } // Change to Real Life Measurement\n\n\n      if (real_dist_v > 0.0001 && real_dist_h > 0.0001) {\n        label_1_L = \"Distance between Index and Thumb (cm)\";\n        label_1_R = \"Distance between Index and Thumb (cm)\";\n        label_2_L = \"Relative Location between Left and Right of Hand (cm)\";\n        label_2_R = \"Relative Location between Left and Right of Hand (cm)\";\n        label_3_L = \"Relative Location between Tip of Fingers and Finger Joints (cm)\";\n        label_3_R = \"Relative Location between Tip of Fingers and Finger Joints (cm)\";\n        label_4_L = \"Relative Location Moved (cm)\";\n        label_4_R = \"Relative Location Moved (cm)\";\n        let i = 0;\n        let tmp = 0;\n\n        for (i = 0; i < count_array_1_L.length; i++) {\n          tmp = count_array_1_L[i];\n          count_array_1_L[i] = tmp * real_dist_h;\n        }\n\n        for (i = 0; i < count_array_1_R.length; i++) {\n          tmp = count_array_1_R[i];\n          count_array_1_R[i] = tmp * real_dist_h;\n        }\n\n        for (i = 0; i < count_array_2_L.length; i++) {\n          tmp = count_array_2_L[i];\n          count_array_2_L[i] = tmp * real_dist_v;\n        }\n\n        for (i = 0; i < count_array_2_R.length; i++) {\n          tmp = count_array_2_R[i];\n          count_array_2_R[i] = tmp * real_dist_v;\n        }\n\n        for (i = 0; i < count_array_3_L.length; i++) {\n          tmp = count_array_3_L[i];\n          count_array_3_L[i] = tmp * real_dist_h;\n        }\n\n        for (i = 0; i < count_array_3_R.length; i++) {\n          tmp = count_array_3_R[i];\n          count_array_3_R[i] = tmp * real_dist_h;\n        }\n\n        for (i = 0; i < count_array_4_L.length; i++) {\n          tmp = count_array_4_L[i];\n          count_array_4_L[i] = tmp * real_dist_h;\n        }\n\n        for (i = 0; i < count_array_4_R.length; i++) {\n          tmp = count_array_4_R[i];\n          count_array_4_R[i] = tmp * real_dist_h;\n        }\n      } else {\n        label_1_L = \"Distance between Index and Thumb\";\n        label_1_R = \"Distance between Index and Thumb\";\n        label_2_L = \"Relative Location between Left and Right of Hand\";\n        label_2_R = \"Relative Location between Left and Right of Hand\";\n        label_3_L = \"Relative Location between Tip of Fingers and Finger Joints\";\n        label_3_R = \"Relative Location between Tip of Fingers and Finger Joints\";\n        label_4_L = \"Relative Location Moved\";\n        label_4_R = \"Relative Location Moved\";\n      }\n    } // Setup Graphs\n\n\n    const data1_L = {\n      labels: time_array_1_L,\n      datasets: [{\n        label: label_1_L,\n        fill: false,\n        lineTension: 0.3,\n        backgroundColor: 'rgba(75,192,192,0.4)',\n        borderColor: 'rgba(75,192,192,1)',\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: 'rgba(75,192,192,1)',\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: count_array_1_L\n      }]\n    };\n    const data1_R = {\n      labels: time_array_1_R,\n      datasets: [{\n        label: label_1_R,\n        fill: false,\n        lineTension: 0.3,\n        backgroundColor: 'rgba(75,192,192,0.4)',\n        borderColor: 'rgba(75,192,192,1)',\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: 'rgba(75,192,192,1)',\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: count_array_1_R\n      }]\n    };\n    const data2_L = {\n      labels: time_array_2_L,\n      datasets: [{\n        label: label_2_L,\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: 'rgba(192,75,192,0.4)',\n        borderColor: 'rgba(192,75,192,1)',\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: 'rgba(192,75,192,1)',\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'rgba(192,75,192,1)',\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: count_array_2_L\n      }]\n    };\n    const data2_R = {\n      labels: time_array_2_R,\n      datasets: [{\n        label: label_2_R,\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: 'rgba(192,75,192,0.4)',\n        borderColor: 'rgba(192,75,192,1)',\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: 'rgba(192,75,192,1)',\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'rgba(192,75,192,1)',\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: count_array_2_R\n      }]\n    };\n    const data3_L = {\n      labels: time_array_3_L,\n      datasets: [{\n        label: label_3_L,\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: 'rgba(192,192,75,0.4)',\n        borderColor: 'rgba(192,192,75,1)',\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: 'rgba(192,192,75,1)',\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'rgba(192,192,75,1)',\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: count_array_3_L\n      }]\n    };\n    const data3_R = {\n      labels: time_array_3_R,\n      datasets: [{\n        label: label_3_R,\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: 'rgba(192,192,75,0.4)',\n        borderColor: 'rgba(192,192,75,1)',\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: 'rgba(192,192,75,1)',\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'rgba(192,192,75,1)',\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: count_array_3_R\n      }]\n    };\n    const data4_L = {\n      labels: time_array_4_L,\n      datasets: [{\n        label: label_4_L,\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: 'rgba(75,192,75,0.4)',\n        borderColor: 'rgba(75,192,75,1)',\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: 'rgba(75,192,75,1)',\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'rgba(75,192,75,1)',\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: count_array_4_L\n      }]\n    };\n    const data4_R = {\n      labels: time_array_4_R,\n      datasets: [{\n        label: label_4_R,\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: 'rgba(75,192,75,0.4)',\n        borderColor: 'rgba(75,192,75,1)',\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: 'rgba(75,192,75,1)',\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'rgba(75,192,75,1)',\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: count_array_4_R\n      }]\n    };\n    this.setState({\n      chart_data1_L: data1_L\n    });\n    this.setState({\n      chart_data1_R: data1_R\n    });\n    this.setState({\n      chart_data2_L: data2_L\n    });\n    this.setState({\n      chart_data2_R: data2_R\n    });\n    this.setState({\n      chart_data3_L: data3_L\n    });\n    this.setState({\n      chart_data3_R: data3_R\n    });\n    this.setState({\n      chart_data4_L: data4_L\n    });\n    this.setState({\n      chart_data4_R: data4_R\n    });\n    this.setState({\n      chart_ready: true\n    });\n  }\n\n  switch_button() {\n    if (this.state.button_mode === true) {\n      this.setState({\n        button_mode: false\n      });\n      this.compose_chart();\n    } else {\n      this.setState({\n        button_mode: true\n      });\n    }\n  }\n\n  increment_tap1() {\n    if (this.state.last_pressed !== 1) {\n      let current_moment = (Date.now() - this.state.startAt) / 1000;\n      this.setState({\n        last_pressed: 1\n      });\n      this.setState({\n        dist_array: [...this.state.dist_array, 1.0]\n      });\n      this.setState({\n        dist_time_array: [...this.state.dist_time_array, current_moment]\n      });\n      this.setState({\n        tap_count: [...this.state.tap_count, current_moment]\n      });\n    }\n  }\n\n  increment_tap2() {\n    if (this.state.last_pressed !== 2) {\n      let current_moment = (Date.now() - this.state.startAt) / 1000;\n      this.setState({\n        last_pressed: 2\n      });\n      this.setState({\n        dist_array: [...this.state.dist_array, 1.0]\n      });\n      this.setState({\n        dist_time_array: [...this.state.dist_time_array, current_moment]\n      });\n      this.setState({\n        tap_count: [...this.state.tap_count, current_moment]\n      });\n    }\n  }\n\n  norm(lm1, lm2) {\n    return sqrt(pow(lm1[0] - lm2[0], 2) + pow(lm1[1] - lm2[1], 2));\n  }\n\n  reset_counter() {\n    clearInterval(this.state.ID);\n    const ctx = this.canvasRef.current.getContext(\"2d\");\n    ctx.clearRect(0, 0, this.canvasRef.current.width, this.canvasRef.current.height);\n    this.setState({\n      ID: 0,\n      tap_count: [],\n      rotate_count: [],\n      fist_count: [],\n      last_hand_L: [],\n      last_hand_R: [],\n      index_passed: 0,\n      min_dist: 0,\n      max_dist: 99.0,\n      rotate_passed: 0,\n      last_pressed: 0,\n      real_time_inferencing: false,\n      recording: false,\n      button_mode: false,\n      chart_ready: false,\n      finger_done: false,\n      rotate_done: false,\n      fist_done: false,\n      hand_dist_array_L: [],\n      hand_dist_array_R: [],\n      hand_rotate_array_L: [],\n      hand_rotate_array_R: [],\n      hand_fist_array_L: [],\n      hand_fist_array_R: [],\n      hand_still_array_L: [],\n      hand_still_array_R: [],\n      dist_array_L: [],\n      dist_time_array_L: [],\n      dist_record_L: [],\n      dist_time_record_L: [],\n      dist_array_R: [],\n      dist_time_array_R: [],\n      dist_record_R: [],\n      dist_time_record_R: [],\n      rotate_array_L: [],\n      rotate_time_array_L: [],\n      rotate_record_L: [],\n      rotate_time_record_L: [],\n      rotate_array_R: [],\n      rotate_time_array_R: [],\n      rotate_record_R: [],\n      rotate_time_record_R: [],\n      fist_array_L: [],\n      fist_time_array_L: [],\n      fist_record_L: [],\n      fist_time_record_L: [],\n      fist_array_R: [],\n      fist_time_array_R: [],\n      fist_record_R: [],\n      fist_time_record_R: [],\n      still_array_L: [],\n      still_time_array_L: [],\n      still_record_L: [],\n      still_time_record_L: [],\n      still_array_R: [],\n      still_time_array_R: [],\n      still_record_R: [],\n      still_time_record_R: [],\n      chart_data1_L: null,\n      chart_data1_R: null,\n      chart_data2_L: null,\n      chart_data2_R: null,\n      chart_data3_L: null,\n      chart_data3_R: null,\n      chart_data4_L: null,\n      chart_data4_R: null,\n      stage: 0,\n      wait: false,\n      wait_till: 0,\n      startAt: Date.now(),\n      dead_frame: 0,\n      raw: true,\n      facingMode: \"user\",\n      avg_fps: 0\n    });\n  }\n\n  async runHandpose() {\n    const ctx = this.canvasRef.current.getContext(\"2d\");\n    writeText(ctx, {\n      text: 'Loading',\n      x: 180,\n      y: 70\n    });\n\n    require('@tensorflow/tfjs-backend-webgl');\n\n    const net = await handpose.load();\n    ctx.clearRect(0, 0, this.canvasRef.current.width, this.canvasRef.current.height); //const uploadJSONInput = document.getElementById('upload-json');\n    //const uploadWeightsInput = document.getElementById('upload-weights');\n    //const model = await tf.loadLayersModel(tf.io.browserFiles([uploadJSONInput.files[0], uploadWeightsInput.files[0]]));\n\n    console.log(\"Handpose model loaded.\");\n    this.setState({\n      startAt: Date.now()\n    });\n    const Interval_ID = setInterval(() => {\n      this.real_time_inference(net);\n    }, this.capture_interval);\n    this.setState({\n      ID: Interval_ID,\n      real_time_inferencing: true,\n      wait: true,\n      stage: this.state.stage + 1\n    });\n  }\n\n  async real_time_inference(net) {\n    if (this.state.wait) {\n      this.setState({\n        wait_till: Date.now() + 3000\n      });\n      this.setState({\n        wait: false\n      });\n    }\n\n    if (typeof this.webcamRef.current !== \"undefined\" && this.webcamRef.current !== null && this.webcamRef.current.video.readyState === 4) {\n      const video = this.webcamRef.current.video;\n      const videoWidth = this.webcamRef.current.video.videoWidth;\n      const videoHeight = this.webcamRef.current.video.videoHeight;\n      this.webcamRef.current.video.width = videoWidth;\n      this.webcamRef.current.video.height = videoHeight;\n      this.canvasRef.current.width = videoWidth;\n      this.canvasRef.current.height = videoHeight;\n      const hand = await net.estimateHands(video);\n      const ctx = this.canvasRef.current.getContext(\"2d\"); //check if waiting\n\n      if (Date.now() < this.state.wait_till) {\n        if (hand.length > 0) drawHand_tap(hand, ctx); //count down 3, 2, 1\n\n        if (this.state.wait_till - Date.now() < 1000) writeText(ctx, {\n          text: '1',\n          x: 180,\n          y: 70\n        });else if (this.state.wait_till - Date.now() < 2000) writeText(ctx, {\n          text: '2',\n          x: 140,\n          y: 70\n        });else if (this.state.wait_till - Date.now() < 3000) writeText(ctx, {\n          text: '3',\n          x: 100,\n          y: 70\n        });\n      } else {\n        switch (this.state.stage) {\n          case 1:\n            this.setState({\n              hand_dist_array_L: [...this.state.hand_dist_array_L, hand]\n            });\n            break;\n\n          case 2:\n            this.setState({\n              hand_dist_array_R: [...this.state.hand_dist_array_R, hand]\n            });\n            break;\n\n          case 3:\n            this.setState({\n              hand_rotate_array_L: [...this.state.hand_rotate_array_L, hand]\n            });\n            break;\n\n          case 4:\n            this.setState({\n              hand_rotate_array_R: [...this.state.hand_rotate_array_R, hand]\n            });\n            break;\n\n          case 5:\n            this.setState({\n              hand_fist_array_L: [...this.state.hand_fist_array_L, hand]\n            });\n            break;\n\n          case 6:\n            this.setState({\n              hand_fist_array_R: [...this.state.hand_fist_array_R, hand]\n            });\n            break;\n\n          case 7:\n            this.setState({\n              hand_still_array_L: [...this.state.hand_still_array_L, hand]\n            });\n            break;\n\n          case 8:\n            this.setState({\n              hand_still_array_R: [...this.state.hand_still_array_R, hand]\n            });\n            break;\n\n          default:\n            break;\n        }\n\n        if (hand.length > 0) {\n          hand.forEach(prediction => {\n            this.setState({\n              dead_frame: 0\n            });\n            const landmarks = prediction.landmarks;\n            let pawn_dist = this.norm(landmarks[0], landmarks[2]);\n            let y_dist = this.norm(landmarks[0], landmarks[12]);\n            let current_moment = (Date.now() - this.state.startAt) / 1000;\n            let index_dist = null;\n            let current_dist = null;\n            let rotate_dist = null;\n            let fist_dist = null;\n            let max_move = null;\n            let pinky_rest = null;\n            let ring_rest = null;\n            let middle_rest = null;\n            let index_rest = null;\n            let thumb_rest = null;\n\n            switch (this.state.stage) {\n              case 1:\n                drawHand_tap(hand, ctx);\n                index_dist = this.norm(landmarks[4], landmarks[8]);\n                current_dist = index_dist / pawn_dist;\n                this.setState({\n                  dist_array_L: [...this.state.dist_array_L, current_dist],\n                  dist_time_array_L: [...this.state.dist_time_array_L, current_moment]\n                });\n\n                if (this.state.index_passed === 0 && current_dist - this.state.min_dist > 0.2) {\n                  this.setState({\n                    index_passed: 1,\n                    max_dist: current_dist\n                  });\n                }\n\n                if (this.state.index_passed === 1 && current_dist > this.state.max_dist) {\n                  this.setState({\n                    max_dist: current_dist\n                  });\n                }\n\n                if (this.state.index_passed === 1 && this.state.max_dist - current_dist > 0.2) {\n                  this.setState({\n                    index_passed: 0,\n                    min_dist: current_dist,\n                    tap_count: [...this.state.tap_count, current_moment]\n                  });\n                }\n\n                if (this.state.index_passed === 0 && current_dist < this.state.min_dist) {\n                  this.setState({\n                    min_dist: current_dist\n                  });\n                }\n\n                break;\n\n              case 2:\n                drawHand_tap(hand, ctx);\n                index_dist = this.norm(landmarks[4], landmarks[8]);\n                current_dist = index_dist / pawn_dist;\n                this.setState({\n                  dist_array_R: [...this.state.dist_array_R, current_dist],\n                  dist_time_array_R: [...this.state.dist_time_array_R, current_moment]\n                });\n\n                if (this.state.index_passed === 0 && current_dist - this.state.min_dist > 0.2) {\n                  this.setState({\n                    index_passed: 1,\n                    max_dist: current_dist\n                  });\n                }\n\n                if (this.state.index_passed === 1 && current_dist > this.state.max_dist) {\n                  this.setState({\n                    max_dist: current_dist\n                  });\n                }\n\n                if (this.state.index_passed === 1 && this.state.max_dist - current_dist > 0.2) {\n                  this.setState({\n                    index_passed: 0,\n                    min_dist: current_dist,\n                    tap_count: [...this.state.tap_count, current_moment]\n                  });\n                }\n\n                if (this.state.index_passed === 0 && current_dist < this.state.min_dist) {\n                  this.setState({\n                    min_dist: current_dist\n                  });\n                }\n\n                break;\n\n              case 3:\n                drawHand_rotate(hand, ctx, this.state.rotate_passed);\n                rotate_dist = (landmarks[2][0] - landmarks[17][0]) / y_dist;\n                this.setState({\n                  rotate_array_L: [...this.state.rotate_array_L, rotate_dist],\n                  rotate_time_array_L: [...this.state.rotate_time_array_L, current_moment]\n                });\n\n                if (this.state.rotate_passed === 0) {\n                  if (rotate_dist >= 0.2) this.setState({\n                    rotate_passed: 1\n                  });\n                  if (rotate_dist <= -0.2) this.setState({\n                    rotate_passed: -1\n                  });\n                }\n\n                if (this.state.rotate_passed === 1 && rotate_dist <= -0.2) {\n                  this.setState({\n                    rotate_passed: -1\n                  });\n                }\n\n                if (this.state.rotate_passed === -1 && rotate_dist >= 0.2) {\n                  this.setState({\n                    rotate_passed: 1,\n                    rotate_count: [...this.state.rotate_count, current_moment]\n                  });\n                }\n\n                break;\n\n              case 4:\n                drawHand_rotate(hand, ctx, this.state.rotate_passed);\n                rotate_dist = (landmarks[2][0] - landmarks[17][0]) / y_dist;\n                this.setState({\n                  rotate_array_R: [...this.state.rotate_array_R, rotate_dist],\n                  rotate_time_array_R: [...this.state.rotate_time_array_R, current_moment]\n                });\n\n                if (this.state.rotate_passed === 0) {\n                  if (rotate_dist >= 0.2) this.setState({\n                    rotate_passed: 1\n                  });\n                  if (rotate_dist <= -0.2) this.setState({\n                    rotate_passed: -1\n                  });\n                }\n\n                if (this.state.rotate_passed === 1 && rotate_dist <= -0.2) {\n                  this.setState({\n                    rotate_passed: -1\n                  });\n                }\n\n                if (this.state.rotate_passed === -1 && rotate_dist >= 0.2) {\n                  this.setState({\n                    rotate_passed: 1,\n                    rotate_count: [...this.state.rotate_count, current_moment]\n                  });\n                }\n\n                break;\n\n              case 5:\n                drawHand_fist(hand, ctx, this.state.fist_passed);\n                fist_dist = (landmarks[8][1] - landmarks[5][1] + (landmarks[12][1] - landmarks[9][1]) + (landmarks[16][1] - landmarks[13][1]) + (landmarks[20][1] - landmarks[17][1])) / (4 * pawn_dist);\n                this.setState({\n                  fist_array_L: [...this.state.fist_array_L, fist_dist],\n                  fist_time_array_L: [...this.state.fist_time_array_L, current_moment]\n                });\n\n                if (fist_dist >= 0.0) {\n                  this.setState({\n                    fist_passed: 1\n                  });\n                }\n\n                if (fist_dist < -0.4 && this.state.fist_passed === 1) {\n                  this.setState({\n                    fist_passed: 0,\n                    fist_count: [...this.state.fist_count, current_moment]\n                  });\n                }\n\n                break;\n\n              case 6:\n                drawHand_fist(hand, ctx, this.state.fist_passed);\n                fist_dist = (landmarks[8][1] - landmarks[5][1] + (landmarks[12][1] - landmarks[9][1]) + (landmarks[16][1] - landmarks[13][1]) + (landmarks[20][1] - landmarks[17][1])) / (4 * pawn_dist);\n                this.setState({\n                  fist_array_R: [...this.state.fist_array_R, fist_dist],\n                  fist_time_array_R: [...this.state.fist_time_array_R, current_moment]\n                });\n\n                if (fist_dist >= 0.0) {\n                  this.setState({\n                    fist_passed: 1\n                  });\n                }\n\n                if (fist_dist < -0.4 && this.state.fist_passed === 1) {\n                  this.setState({\n                    fist_passed: 0,\n                    fist_count: [...this.state.fist_count, current_moment]\n                  });\n                }\n\n                break;\n\n              case 7:\n                max_move = 0.0;\n\n                if (this.state.last_hand_L.length > 0) {\n                  let moved = [];\n                  pinky_rest = Math.abs(this.norm(landmarks[0], landmarks[4]) - this.norm(this.state.last_hand_L[0], this.state.last_hand_L[4])) / pawn_dist;\n                  ring_rest = Math.abs(this.norm(landmarks[0], landmarks[8]) - this.norm(this.state.last_hand_L[0], this.state.last_hand_L[8])) / pawn_dist;\n                  middle_rest = Math.abs(this.norm(landmarks[0], landmarks[12]) - this.norm(this.state.last_hand_L[0], this.state.last_hand_L[12])) / pawn_dist;\n                  index_rest = Math.abs(this.norm(landmarks[0], landmarks[16]) - this.norm(this.state.last_hand_L[0], this.state.last_hand_L[16])) / pawn_dist;\n                  thumb_rest = Math.abs(this.norm(landmarks[0], landmarks[20]) - this.norm(this.state.last_hand_L[0], this.state.last_hand_L[20])) / pawn_dist;\n                  if (pinky_rest > 0.2) moved = [...moved, 4];\n                  if (ring_rest > 0.2) moved = [...moved, 8];\n                  if (middle_rest > 0.2) moved = [...moved, 12];\n                  if (index_rest > 0.2) moved = [...moved, 16];\n                  if (thumb_rest > 0.2) moved = [...moved, 20];\n                  max_move = Math.max(pinky_rest, ring_rest, middle_rest, index_rest, thumb_rest);\n                  if (max_move > this.state.max_tremor_L) this.setState({\n                    max_tremor_L: max_move\n                  });\n                  drawHand_still(hand, ctx, moved);\n                } else {\n                  this.setState({\n                    last_hand_L: landmarks\n                  });\n                }\n\n                this.setState({\n                  still_array_L: [...this.state.still_array_L, max_move],\n                  still_time_array_L: [...this.state.still_time_array_L, current_moment]\n                });\n                break;\n\n              case 8:\n                max_move = 0.0;\n\n                if (this.state.last_hand_R.length > 0) {\n                  let moved = [];\n                  pinky_rest = Math.abs(this.norm(landmarks[0], landmarks[4]) - this.norm(this.state.last_hand_R[0], this.state.last_hand_R[4])) / pawn_dist;\n                  ring_rest = Math.abs(this.norm(landmarks[0], landmarks[8]) - this.norm(this.state.last_hand_R[0], this.state.last_hand_R[8])) / pawn_dist;\n                  middle_rest = Math.abs(this.norm(landmarks[0], landmarks[12]) - this.norm(this.state.last_hand_R[0], this.state.last_hand_R[12])) / pawn_dist;\n                  index_rest = Math.abs(this.norm(landmarks[0], landmarks[16]) - this.norm(this.state.last_hand_R[0], this.state.last_hand_R[16])) / pawn_dist;\n                  thumb_rest = Math.abs(this.norm(landmarks[0], landmarks[20]) - this.norm(this.state.last_hand_R[0], this.state.last_hand_R[20])) / pawn_dist;\n                  if (pinky_rest > 0.2) moved = [...moved, 4];\n                  if (ring_rest > 0.2) moved = [...moved, 8];\n                  if (middle_rest > 0.2) moved = [...moved, 12];\n                  if (index_rest > 0.2) moved = [...moved, 16];\n                  if (thumb_rest > 0.2) moved = [...moved, 20];\n                  max_move = Math.max(pinky_rest, ring_rest, middle_rest, index_rest, thumb_rest);\n                  if (max_move > this.state.max_tremor_R) this.setState({\n                    max_tremor_R: max_move\n                  });\n                  drawHand_still(hand, ctx, moved);\n                } else {\n                  this.setState({\n                    last_hand_R: landmarks\n                  });\n                }\n\n                this.setState({\n                  still_array_R: [...this.state.still_array_R, max_move],\n                  still_time_array_R: [...this.state.still_time_array_R, current_moment]\n                });\n                break;\n\n              default:\n                console.log(\"Should Not Print\");\n                break;\n            }\n          });\n        } else {\n          // Warning message for hand off screen\n          if (this.state.dead_frame > 9) writeText(ctx, {\n            text: 'Hand Off Screen',\n            x: 180,\n            y: 70\n          });\n          this.setState({\n            dead_frame: this.state.dead_frame + 1\n          });\n        }\n      }\n    }\n  }\n\n  async next_step() {\n    if (this.state.stage !== 8) this.setState({\n      stage: this.state.stage + 1,\n      wait: true\n    });else {\n      clearInterval(this.state.ID);\n      if (this.state.recording === true) await this.inference();\n      this.setState({\n        real_time_inferencing: false,\n        recording: false,\n        stage: 0\n      });\n      this.compose_chart();\n      const ctx = this.canvasRef.current.getContext(\"2d\");\n      ctx.clearRect(0, 0, this.canvasRef.current.width, this.canvasRef.current.height);\n    }\n  }\n\n  async stop_tapping() {\n    this.setState({\n      finger_done: true\n    });\n    this.setState({\n      wait: true\n    });\n  }\n\n  async stop_rotating() {\n    this.setState({\n      rotate_done: true\n    });\n    this.setState({\n      wait: true\n    });\n  }\n\n  async stop_gripping() {\n    this.setState({\n      fist_done: true\n    });\n    this.setState({\n      wait: true\n    });\n  }\n\n  stop_real_time_inference() {\n    clearInterval(this.state.ID);\n    this.setState({\n      real_time_inferencing: false,\n      finger_done: false,\n      rotate_done: false,\n      fist_done: false\n    });\n    this.compose_chart();\n    const ctx = this.canvasRef.current.getContext(\"2d\");\n    ctx.clearRect(0, 0, this.canvasRef.current.width, this.canvasRef.current.height);\n  }\n\n  async record_video() {\n    this.setState({\n      startAt: Date.now()\n    });\n    console.log(\"Handpose model loaded.\");\n    const Interval_ID = setInterval(() => {\n      this.concat_frame();\n    }, this.capture_interval);\n    this.setState({\n      ID: Interval_ID,\n      recording: true,\n      wait: true,\n      stage: this.state.stage + 1\n    });\n  }\n\n  async concat_frame() {\n    if (this.state.wait) {\n      this.setState({\n        wait_till: Date.now() + 3000,\n        wait: false\n      });\n    }\n\n    if (typeof this.webcamRef.current !== \"undefined\" && this.webcamRef.current !== null && this.webcamRef.current.video.readyState === 4) {\n      if (Date.now() < this.state.wait_till) {\n        //console.log(\"Waiting till \", this.state.wait_till);\n        //count down 3, 2, 1\n        const ctx = this.canvasRef.current.getContext(\"2d\");\n        if (this.state.wait_till - Date.now() < 250) ctx.clearRect(0, 0, this.canvasRef.current.width, this.canvasRef.current.height);else if (this.state.wait_till - Date.now() < 1000) writeText(ctx, {\n          text: '1',\n          x: 180,\n          y: 70\n        });else if (this.state.wait_till - Date.now() < 2000) writeText(ctx, {\n          text: '2',\n          x: 140,\n          y: 70\n        });else if (this.state.wait_till - Date.now() < 3000) writeText(ctx, {\n          text: '3',\n          x: 100,\n          y: 70\n        });\n      } else {\n        let current_moment = (Date.now() - this.state.startAt) / 1000;\n        const image = this.webcamRef.current.getScreenshot();\n        var img = document.createElement(\"img\");\n        img.src = image;\n\n        img.onload = function () {\n          switch (this.state.stage) {\n            case 1:\n              this.setState({\n                dist_record_L: [...this.state.dist_record_L, img],\n                dist_time_record_L: [...this.state.dist_time_record_L, current_moment]\n              });\n              break;\n\n            case 2:\n              this.setState({\n                dist_record_R: [...this.state.dist_record_R, img],\n                dist_time_record_R: [...this.state.dist_time_record_R, current_moment]\n              });\n              break;\n\n            case 3:\n              this.setState({\n                rotate_record_L: [...this.state.rotate_record_L, img],\n                rotate_time_record_L: [...this.state.rotate_time_record_L, current_moment]\n              });\n              break;\n\n            case 4:\n              this.setState({\n                rotate_record_R: [...this.state.rotate_record_R, img],\n                rotate_time_record_R: [...this.state.rotate_time_record_R, current_moment]\n              });\n              break;\n\n            case 5:\n              this.setState({\n                fist_record_L: [...this.state.fist_record_L, img],\n                fist_time_record_L: [...this.state.fist_time_record_L, current_moment]\n              });\n              break;\n\n            case 6:\n              this.setState({\n                fist_record_R: [...this.state.fist_record_R, img],\n                fist_time_record_R: [...this.state.fist_time_record_R, current_moment]\n              });\n              break;\n\n            case 7:\n              this.setState({\n                still_record_L: [...this.state.still_record_L, img],\n                still_time_record_L: [...this.state.still_time_record_L, current_moment]\n              });\n              break;\n\n            case 8:\n              this.setState({\n                still_record_R: [...this.state.still_record_R, img],\n                still_time_record_R: [...this.state.still_time_record_R, current_moment]\n              });\n              break;\n\n            default:\n              console.log('Should print this');\n              break;\n          }\n        }.bind(this);\n      }\n    }\n  }\n\n  async inference() {\n    require('@tensorflow/tfjs-backend-webgl');\n\n    const net = await handpose.load();\n    console.log(\"Handpose model loaded.\"); // Run prediction on recorded tapping data\n\n    for (let i = 0; i < this.state.dist_record_L.length; i++) {\n      const hand = await net.estimateHands(this.state.dist_record_L[i]);\n\n      if (hand.length > 0) {\n        hand.forEach(prediction => {\n          // Calculate relative distance\n          const landmarks = prediction.landmarks;\n          let current_moment = (Date.now() - this.state.startAt) / 1000;\n          let index_dist = this.norm(landmarks[4], landmarks[8]);\n          let pawn_dist = this.norm(landmarks[0], landmarks[2]);\n          let current_dist = index_dist / pawn_dist;\n          this.setState({\n            dist_array_L: [...this.state.dist_array_L, current_dist],\n            dist_time_array_L: [...this.state.dist_time_array_L, current_moment]\n          });\n\n          if (this.state.index_passed === 0 && current_dist - this.state.min_dist > 0.2) {\n            this.setState({\n              index_passed: 1,\n              max_dist: current_dist\n            });\n          }\n\n          if (this.state.index_passed === 1 && current_dist > this.state.max_dist) {\n            this.setState({\n              max_dist: current_dist\n            });\n          }\n\n          if (this.state.index_passed === 1 && this.state.max_dist - current_dist > 0.2) {\n            this.setState({\n              index_passed: 0,\n              min_dist: current_dist,\n              tap_count: [...this.state.tap_count, current_moment]\n            });\n          }\n\n          if (this.state.index_passed === 0 && current_dist < this.state.min_dist) {\n            this.setState({\n              min_dist: current_dist\n            });\n          }\n\n          console.log(\"INDEX COUNT:\", this.state.tap_count);\n        });\n      }\n    }\n\n    for (let i = 0; i < this.state.dist_record_R.length; i++) {\n      const hand = await net.estimateHands(this.state.dist_record_R[i]);\n\n      if (hand.length > 0) {\n        hand.forEach(prediction => {\n          // Calculate relative distance\n          const landmarks = prediction.landmarks;\n          let current_moment = (Date.now() - this.state.startAt) / 1000;\n          let index_dist = this.norm(landmarks[4], landmarks[8]);\n          let pawn_dist = this.norm(landmarks[0], landmarks[2]);\n          let current_dist = index_dist / pawn_dist;\n          this.setState({\n            dist_array_R: [...this.state.dist_array_R, current_dist],\n            dist_time_array_R: [...this.state.dist_time_array_R, current_moment]\n          });\n\n          if (this.state.index_passed === 0 && current_dist - this.state.min_dist > 0.2) {\n            this.setState({\n              index_passed: 1,\n              max_dist: current_dist\n            });\n          }\n\n          if (this.state.index_passed === 1 && current_dist > this.state.max_dist) {\n            this.setState({\n              max_dist: current_dist\n            });\n          }\n\n          if (this.state.index_passed === 1 && this.state.max_dist - current_dist > 0.2) {\n            this.setState({\n              index_passed: 0,\n              min_dist: current_dist,\n              tap_count: [...this.state.tap_count, current_moment]\n            });\n          }\n\n          if (this.state.index_passed === 0 && current_dist < this.state.min_dist) {\n            this.setState({\n              min_dist: current_dist\n            });\n          }\n\n          console.log(\"INDEX COUNT:\", this.state.tap_count);\n        });\n      }\n    } // Run prediction on recorded rotation data\n\n\n    for (let i = 0; i < this.state.rotate_record_L.length; i++) {\n      const hand = await net.estimateHands(this.state.rotate_record_L[i]);\n\n      if (hand.length > 0) {\n        hand.forEach(prediction => {\n          const landmarks = prediction.landmarks;\n          let current_moment = (Date.now() - this.state.startAt) / 1000;\n          let pawn_dist = this.norm(landmarks[0], landmarks[12]);\n          let rotate_dist = (landmarks[2][0] - landmarks[17][0]) / pawn_dist;\n          this.setState({\n            rotate_array_L: [...this.state.rotate_array_L, rotate_dist],\n            rotate_time_array_L: [...this.state.rotate_time_array_L, current_moment]\n          });\n\n          if (this.state.rotate_passed === 0) {\n            if (rotate_dist >= 0.2) this.setState({\n              rotate_passed: 1\n            });\n            if (rotate_dist <= -0.2) this.setState({\n              rotate_passed: -1\n            });\n          }\n\n          if (this.state.rotate_passed === 1 && rotate_dist <= -0.2) {\n            this.setState({\n              rotate_passed: -1\n            });\n          }\n\n          if (this.state.rotate_passed === -1 && rotate_dist >= 0.2) {\n            this.setState({\n              rotate_passed: 1,\n              rotate_count: [...this.state.rotate_count, current_moment]\n            });\n          }\n\n          console.log(\"ROTATE COUNT:\", this.state.rotate_count);\n        });\n      }\n    }\n\n    for (let i = 0; i < this.state.rotate_record_R.length; i++) {\n      const hand = await net.estimateHands(this.state.rotate_record_R[i]);\n\n      if (hand.length > 0) {\n        hand.forEach(prediction => {\n          const landmarks = prediction.landmarks;\n          let current_moment = (Date.now() - this.state.startAt) / 1000;\n          let pawn_dist = this.norm(landmarks[0], landmarks[12]);\n          let rotate_dist = (landmarks[2][0] - landmarks[17][0]) / pawn_dist;\n          this.setState({\n            rotate_array_R: [...this.state.rotate_array_R, rotate_dist],\n            rotate_time_array_R: [...this.state.rotate_time_array_R, current_moment]\n          });\n\n          if (this.state.rotate_passed === 0) {\n            if (rotate_dist >= 0.2) this.setState({\n              rotate_passed: 1\n            });\n            if (rotate_dist <= -0.2) this.setState({\n              rotate_passed: -1\n            });\n          }\n\n          if (this.state.rotate_passed === 1 && rotate_dist <= -0.2) {\n            this.setState({\n              rotate_passed: -1\n            });\n          }\n\n          if (this.state.rotate_passed === -1 && rotate_dist >= 0.2) {\n            this.setState({\n              rotate_passed: 1,\n              rotate_count: [...this.state.rotate_count, current_moment]\n            });\n          }\n\n          console.log(\"ROTATE COUNT:\", this.state.rotate_count);\n        });\n      }\n    } // Run prediction on recorded gripping data\n\n\n    for (let i = 0; i < this.state.fist_record_L.length; i++) {\n      const hand = await net.estimateHands(this.state.fist_record_L[i]);\n\n      if (hand.length > 0) {\n        hand.forEach(prediction => {\n          const landmarks = prediction.landmarks;\n          let current_moment = (Date.now() - this.state.startAt) / 1000;\n          let pawn_dist = this.norm(landmarks[0], landmarks[2]);\n          let fist_dist = (landmarks[8][1] - landmarks[5][1] + (landmarks[12][1] - landmarks[9][1]) + (landmarks[16][1] - landmarks[13][1]) + (landmarks[20][1] - landmarks[17][1])) / (4 * pawn_dist);\n          this.setState({\n            fist_array_L: [...this.state.fist_array_L, fist_dist],\n            fist_time_array_L: [...this.state.fist_time_array_L, current_moment]\n          });\n\n          if (fist_dist >= 0.0) {\n            this.setState({\n              fist_passed: 1\n            });\n          }\n\n          if (fist_dist < -0.4 && this.state.fist_passed === 1) {\n            this.setState({\n              fist_passed: 0,\n              fist_count: [...this.state.fist_count, current_moment]\n            });\n          }\n\n          console.log(\"FIST COUNT:\", this.state.fist_count);\n        });\n      }\n    }\n\n    for (let i = 0; i < this.state.fist_record_R.length; i++) {\n      const hand = await net.estimateHands(this.state.fist_record_R[i]);\n\n      if (hand.length > 0) {\n        hand.forEach(prediction => {\n          const landmarks = prediction.landmarks;\n          let current_moment = (Date.now() - this.state.startAt) / 1000;\n          let pawn_dist = this.norm(landmarks[0], landmarks[2]);\n          let fist_dist = (landmarks[8][1] - landmarks[5][1] + (landmarks[12][1] - landmarks[9][1]) + (landmarks[16][1] - landmarks[13][1]) + (landmarks[20][1] - landmarks[17][1])) / (4 * pawn_dist);\n          this.setState({\n            fist_array_R: [...this.state.fist_array_R, fist_dist],\n            fist_time_array_R: [...this.state.fist_time_array_R, current_moment]\n          });\n\n          if (fist_dist >= 0.0) {\n            this.setState({\n              fist_passed: 1\n            });\n          }\n\n          if (fist_dist < -0.4 && this.state.fist_passed === 1) {\n            this.setState({\n              fist_passed: 0,\n              fist_count: [...this.state.fist_count, current_moment]\n            });\n          }\n\n          console.log(\"FIST COUNT:\", this.state.fist_count);\n        });\n      }\n    } // Run prediction on recorded postural data\n\n\n    for (let i = 0; i < this.state.still_record_L.length; i++) {\n      const hand = await net.estimateHands(this.state.still_record_L[i]);\n\n      if (hand.length > 0) {\n        hand.forEach(prediction => {\n          const landmarks = prediction.landmarks;\n          let current_moment = (Date.now() - this.state.startAt) / 1000;\n          let max_move = 0.0;\n          let pawn_dist = this.norm(landmarks[0], landmarks[2]);\n\n          if (this.state.last_hand_L.length > 0) {\n            let pinky_rest = Math.abs(this.norm(landmarks[0], landmarks[4]) - this.norm(this.state.last_hand_L[0], this.state.last_hand_L[4])) / pawn_dist;\n            let ring_rest = Math.abs(this.norm(landmarks[0], landmarks[8]) - this.norm(this.state.last_hand_L[0], this.state.last_hand_L[8])) / pawn_dist;\n            let middle_rest = Math.abs(this.norm(landmarks[0], landmarks[12]) - this.norm(this.state.last_hand_L[0], this.state.last_hand_L[12])) / pawn_dist;\n            let index_rest = Math.abs(this.norm(landmarks[0], landmarks[16]) - this.norm(this.state.last_hand_L[0], this.state.last_hand_L[16])) / pawn_dist;\n            let thumb_rest = Math.abs(this.norm(landmarks[0], landmarks[20]) - this.norm(this.state.last_hand_L[0], this.state.last_hand_L[20])) / pawn_dist;\n            max_move = Math.max(pinky_rest, ring_rest, middle_rest, index_rest, thumb_rest);\n            if (max_move > this.state.max_tremor_L) this.setState({\n              max_tremor_L: max_move\n            });\n          } else {\n            this.setState({\n              last_hand_L: landmarks\n            });\n          }\n\n          this.setState({\n            still_array_L: [...this.state.still_array_L, max_move],\n            still_time_array_L: [...this.state.still_time_array_L, current_moment]\n          });\n        });\n      }\n    }\n\n    for (let i = 0; i < this.state.still_record_R.length; i++) {\n      const hand = await net.estimateHands(this.state.still_record_R[i]);\n\n      if (hand.length > 0) {\n        hand.forEach(prediction => {\n          const landmarks = prediction.landmarks;\n          let current_moment = (Date.now() - this.state.startAt) / 1000;\n          let max_move = 0.0;\n          let pawn_dist = this.norm(landmarks[0], landmarks[2]);\n\n          if (this.state.last_hand_R.length > 0) {\n            let pinky_rest = Math.abs(this.norm(landmarks[0], landmarks[4]) - this.norm(this.state.last_hand_L[0], this.state.last_hand_L[4])) / pawn_dist;\n            let ring_rest = Math.abs(this.norm(landmarks[0], landmarks[8]) - this.norm(this.state.last_hand_L[0], this.state.last_hand_L[8])) / pawn_dist;\n            let middle_rest = Math.abs(this.norm(landmarks[0], landmarks[12]) - this.norm(this.state.last_hand_L[0], this.state.last_hand_L[12])) / pawn_dist;\n            let index_rest = Math.abs(this.norm(landmarks[0], landmarks[16]) - this.norm(this.state.last_hand_L[0], this.state.last_hand_L[16])) / pawn_dist;\n            let thumb_rest = Math.abs(this.norm(landmarks[0], landmarks[20]) - this.norm(this.state.last_hand_L[0], this.state.last_hand_L[20])) / pawn_dist;\n            max_move = Math.max(pinky_rest, ring_rest, middle_rest, index_rest, thumb_rest);\n            if (max_move > this.state.max_tremor_R) this.setState({\n              max_tremor_R: max_move\n            });\n          } else {\n            this.setState({\n              last_hand_R: landmarks\n            });\n          }\n\n          this.setState({\n            still_array_R: [...this.state.still_array_R, max_move],\n            still_time_array_R: [...this.state.still_time_array_R, current_moment]\n          });\n        });\n      }\n    }\n\n    this.setState({\n      record: []\n    });\n  }\n\n  async stop_record() {\n    clearInterval(this.state.ID);\n    await this.inference();\n    this.setState({\n      recording: false,\n      finger_done: false,\n      rotate_done: false,\n      fist_done: false\n    });\n    this.compose_chart();\n  }\n\n  render() {\n    const videoConstraints = {\n      facingMode: this.state.facingMode\n    };\n    let button_1 = null;\n    let button_2 = null;\n\n    switch (this.state.stage) {\n      case 1:\n        button_1 = /*#__PURE__*/_jsxDEV(Button, {\n          disabled: this.state.recording,\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: this.next_step,\n          children: \"Finish Finger Tapping Left (Real Time)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1419,\n          columnNumber: 20\n        }, this);\n        button_2 = /*#__PURE__*/_jsxDEV(Button, {\n          disabled: this.state.real_time_inferencing,\n          variant: \"contained\",\n          color: \"secondary\",\n          onClick: this.next_step,\n          children: \"Finish Finger Tapping Left (Record)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1420,\n          columnNumber: 20\n        }, this);\n        break;\n\n      case 2:\n        button_1 = /*#__PURE__*/_jsxDEV(Button, {\n          disabled: this.state.recording,\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: this.next_step,\n          children: \"Finish Finger Tapping Right (Real Time)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1423,\n          columnNumber: 20\n        }, this);\n        button_2 = /*#__PURE__*/_jsxDEV(Button, {\n          disabled: this.state.real_time_inferencing,\n          variant: \"contained\",\n          color: \"secondary\",\n          onClick: this.next_step,\n          children: \"Finish Finger Tapping Right (Record)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1424,\n          columnNumber: 20\n        }, this);\n        break;\n\n      case 3:\n        button_1 = /*#__PURE__*/_jsxDEV(Button, {\n          disabled: this.state.recording,\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: this.next_step,\n          children: \"Finish Rotation Left (Real Time)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1427,\n          columnNumber: 20\n        }, this);\n        button_2 = /*#__PURE__*/_jsxDEV(Button, {\n          disabled: this.state.real_time_inferencing,\n          variant: \"contained\",\n          color: \"secondary\",\n          onClick: this.next_step,\n          children: \"Finish Rotation Left (Record)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1428,\n          columnNumber: 20\n        }, this);\n        break;\n\n      case 4:\n        button_1 = /*#__PURE__*/_jsxDEV(Button, {\n          disabled: this.state.recording,\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: this.next_step,\n          children: \"Finish Rotation Right (Real Time)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1431,\n          columnNumber: 20\n        }, this);\n        button_2 = /*#__PURE__*/_jsxDEV(Button, {\n          disabled: this.state.real_time_inferencing,\n          variant: \"contained\",\n          color: \"secondary\",\n          onClick: this.next_step,\n          children: \"Finish Rotation Right (Record)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1432,\n          columnNumber: 20\n        }, this);\n        break;\n\n      case 5:\n        button_1 = /*#__PURE__*/_jsxDEV(Button, {\n          disabled: this.state.recording,\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: this.next_step,\n          children: \"Finish Gripping Left (Real Time)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1435,\n          columnNumber: 20\n        }, this);\n        button_2 = /*#__PURE__*/_jsxDEV(Button, {\n          disabled: this.state.real_time_inferencing,\n          variant: \"contained\",\n          color: \"secondary\",\n          onClick: this.next_step,\n          children: \"Finish Gripping Left (Record)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1436,\n          columnNumber: 20\n        }, this);\n        break;\n\n      case 6:\n        button_1 = /*#__PURE__*/_jsxDEV(Button, {\n          disabled: this.state.recording,\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: this.next_step,\n          children: \"Finish Gripping Right (Real Time)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1439,\n          columnNumber: 20\n        }, this);\n        button_2 = /*#__PURE__*/_jsxDEV(Button, {\n          disabled: this.state.real_time_inferencing,\n          variant: \"contained\",\n          color: \"secondary\",\n          onClick: this.next_step,\n          children: \"Finish Gripping Right (Record)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1440,\n          columnNumber: 20\n        }, this);\n        break;\n\n      case 7:\n        button_1 = /*#__PURE__*/_jsxDEV(Button, {\n          disabled: this.state.recording,\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: this.next_step,\n          children: \"Finish Resting Left (Real Time)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1443,\n          columnNumber: 20\n        }, this);\n        button_2 = /*#__PURE__*/_jsxDEV(Button, {\n          disabled: this.state.real_time_inferencing,\n          variant: \"contained\",\n          color: \"secondary\",\n          onClick: this.next_step,\n          children: \"Finish Resting Left (Record)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1444,\n          columnNumber: 20\n        }, this);\n        break;\n\n      case 8:\n        button_1 = /*#__PURE__*/_jsxDEV(Button, {\n          disabled: this.state.recording,\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: this.next_step,\n          children: \"Finish Resting Right (Real Time)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1447,\n          columnNumber: 20\n        }, this);\n        button_2 = /*#__PURE__*/_jsxDEV(Button, {\n          disabled: this.state.real_time_inferencing,\n          variant: \"contained\",\n          color: \"secondary\",\n          onClick: this.next_step,\n          children: \"Finish Resting Right (Record)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1448,\n          columnNumber: 20\n        }, this);\n        break;\n\n      default:\n        button_1 = /*#__PURE__*/_jsxDEV(Button, {\n          disabled: this.state.recording,\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: this.runHandpose,\n          children: \"Start Test (Real Time)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1451,\n          columnNumber: 20\n        }, this);\n        button_2 = /*#__PURE__*/_jsxDEV(Button, {\n          disabled: this.state.real_time_inferencing,\n          variant: \"contained\",\n          color: \"secondary\",\n          onClick: this.record_video,\n          children: \"Start Test (Record)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1452,\n          columnNumber: 20\n        }, this);\n        break;\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"App-header\",\n        children: [/*#__PURE__*/_jsxDEV(Webcam, {\n          ref: this.webcamRef,\n          videoConstraints: videoConstraints,\n          style: {\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 9,\n            width: \"auto\",\n            height: \"auto\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1458,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: this.canvasRef,\n          style: {\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 9,\n            width: \"auto\",\n            height: \"auto\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1473,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1457,\n        columnNumber: 9\n      }, this), this.state.button_mode ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.increment_tap1,\n          id: \"button1\",\n          children: \"Index Finger\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1490,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.increment_tap2,\n          id: \"button2\",\n          children: \"Middle Finger\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1491,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1489,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1494,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: button_1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1498,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: button_2\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1499,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            disabled: this.state.recording || this.state.real_time_inferencing,\n            variant: \"outlined\",\n            color: \"secondary\",\n            onClick: this.reset_counter,\n            children: \"Reset All\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1501,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1500,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1497,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h5\", {\n          children: [\"Finger Tapping Count:\", this.state.tap_count.length, \"\\xA0\\xA0\\xA0\\xA0 Rotate Count:\", this.state.rotate_count.length, \"\\xA0\\xA0\\xA0\\xA0 Gripping Count: \", this.state.fist_count.length, \"\\xA0\\xA0\\xA0\\xA0 FPS: \", this.state.avg_fps]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1507,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1506,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: handline,\n            className: \"handline\",\n            alt: \"anything\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1516,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1515,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"small\", {\n            children: \"Enter Vertical Distance (cm)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1519,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            id: \"real_measurement_v\",\n            onChange: this.compose_chart,\n            step: \"0.001\",\n            min: \"0\",\n            max: \"20\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1520,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1518,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"small\", {\n            children: \"Enter Horizontal Distance (cm)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1523,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            id: \"real_measurement_h\",\n            onChange: this.compose_chart,\n            step: \"0.001\",\n            min: \"0\",\n            max: \"20\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1524,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1522,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          disabled: !this.state.chart_ready,\n          onClick: this.switch_style,\n          children: \"Switch Chart Style\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1526,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.switch_cam,\n          children: \"Switch Camera\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1527,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1514,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"small\", {\n          children: \"Experimental Features\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1530,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          disabled: this.state.recording || this.state.real_time_inferencing,\n          onClick: this.runPosenet,\n          children: \"PoseNet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1531,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          disabled: this.state.recording || this.state.real_time_inferencing,\n          onClick: this.runFacemesh,\n          children: \"Facemesh\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1532,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          disabled: this.state.recording || this.state.real_time_inferencing,\n          onClick: this.switch_button,\n          children: \"Switch On/Off Button\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1533,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1529,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [this.state.chart_ready ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Line, {\n            data: this.state.chart_data1_L\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1538,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            data: this.state.chart_data1_R\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1539,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            data: this.state.chart_data2_L\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1540,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            data: this.state.chart_data2_R\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1541,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            data: this.state.chart_data3_L\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1542,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            data: this.state.chart_data3_R\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1543,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            data: this.state.chart_data4_L\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1544,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            data: this.state.chart_data4_R\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1545,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1537,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1548,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"small\", {\n            children: \"UPDRS Score, X for N/A, Could be Empty\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1551,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"Score\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1552,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1550,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"small\", {\n            children: \"Special Remarks\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1555,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"Remarks\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1556,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1554,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          name: \"PD\",\n          id: \"PD\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"0\",\n            children: \"Control\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1559,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"1\",\n            children: \"RBD\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1560,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"2\",\n            children: \"PD(with medication)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1561,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"3\",\n            children: \"PD(without medication)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1562,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1558,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.getArray,\n          children: \"Get Array\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1564,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            id: \"upload-json\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1566,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1565,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            id: \"upload-weights\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1569,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1568,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1535,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1456,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/wongh/Documents/GitHub/tfjs-app/src/App.js"],"names":["React","Button","handpose","posenet","facemesh","Webcam","drawHand_tap","drawHand_rotate","drawHand_fist","drawHand_still","writeText","drawKeypoints","drawSkeleton","drawMesh","sqrt","pow","Line","handline","App","Component","constructor","props","sleep","milliseconds","Promise","resolve","setTimeout","exportToJson","objectData","filename","contentType","window","navigator","msSaveOrOpenBlob","blob","Blob","decodeURIComponent","encodeURI","JSON","stringify","type","a","document","createElement","download","href","encodeURIComponent","target","body","appendChild","click","removeChild","getArray","remark","getElementById","value","dict","dist_array_L","state","dist_time_array_L","rotate_array_L","rotate_time_array_L","fist_array_L","fist_time_array_L","still_array_L","still_time_array_L","hand_dist_array_L","hand_rotate_array_L","hand_fist_array_L","hand_still_array_L","dist_array_R","dist_time_array_R","rotate_array_R","rotate_time_array_R","fist_array_R","fist_time_array_R","still_array_R","still_time_array_R","hand_dist_array_R","hand_rotate_array_R","hand_fist_array_R","hand_still_array_R","PD","Score","console","log","ID","tap_count","rotate_count","fist_count","last_hand_L","last_hand_R","index_passed","min_dist","max_dist","rotate_passed","last_pressed","real_time_inferencing","recording","button_mode","chart_ready","finger_done","rotate_done","fist_done","dist_record_L","dist_time_record_L","dist_record_R","dist_time_record_R","rotate_record_L","rotate_time_record_L","rotate_record_R","rotate_time_record_R","fist_record_L","fist_time_record_L","fist_record_R","fist_time_record_R","still_record_L","still_time_record_L","still_record_R","still_time_record_R","chart_data1_L","chart_data1_R","chart_data2_L","chart_data2_R","chart_data3_L","chart_data3_R","chart_data4_L","chart_data4_R","stage","wait","wait_till","max_tremor_L","max_tremor_R","startAt","Date","now","dead_frame","raw","facingMode","avg_fps","webcamRef","createRef","canvasRef","videoConstraints","capture_interval","runHandpose","bind","stop_real_time_inference","stop_tapping","stop_rotating","stop_gripping","stop_record","record_video","concat_frame","inference","reset_counter","increment_tap1","increment_tap2","switch_button","compose_chart","runPosenet","real_time_posenet","runFacemesh","real_time_facemesh","switch_style","switch_cam","next_step","setState","require","net","load","Interval_ID","setInterval","current","video","readyState","videoWidth","videoHeight","width","height","face","estimateFaces","ctx","getContext","pose","estimateSinglePose","time_array_1_L","time_array_1_R","count_array_1_L","count_array_1_R","label_1_L","label_1_R","time_array_2_L","time_array_2_R","count_array_2_L","count_array_2_R","label_2_L","label_2_R","time_array_3_L","time_array_3_R","count_array_3_L","count_array_3_R","label_3_L","label_3_R","time_array_4_L","time_array_4_R","count_array_4_L","count_array_4_R","label_4_L","label_4_R","real_dist_v","real_dist_h","length","slice","i","tmp","data1_L","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","data","data1_R","data2_L","data2_R","data3_L","data3_R","data4_L","data4_R","current_moment","dist_array","dist_time_array","norm","lm1","lm2","clearInterval","clearRect","text","x","y","real_time_inference","hand","estimateHands","forEach","prediction","landmarks","pawn_dist","y_dist","index_dist","current_dist","rotate_dist","fist_dist","max_move","pinky_rest","ring_rest","middle_rest","index_rest","thumb_rest","fist_passed","moved","Math","abs","max","image","getScreenshot","img","src","onload","record","render","button_1","button_2","position","marginLeft","marginRight","left","right","textAlign","zindex"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Button from '@material-ui/core/Button';\r\nimport * as handpose from \"@tensorflow-models/handpose\";\r\nimport * as posenet from \"@tensorflow-models/posenet\";\r\nimport * as facemesh from \"@tensorflow-models/facemesh\";\r\n//import * as tf from '@tensorflow/tfjs-core';\r\nimport Webcam from \"react-webcam\";\r\nimport \"./App.css\";\r\nimport { drawHand_tap, drawHand_rotate, drawHand_fist, drawHand_still, writeText, drawKeypoints, drawSkeleton, drawMesh } from \"./utilities\";\r\nimport { sqrt, pow } from \"mathjs\"\r\nimport {Line} from 'react-chartjs-2';\r\nimport handline from './HandLines1.jpg';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      ID : 0,\r\n      tap_count : [],\r\n      rotate_count : [],\r\n      fist_count : [],\r\n      last_hand_L: [],\r\n      last_hand_R: [],\r\n      index_passed : 0,\r\n      min_dist: 0,\r\n      max_dist: 999.0,\r\n      rotate_passed : 0,\r\n      last_pressed:0,\r\n\r\n      real_time_inferencing:false,\r\n      recording:false,\r\n      button_mode:false,\r\n      chart_ready:false,\r\n      finger_done : false,\r\n      rotate_done : false,\r\n      fist_done : false,\r\n\r\n      hand_dist_array_L : [],\r\n      hand_dist_array_R : [],\r\n      hand_rotate_array_L : [],\r\n      hand_rotate_array_R : [],\r\n      hand_fist_array_L : [],\r\n      hand_fist_array_R : [],\r\n      hand_still_array_L : [],\r\n      hand_still_array_R : [],\r\n\r\n      dist_array_L : [],\r\n      dist_time_array_L : [],\r\n      dist_record_L : [],\r\n      dist_time_record_L : [],\r\n      dist_array_R : [],\r\n      dist_time_array_R : [],\r\n      dist_record_R : [],\r\n      dist_time_record_R : [],\r\n\r\n      rotate_array_L : [],\r\n      rotate_time_array_L : [],\r\n      rotate_record_L : [],\r\n      rotate_time_record_L : [],\r\n      rotate_array_R : [],\r\n      rotate_time_array_R : [],\r\n      rotate_record_R : [],\r\n      rotate_time_record_R : [],\r\n\r\n      fist_array_L : [],\r\n      fist_time_array_L : [],\r\n      fist_record_L : [],\r\n      fist_time_record_L : [],\r\n      fist_array_R : [],\r\n      fist_time_array_R : [],\r\n      fist_record_R : [],\r\n      fist_time_record_R : [],\r\n\r\n      still_array_L : [],\r\n      still_time_array_L : [],\r\n      still_record_L : [],\r\n      still_time_record_L : [],\r\n      still_array_R : [],\r\n      still_time_array_R : [],\r\n      still_record_R : [],\r\n      still_time_record_R : [],\r\n\r\n      chart_data1_L : null,\r\n      chart_data1_R : null,\r\n      chart_data2_L : null,\r\n      chart_data2_R : null,\r\n      chart_data3_L : null,\r\n      chart_data3_R : null,\r\n      chart_data4_L : null,\r\n      chart_data4_R : null,\r\n\r\n      stage:0,\r\n      wait : false,\r\n      wait_till : 0,\r\n      max_tremor_L: 0.0,\r\n      max_tremor_R: 0.0,\r\n\r\n      startAt: Date.now(),\r\n      dead_frame: 0,\r\n      raw: true,\r\n      facingMode: \"user\",\r\n      avg_fps: 0,\r\n    };\r\n    this.webcamRef = React.createRef(null);\r\n    this.canvasRef = React.createRef(null);\r\n    this.videoConstraints = {facingMode: \"user\"};\r\n    this.capture_interval = 50;\r\n    this.runHandpose = this.runHandpose.bind(this);\r\n    this.stop_real_time_inference = this.stop_real_time_inference.bind(this);\r\n    this.stop_tapping = this.stop_tapping.bind(this);\r\n    this.stop_rotating = this.stop_rotating.bind(this);\r\n    this.stop_gripping = this.stop_gripping.bind(this);\r\n    this.stop_record = this.stop_record.bind(this);\r\n    this.record_video = this.record_video.bind(this);\r\n    this.concat_frame = this.concat_frame.bind(this);\r\n    this.inference = this.inference.bind(this);\r\n    this.reset_counter = this.reset_counter.bind(this);\r\n    this.increment_tap1 = this.increment_tap1.bind(this);\r\n    this.increment_tap2 = this.increment_tap2.bind(this);\r\n    this.switch_button = this.switch_button.bind(this);\r\n    this.compose_chart = this.compose_chart.bind(this);\r\n    this.runPosenet = this.runPosenet.bind(this);\r\n    this.real_time_posenet = this.real_time_posenet.bind(this);\r\n    this.runFacemesh = this.runFacemesh.bind(this);\r\n    this.real_time_facemesh = this.real_time_facemesh.bind(this);\r\n    this.switch_style = this.switch_style.bind(this);\r\n    this.switch_cam = this.switch_cam.bind(this);\r\n    this.getArray = this.getArray.bind(this);\r\n    this.exportToJson = this.exportToJson.bind(this);\r\n    this.next_step = this.next_step.bind(this);\r\n  }\r\n\r\n  switch_cam(){\r\n    if (this.state.facingMode === \"user\") this.setState({facingMode: \"environment\"});\r\n    else if (this.state.facingMode === \"environment\") this.setState({facingMode: \"user\"});\r\n  }\r\n\r\n  async runFacemesh(){\r\n    require('@tensorflow/tfjs-backend-webgl');\r\n    const net = await facemesh.load();\r\n    console.log(\"Facemesh model loaded.\");\r\n    this.setState({startAt:Date.now()});\r\n    const Interval_ID = setInterval(() => {\r\n      this.real_time_facemesh(net);\r\n    }, this.capture_interval);\r\n    this.setState({ID:Interval_ID,\r\n      real_time_inferencing:true});\r\n  }\r\n\r\n  async real_time_facemesh(net) {\r\n    if (this.state.wait){\r\n      this.setState({wait_till:Date.now()+3000});\r\n      this.setState({wait:false});\r\n    }\r\n    if (\r\n      typeof this.webcamRef.current !== \"undefined\" &&\r\n      this.webcamRef.current !== null &&\r\n      this.webcamRef.current.video.readyState === 4\r\n    ) {\r\n      const video = this.webcamRef.current.video;\r\n      const videoWidth = this.webcamRef.current.video.videoWidth;\r\n      const videoHeight = this.webcamRef.current.video.videoHeight;\r\n      this.webcamRef.current.video.width = videoWidth;\r\n      this.webcamRef.current.video.height = videoHeight;\r\n      this.canvasRef.current.width = videoWidth;\r\n      this.canvasRef.current.height = videoHeight;\r\n      const face = await net.estimateFaces(video);\r\n      const ctx = this.canvasRef.current.getContext(\"2d\");\r\n      drawMesh(face, ctx);\r\n    }\r\n  }\r\n\r\n  async runPosenet(){\r\n    require('@tensorflow/tfjs-backend-webgl');\r\n    const net = await posenet.load();\r\n    console.log(\"PoseNet model loaded.\");\r\n    this.setState({startAt:Date.now()});\r\n    const Interval_ID = setInterval(() => {\r\n      this.real_time_posenet(net);\r\n    }, this.capture_interval);\r\n    this.setState({ID:Interval_ID,\r\n      real_time_inferencing:true});\r\n  }\r\n\r\n  async real_time_posenet(net) {\r\n    if (this.state.wait){\r\n      this.setState({wait_till:Date.now()+3000,\r\n        wait:false});\r\n    }\r\n    if (\r\n      typeof this.webcamRef.current !== \"undefined\" &&\r\n      this.webcamRef.current !== null &&\r\n      this.webcamRef.current.video.readyState === 4\r\n    ) {\r\n      const video = this.webcamRef.current.video;\r\n      const videoWidth = this.webcamRef.current.video.videoWidth;\r\n      const videoHeight = this.webcamRef.current.video.videoHeight;\r\n      this.webcamRef.current.video.width = videoWidth;\r\n      this.webcamRef.current.video.height = videoHeight;\r\n      this.canvasRef.current.width = videoWidth;\r\n      this.canvasRef.current.height = videoHeight;\r\n      const pose = await net.estimateSinglePose(video);\r\n      const ctx = this.canvasRef.current.getContext(\"2d\");\r\n      drawKeypoints(pose[\"keypoints\"], 0.6, ctx);\r\n      drawSkeleton(pose[\"keypoints\"], 0.7, ctx);\r\n    }\r\n  }\r\n\r\n  async switch_style(){\r\n    await this.setState({raw: !this.state.raw});\r\n    this.compose_chart();\r\n  }\r\n\r\n  compose_chart(){\r\n    let time_array_1_L = [];\r\n    let time_array_1_R = [];\r\n    let count_array_1_L = [];\r\n    let count_array_1_R = [];\r\n    let label_1_L = \"\";\r\n    let label_1_R = \"\";\r\n    let time_array_2_L = [];\r\n    let time_array_2_R = [];\r\n    let count_array_2_L = [];\r\n    let count_array_2_R = [];\r\n    let label_2_L = \"\";\r\n    let label_2_R = \"\";\r\n    let time_array_3_L = [];\r\n    let time_array_3_R = [];\r\n    let count_array_3_L = [];\r\n    let count_array_3_R = [];\r\n    let label_3_L = \"\";\r\n    let label_3_R = \"\";\r\n    let time_array_4_L = [];\r\n    let time_array_4_R = [];\r\n    let count_array_4_L = [];\r\n    let count_array_4_R = [];\r\n    let label_4_L = \"\";\r\n    let label_4_R = \"\";\r\n    let real_dist_v = document.getElementById(\"real_measurement_v\").value;\r\n    let real_dist_h = document.getElementById(\"real_measurement_h\").value;\r\n    let avg_fps = this.state.hand_dist_array_L.length / \r\n                 (this.state.dist_time_array_L[this.state.dist_time_array_L.length - 1] - \r\n                  this.state.dist_time_array_L[0]);\r\n    this.setState({avg_fps:avg_fps});\r\n    \r\n    if (this.state.raw){\r\n      // Print Data Raw\r\n      if (this.state.dist_array_L.length > 100){\r\n        time_array_1_L = this.state.dist_time_array_L.slice(10, this.state.dist_time_array_L.length-20);\r\n        count_array_1_L = this.state.dist_array_L.slice(10, this.state.dist_array_L.length-20);\r\n      }\r\n      else {\r\n        time_array_1_L = [...this.state.dist_time_array_L];\r\n        count_array_1_L = [...this.state.dist_array_L];\r\n      }\r\n      if (this.state.dist_array_R.length > 100){\r\n        time_array_1_R = this.state.dist_time_array_R.slice(10, this.state.dist_time_array_R.length-20);\r\n        count_array_1_R = this.state.dist_array_R.slice(10, this.state.dist_array_R.length-20);\r\n      }\r\n      else {\r\n        time_array_1_R = [...this.state.dist_time_array_R];\r\n        count_array_1_R = [...this.state.dist_array_R];\r\n      }\r\n      if (this.state.rotate_array_L.length > 100){\r\n        time_array_2_L = this.state.rotate_time_array_L.slice(10, this.state.rotate_time_array_L.length-20);\r\n        count_array_2_L = this.state.rotate_array_L.slice(10, this.state.rotate_array_L.length-20);\r\n      }\r\n      else {\r\n        time_array_2_L = [...this.state.rotate_time_array_L];\r\n        count_array_2_L = [...this.state.rotate_array_L];\r\n      }\r\n      if (this.state.rotate_array_R.length > 100){\r\n        time_array_2_R = this.state.rotate_time_array_R.slice(10, this.state.rotate_time_array_R.length-20);\r\n        count_array_2_R = this.state.rotate_array_R.slice(10, this.state.rotate_array_R.length-20);\r\n      }\r\n      else {\r\n        time_array_2_R = [...this.state.rotate_time_array_R];\r\n        count_array_2_R = [...this.state.rotate_array_R];\r\n      }\r\n      if (this.state.fist_array_L.length > 100){\r\n        time_array_3_L = this.state.fist_time_array_L.slice(10, this.state.fist_time_array_L.length-20);\r\n        count_array_3_L = this.state.fist_array_L.slice(10, this.state.fist_array_L.length-20);\r\n      }\r\n      else {\r\n        time_array_3_L = [...this.state.fist_time_array_L];\r\n        count_array_3_L = [...this.state.fist_array_L];\r\n      }\r\n      if (this.state.fist_array_R.length > 100){\r\n        time_array_3_R = this.state.fist_time_array_R.slice(10, this.state.fist_time_array_R.length-20);\r\n        count_array_3_R = this.state.fist_array_R.slice(10, this.state.fist_array_R.length-20);\r\n      }\r\n      else {\r\n        time_array_3_R = [...this.state.fist_time_array_R];\r\n        count_array_3_R = [...this.state.fist_array_R];\r\n      }\r\n      if (this.state.still_array_L.length > 100){\r\n        time_array_4_L = this.state.still_time_array_L.slice(10, this.state.still_time_array_L.length-20);\r\n        count_array_4_L = this.state.still_array_L.slice(10, this.state.still_array_L.length-20);\r\n      }\r\n      else {\r\n        time_array_4_L = [...this.state.still_time_array_L];\r\n        count_array_4_L = [...this.state.still_array_L];\r\n      }\r\n      if (this.state.still_array_R.length > 100){\r\n        time_array_4_R = this.state.still_time_array_R.slice(10, this.state.still_time_array_R.length-20);\r\n        count_array_4_R = this.state.still_array_R.slice(10, this.state.still_array_R.length-20);\r\n      }\r\n      else {\r\n        time_array_4_R = [...this.state.still_time_array_R];\r\n        count_array_4_R = [...this.state.still_array_R];\r\n      }\r\n      \r\n      // Change to Real Life Measurement\r\n      if (real_dist_v > 0.0001 && real_dist_h > 0.0001){\r\n        label_1_L = \"Distance between Index and Thumb (cm)\";\r\n        label_1_R = \"Distance between Index and Thumb (cm)\";\r\n        label_2_L = \"Relative Location between Left and Right of Hand (cm)\";\r\n        label_2_R = \"Relative Location between Left and Right of Hand (cm)\";\r\n        label_3_L = \"Relative Location between Tip of Fingers and Finger Joints (cm)\";\r\n        label_3_R = \"Relative Location between Tip of Fingers and Finger Joints (cm)\";\r\n        label_4_L = \"Relative Location Moved (cm)\";\r\n        label_4_R = \"Relative Location Moved (cm)\";\r\n        let i = 0;\r\n        let tmp = 0;\r\n        for (i = 0; i < count_array_1_L.length; i++){\r\n          tmp = count_array_1_L[i];\r\n          count_array_1_L[i] = tmp*real_dist_h;\r\n        }\r\n        for (i = 0; i < count_array_1_R.length; i++){\r\n          tmp = count_array_1_R[i];\r\n          count_array_1_R[i] = tmp*real_dist_h;\r\n        }\r\n        for (i = 0; i < count_array_2_L.length; i++){\r\n          tmp = count_array_2_L[i];\r\n          count_array_2_L[i] = tmp*real_dist_v;\r\n        }\r\n        for (i = 0; i < count_array_2_R.length; i++){\r\n          tmp = count_array_2_R[i];\r\n          count_array_2_R[i] = tmp*real_dist_v;\r\n        }\r\n        for (i = 0; i < count_array_3_L.length; i++){\r\n          tmp = count_array_3_L[i];\r\n          count_array_3_L[i] = tmp*real_dist_h;\r\n        }\r\n        for (i = 0; i < count_array_3_R.length; i++){\r\n          tmp = count_array_3_R[i];\r\n          count_array_3_R[i] = tmp*real_dist_h;\r\n        }\r\n        for (i = 0; i < count_array_4_L.length; i++){\r\n          tmp = count_array_4_L[i];\r\n          count_array_4_L[i] = tmp*real_dist_h;\r\n        }\r\n        for (i = 0; i < count_array_4_R.length; i++){\r\n          tmp = count_array_4_R[i];\r\n          count_array_4_R[i] = tmp*real_dist_h;\r\n        }\r\n      }\r\n      else{\r\n        label_1_L = \"Distance between Index and Thumb\";\r\n        label_1_R = \"Distance between Index and Thumb\";\r\n        label_2_L = \"Relative Location between Left and Right of Hand\";\r\n        label_2_R = \"Relative Location between Left and Right of Hand\";\r\n        label_3_L = \"Relative Location between Tip of Fingers and Finger Joints\";\r\n        label_3_R = \"Relative Location between Tip of Fingers and Finger Joints\";\r\n        label_4_L = \"Relative Location Moved\";\r\n        label_4_R = \"Relative Location Moved\";\r\n      }\r\n    }\r\n    // Setup Graphs\r\n    const data1_L = {\r\n      labels: time_array_1_L,\r\n      datasets: [        \r\n        {\r\n          label: label_1_L,\r\n          fill: false,\r\n          lineTension: 0.3,\r\n          backgroundColor: 'rgba(75,192,192,0.4)',\r\n          borderColor: 'rgba(75,192,192,1)',\r\n          borderCapStyle: 'butt',\r\n          borderDash: [],\r\n          borderDashOffset: 0.0,\r\n          borderJoinStyle: 'miter',\r\n          pointBorderColor: 'rgba(75,192,192,1)',\r\n          pointBackgroundColor: '#fff',\r\n          pointBorderWidth: 1,\r\n          pointHoverRadius: 5,\r\n          pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n          pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n          pointHoverBorderWidth: 2,\r\n          pointRadius: 1,\r\n          pointHitRadius: 10,\r\n          data: count_array_1_L\r\n        }\r\n      ]\r\n    };\r\n    const data1_R = {\r\n      labels: time_array_1_R,\r\n      datasets: [        \r\n        {\r\n          label: label_1_R,\r\n          fill: false,\r\n          lineTension: 0.3,\r\n          backgroundColor: 'rgba(75,192,192,0.4)',\r\n          borderColor: 'rgba(75,192,192,1)',\r\n          borderCapStyle: 'butt',\r\n          borderDash: [],\r\n          borderDashOffset: 0.0,\r\n          borderJoinStyle: 'miter',\r\n          pointBorderColor: 'rgba(75,192,192,1)',\r\n          pointBackgroundColor: '#fff',\r\n          pointBorderWidth: 1,\r\n          pointHoverRadius: 5,\r\n          pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n          pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n          pointHoverBorderWidth: 2,\r\n          pointRadius: 1,\r\n          pointHitRadius: 10,\r\n          data: count_array_1_R\r\n        }\r\n      ]\r\n    };\r\n    const data2_L = {\r\n      labels: time_array_2_L,\r\n      datasets: [        \r\n        {\r\n          label: label_2_L,\r\n          fill: false,\r\n          lineTension: 0.1,\r\n          backgroundColor: 'rgba(192,75,192,0.4)',\r\n          borderColor: 'rgba(192,75,192,1)',\r\n          borderCapStyle: 'butt',\r\n          borderDash: [],\r\n          borderDashOffset: 0.0,\r\n          borderJoinStyle: 'miter',\r\n          pointBorderColor: 'rgba(192,75,192,1)',\r\n          pointBackgroundColor: '#fff',\r\n          pointBorderWidth: 1,\r\n          pointHoverRadius: 5,\r\n          pointHoverBackgroundColor: 'rgba(192,75,192,1)',\r\n          pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n          pointHoverBorderWidth: 2,\r\n          pointRadius: 1,\r\n          pointHitRadius: 10,\r\n          data: count_array_2_L \r\n        },\r\n      ]\r\n    };\r\n    const data2_R = {\r\n      labels: time_array_2_R,\r\n      datasets: [        \r\n        {\r\n          label: label_2_R,\r\n          fill: false,\r\n          lineTension: 0.1,\r\n          backgroundColor: 'rgba(192,75,192,0.4)',\r\n          borderColor: 'rgba(192,75,192,1)',\r\n          borderCapStyle: 'butt',\r\n          borderDash: [],\r\n          borderDashOffset: 0.0,\r\n          borderJoinStyle: 'miter',\r\n          pointBorderColor: 'rgba(192,75,192,1)',\r\n          pointBackgroundColor: '#fff',\r\n          pointBorderWidth: 1,\r\n          pointHoverRadius: 5,\r\n          pointHoverBackgroundColor: 'rgba(192,75,192,1)',\r\n          pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n          pointHoverBorderWidth: 2,\r\n          pointRadius: 1,\r\n          pointHitRadius: 10,\r\n          data: count_array_2_R \r\n        },\r\n      ]\r\n    };\r\n    const data3_L = {\r\n      labels: time_array_3_L,\r\n      datasets: [        \r\n        {\r\n          label: label_3_L,\r\n          fill: false,\r\n          lineTension: 0.1,\r\n          backgroundColor: 'rgba(192,192,75,0.4)',\r\n          borderColor: 'rgba(192,192,75,1)',\r\n          borderCapStyle: 'butt',\r\n          borderDash: [],\r\n          borderDashOffset: 0.0,\r\n          borderJoinStyle: 'miter',\r\n          pointBorderColor: 'rgba(192,192,75,1)',\r\n          pointBackgroundColor: '#fff',\r\n          pointBorderWidth: 1,\r\n          pointHoverRadius: 5,\r\n          pointHoverBackgroundColor: 'rgba(192,192,75,1)',\r\n          pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n          pointHoverBorderWidth: 2,\r\n          pointRadius: 1,\r\n          pointHitRadius: 10,\r\n          data: count_array_3_L\r\n        }\r\n      ]\r\n    };\r\n    const data3_R = {\r\n      labels: time_array_3_R,\r\n      datasets: [        \r\n        {\r\n          label: label_3_R,\r\n          fill: false,\r\n          lineTension: 0.1,\r\n          backgroundColor: 'rgba(192,192,75,0.4)',\r\n          borderColor: 'rgba(192,192,75,1)',\r\n          borderCapStyle: 'butt',\r\n          borderDash: [],\r\n          borderDashOffset: 0.0,\r\n          borderJoinStyle: 'miter',\r\n          pointBorderColor: 'rgba(192,192,75,1)',\r\n          pointBackgroundColor: '#fff',\r\n          pointBorderWidth: 1,\r\n          pointHoverRadius: 5,\r\n          pointHoverBackgroundColor: 'rgba(192,192,75,1)',\r\n          pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n          pointHoverBorderWidth: 2,\r\n          pointRadius: 1,\r\n          pointHitRadius: 10,\r\n          data: count_array_3_R\r\n        }\r\n      ]\r\n    };\r\n    const data4_L = {\r\n      labels: time_array_4_L,\r\n      datasets: [        \r\n        {\r\n          label: label_4_L,\r\n          fill: false,\r\n          lineTension: 0.1,\r\n          backgroundColor: 'rgba(75,192,75,0.4)',\r\n          borderColor: 'rgba(75,192,75,1)',\r\n          borderCapStyle: 'butt',\r\n          borderDash: [],\r\n          borderDashOffset: 0.0,\r\n          borderJoinStyle: 'miter',\r\n          pointBorderColor: 'rgba(75,192,75,1)',\r\n          pointBackgroundColor: '#fff',\r\n          pointBorderWidth: 1,\r\n          pointHoverRadius: 5,\r\n          pointHoverBackgroundColor: 'rgba(75,192,75,1)',\r\n          pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n          pointHoverBorderWidth: 2,\r\n          pointRadius: 1,\r\n          pointHitRadius: 10,\r\n          data: count_array_4_L\r\n        }\r\n      ]\r\n    };\r\n    const data4_R = {\r\n      labels: time_array_4_R,\r\n      datasets: [        \r\n        {\r\n          label: label_4_R,\r\n          fill: false,\r\n          lineTension: 0.1,\r\n          backgroundColor: 'rgba(75,192,75,0.4)',\r\n          borderColor: 'rgba(75,192,75,1)',\r\n          borderCapStyle: 'butt',\r\n          borderDash: [],\r\n          borderDashOffset: 0.0,\r\n          borderJoinStyle: 'miter',\r\n          pointBorderColor: 'rgba(75,192,75,1)',\r\n          pointBackgroundColor: '#fff',\r\n          pointBorderWidth: 1,\r\n          pointHoverRadius: 5,\r\n          pointHoverBackgroundColor: 'rgba(75,192,75,1)',\r\n          pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n          pointHoverBorderWidth: 2,\r\n          pointRadius: 1,\r\n          pointHitRadius: 10,\r\n          data: count_array_4_R\r\n        }\r\n      ]\r\n    };\r\n    this.setState({chart_data1_L:data1_L});\r\n    this.setState({chart_data1_R:data1_R});\r\n    this.setState({chart_data2_L:data2_L});\r\n    this.setState({chart_data2_R:data2_R});\r\n    this.setState({chart_data3_L:data3_L});\r\n    this.setState({chart_data3_R:data3_R});\r\n    this.setState({chart_data4_L:data4_L});\r\n    this.setState({chart_data4_R:data4_R});\r\n    this.setState({chart_ready:true});\r\n  }\r\n\r\n  switch_button(){\r\n    if (this.state.button_mode === true){\r\n      this.setState({button_mode:false});\r\n      this.compose_chart();\r\n    }\r\n    else{\r\n      this.setState({button_mode:true})\r\n    }\r\n  }\r\n\r\n  increment_tap1(){\r\n    if (this.state.last_pressed !== 1){\r\n      let current_moment = (Date.now() - this.state.startAt)/1000\r\n      this.setState({last_pressed:1})\r\n      this.setState({dist_array:[...this.state.dist_array, 1.0]});\r\n      this.setState({dist_time_array:[...this.state.dist_time_array, current_moment]});\r\n      this.setState({tap_count:[...this.state.tap_count, current_moment]});\r\n    }\r\n  }\r\n\r\n  increment_tap2(){\r\n    if (this.state.last_pressed !== 2){\r\n      let current_moment = (Date.now() - this.state.startAt)/1000\r\n      this.setState({last_pressed:2})\r\n      this.setState({dist_array:[...this.state.dist_array, 1.0]});\r\n      this.setState({dist_time_array:[...this.state.dist_time_array, current_moment]});\r\n      this.setState({tap_count:[...this.state.tap_count, current_moment]});\r\n    }\r\n  }\r\n\r\n  norm(lm1, lm2){\r\n    return sqrt(pow(lm1[0]-lm2[0], 2)+pow(lm1[1]-lm2[1], 2))\r\n  }\r\n\r\n  reset_counter(){\r\n    clearInterval(this.state.ID);\r\n    const ctx = this.canvasRef.current.getContext(\"2d\");\r\n    ctx.clearRect(0,0, this.canvasRef.current.width, this.canvasRef.current.height);\r\n    this.setState({\r\n      ID : 0,\r\n      tap_count : [],\r\n      rotate_count : [],\r\n      fist_count : [],\r\n      last_hand_L: [],\r\n      last_hand_R: [],\r\n      index_passed : 0,\r\n      min_dist: 0,\r\n      max_dist: 99.0,\r\n      rotate_passed : 0,\r\n      last_pressed:0,\r\n\r\n      real_time_inferencing:false,\r\n      recording:false,\r\n      button_mode:false,\r\n      chart_ready:false,\r\n      finger_done : false,\r\n      rotate_done : false,\r\n      fist_done : false,\r\n\r\n      hand_dist_array_L : [],\r\n      hand_dist_array_R : [],\r\n      hand_rotate_array_L : [],\r\n      hand_rotate_array_R : [],\r\n      hand_fist_array_L : [],\r\n      hand_fist_array_R : [],\r\n      hand_still_array_L : [],\r\n      hand_still_array_R : [],\r\n\r\n      dist_array_L : [],\r\n      dist_time_array_L : [],\r\n      dist_record_L : [],\r\n      dist_time_record_L : [],\r\n      dist_array_R : [],\r\n      dist_time_array_R : [],\r\n      dist_record_R : [],\r\n      dist_time_record_R : [],\r\n\r\n      rotate_array_L : [],\r\n      rotate_time_array_L : [],\r\n      rotate_record_L : [],\r\n      rotate_time_record_L : [],\r\n      rotate_array_R : [],\r\n      rotate_time_array_R : [],\r\n      rotate_record_R : [],\r\n      rotate_time_record_R : [],\r\n\r\n      fist_array_L : [],\r\n      fist_time_array_L : [],\r\n      fist_record_L : [],\r\n      fist_time_record_L : [],\r\n      fist_array_R : [],\r\n      fist_time_array_R : [],\r\n      fist_record_R : [],\r\n      fist_time_record_R : [],\r\n\r\n      still_array_L : [],\r\n      still_time_array_L : [],\r\n      still_record_L : [],\r\n      still_time_record_L : [],\r\n      still_array_R : [],\r\n      still_time_array_R : [],\r\n      still_record_R : [],\r\n      still_time_record_R : [],\r\n\r\n      chart_data1_L : null,\r\n      chart_data1_R : null,\r\n      chart_data2_L : null,\r\n      chart_data2_R : null,\r\n      chart_data3_L : null,\r\n      chart_data3_R : null,\r\n      chart_data4_L : null,\r\n      chart_data4_R : null,\r\n\r\n      stage:0,\r\n      wait : false,\r\n      wait_till : 0,\r\n\r\n      startAt: Date.now(),\r\n      dead_frame: 0,\r\n      raw: true,\r\n      facingMode: \"user\",\r\n      avg_fps: 0,\r\n    });\r\n  }\r\n\r\n  sleep = (milliseconds) => {\r\n    return new Promise(resolve => setTimeout(resolve, milliseconds))\r\n  }\r\n\r\n  async runHandpose() {\r\n    const ctx = this.canvasRef.current.getContext(\"2d\");\r\n    writeText(ctx, { text: 'Loading', x: 180, y: 70 });\r\n    require('@tensorflow/tfjs-backend-webgl');\r\n    const net = await handpose.load();\r\n    ctx.clearRect(0,0, this.canvasRef.current.width, this.canvasRef.current.height);\r\n    //const uploadJSONInput = document.getElementById('upload-json');\r\n    //const uploadWeightsInput = document.getElementById('upload-weights');\r\n    //const model = await tf.loadLayersModel(tf.io.browserFiles([uploadJSONInput.files[0], uploadWeightsInput.files[0]]));\r\n    console.log(\"Handpose model loaded.\");\r\n    this.setState({startAt:Date.now()});\r\n    const Interval_ID = setInterval(() => {\r\n      this.real_time_inference(net);\r\n    }, this.capture_interval);\r\n    this.setState({ID:Interval_ID,\r\n      real_time_inferencing:true,\r\n      wait:true,\r\n      stage:this.state.stage + 1});\r\n  };\r\n\r\n  async real_time_inference(net) {\r\n    if (this.state.wait){\r\n      this.setState({wait_till:Date.now()+3000});\r\n      this.setState({wait:false});\r\n    }\r\n    if (\r\n      typeof this.webcamRef.current !== \"undefined\" &&\r\n      this.webcamRef.current !== null &&\r\n      this.webcamRef.current.video.readyState === 4\r\n    ) {\r\n      const video = this.webcamRef.current.video;\r\n      const videoWidth = this.webcamRef.current.video.videoWidth;\r\n      const videoHeight = this.webcamRef.current.video.videoHeight;\r\n      this.webcamRef.current.video.width = videoWidth;\r\n      this.webcamRef.current.video.height = videoHeight;\r\n      this.canvasRef.current.width = videoWidth;\r\n      this.canvasRef.current.height = videoHeight;\r\n      const hand = await net.estimateHands(video);\r\n      const ctx = this.canvasRef.current.getContext(\"2d\");\r\n      \r\n      //check if waiting\r\n      if (Date.now() < this.state.wait_till){\r\n        if (hand.length > 0) drawHand_tap (hand, ctx);\r\n        \r\n        //count down 3, 2, 1\r\n        if (this.state.wait_till - Date.now() < 1000) writeText(ctx, { text: '1', x: 180, y: 70 });\r\n        else if (this.state.wait_till - Date.now() < 2000) writeText(ctx, { text: '2', x: 140, y: 70 });\r\n        else if (this.state.wait_till - Date.now() < 3000) writeText(ctx, { text: '3', x: 100, y: 70 });\r\n      }\r\n      else {\r\n        switch(this.state.stage){\r\n          case 1:\r\n            this.setState({hand_dist_array_L:[...this.state.hand_dist_array_L, hand]});\r\n            break;\r\n          case 2:\r\n            this.setState({hand_dist_array_R:[...this.state.hand_dist_array_R, hand]});\r\n            break;\r\n          case 3:\r\n            this.setState({hand_rotate_array_L:[...this.state.hand_rotate_array_L, hand]});\r\n            break;\r\n          case 4:\r\n            this.setState({hand_rotate_array_R:[...this.state.hand_rotate_array_R, hand]});\r\n            break;\r\n          case 5:\r\n            this.setState({hand_fist_array_L:[...this.state.hand_fist_array_L, hand]});\r\n            break;\r\n          case 6:\r\n            this.setState({hand_fist_array_R:[...this.state.hand_fist_array_R, hand]});\r\n            break;\r\n          case 7:\r\n            this.setState({hand_still_array_L:[...this.state.hand_still_array_L, hand]});\r\n            break;\r\n          case 8:\r\n            this.setState({hand_still_array_R:[...this.state.hand_still_array_R, hand]});\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n        if (hand.length > 0){\r\n          hand.forEach((prediction) => {\r\n            this.setState({dead_frame: 0});\r\n            const landmarks = prediction.landmarks\r\n\r\n            let pawn_dist = this.norm(landmarks[0], landmarks[2]);\r\n            let y_dist = this.norm(landmarks[0], landmarks[12]);\r\n            let current_moment = (Date.now() - this.state.startAt)/1000\r\n            let index_dist = null;\r\n            let current_dist = null;\r\n            let rotate_dist = null;\r\n            let fist_dist = null;\r\n            let max_move = null;\r\n            let pinky_rest = null;\r\n            let ring_rest = null;\r\n            let middle_rest = null;\r\n            let index_rest = null;\r\n            let thumb_rest = null;\r\n\r\n            switch (this.state.stage){\r\n              case 1:\r\n                drawHand_tap (hand, ctx);\r\n                index_dist = this.norm(landmarks[4], landmarks[8]);\r\n                current_dist = index_dist/pawn_dist;\r\n                this.setState({dist_array_L:[...this.state.dist_array_L, current_dist],\r\n                  dist_time_array_L:[...this.state.dist_time_array_L, current_moment],\r\n                });\r\n                if (this.state.index_passed === 0 && (current_dist - this.state.min_dist) > 0.2){\r\n                  this.setState({index_passed:1,\r\n                    max_dist: current_dist});\r\n                }\r\n                if (this.state.index_passed === 1 && current_dist > this.state.max_dist){\r\n                  this.setState({max_dist: current_dist});\r\n                }\r\n                if (this.state.index_passed === 1 && (this.state.max_dist - current_dist) > 0.2){\r\n                  this.setState({index_passed:0,\r\n                    min_dist: current_dist,\r\n                    tap_count:[...this.state.tap_count, current_moment]});\r\n                }\r\n                if (this.state.index_passed === 0 && current_dist < this.state.min_dist){\r\n                  this.setState({min_dist: current_dist});\r\n                }\r\n                break;\r\n              case 2:\r\n                drawHand_tap (hand, ctx);\r\n                index_dist = this.norm(landmarks[4], landmarks[8]);\r\n                current_dist = index_dist/pawn_dist;\r\n                this.setState({dist_array_R:[...this.state.dist_array_R, current_dist],\r\n                  dist_time_array_R:[...this.state.dist_time_array_R, current_moment],\r\n                });\r\n                if (this.state.index_passed === 0 && (current_dist - this.state.min_dist) > 0.2){\r\n                  this.setState({index_passed:1,\r\n                    max_dist: current_dist});\r\n                }\r\n                if (this.state.index_passed === 1 && current_dist > this.state.max_dist){\r\n                  this.setState({max_dist: current_dist});\r\n                }\r\n                if (this.state.index_passed === 1 && (this.state.max_dist - current_dist) > 0.2){\r\n                  this.setState({index_passed:0,\r\n                    min_dist: current_dist,\r\n                    tap_count:[...this.state.tap_count, current_moment]});\r\n                }\r\n                if (this.state.index_passed === 0 && current_dist < this.state.min_dist){\r\n                  this.setState({min_dist: current_dist});\r\n                }\r\n                break;\r\n              case 3:\r\n                drawHand_rotate (hand, ctx, this.state.rotate_passed);\r\n                rotate_dist = (landmarks[2][0] - landmarks[17][0]) / y_dist;\r\n                this.setState({rotate_array_L:[...this.state.rotate_array_L, rotate_dist],\r\n                  rotate_time_array_L:[...this.state.rotate_time_array_L, current_moment],\r\n                });\r\n                if (this.state.rotate_passed === 0){\r\n                  if (rotate_dist >= 0.2) this.setState({rotate_passed:1});\r\n                  if (rotate_dist <= -0.2) this.setState({rotate_passed:-1});\r\n                }\r\n                if (this.state.rotate_passed === 1 && rotate_dist <= -0.2){\r\n                  this.setState({rotate_passed:-1});\r\n                }\r\n                if (this.state.rotate_passed === -1 && rotate_dist >= 0.2){\r\n                  this.setState({rotate_passed:1,\r\n                    rotate_count:[...this.state.rotate_count, current_moment]});\r\n                }\r\n                break;\r\n              case 4:\r\n                drawHand_rotate (hand, ctx, this.state.rotate_passed);\r\n                rotate_dist = (landmarks[2][0] - landmarks[17][0]) / y_dist;\r\n                this.setState({rotate_array_R:[...this.state.rotate_array_R, rotate_dist],\r\n                  rotate_time_array_R:[...this.state.rotate_time_array_R, current_moment],\r\n                });\r\n                if (this.state.rotate_passed === 0){\r\n                  if (rotate_dist >= 0.2) this.setState({rotate_passed:1});\r\n                  if (rotate_dist <= -0.2) this.setState({rotate_passed:-1});\r\n                }\r\n                if (this.state.rotate_passed === 1 && rotate_dist <= -0.2){\r\n                  this.setState({rotate_passed:-1});\r\n                }\r\n                if (this.state.rotate_passed === -1 && rotate_dist >= 0.2){\r\n                  this.setState({rotate_passed:1,\r\n                    rotate_count:[...this.state.rotate_count, current_moment]});\r\n                }\r\n                break;\r\n              case 5:\r\n                drawHand_fist (hand, ctx, this.state.fist_passed);\r\n                fist_dist =((landmarks[8][1] - landmarks[5][1])+\r\n                            (landmarks[12][1] - landmarks[9][1])+\r\n                            (landmarks[16][1] - landmarks[13][1])+\r\n                            (landmarks[20][1] - landmarks[17][1]))/\r\n                            (4*pawn_dist)\r\n                this.setState({fist_array_L:[...this.state.fist_array_L, fist_dist],\r\n                  fist_time_array_L:[...this.state.fist_time_array_L, current_moment],\r\n                });\r\n                if (fist_dist >= 0.0){this.setState({fist_passed:1})}\r\n                if (fist_dist < -0.4 && this.state.fist_passed === 1){\r\n                  this.setState({fist_passed:0,\r\n                    fist_count:[...this.state.fist_count, current_moment]});\r\n                }\r\n                break;\r\n              case 6:\r\n                drawHand_fist (hand, ctx, this.state.fist_passed);\r\n                fist_dist =((landmarks[8][1] - landmarks[5][1])+\r\n                            (landmarks[12][1] - landmarks[9][1])+\r\n                            (landmarks[16][1] - landmarks[13][1])+\r\n                            (landmarks[20][1] - landmarks[17][1]))/\r\n                            (4*pawn_dist)\r\n                this.setState({fist_array_R:[...this.state.fist_array_R, fist_dist],\r\n                  fist_time_array_R:[...this.state.fist_time_array_R, current_moment],\r\n                });\r\n                if (fist_dist >= 0.0){this.setState({fist_passed:1})}\r\n                if (fist_dist < -0.4 && this.state.fist_passed === 1){\r\n                  this.setState({fist_passed:0,\r\n                    fist_count:[...this.state.fist_count, current_moment]});\r\n                }\r\n                break;\r\n              case 7:\r\n                max_move = 0.0;\r\n                if (this.state.last_hand_L.length > 0){\r\n                  let moved = [];\r\n                  pinky_rest = Math.abs(this.norm(landmarks[0], landmarks[4]) - this.norm(this.state.last_hand_L[0], this.state.last_hand_L[4]))/pawn_dist;\r\n                  ring_rest = Math.abs(this.norm(landmarks[0], landmarks[8]) - this.norm(this.state.last_hand_L[0], this.state.last_hand_L[8]))/pawn_dist;\r\n                  middle_rest = Math.abs(this.norm(landmarks[0], landmarks[12]) - this.norm(this.state.last_hand_L[0], this.state.last_hand_L[12]))/pawn_dist;\r\n                  index_rest = Math.abs(this.norm(landmarks[0], landmarks[16]) - this.norm(this.state.last_hand_L[0], this.state.last_hand_L[16]))/pawn_dist;\r\n                  thumb_rest = Math.abs(this.norm(landmarks[0], landmarks[20]) - this.norm(this.state.last_hand_L[0], this.state.last_hand_L[20]))/pawn_dist;\r\n                  if (pinky_rest > 0.2) moved = [...moved, 4];\r\n                  if (ring_rest > 0.2) moved = [...moved, 8];\r\n                  if (middle_rest > 0.2) moved = [...moved, 12];\r\n                  if (index_rest > 0.2) moved = [...moved, 16];\r\n                  if (thumb_rest > 0.2) moved = [...moved, 20];\r\n                  max_move = Math.max(pinky_rest, ring_rest, middle_rest, index_rest, thumb_rest);\r\n                  if (max_move > this.state.max_tremor_L) this.setState({max_tremor_L:max_move});\r\n                  drawHand_still (hand, ctx, moved);\r\n                }\r\n                else{\r\n                  this.setState({last_hand_L: landmarks});\r\n                }\r\n                this.setState({still_array_L:[...this.state.still_array_L, max_move],\r\n                  still_time_array_L:[...this.state.still_time_array_L, current_moment],\r\n                });\r\n                break;\r\n              case 8:\r\n                max_move = 0.0;\r\n                if (this.state.last_hand_R.length > 0){\r\n                  let moved = [];\r\n                  pinky_rest = Math.abs(this.norm(landmarks[0], landmarks[4]) - this.norm(this.state.last_hand_R[0], this.state.last_hand_R[4]))/pawn_dist;\r\n                  ring_rest = Math.abs(this.norm(landmarks[0], landmarks[8]) - this.norm(this.state.last_hand_R[0], this.state.last_hand_R[8]))/pawn_dist;\r\n                  middle_rest = Math.abs(this.norm(landmarks[0], landmarks[12]) - this.norm(this.state.last_hand_R[0], this.state.last_hand_R[12]))/pawn_dist;\r\n                  index_rest = Math.abs(this.norm(landmarks[0], landmarks[16]) - this.norm(this.state.last_hand_R[0], this.state.last_hand_R[16]))/pawn_dist;\r\n                  thumb_rest = Math.abs(this.norm(landmarks[0], landmarks[20]) - this.norm(this.state.last_hand_R[0], this.state.last_hand_R[20]))/pawn_dist;\r\n                  if (pinky_rest > 0.2) moved = [...moved, 4];\r\n                  if (ring_rest > 0.2) moved = [...moved, 8];\r\n                  if (middle_rest > 0.2) moved = [...moved, 12];\r\n                  if (index_rest > 0.2) moved = [...moved, 16];\r\n                  if (thumb_rest > 0.2) moved = [...moved, 20];\r\n                  max_move = Math.max(pinky_rest, ring_rest, middle_rest, index_rest, thumb_rest);\r\n                  if (max_move > this.state.max_tremor_R) this.setState({max_tremor_R:max_move});\r\n                  drawHand_still (hand, ctx, moved);\r\n                }\r\n                else{\r\n                  this.setState({last_hand_R: landmarks});\r\n                }\r\n                this.setState({still_array_R:[...this.state.still_array_R, max_move],\r\n                  still_time_array_R:[...this.state.still_time_array_R, current_moment],\r\n                });\r\n                break;\r\n              default:\r\n                console.log(\"Should Not Print\");\r\n                break;\r\n            }\r\n          });\r\n        }\r\n        else {\r\n          // Warning message for hand off screen\r\n          if (this.state.dead_frame > 9) writeText(ctx, { text: 'Hand Off Screen', x: 180, y: 70 });\r\n          this.setState({dead_frame: this.state.dead_frame + 1});\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  async next_step(){\r\n    if (this.state.stage !== 8)\r\n      this.setState({stage:this.state.stage + 1,\r\n        wait:true});\r\n    else{\r\n      clearInterval(this.state.ID);\r\n      if (this.state.recording === true) await this.inference();\r\n      this.setState({real_time_inferencing:false,\r\n        recording:false,\r\n        stage:0});\r\n      this.compose_chart();\r\n      const ctx = this.canvasRef.current.getContext(\"2d\");\r\n      ctx.clearRect(0,0, this.canvasRef.current.width, this.canvasRef.current.height);\r\n    }\r\n  }\r\n\r\n  async stop_tapping() {\r\n    this.setState({finger_done:true});\r\n    this.setState({wait:true});\r\n  }\r\n\r\n  async stop_rotating() {\r\n    this.setState({rotate_done:true});\r\n    this.setState({wait:true});\r\n  }\r\n\r\n  async stop_gripping() {\r\n    this.setState({fist_done:true});\r\n    this.setState({wait:true});\r\n  }\r\n\r\n  stop_real_time_inference() {\r\n    clearInterval(this.state.ID);\r\n    this.setState({real_time_inferencing:false,\r\n                   finger_done:false,\r\n                   rotate_done:false,\r\n                   fist_done:false});\r\n    this.compose_chart();\r\n    const ctx = this.canvasRef.current.getContext(\"2d\");\r\n    ctx.clearRect(0,0, this.canvasRef.current.width, this.canvasRef.current.height);\r\n  }\r\n\r\n  async record_video(){\r\n    this.setState({startAt:Date.now()});\r\n    console.log(\"Handpose model loaded.\");\r\n    const Interval_ID = setInterval(() => {\r\n      this.concat_frame();\r\n    }, this.capture_interval);\r\n    this.setState({ID:Interval_ID,\r\n      recording:true,\r\n      wait:true,\r\n      stage:this.state.stage + 1});\r\n  }\r\n\r\n  async concat_frame() {\r\n    if (this.state.wait){\r\n      this.setState({wait_till:Date.now()+3000,\r\n        wait:false});\r\n    }\r\n    if (\r\n      typeof this.webcamRef.current !== \"undefined\" &&\r\n      this.webcamRef.current !== null &&\r\n      this.webcamRef.current.video.readyState === 4\r\n    ) {\r\n      if (Date.now() < this.state.wait_till){\r\n        //console.log(\"Waiting till \", this.state.wait_till);\r\n        //count down 3, 2, 1\r\n        const ctx = this.canvasRef.current.getContext(\"2d\");\r\n        if (this.state.wait_till - Date.now() < 250) ctx.clearRect(0,0, this.canvasRef.current.width, this.canvasRef.current.height);\r\n        else if (this.state.wait_till - Date.now() < 1000) writeText(ctx, { text: '1', x: 180, y: 70 });\r\n        else if (this.state.wait_till - Date.now() < 2000) writeText(ctx, { text: '2', x: 140, y: 70 });\r\n        else if (this.state.wait_till - Date.now() < 3000) writeText(ctx, { text: '3', x: 100, y: 70 });\r\n      }\r\n      else {\r\n        let current_moment = (Date.now() - this.state.startAt)/1000;\r\n        const image = this.webcamRef.current.getScreenshot();      \r\n        var img = document.createElement(\"img\");\r\n        img.src = image;\r\n        img.onload = function(){\r\n          switch (this.state.stage){\r\n            case 1:\r\n              this.setState({dist_record_L:[...this.state.dist_record_L, img],\r\n                dist_time_record_L:[...this.state.dist_time_record_L, current_moment]});\r\n              break;\r\n            case 2:\r\n              this.setState({dist_record_R:[...this.state.dist_record_R, img],\r\n                dist_time_record_R:[...this.state.dist_time_record_R, current_moment]});\r\n              break;\r\n            case 3:\r\n              this.setState({rotate_record_L:[...this.state.rotate_record_L, img],\r\n                rotate_time_record_L:[...this.state.rotate_time_record_L, current_moment]});\r\n              break;\r\n            case 4:\r\n              this.setState({rotate_record_R:[...this.state.rotate_record_R, img],\r\n                rotate_time_record_R:[...this.state.rotate_time_record_R, current_moment]});\r\n              break;\r\n            case 5:\r\n              this.setState({fist_record_L:[...this.state.fist_record_L, img],\r\n                fist_time_record_L:[...this.state.fist_time_record_L, current_moment]});\r\n              break;\r\n            case 6:\r\n              this.setState({fist_record_R:[...this.state.fist_record_R, img],\r\n                fist_time_record_R:[...this.state.fist_time_record_R, current_moment]});\r\n              break;\r\n            case 7:\r\n              this.setState({still_record_L:[...this.state.still_record_L, img],\r\n                still_time_record_L:[...this.state.still_time_record_L, current_moment]});\r\n              break;\r\n            case 8:\r\n              this.setState({still_record_R:[...this.state.still_record_R, img],\r\n                still_time_record_R:[...this.state.still_time_record_R, current_moment]});\r\n              break;\r\n            default:\r\n              console.log('Should print this');\r\n              break;\r\n          }\r\n        }.bind(this)\r\n      }\r\n    }\r\n  }\r\n\r\n  async inference() {\r\n    require('@tensorflow/tfjs-backend-webgl');\r\n    const net = await handpose.load();\r\n    console.log(\"Handpose model loaded.\");\r\n\r\n    // Run prediction on recorded tapping data\r\n    for (let i = 0; i<this.state.dist_record_L.length; i++){\r\n      const hand = await net.estimateHands(this.state.dist_record_L[i]);\r\n      if (hand.length > 0){\r\n        hand.forEach((prediction) => {\r\n          // Calculate relative distance\r\n          const landmarks = prediction.landmarks;\r\n          let current_moment = (Date.now() - this.state.startAt)/1000\r\n          let index_dist = this.norm(landmarks[4], landmarks[8]);\r\n          let pawn_dist = this.norm(landmarks[0], landmarks[2]);\r\n          let current_dist = index_dist/pawn_dist;\r\n          this.setState({dist_array_L:[...this.state.dist_array_L, current_dist],\r\n            dist_time_array_L:[...this.state.dist_time_array_L, current_moment],\r\n          });\r\n          if (this.state.index_passed === 0 && (current_dist - this.state.min_dist) > 0.2){\r\n            this.setState({index_passed:1,\r\n              max_dist: current_dist});\r\n          }\r\n          if (this.state.index_passed === 1 && current_dist > this.state.max_dist){\r\n            this.setState({max_dist: current_dist});\r\n          }\r\n          if (this.state.index_passed === 1 && (this.state.max_dist - current_dist) > 0.2){\r\n            this.setState({index_passed:0,\r\n              min_dist: current_dist,\r\n              tap_count:[...this.state.tap_count, current_moment]});\r\n          }\r\n          if (this.state.index_passed === 0 && current_dist < this.state.min_dist){\r\n            this.setState({min_dist: current_dist});\r\n          }\r\n          console.log(\"INDEX COUNT:\", this.state.tap_count);\r\n        });\r\n      }\r\n    }\r\n    for (let i = 0; i<this.state.dist_record_R.length; i++){\r\n      const hand = await net.estimateHands(this.state.dist_record_R[i]);\r\n      if (hand.length > 0){\r\n        hand.forEach((prediction) => {\r\n          // Calculate relative distance\r\n          const landmarks = prediction.landmarks;\r\n          let current_moment = (Date.now() - this.state.startAt)/1000\r\n          let index_dist = this.norm(landmarks[4], landmarks[8]);\r\n          let pawn_dist = this.norm(landmarks[0], landmarks[2]);\r\n          let current_dist = index_dist/pawn_dist;\r\n          this.setState({dist_array_R:[...this.state.dist_array_R, current_dist],\r\n            dist_time_array_R:[...this.state.dist_time_array_R, current_moment],\r\n          });\r\n          if (this.state.index_passed === 0 && (current_dist - this.state.min_dist) > 0.2){\r\n            this.setState({index_passed:1,\r\n              max_dist: current_dist});\r\n          }\r\n          if (this.state.index_passed === 1 && current_dist > this.state.max_dist){\r\n            this.setState({max_dist: current_dist});\r\n          }\r\n          if (this.state.index_passed === 1 && (this.state.max_dist - current_dist) > 0.2){\r\n            this.setState({index_passed:0,\r\n              min_dist: current_dist,\r\n              tap_count:[...this.state.tap_count, current_moment]});\r\n          }\r\n          if (this.state.index_passed === 0 && current_dist < this.state.min_dist){\r\n            this.setState({min_dist: current_dist});\r\n          }\r\n          console.log(\"INDEX COUNT:\", this.state.tap_count);\r\n        });\r\n      }\r\n    }\r\n    // Run prediction on recorded rotation data\r\n    for (let i = 0; i<this.state.rotate_record_L.length; i++){\r\n      const hand = await net.estimateHands(this.state.rotate_record_L[i]);\r\n      if (hand.length > 0){\r\n        hand.forEach((prediction) => {\r\n          const landmarks = prediction.landmarks;\r\n          let current_moment = (Date.now() - this.state.startAt)/1000\r\n          let pawn_dist = this.norm(landmarks[0], landmarks[12]);\r\n          let rotate_dist = (landmarks[2][0] - landmarks[17][0]) / pawn_dist;\r\n          this.setState({rotate_array_L:[...this.state.rotate_array_L, rotate_dist],\r\n            rotate_time_array_L:[...this.state.rotate_time_array_L, current_moment],\r\n          });\r\n          if (this.state.rotate_passed === 0){\r\n            if (rotate_dist >= 0.2) this.setState({rotate_passed:1});\r\n            if (rotate_dist <= -0.2) this.setState({rotate_passed:-1});\r\n          }\r\n          if (this.state.rotate_passed === 1 && rotate_dist <= -0.2){\r\n            this.setState({rotate_passed:-1});\r\n          }\r\n          if (this.state.rotate_passed === -1 && rotate_dist >= 0.2){\r\n            this.setState({rotate_passed:1,\r\n              rotate_count:[...this.state.rotate_count, current_moment]});\r\n          }\r\n          console.log(\"ROTATE COUNT:\", this.state.rotate_count);\r\n        });\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i<this.state.rotate_record_R.length; i++){\r\n      const hand = await net.estimateHands(this.state.rotate_record_R[i]);\r\n      if (hand.length > 0){\r\n        hand.forEach((prediction) => {\r\n          const landmarks = prediction.landmarks;\r\n          let current_moment = (Date.now() - this.state.startAt)/1000\r\n          let pawn_dist = this.norm(landmarks[0], landmarks[12]);\r\n          let rotate_dist = (landmarks[2][0] - landmarks[17][0]) / pawn_dist;\r\n          this.setState({rotate_array_R:[...this.state.rotate_array_R, rotate_dist],\r\n            rotate_time_array_R:[...this.state.rotate_time_array_R, current_moment],\r\n          });\r\n          if (this.state.rotate_passed === 0){\r\n            if (rotate_dist >= 0.2) this.setState({rotate_passed:1});\r\n            if (rotate_dist <= -0.2) this.setState({rotate_passed:-1});\r\n          }\r\n          if (this.state.rotate_passed === 1 && rotate_dist <= -0.2){\r\n            this.setState({rotate_passed:-1});\r\n          }\r\n          if (this.state.rotate_passed === -1 && rotate_dist >= 0.2){\r\n            this.setState({rotate_passed:1,\r\n              rotate_count:[...this.state.rotate_count, current_moment]});\r\n          }\r\n          console.log(\"ROTATE COUNT:\", this.state.rotate_count);\r\n        });\r\n      }\r\n    }\r\n\r\n    // Run prediction on recorded gripping data\r\n    for (let i = 0; i<this.state.fist_record_L.length; i++){\r\n      const hand = await net.estimateHands(this.state.fist_record_L[i]);\r\n      if (hand.length > 0){\r\n        hand.forEach((prediction) => {\r\n          const landmarks = prediction.landmarks;\r\n          let current_moment = (Date.now() - this.state.startAt)/1000\r\n          let pawn_dist = this.norm(landmarks[0], landmarks[2]);\r\n          let fist_dist =((landmarks[8][1] - landmarks[5][1])+\r\n                          (landmarks[12][1] - landmarks[9][1])+\r\n                          (landmarks[16][1] - landmarks[13][1])+\r\n                          (landmarks[20][1] - landmarks[17][1]))/\r\n                          (4*pawn_dist)\r\n          this.setState({fist_array_L:[...this.state.fist_array_L, fist_dist],\r\n            fist_time_array_L:[...this.state.fist_time_array_L, current_moment],\r\n          });\r\n          if (fist_dist >= 0.0){this.setState({fist_passed:1})}\r\n          if (fist_dist < -0.4 && this.state.fist_passed === 1){\r\n            this.setState({fist_passed:0,\r\n              fist_count:[...this.state.fist_count, current_moment]});\r\n          }\r\n          console.log(\"FIST COUNT:\", this.state.fist_count);\r\n        });\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i<this.state.fist_record_R.length; i++){\r\n      const hand = await net.estimateHands(this.state.fist_record_R[i]);\r\n      if (hand.length > 0){\r\n        hand.forEach((prediction) => {\r\n          const landmarks = prediction.landmarks;\r\n          let current_moment = (Date.now() - this.state.startAt)/1000;\r\n          let pawn_dist = this.norm(landmarks[0], landmarks[2]);\r\n          let fist_dist =((landmarks[8][1] - landmarks[5][1])+\r\n                          (landmarks[12][1] - landmarks[9][1])+\r\n                          (landmarks[16][1] - landmarks[13][1])+\r\n                          (landmarks[20][1] - landmarks[17][1]))/\r\n                          (4*pawn_dist)\r\n          this.setState({fist_array_R:[...this.state.fist_array_R, fist_dist],\r\n            fist_time_array_R:[...this.state.fist_time_array_R, current_moment],\r\n          });\r\n          if (fist_dist >= 0.0){this.setState({fist_passed:1})}\r\n          if (fist_dist < -0.4 && this.state.fist_passed === 1){\r\n            this.setState({fist_passed:0,\r\n              fist_count:[...this.state.fist_count, current_moment]});\r\n          }\r\n          console.log(\"FIST COUNT:\", this.state.fist_count);\r\n        });\r\n      }\r\n    }\r\n\r\n    // Run prediction on recorded postural data\r\n    for (let i = 0; i<this.state.still_record_L.length; i++){\r\n      const hand = await net.estimateHands(this.state.still_record_L[i]);\r\n      if (hand.length > 0){\r\n        hand.forEach((prediction) => {\r\n          const landmarks = prediction.landmarks;\r\n          let current_moment = (Date.now() - this.state.startAt)/1000\r\n          let max_move = 0.0;\r\n          let pawn_dist = this.norm(landmarks[0], landmarks[2]);\r\n          if (this.state.last_hand_L.length > 0){\r\n            let pinky_rest = Math.abs(this.norm(landmarks[0], landmarks[4]) - this.norm(this.state.last_hand_L[0], this.state.last_hand_L[4]))/pawn_dist;\r\n            let ring_rest = Math.abs(this.norm(landmarks[0], landmarks[8]) - this.norm(this.state.last_hand_L[0], this.state.last_hand_L[8]))/pawn_dist;\r\n            let middle_rest = Math.abs(this.norm(landmarks[0], landmarks[12]) - this.norm(this.state.last_hand_L[0], this.state.last_hand_L[12]))/pawn_dist;\r\n            let index_rest = Math.abs(this.norm(landmarks[0], landmarks[16]) - this.norm(this.state.last_hand_L[0], this.state.last_hand_L[16]))/pawn_dist;\r\n            let thumb_rest = Math.abs(this.norm(landmarks[0], landmarks[20]) - this.norm(this.state.last_hand_L[0], this.state.last_hand_L[20]))/pawn_dist;\r\n            max_move = Math.max(pinky_rest, ring_rest, middle_rest, index_rest, thumb_rest);\r\n            if (max_move > this.state.max_tremor_L) this.setState({max_tremor_L:max_move});\r\n          }\r\n          else{\r\n            this.setState({last_hand_L: landmarks});\r\n          }\r\n          this.setState({still_array_L:[...this.state.still_array_L, max_move],\r\n            still_time_array_L:[...this.state.still_time_array_L, current_moment],\r\n          });\r\n        })\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i<this.state.still_record_R.length; i++){\r\n      const hand = await net.estimateHands(this.state.still_record_R[i]);\r\n      if (hand.length > 0){\r\n        hand.forEach((prediction) => {\r\n          const landmarks = prediction.landmarks\r\n          let current_moment = (Date.now() - this.state.startAt)/1000\r\n          let max_move = 0.0;\r\n          let pawn_dist = this.norm(landmarks[0], landmarks[2]);\r\n          if (this.state.last_hand_R.length > 0){\r\n            let pinky_rest = Math.abs(this.norm(landmarks[0], landmarks[4]) - this.norm(this.state.last_hand_L[0], this.state.last_hand_L[4]))/pawn_dist;\r\n            let ring_rest = Math.abs(this.norm(landmarks[0], landmarks[8]) - this.norm(this.state.last_hand_L[0], this.state.last_hand_L[8]))/pawn_dist;\r\n            let middle_rest = Math.abs(this.norm(landmarks[0], landmarks[12]) - this.norm(this.state.last_hand_L[0], this.state.last_hand_L[12]))/pawn_dist;\r\n            let index_rest = Math.abs(this.norm(landmarks[0], landmarks[16]) - this.norm(this.state.last_hand_L[0], this.state.last_hand_L[16]))/pawn_dist;\r\n            let thumb_rest = Math.abs(this.norm(landmarks[0], landmarks[20]) - this.norm(this.state.last_hand_L[0], this.state.last_hand_L[20]))/pawn_dist;\r\n            max_move = Math.max(pinky_rest, ring_rest, middle_rest, index_rest, thumb_rest);\r\n            if (max_move > this.state.max_tremor_R) this.setState({max_tremor_R:max_move});\r\n          }\r\n          else{\r\n            this.setState({last_hand_R: landmarks});\r\n          }\r\n          this.setState({still_array_R:[...this.state.still_array_R, max_move],\r\n            still_time_array_R:[...this.state.still_time_array_R, current_moment],\r\n          });\r\n        })\r\n      }\r\n    }\r\n\r\n    this.setState({record:[]});\r\n  }\r\n\r\n  async stop_record() {\r\n    clearInterval(this.state.ID);\r\n    await this.inference();\r\n    this.setState({recording:false,\r\n      finger_done:false,\r\n      rotate_done:false,\r\n      fist_done:false});\r\n    this.compose_chart();\r\n  }\r\n\r\n  exportToJson = (objectData, filename) => {\r\n    let contentType = \"application/json;charset=utf-8;\";\r\n    if (window.navigator && window.navigator.msSaveOrOpenBlob) {\r\n      var blob = new Blob([decodeURIComponent(encodeURI(JSON.stringify(objectData)))], { type: contentType });\r\n      navigator.msSaveOrOpenBlob(blob, filename);\r\n    } else {\r\n      var a = document.createElement('a');\r\n      a.download = filename;\r\n      a.href = 'data:' + contentType + ',' + encodeURIComponent(JSON.stringify(objectData));\r\n      a.target = '_blank';\r\n      document.body.appendChild(a);\r\n      a.click();\r\n      document.body.removeChild(a);\r\n    }\r\n  }\r\n \r\n  getArray = () => {\r\n    let remark = document.getElementById(\"Remarks\").value;\r\n    let dict = {\r\n      remark:remark,\r\n      dist_array_L : this.state.dist_array_L,\r\n      dist_time_array_L : this.state.dist_time_array_L,\r\n      rotate_array_L : this.state.rotate_array_L,\r\n      rotate_time_array_L : this.state.rotate_time_array_L,\r\n      fist_array_L : this.state.fist_array_L,\r\n      fist_time_array_L : this.state.fist_time_array_L,\r\n      still_array_L : this.state.still_array_L,\r\n      still_time_array_L : this.state.still_time_array_L,\r\n      hand_dist_array_L : this.state.hand_dist_array_L,\r\n      hand_rotate_array_L : this.state.hand_rotate_array_L,\r\n      hand_fist_array_L : this.state.hand_fist_array_L,\r\n      hand_still_array_L : this.state.hand_still_array_L,\r\n      dist_array_R : this.state.dist_array_R,\r\n      dist_time_array_R : this.state.dist_time_array_R,\r\n      rotate_array_R : this.state.rotate_array_R,\r\n      rotate_time_array_R : this.state.rotate_time_array_R,\r\n      fist_array_R : this.state.fist_array_R,\r\n      fist_time_array_R : this.state.fist_time_array_R,\r\n      still_array_R : this.state.still_array_R,\r\n      still_time_array_R : this.state.still_time_array_R,\r\n      hand_dist_array_R : this.state.hand_dist_array_R,\r\n      hand_rotate_array_R : this.state.hand_rotate_array_R,\r\n      hand_fist_array_R : this.state.hand_fist_array_R,\r\n      hand_still_array_R : this.state.hand_still_array_R,\r\n    }\r\n    let PD = document.getElementById(\"PD\").value;\r\n    let Score = document.getElementById(\"Score\").value;\r\n    console.log(PD, Score);\r\n    this.exportToJson(dict, \"state_\" + PD + \"_\" + Score);\r\n  }\r\n\r\n  render(){\r\n    const videoConstraints = {\r\n      facingMode: this.state.facingMode\r\n    };\r\n    let button_1 = null;\r\n    let button_2 = null;\r\n    switch(this.state.stage){\r\n      case 1:\r\n        button_1 = <Button disabled={this.state.recording} variant=\"contained\" color=\"primary\"  onClick={this.next_step}>Finish Finger Tapping Left (Real Time)</Button>;\r\n        button_2 = <Button disabled={this.state.real_time_inferencing} variant=\"contained\" color=\"secondary\" onClick={this.next_step}>Finish Finger Tapping Left (Record)</Button>;\r\n        break;\r\n      case 2:\r\n        button_1 = <Button disabled={this.state.recording} variant=\"contained\" color=\"primary\"  onClick={this.next_step}>Finish Finger Tapping Right (Real Time)</Button>;\r\n        button_2 = <Button disabled={this.state.real_time_inferencing} variant=\"contained\" color=\"secondary\" onClick={this.next_step}>Finish Finger Tapping Right (Record)</Button>;\r\n        break;\r\n      case 3:\r\n        button_1 = <Button disabled={this.state.recording} variant=\"contained\" color=\"primary\"  onClick={this.next_step}>Finish Rotation Left (Real Time)</Button>;\r\n        button_2 = <Button disabled={this.state.real_time_inferencing} variant=\"contained\" color=\"secondary\" onClick={this.next_step}>Finish Rotation Left (Record)</Button>;\r\n        break;\r\n      case 4:\r\n        button_1 = <Button disabled={this.state.recording} variant=\"contained\" color=\"primary\"  onClick={this.next_step}>Finish Rotation Right (Real Time)</Button>;\r\n        button_2 = <Button disabled={this.state.real_time_inferencing} variant=\"contained\" color=\"secondary\" onClick={this.next_step}>Finish Rotation Right (Record)</Button>;\r\n        break;\r\n      case 5:\r\n        button_1 = <Button disabled={this.state.recording} variant=\"contained\" color=\"primary\"  onClick={this.next_step}>Finish Gripping Left (Real Time)</Button>;\r\n        button_2 = <Button disabled={this.state.real_time_inferencing} variant=\"contained\" color=\"secondary\" onClick={this.next_step}>Finish Gripping Left (Record)</Button>;\r\n        break;\r\n      case 6:\r\n        button_1 = <Button disabled={this.state.recording} variant=\"contained\" color=\"primary\"  onClick={this.next_step}>Finish Gripping Right (Real Time)</Button>;\r\n        button_2 = <Button disabled={this.state.real_time_inferencing} variant=\"contained\" color=\"secondary\" onClick={this.next_step}>Finish Gripping Right (Record)</Button>;\r\n        break;\r\n      case 7:\r\n        button_1 = <Button disabled={this.state.recording} variant=\"contained\" color=\"primary\"  onClick={this.next_step}>Finish Resting Left (Real Time)</Button>;\r\n        button_2 = <Button disabled={this.state.real_time_inferencing} variant=\"contained\" color=\"secondary\" onClick={this.next_step}>Finish Resting Left (Record)</Button>;\r\n        break;\r\n      case 8:\r\n        button_1 = <Button disabled={this.state.recording} variant=\"contained\" color=\"primary\"  onClick={this.next_step}>Finish Resting Right (Real Time)</Button>;\r\n        button_2 = <Button disabled={this.state.real_time_inferencing} variant=\"contained\" color=\"secondary\" onClick={this.next_step}>Finish Resting Right (Record)</Button>;\r\n        break;\r\n      default:\r\n        button_1 = <Button disabled={this.state.recording} variant=\"contained\" color=\"primary\"  onClick={this.runHandpose}>Start Test (Real Time)</Button>;\r\n        button_2 = <Button disabled={this.state.real_time_inferencing} variant=\"contained\" color=\"secondary\" onClick={this.record_video}>Start Test (Record)</Button>;\r\n        break;\r\n    }\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n        <Webcam\r\n          ref={this.webcamRef}\r\n          videoConstraints={videoConstraints}\r\n          style={{\r\n            position: \"absolute\",\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            left: 0,\r\n            right: 0,\r\n            textAlign: \"center\",\r\n            zindex: 9,\r\n            width: \"auto\",\r\n            height: \"auto\",\r\n          }}\r\n        />\r\n        <canvas\r\n          ref={this.canvasRef}\r\n          style={{\r\n            position: \"absolute\",\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            left: 0,\r\n            right: 0,\r\n            textAlign: \"center\",\r\n            zindex: 9,\r\n            width: \"auto\",\r\n            height: \"auto\",\r\n          }}\r\n        />\r\n        </header>\r\n          {this.state.button_mode ? (\r\n            <div>\r\n              <button onClick={this.increment_tap1} id=\"button1\">Index Finger</button>\r\n              <button onClick={this.increment_tap2} id=\"button2\">Middle Finger</button>\r\n            </div>\r\n          ) : (\r\n            <div></div>\r\n          )}\r\n\r\n          <div>\r\n            <div>{button_1}</div>\r\n            <div>{button_2}</div>\r\n            <div>\r\n              <Button disabled={this.state.recording||this.state.real_time_inferencing} variant=\"outlined\" color=\"secondary\" onClick={this.reset_counter}>\r\n                Reset All\r\n              </Button>\r\n            </div>\r\n          </div>\r\n          <div>\r\n            <h5>\r\n              Finger Tapping Count:{this.state.tap_count.length}&nbsp;&nbsp;&nbsp;&nbsp;\r\n              Rotate Count:{this.state.rotate_count.length}&nbsp;&nbsp;&nbsp;&nbsp;\r\n              Gripping Count: {this.state.fist_count.length}&nbsp;&nbsp;&nbsp;&nbsp;\r\n              FPS: {this.state.avg_fps}\r\n            </h5>\r\n          </div>\r\n          <div>\r\n            <div>\r\n              <img src={handline} className=\"handline\" alt='anything'/>\r\n            </div>\r\n            <div>\r\n              <small>Enter Vertical Distance (cm)</small>\r\n              <input type=\"number\" id=\"real_measurement_v\" onChange={this.compose_chart} step=\"0.001\" min='0' max='20'></input>\r\n            </div>\r\n            <div>\r\n              <small>Enter Horizontal Distance (cm)</small>\r\n              <input type=\"number\" id=\"real_measurement_h\" onChange={this.compose_chart} step=\"0.001\" min='0' max='20'></input>\r\n            </div>\r\n            <button disabled={!this.state.chart_ready} onClick={this.switch_style}>Switch Chart Style</button>\r\n            <button onClick={this.switch_cam}>Switch Camera</button>\r\n          </div>\r\n          <div>\r\n            <small>Experimental Features</small>\r\n            <button disabled={this.state.recording||this.state.real_time_inferencing} onClick={this.runPosenet}>PoseNet</button>\r\n            <button disabled={this.state.recording||this.state.real_time_inferencing} onClick={this.runFacemesh}>Facemesh</button>\r\n            <button disabled={this.state.recording||this.state.real_time_inferencing} onClick={this.switch_button}>Switch On/Off Button</button>\r\n          </div>\r\n          <div>\r\n            {this.state.chart_ready ? (\r\n              <div>\r\n                <Line data={this.state.chart_data1_L} />\r\n                <Line data={this.state.chart_data1_R} />\r\n                <Line data={this.state.chart_data2_L} />\r\n                <Line data={this.state.chart_data2_R} />\r\n                <Line data={this.state.chart_data3_L} />\r\n                <Line data={this.state.chart_data3_R} />\r\n                <Line data={this.state.chart_data4_L} />\r\n                <Line data={this.state.chart_data4_R} />\r\n              </div>\r\n            ) : (\r\n              <div/>\r\n            )}\r\n            <div>\r\n              <small>UPDRS Score, X for N/A, Could be Empty</small>\r\n              <input type=\"text\" id=\"Score\"></input>\r\n            </div>\r\n            <div>\r\n              <small>Special Remarks</small>\r\n              <input type=\"text\" id=\"Remarks\"></input> \r\n            </div>\r\n            <select name=\"PD\" id=\"PD\">\r\n              <option value=\"0\">Control</option>\r\n              <option value=\"1\">RBD</option>\r\n              <option value=\"2\">PD(with medication)</option>\r\n              <option value=\"3\">PD(without medication)</option>\r\n            </select>\r\n            <button onClick={this.getArray}>Get Array</button>\r\n            <div>\r\n              <input type=\"file\" id=\"upload-json\"></input>\r\n            </div>\r\n            <div>\r\n              <input type=\"file\" id=\"upload-weights\"></input>\r\n            </div>\r\n          </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}