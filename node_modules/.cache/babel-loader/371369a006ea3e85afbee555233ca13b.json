{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport * as shader_util from './shader_compiler_util';\nexport class ReshapePackedProgram {\n  constructor(outputShape, inputShape) {\n    this.variableNames = ['A'];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    this.outputShape = outputShape;\n    let mainLoop = ``;\n\n    for (let i = 0; i < 4; i++) {\n      let thisRC = `thisRC = rc;`;\n\n      if (i % 2 === 1) {\n        thisRC += `thisRC.z += 1;`;\n      }\n\n      if (i > 1) {\n        thisRC += `thisRC.y += 1;`;\n      }\n\n      mainLoop += `\n        ${thisRC}\n        ${i > 0 ? `if(thisRC.y < rows && thisRC.z < cols){` : ''}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${i > 0 ? '}' : ''}\n      `;\n    }\n\n    this.userCode = `\n      ${getReshapedInputCoords(inputShape)}\n      ${shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${outputShape[1]};\n        int cols = ${outputShape[2]};\n\n        ${mainLoop}\n\n        setOutput(result);\n      }\n    `;\n  }\n\n}\n\nfunction getReshapedInputCoords(shape) {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n  return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}","map":{"version":3,"sources":["../src/reshape_packed_gpu.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAGH,OAAO,KAAK,WAAZ,MAA6B,wBAA7B;AAEA,OAAM,MAAO,oBAAP,CAA2B;AAO/B,EAAA,WAAA,CAAY,WAAZ,EAAmD,UAAnD,EAEC;AARD,SAAA,aAAA,GAAgB,CAAC,GAAD,CAAhB;AACA,SAAA,YAAA,GAAe,IAAf;AACA,SAAA,YAAA,GAAe,IAAf;AAOE,SAAK,WAAL,GAAmB,WAAnB;AAEA,QAAI,QAAQ,GAAG,EAAf;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAApB,EAAuB,CAAC,EAAxB,EAA4B;AAC1B,UAAI,MAAM,GAAG,cAAb;;AACA,UAAI,CAAC,GAAG,CAAJ,KAAU,CAAd,EAAiB;AACf,QAAA,MAAM,IAAI,gBAAV;AACD;;AACD,UAAI,CAAC,GAAG,CAAR,EAAW;AACT,QAAA,MAAM,IAAI,gBAAV;AACD;;AAED,MAAA,QAAQ,IAAI;UACR,MAAM;UACN,CAAC,GAAG,CAAJ,GAAQ,yCAAR,GAAoD,EAAE;;;;;;mBAM7C,CAAC;;UAEV,CAAC,GAAG,CAAJ,GAAQ,GAAR,GAAc,EAAE;AACnB,OAXD;AAYD;;AAED,SAAK,QAAL,GAAgB;QACZ,sBAAsB,CAAC,UAAD,CAAY;QAClC,WAAW,CAAC,kBAAZ,CAA+B,WAA/B,CAA2C;;;;;;;;qBAQ9B,WAAW,CAAC,CAAD,CAAG;qBACd,WAAW,CAAC,CAAD,CAAG;;UAEzB,QAAQ;;;;AAIb,KAjBD;AAkBD;;AAtD8B;;AAyDjC,SAAS,sBAAT,CAAgC,KAAhC,EAA+D;AAC7D,QAAM,sBAAsB,GACxB,WAAW,CAAC,kCAAZ,CAA+C,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAA/C,EAAgE,KAAhE,CADJ;AAGA,SAAO;;QAED,sBAAsB;;;AAG3B,GALD;AAMD","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport * as shader_util from './shader_compiler_util';\r\nexport class ReshapePackedProgram {\r\n    constructor(outputShape, inputShape) {\r\n        this.variableNames = ['A'];\r\n        this.packedInputs = true;\r\n        this.packedOutput = true;\r\n        this.outputShape = outputShape;\r\n        let mainLoop = ``;\r\n        for (let i = 0; i < 4; i++) {\r\n            let thisRC = `thisRC = rc;`;\r\n            if (i % 2 === 1) {\r\n                thisRC += `thisRC.z += 1;`;\r\n            }\r\n            if (i > 1) {\r\n                thisRC += `thisRC.y += 1;`;\r\n            }\r\n            mainLoop += `\r\n        ${thisRC}\r\n        ${i > 0 ? `if(thisRC.y < rows && thisRC.z < cols){` : ''}\r\n          int flatIndex = getFlatIndex(thisRC);\r\n\r\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\r\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\r\n\r\n          result[${i}] =\r\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\r\n        ${i > 0 ? '}' : ''}\r\n      `;\r\n        }\r\n        this.userCode = `\r\n      ${getReshapedInputCoords(inputShape)}\r\n      ${shader_util.getFlatIndexFrom3D(outputShape)}\r\n\r\n      void main() {\r\n        ivec3 rc = getOutputCoords();\r\n\r\n        vec4 result = vec4(0.);\r\n\r\n        ivec3 thisRC;\r\n        int rows = ${outputShape[1]};\r\n        int cols = ${outputShape[2]};\r\n\r\n        ${mainLoop}\r\n\r\n        setOutput(result);\r\n      }\r\n    `;\r\n    }\r\n}\r\nfunction getReshapedInputCoords(shape) {\r\n    const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\r\n    return `\r\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\r\n      ${coordsFromIndexSnippet}\r\n      return ivec3(r, c, d);\r\n    }\r\n  `;\r\n}\r\n//# sourceMappingURL=reshape_packed_gpu.js.map"]},"metadata":{},"sourceType":"module"}