{"ast":null,"code":"import _slicedToArray from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { Add } from '../kernel_names';\nimport { makeTypesMatch } from '../tensor_util';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\r\n * Adds two `tf.Tensor`s element-wise, A + B. Supports broadcasting.\r\n *\r\n *\r\n * ```js\r\n * const a = tf.tensor1d([1, 2, 3, 4]);\r\n * const b = tf.tensor1d([10, 20, 30, 40]);\r\n *\r\n * a.add(b).print();  // or tf.add(a, b)\r\n * ```\r\n *\r\n * ```js\r\n * // Broadcast add a with b.\r\n * const a = tf.scalar(5);\r\n * const b = tf.tensor1d([10, 20, 30, 40]);\r\n *\r\n * a.add(b).print();  // or tf.add(a, b)\r\n * ```\r\n * @param a The first `tf.Tensor` to add.\r\n * @param b The second `tf.Tensor` to add. Must have the same type as `a`.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\r\n */\n\nfunction add_(a, b) {\n  var $a = convertToTensor(a, 'a', 'add');\n  var $b = convertToTensor(b, 'b', 'add');\n\n  var _makeTypesMatch = makeTypesMatch($a, $b);\n\n  var _makeTypesMatch2 = _slicedToArray(_makeTypesMatch, 2);\n\n  $a = _makeTypesMatch2[0];\n  $b = _makeTypesMatch2[1];\n\n  var forward = function forward(backend, save) {\n    var res = backend.add($a, $b);\n    save([$a, $b]);\n    return res;\n  };\n\n  var inputs = {\n    a: $a,\n    b: $b\n  };\n  return ENGINE.runKernelFunc(forward, inputs, null\n  /* gradient */\n  , Add);\n}\n\nexport var add = op({\n  add_: add_\n});","map":{"version":3,"sources":["../../src/ops/add.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AACH,SAAQ,MAAR,QAAkC,WAAlC;AACA,SAAQ,GAAR,QAA6B,iBAA7B;AAGA,SAAQ,cAAR,QAA6B,gBAA7B;AACA,SAAQ,eAAR,QAA8B,oBAA9B;AAGA,SAAQ,EAAR,QAAiB,aAAjB;AAEA;;;;;;;;;;;;;;;;;;;;;;AAsBG;;AACH,SAAS,IAAT,CAAgC,CAAhC,EAAsD,CAAtD,EAA0E;AACxE,MAAI,EAAE,GAAG,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,KAAT,CAAxB;AACA,MAAI,EAAE,GAAG,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,KAAT,CAAxB;;AAFwE,wBAG7D,cAAc,CAAC,EAAD,EAAK,EAAL,CAH+C;;AAAA;;AAGvE,EAAA,EAHuE;AAGnE,EAAA,EAHmE;;AAKxE,MAAM,OAAO,GAAwB,SAA/B,OAA+B,CAAC,OAAD,EAAU,IAAV,EAAkB;AACrD,QAAM,GAAG,GAAG,OAAO,CAAC,GAAR,CAAY,EAAZ,EAAgB,EAAhB,CAAZ;AACA,IAAA,IAAI,CAAC,CAAC,EAAD,EAAK,EAAL,CAAD,CAAJ;AACA,WAAO,GAAP;AACD,GAJD;;AAMA,MAAM,MAAM,GAAc;AAAC,IAAA,CAAC,EAAE,EAAJ;AAAQ,IAAA,CAAC,EAAE;AAAX,GAA1B;AAEA,SAAO,MAAM,CAAC,aAAP,CACI,OADJ,EACa,MADb,EAC6C;AAAK;AADlD,IAEI,GAFJ,CAAP;AAGD;;AAED,OAAO,IAAM,GAAG,GAAG,EAAE,CAAC;AAAC,EAAA,IAAI,EAAJ;AAAD,CAAD,CAAd","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { ENGINE } from '../engine';\r\nimport { Add } from '../kernel_names';\r\nimport { makeTypesMatch } from '../tensor_util';\r\nimport { convertToTensor } from '../tensor_util_env';\r\nimport { op } from './operation';\r\n/**\r\n * Adds two `tf.Tensor`s element-wise, A + B. Supports broadcasting.\r\n *\r\n *\r\n * ```js\r\n * const a = tf.tensor1d([1, 2, 3, 4]);\r\n * const b = tf.tensor1d([10, 20, 30, 40]);\r\n *\r\n * a.add(b).print();  // or tf.add(a, b)\r\n * ```\r\n *\r\n * ```js\r\n * // Broadcast add a with b.\r\n * const a = tf.scalar(5);\r\n * const b = tf.tensor1d([10, 20, 30, 40]);\r\n *\r\n * a.add(b).print();  // or tf.add(a, b)\r\n * ```\r\n * @param a The first `tf.Tensor` to add.\r\n * @param b The second `tf.Tensor` to add. Must have the same type as `a`.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\r\n */\r\nfunction add_(a, b) {\r\n    let $a = convertToTensor(a, 'a', 'add');\r\n    let $b = convertToTensor(b, 'b', 'add');\r\n    [$a, $b] = makeTypesMatch($a, $b);\r\n    const forward = (backend, save) => {\r\n        const res = backend.add($a, $b);\r\n        save([$a, $b]);\r\n        return res;\r\n    };\r\n    const inputs = { a: $a, b: $b };\r\n    return ENGINE.runKernelFunc(forward, inputs, null /* gradient */, Add);\r\n}\r\nexport const add = op({ add_ });\r\n//# sourceMappingURL=add.js.map"]},"metadata":{},"sourceType":"module"}