{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { Atan2 } from '../kernel_names';\nimport { add } from '../ops/add';\nimport { assertAndGetBroadcastShape, getReductionAxes } from '../ops/broadcast_util';\nimport { div } from '../ops/div';\nimport { mul } from '../ops/mul';\nimport { neg } from '../ops/neg';\nimport { reshape } from '../ops/reshape';\nimport { square } from '../ops/square';\nimport { sum } from '../ops/sum';\nexport const atan2GradConfig = {\n  kernelName: Atan2,\n  inputsToSave: ['a', 'b'],\n  gradFunc: (dy, saved) => {\n    const [a, b] = saved;\n    const outShape = assertAndGetBroadcastShape(a.shape, b.shape);\n\n    const derA = () => {\n      const d = add(square(a), square(b));\n      let res = mul(dy, div(b, d));\n      const reduceAxes = getReductionAxes(a.shape, outShape);\n\n      if (reduceAxes.length > 0) {\n        res = sum(res, reduceAxes);\n      }\n\n      return reshape(res, a.shape);\n    };\n\n    const derB = () => {\n      const d = add(square(a), square(b));\n      let res = neg(mul(dy, div(a, d)));\n      const reduceAxes = getReductionAxes(b.shape, outShape);\n\n      if (reduceAxes.length > 0) {\n        res = sum(res, reduceAxes);\n      }\n\n      return reshape(res, b.shape);\n    };\n\n    return {\n      a: derA,\n      b: derB\n    };\n  }\n};","map":{"version":3,"sources":["../../src/gradients/Atan2_grad.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,KAAR,QAAoB,iBAApB;AAEA,SAAQ,GAAR,QAAkB,YAAlB;AACA,SAAQ,0BAAR,EAAoC,gBAApC,QAA2D,uBAA3D;AACA,SAAQ,GAAR,QAAkB,YAAlB;AACA,SAAQ,GAAR,QAAkB,YAAlB;AACA,SAAQ,GAAR,QAAkB,YAAlB;AACA,SAAQ,OAAR,QAAsB,gBAAtB;AACA,SAAQ,MAAR,QAAqB,eAArB;AACA,SAAQ,GAAR,QAAkB,YAAlB;AAGA,OAAO,MAAM,eAAe,GAAe;AACzC,EAAA,UAAU,EAAE,KAD6B;AAEzC,EAAA,YAAY,EAAE,CAAC,GAAD,EAAM,GAAN,CAF2B;AAGzC,EAAA,QAAQ,EAAE,CAAC,EAAD,EAAa,KAAb,KAAgC;AACxC,UAAM,CAAC,CAAD,EAAI,CAAJ,IAAS,KAAf;AACA,UAAM,QAAQ,GAAG,0BAA0B,CAAC,CAAC,CAAC,KAAH,EAAU,CAAC,CAAC,KAAZ,CAA3C;;AAEA,UAAM,IAAI,GAAG,MAAK;AAChB,YAAM,CAAC,GAAG,GAAG,CAAC,MAAM,CAAC,CAAD,CAAP,EAAY,MAAM,CAAC,CAAD,CAAlB,CAAb;AACA,UAAI,GAAG,GAAG,GAAG,CAAC,EAAD,EAAK,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAR,CAAb;AACA,YAAM,UAAU,GAAG,gBAAgB,CAAC,CAAC,CAAC,KAAH,EAAU,QAAV,CAAnC;;AACA,UAAI,UAAU,CAAC,MAAX,GAAoB,CAAxB,EAA2B;AACzB,QAAA,GAAG,GAAG,GAAG,CAAC,GAAD,EAAM,UAAN,CAAT;AACD;;AACD,aAAO,OAAO,CAAC,GAAD,EAAM,CAAC,CAAC,KAAR,CAAd;AACD,KARD;;AASA,UAAM,IAAI,GAAG,MAAK;AAChB,YAAM,CAAC,GAAG,GAAG,CAAC,MAAM,CAAC,CAAD,CAAP,EAAY,MAAM,CAAC,CAAD,CAAlB,CAAb;AACA,UAAI,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,EAAD,EAAK,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAR,CAAJ,CAAb;AACA,YAAM,UAAU,GAAG,gBAAgB,CAAC,CAAC,CAAC,KAAH,EAAU,QAAV,CAAnC;;AACA,UAAI,UAAU,CAAC,MAAX,GAAoB,CAAxB,EAA2B;AACzB,QAAA,GAAG,GAAG,GAAG,CAAC,GAAD,EAAM,UAAN,CAAT;AACD;;AACD,aAAO,OAAO,CAAC,GAAD,EAAM,CAAC,CAAC,KAAR,CAAd;AACD,KARD;;AASA,WAAO;AAAC,MAAA,CAAC,EAAE,IAAJ;AAAU,MAAA,CAAC,EAAE;AAAb,KAAP;AACD;AA1BwC,CAApC","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { Atan2 } from '../kernel_names';\r\nimport { add } from '../ops/add';\r\nimport { assertAndGetBroadcastShape, getReductionAxes } from '../ops/broadcast_util';\r\nimport { div } from '../ops/div';\r\nimport { mul } from '../ops/mul';\r\nimport { neg } from '../ops/neg';\r\nimport { reshape } from '../ops/reshape';\r\nimport { square } from '../ops/square';\r\nimport { sum } from '../ops/sum';\r\nexport const atan2GradConfig = {\r\n    kernelName: Atan2,\r\n    inputsToSave: ['a', 'b'],\r\n    gradFunc: (dy, saved) => {\r\n        const [a, b] = saved;\r\n        const outShape = assertAndGetBroadcastShape(a.shape, b.shape);\r\n        const derA = () => {\r\n            const d = add(square(a), square(b));\r\n            let res = mul(dy, div(b, d));\r\n            const reduceAxes = getReductionAxes(a.shape, outShape);\r\n            if (reduceAxes.length > 0) {\r\n                res = sum(res, reduceAxes);\r\n            }\r\n            return reshape(res, a.shape);\r\n        };\r\n        const derB = () => {\r\n            const d = add(square(a), square(b));\r\n            let res = neg(mul(dy, div(a, d)));\r\n            const reduceAxes = getReductionAxes(b.shape, outShape);\r\n            if (reduceAxes.length > 0) {\r\n                res = sum(res, reduceAxes);\r\n            }\r\n            return reshape(res, b.shape);\r\n        };\r\n        return { a: derA, b: derB };\r\n    }\r\n};\r\n//# sourceMappingURL=Atan2_grad.js.map"]},"metadata":{},"sourceType":"module"}