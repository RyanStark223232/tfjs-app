{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { AvgPool3DBackprop } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport * as conv_util from './conv_util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\r\n * Computes the backprop of a 3d avg pool.\r\n *\r\n * @param dy The dy error, of rank 5 of shape\r\n *     [batchSize, depth, height, width, channels].\r\n * assumed.\r\n * @param input The original input image, of rank 5 or rank4 of shape\r\n *     [batchSize, depth, height, width, channels].\r\n * @param filterSize The filter size:\r\n *     `[filterDepth, filterHeight, filterWidth]`.\r\n *     `filterSize` is a single number,\r\n *     then `filterDepth == filterHeight == filterWidth`.\r\n * @param strides The strides of the pooling:\r\n *     `[strideDepth, strideHeight, strideWidth]`. If\r\n *     `strides` is a single number, then `strideHeight == strideWidth`.\r\n * @param dilations Deprecated, this field will be gone in v3.0.0. The dilation\r\n *     rates: `[dilationDepth, dilationHeight, dilationWidth]`\r\n *     in which we sample input values across the depth, height and width\r\n *     dimensions in dilated pooling.\r\n *     Defaults to `[1, 1, 1]`. If `dilations` is a single number,\r\n *     then `dilationDepth == dilationHeight == dilationWidth`.\r\n *     If it is greater than 1, then all values of `strides` must be 1.\r\n * @param pad A string from: 'same', 'valid'. The type of padding algorithm\r\n *     used in the forward prop of the op.\r\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. The\r\n *     rounding mode used when computing output dimensions if pad is a\r\n *     number. If none is provided, it will not round and error if the output\r\n *     is of fractional size.\r\n */\n\nfunction avgPool3dBackprop_(dy, input, filterSize, strides) {\n  var dilations = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [1, 1, 1];\n  var pad = arguments.length > 5 ? arguments[5] : undefined;\n  var dimRoundingMode = arguments.length > 6 ? arguments[6] : undefined;\n  var $dy = convertToTensor(dy, 'dy', 'avgPool3dBackprop');\n  var $input = convertToTensor(input, 'input', 'avgPool3dBackprop');\n  var dy5D = $dy;\n  var input5D = $input;\n  var reshapedTo5D = false;\n\n  if ($input.rank === 4) {\n    reshapedTo5D = true;\n    dy5D = reshape($dy, [1, $dy.shape[0], $dy.shape[1], $dy.shape[2], $dy.shape[3]]);\n    input5D = reshape($input, [1, $input.shape[0], $input.shape[1], $input.shape[2], $input.shape[3]]);\n  }\n\n  util.assert(dy5D.rank === 5, function () {\n    return \"Error in avgPool3dBackprop: dy must be rank 5 but got rank \" + \"\".concat(dy5D.rank, \".\");\n  });\n  util.assert(input5D.rank === 5, function () {\n    return \"Error in avgPool3dBackprop: input must be rank 5 but got rank \" + \"\".concat(input5D.rank, \".\");\n  });\n  util.assert(conv_util.eitherStridesOrDilationsAreOne(strides, dilations), function () {\n    return 'Error in avgPool3dBackprop: Either strides or dilations ' + \"must be 1. Got strides \".concat(strides, \" and dilations '\").concat(dilations, \"'\");\n  });\n\n  if (dimRoundingMode != null) {\n    util.assert(util.isInt(pad), function () {\n      return \"Error in maxPool3dBackprop: pad must be an integer when \" + \"using, dimRoundingMode \".concat(dimRoundingMode, \" but got pad \").concat(pad, \".\");\n    });\n  }\n\n  var forward = function forward(backend) {\n    var convInfo = conv_util.computePool3DInfo(input5D.shape, filterSize, strides, dilations, pad, dimRoundingMode);\n    return backend.avgPool3dBackprop(dy5D, input5D, convInfo);\n  };\n\n  var inputs = {\n    dy: dy5D,\n    input: input5D\n  };\n  var attrs = {\n    filterSize: filterSize,\n    strides: strides,\n    dilations: dilations,\n    pad: pad,\n    dimRoundingMode: dimRoundingMode\n  };\n  var res = ENGINE.runKernelFunc(forward, inputs, null\n  /* grad */\n  , AvgPool3DBackprop, attrs);\n\n  if (reshapedTo5D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);\n  }\n\n  return res;\n}\n\nexport var avgPool3dBackprop = op({\n  avgPool3dBackprop_: avgPool3dBackprop_\n});","map":{"version":3,"sources":["../../src/ops/avg_pool_3d_backprop.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { ENGINE } from '../engine';\r\nimport { AvgPool3DBackprop } from '../kernel_names';\r\nimport { convertToTensor } from '../tensor_util_env';\r\nimport * as util from '../util';\r\nimport * as conv_util from './conv_util';\r\nimport { op } from './operation';\r\nimport { reshape } from './reshape';\r\n/**\r\n * Computes the backprop of a 3d avg pool.\r\n *\r\n * @param dy The dy error, of rank 5 of shape\r\n *     [batchSize, depth, height, width, channels].\r\n * assumed.\r\n * @param input The original input image, of rank 5 or rank4 of shape\r\n *     [batchSize, depth, height, width, channels].\r\n * @param filterSize The filter size:\r\n *     `[filterDepth, filterHeight, filterWidth]`.\r\n *     `filterSize` is a single number,\r\n *     then `filterDepth == filterHeight == filterWidth`.\r\n * @param strides The strides of the pooling:\r\n *     `[strideDepth, strideHeight, strideWidth]`. If\r\n *     `strides` is a single number, then `strideHeight == strideWidth`.\r\n * @param dilations Deprecated, this field will be gone in v3.0.0. The dilation\r\n *     rates: `[dilationDepth, dilationHeight, dilationWidth]`\r\n *     in which we sample input values across the depth, height and width\r\n *     dimensions in dilated pooling.\r\n *     Defaults to `[1, 1, 1]`. If `dilations` is a single number,\r\n *     then `dilationDepth == dilationHeight == dilationWidth`.\r\n *     If it is greater than 1, then all values of `strides` must be 1.\r\n * @param pad A string from: 'same', 'valid'. The type of padding algorithm\r\n *     used in the forward prop of the op.\r\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. The\r\n *     rounding mode used when computing output dimensions if pad is a\r\n *     number. If none is provided, it will not round and error if the output\r\n *     is of fractional size.\r\n */\r\nfunction avgPool3dBackprop_(dy, input, filterSize, strides, dilations = [1, 1, 1], pad, dimRoundingMode) {\r\n    const $dy = convertToTensor(dy, 'dy', 'avgPool3dBackprop');\r\n    const $input = convertToTensor(input, 'input', 'avgPool3dBackprop');\r\n    let dy5D = $dy;\r\n    let input5D = $input;\r\n    let reshapedTo5D = false;\r\n    if ($input.rank === 4) {\r\n        reshapedTo5D = true;\r\n        dy5D = reshape($dy, [1, $dy.shape[0], $dy.shape[1], $dy.shape[2], $dy.shape[3]]);\r\n        input5D = reshape($input, [\r\n            1, $input.shape[0], $input.shape[1], $input.shape[2], $input.shape[3]\r\n        ]);\r\n    }\r\n    util.assert(dy5D.rank === 5, () => `Error in avgPool3dBackprop: dy must be rank 5 but got rank ` +\r\n        `${dy5D.rank}.`);\r\n    util.assert(input5D.rank === 5, () => `Error in avgPool3dBackprop: input must be rank 5 but got rank ` +\r\n        `${input5D.rank}.`);\r\n    util.assert(conv_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in avgPool3dBackprop: Either strides or dilations ' +\r\n        `must be 1. Got strides ${strides} and dilations '${dilations}'`);\r\n    if (dimRoundingMode != null) {\r\n        util.assert(util.isInt(pad), () => `Error in maxPool3dBackprop: pad must be an integer when ` +\r\n            `using, dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\r\n    }\r\n    const forward = backend => {\r\n        const convInfo = conv_util.computePool3DInfo(input5D.shape, filterSize, strides, dilations, pad, dimRoundingMode);\r\n        return backend.avgPool3dBackprop(dy5D, input5D, convInfo);\r\n    };\r\n    const inputs = { dy: dy5D, input: input5D };\r\n    const attrs = { filterSize, strides, dilations, pad, dimRoundingMode };\r\n    const res = ENGINE.runKernelFunc(forward, inputs, null /* grad */, AvgPool3DBackprop, attrs);\r\n    if (reshapedTo5D) {\r\n        return reshape(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);\r\n    }\r\n    return res;\r\n}\r\nexport const avgPool3dBackprop = op({ avgPool3dBackprop_ });\r\n//# sourceMappingURL=avg_pool_3d_backprop.js.map"]},"metadata":{},"sourceType":"module"}