{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context) => {\n  switch (node.op) {\n    case 'Equal':\n      {\n        return [tfOps.equal(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n      }\n\n    case 'NotEqual':\n      {\n        return [tfOps.notEqual(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n      }\n\n    case 'Greater':\n      {\n        return [tfOps.greater(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n      }\n\n    case 'GreaterEqual':\n      {\n        return [tfOps.greaterEqual(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n      }\n\n    case 'Less':\n      {\n        return [tfOps.less(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n      }\n\n    case 'LessEqual':\n      {\n        return [tfOps.lessEqual(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n      }\n\n    case 'LogicalAnd':\n      {\n        return [tfOps.logicalAnd(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n      }\n\n    case 'LogicalNot':\n      {\n        return [tfOps.logicalNot(getParamValue('a', node, tensorMap, context))];\n      }\n\n    case 'LogicalOr':\n      {\n        return [tfOps.logicalOr(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n      }\n\n    case 'Select':\n    case 'SelectV2':\n      {\n        return [tfOps.where(getParamValue('condition', node, tensorMap, context), getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n      }\n\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'logical';","map":{"version":3,"sources":["../../../src/operations/executors/logical_executor.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAGH;AACA,OAAO,KAAK,KAAZ,MAAuB,kDAAvB;AAMA,SAAQ,aAAR,QAA4B,SAA5B;AAEA,OAAO,MAAM,SAAS,GAClB,CAAC,IAAD,EAAa,SAAb,EACC,OADD,KACwC;AACtC,UAAQ,IAAI,CAAC,EAAb;AACE,SAAK,OAAL;AAAc;AACZ,eAAO,CAAC,KAAK,CAAC,KAAN,CACJ,aAAa,CAAC,GAAD,EAAM,IAAN,EAAY,SAAZ,EAAuB,OAAvB,CADT,EAEJ,aAAa,CAAC,GAAD,EAAM,IAAN,EAAY,SAAZ,EAAuB,OAAvB,CAFT,CAAD,CAAP;AAGD;;AACD,SAAK,UAAL;AAAiB;AACf,eAAO,CAAC,KAAK,CAAC,QAAN,CACJ,aAAa,CAAC,GAAD,EAAM,IAAN,EAAY,SAAZ,EAAuB,OAAvB,CADT,EAEJ,aAAa,CAAC,GAAD,EAAM,IAAN,EAAY,SAAZ,EAAuB,OAAvB,CAFT,CAAD,CAAP;AAGD;;AACD,SAAK,SAAL;AAAgB;AACd,eAAO,CAAC,KAAK,CAAC,OAAN,CACJ,aAAa,CAAC,GAAD,EAAM,IAAN,EAAY,SAAZ,EAAuB,OAAvB,CADT,EAEJ,aAAa,CAAC,GAAD,EAAM,IAAN,EAAY,SAAZ,EAAuB,OAAvB,CAFT,CAAD,CAAP;AAGD;;AACD,SAAK,cAAL;AAAqB;AACnB,eAAO,CAAC,KAAK,CAAC,YAAN,CACJ,aAAa,CAAC,GAAD,EAAM,IAAN,EAAY,SAAZ,EAAuB,OAAvB,CADT,EAEJ,aAAa,CAAC,GAAD,EAAM,IAAN,EAAY,SAAZ,EAAuB,OAAvB,CAFT,CAAD,CAAP;AAGD;;AACD,SAAK,MAAL;AAAa;AACX,eAAO,CAAC,KAAK,CAAC,IAAN,CACJ,aAAa,CAAC,GAAD,EAAM,IAAN,EAAY,SAAZ,EAAuB,OAAvB,CADT,EAEJ,aAAa,CAAC,GAAD,EAAM,IAAN,EAAY,SAAZ,EAAuB,OAAvB,CAFT,CAAD,CAAP;AAGD;;AACD,SAAK,WAAL;AAAkB;AAChB,eAAO,CAAC,KAAK,CAAC,SAAN,CACJ,aAAa,CAAC,GAAD,EAAM,IAAN,EAAY,SAAZ,EAAuB,OAAvB,CADT,EAEJ,aAAa,CAAC,GAAD,EAAM,IAAN,EAAY,SAAZ,EAAuB,OAAvB,CAFT,CAAD,CAAP;AAGD;;AACD,SAAK,YAAL;AAAmB;AACjB,eAAO,CAAC,KAAK,CAAC,UAAN,CACJ,aAAa,CAAC,GAAD,EAAM,IAAN,EAAY,SAAZ,EAAuB,OAAvB,CADT,EAEJ,aAAa,CAAC,GAAD,EAAM,IAAN,EAAY,SAAZ,EAAuB,OAAvB,CAFT,CAAD,CAAP;AAGD;;AACD,SAAK,YAAL;AAAmB;AACjB,eAAO,CAAC,KAAK,CAAC,UAAN,CACJ,aAAa,CAAC,GAAD,EAAM,IAAN,EAAY,SAAZ,EAAuB,OAAvB,CADT,CAAD,CAAP;AAED;;AACD,SAAK,WAAL;AAAkB;AAChB,eAAO,CAAC,KAAK,CAAC,SAAN,CACJ,aAAa,CAAC,GAAD,EAAM,IAAN,EAAY,SAAZ,EAAuB,OAAvB,CADT,EAEJ,aAAa,CAAC,GAAD,EAAM,IAAN,EAAY,SAAZ,EAAuB,OAAvB,CAFT,CAAD,CAAP;AAGD;;AACD,SAAK,QAAL;AACA,SAAK,UAAL;AAAiB;AACf,eAAO,CAAC,KAAK,CAAC,KAAN,CACJ,aAAa,CAAC,WAAD,EAAc,IAAd,EAAoB,SAApB,EAA+B,OAA/B,CADT,EAEJ,aAAa,CAAC,GAAD,EAAM,IAAN,EAAY,SAAZ,EAAuB,OAAvB,CAFT,EAGJ,aAAa,CAAC,GAAD,EAAM,IAAN,EAAY,SAAZ,EAAuB,OAAvB,CAHT,CAAD,CAAP;AAID;;AACD;AACE,YAAM,SAAS,CAAC,aAAa,IAAI,CAAC,EAAE,qBAArB,CAAf;AArDJ;AAuDD,CA1DE;AA4DP,OAAO,MAAM,QAAQ,GAAG,SAAjB","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\n// tslint:disable-next-line: no-imports-from-dist\r\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\r\nimport { getParamValue } from './utils';\r\nexport const executeOp = (node, tensorMap, context) => {\r\n    switch (node.op) {\r\n        case 'Equal': {\r\n            return [tfOps.equal(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\r\n        }\r\n        case 'NotEqual': {\r\n            return [tfOps.notEqual(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\r\n        }\r\n        case 'Greater': {\r\n            return [tfOps.greater(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\r\n        }\r\n        case 'GreaterEqual': {\r\n            return [tfOps.greaterEqual(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\r\n        }\r\n        case 'Less': {\r\n            return [tfOps.less(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\r\n        }\r\n        case 'LessEqual': {\r\n            return [tfOps.lessEqual(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\r\n        }\r\n        case 'LogicalAnd': {\r\n            return [tfOps.logicalAnd(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\r\n        }\r\n        case 'LogicalNot': {\r\n            return [tfOps.logicalNot(getParamValue('a', node, tensorMap, context))];\r\n        }\r\n        case 'LogicalOr': {\r\n            return [tfOps.logicalOr(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\r\n        }\r\n        case 'Select':\r\n        case 'SelectV2': {\r\n            return [tfOps.where(getParamValue('condition', node, tensorMap, context), getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\r\n        }\r\n        default:\r\n            throw TypeError(`Node type ${node.op} is not implemented`);\r\n    }\r\n};\r\nexport const CATEGORY = 'logical';\r\n//# sourceMappingURL=logical_executor.js.map"]},"metadata":{},"sourceType":"module"}