{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { SelectV2 } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { assert, assertShapesMatch } from '../util';\nimport { broadcastTo } from './broadcast_to';\nimport { assertAndGetBroadcastShape } from './broadcast_util';\nimport { op } from './operation';\n/**\r\n * Returns the elements, either `a` or `b` depending on the `condition`.\r\n *\r\n * If the condition is true, select from `a`, otherwise select from `b`.\r\n *\r\n * ```js\r\n * const cond = tf.tensor1d([false, false, true], 'bool');\r\n * const a = tf.tensor1d([1 , 2, 3]);\r\n * const b = tf.tensor1d([-1, -2, -3]);\r\n *\r\n * a.where(cond, b).print();\r\n * ```\r\n *\r\n * @param condition The input condition. Must be of dtype bool.\r\n * @param a If `condition` is rank 1, `a` may have a higher rank but\r\n *     its first dimension must match the size of `condition`.\r\n * @param b A tensor with the same dtype as `a` and with shape that is\r\n *     compatible with `a`.\r\n * @return A tensor with same dtype as `a` and `b`, and shape that is\r\n *     broadcastable from `a` and `b`.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Logical'}\r\n */\n\nfunction where_(condition, a, b) {\n  const $a = convertToTensor(a, 'a', 'where');\n  const $b = convertToTensor(b, 'b', 'where');\n  const $condition = convertToTensor(condition, 'condition', 'where', 'bool'); // TODO: move this logic to forward function when the broadcastTo op is\n  // implemented in WASM.\n  // Find the broadcastable shape for $a and $b.\n\n  const broadcastShape = assertAndGetBroadcastShape($a.shape, $b.shape);\n  const $broadcastedA = broadcastTo($a, broadcastShape);\n  const $broadcastedB = broadcastTo($b, broadcastShape);\n\n  if ($condition.rank === 1) {\n    // If condition rank is 1, then the first dimension must match the size of\n    // condition.\n    assert($condition.shape[0] === $a.shape[0], () => 'The first dimension of `a` must match the size of `condition`.');\n  }\n\n  if ($condition.rank !== 1) {\n    // A must have the same shape as condition.\n    assertShapesMatch($condition.shape, $broadcastedB.shape, 'Error in where: ');\n  }\n\n  const forward = (backend, save) => {\n    const res = backend.select($condition, $broadcastedA, $broadcastedB);\n    save([$condition]);\n    return res;\n  };\n\n  const inputs = {\n    condition: $condition,\n    t: $broadcastedA,\n    e: $broadcastedB\n  };\n  return ENGINE.runKernelFunc(forward, inputs, null\n  /* gradient */\n  , SelectV2);\n}\n\nexport const where = op({\n  where_\n});","map":{"version":3,"sources":["../../src/ops/where.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,MAAR,QAAkC,WAAlC;AACA,SAAQ,QAAR,QAAuC,iBAAvC;AAGA,SAAQ,eAAR,QAA8B,oBAA9B;AAEA,SAAQ,MAAR,EAAgB,iBAAhB,QAAwC,SAAxC;AAEA,SAAQ,WAAR,QAA0B,gBAA1B;AACA,SAAQ,0BAAR,QAAyC,kBAAzC;AACA,SAAQ,EAAR,QAAiB,aAAjB;AAEA;;;;;;;;;;;;;;;;;;;;;;AAsBG;;AACH,SAAS,MAAT,CACI,SADJ,EACkC,CADlC,EACmD,CADnD,EACkE;AAChE,QAAM,EAAE,GAAG,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,OAAT,CAA1B;AACA,QAAM,EAAE,GAAG,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,OAAT,CAA1B;AACA,QAAM,UAAU,GAAG,eAAe,CAAC,SAAD,EAAY,WAAZ,EAAyB,OAAzB,EAAkC,MAAlC,CAAlC,CAHgE,CAIhE;AACA;AACA;;AACA,QAAM,cAAc,GAAG,0BAA0B,CAAC,EAAE,CAAC,KAAJ,EAAW,EAAE,CAAC,KAAd,CAAjD;AACA,QAAM,aAAa,GAAG,WAAW,CAAC,EAAD,EAAK,cAAL,CAAjC;AACA,QAAM,aAAa,GAAG,WAAW,CAAC,EAAD,EAAK,cAAL,CAAjC;;AACA,MAAI,UAAU,CAAC,IAAX,KAAoB,CAAxB,EAA2B;AACzB;AACA;AACA,IAAA,MAAM,CACF,UAAU,CAAC,KAAX,CAAiB,CAAjB,MAAwB,EAAE,CAAC,KAAH,CAAS,CAAT,CADtB,EAEF,MAAM,gEAFJ,CAAN;AAGD;;AAED,MAAI,UAAU,CAAC,IAAX,KAAoB,CAAxB,EAA2B;AACzB;AACA,IAAA,iBAAiB,CACb,UAAU,CAAC,KADE,EACK,aAAa,CAAC,KADnB,EAC0B,kBAD1B,CAAjB;AAED;;AAED,QAAM,OAAO,GAAwB,CAAC,OAAD,EAAU,IAAV,KAAkB;AACrD,UAAM,GAAG,GAAG,OAAO,CAAC,MAAR,CAAe,UAAf,EAA2B,aAA3B,EAA0C,aAA1C,CAAZ;AACA,IAAA,IAAI,CAAC,CAAC,UAAD,CAAD,CAAJ;AACA,WAAO,GAAP;AACD,GAJD;;AAKA,QAAM,MAAM,GAAmB;AAC7B,IAAA,SAAS,EAAE,UADkB;AAE7B,IAAA,CAAC,EAAE,aAF0B;AAG7B,IAAA,CAAC,EAAE;AAH0B,GAA/B;AAKA,SAAO,MAAM,CAAC,aAAP,CACI,OADJ,EACa,MADb,EACkD;AAAK;AADvD,IAEI,QAFJ,CAAP;AAGD;;AAED,OAAO,MAAM,KAAK,GAAG,EAAE,CAAC;AAAC,EAAA;AAAD,CAAD,CAAhB","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { ENGINE } from '../engine';\r\nimport { SelectV2 } from '../kernel_names';\r\nimport { convertToTensor } from '../tensor_util_env';\r\nimport { assert, assertShapesMatch } from '../util';\r\nimport { broadcastTo } from './broadcast_to';\r\nimport { assertAndGetBroadcastShape } from './broadcast_util';\r\nimport { op } from './operation';\r\n/**\r\n * Returns the elements, either `a` or `b` depending on the `condition`.\r\n *\r\n * If the condition is true, select from `a`, otherwise select from `b`.\r\n *\r\n * ```js\r\n * const cond = tf.tensor1d([false, false, true], 'bool');\r\n * const a = tf.tensor1d([1 , 2, 3]);\r\n * const b = tf.tensor1d([-1, -2, -3]);\r\n *\r\n * a.where(cond, b).print();\r\n * ```\r\n *\r\n * @param condition The input condition. Must be of dtype bool.\r\n * @param a If `condition` is rank 1, `a` may have a higher rank but\r\n *     its first dimension must match the size of `condition`.\r\n * @param b A tensor with the same dtype as `a` and with shape that is\r\n *     compatible with `a`.\r\n * @return A tensor with same dtype as `a` and `b`, and shape that is\r\n *     broadcastable from `a` and `b`.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Logical'}\r\n */\r\nfunction where_(condition, a, b) {\r\n    const $a = convertToTensor(a, 'a', 'where');\r\n    const $b = convertToTensor(b, 'b', 'where');\r\n    const $condition = convertToTensor(condition, 'condition', 'where', 'bool');\r\n    // TODO: move this logic to forward function when the broadcastTo op is\r\n    // implemented in WASM.\r\n    // Find the broadcastable shape for $a and $b.\r\n    const broadcastShape = assertAndGetBroadcastShape($a.shape, $b.shape);\r\n    const $broadcastedA = broadcastTo($a, broadcastShape);\r\n    const $broadcastedB = broadcastTo($b, broadcastShape);\r\n    if ($condition.rank === 1) {\r\n        // If condition rank is 1, then the first dimension must match the size of\r\n        // condition.\r\n        assert($condition.shape[0] === $a.shape[0], () => 'The first dimension of `a` must match the size of `condition`.');\r\n    }\r\n    if ($condition.rank !== 1) {\r\n        // A must have the same shape as condition.\r\n        assertShapesMatch($condition.shape, $broadcastedB.shape, 'Error in where: ');\r\n    }\r\n    const forward = (backend, save) => {\r\n        const res = backend.select($condition, $broadcastedA, $broadcastedB);\r\n        save([$condition]);\r\n        return res;\r\n    };\r\n    const inputs = {\r\n        condition: $condition,\r\n        t: $broadcastedA,\r\n        e: $broadcastedB\r\n    };\r\n    return ENGINE.runKernelFunc(forward, inputs, null /* gradient */, SelectV2);\r\n}\r\nexport const where = op({ where_ });\r\n//# sourceMappingURL=where.js.map"]},"metadata":{},"sourceType":"module"}