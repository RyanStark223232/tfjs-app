{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2017 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class SelectProgram {\n  constructor(cRank, shape, rank) {\n    this.variableNames = ['c', 'a', 'b'];\n    this.outputShape = shape;\n    let cCoords;\n    let abCoords;\n\n    if (rank > 4) {\n      throw Error(`Where for rank ${rank} is not yet supported`);\n    }\n\n    if (rank === 1) {\n      abCoords = `resRC`;\n      cCoords = `resRC`;\n    } else {\n      const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n      const cCoordVars = [];\n      const abCoordVars = [];\n\n      for (let i = 0; i < shape.length; i++) {\n        abCoordVars.push(`${currentCoords[i]}`);\n\n        if (i < cRank) {\n          cCoordVars.push(`${currentCoords[i]}`);\n        }\n      }\n\n      cCoords = cCoordVars.join();\n      abCoords = abCoordVars.join();\n    }\n\n    const dtype = getCoordsDataType(rank);\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        float cVal = getC(${cCoords});\n        if (cVal >= 1.0) {\n          setOutput(getA(${abCoords}));\n        } else {\n          setOutput(getB(${abCoords}));\n        }\n      }\n    `;\n  }\n\n}","map":{"version":3,"sources":["../src/select_gpu.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAGH,SAAQ,iBAAR,QAAgC,mBAAhC;AAEA,OAAM,MAAO,aAAP,CAAoB;AAKxB,EAAA,WAAA,CAAY,KAAZ,EAA2B,KAA3B,EAA4C,IAA5C,EAAwD;AAJxD,SAAA,aAAA,GAAgB,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAhB;AAKE,SAAK,WAAL,GAAmB,KAAnB;AAEA,QAAI,OAAJ;AACA,QAAI,QAAJ;;AACA,QAAI,IAAI,GAAG,CAAX,EAAc;AACZ,YAAM,KAAK,CAAC,kBAAkB,IAAI,uBAAvB,CAAX;AACD;;AAED,QAAI,IAAI,KAAK,CAAb,EAAgB;AACd,MAAA,QAAQ,GAAG,OAAX;AACA,MAAA,OAAO,GAAG,OAAV;AACD,KAHD,MAGO;AACL,YAAM,aAAa,GAAG,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,SAAlC,CAAtB;AACA,YAAM,UAAU,GAAG,EAAnB;AACA,YAAM,WAAW,GAAG,EAApB;;AACA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,MAA1B,EAAkC,CAAC,EAAnC,EAAuC;AACrC,QAAA,WAAW,CAAC,IAAZ,CAAiB,GAAG,aAAa,CAAC,CAAD,CAAG,EAApC;;AACA,YAAI,CAAC,GAAG,KAAR,EAAe;AACb,UAAA,UAAU,CAAC,IAAX,CAAgB,GAAG,aAAa,CAAC,CAAD,CAAG,EAAnC;AACD;AACF;;AACD,MAAA,OAAO,GAAG,UAAU,CAAC,IAAX,EAAV;AACA,MAAA,QAAQ,GAAG,WAAW,CAAC,IAAZ,EAAX;AACD;;AAED,UAAM,KAAK,GAAG,iBAAiB,CAAC,IAAD,CAA/B;AAEA,SAAK,QAAL,GAAgB;;UAEV,KAAK;4BACa,OAAO;;2BAER,QAAQ;;2BAER,QAAQ;;;AAG9B,KAVD;AAWD;;AA5CuB","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2017 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { getCoordsDataType } from './shader_compiler';\r\nexport class SelectProgram {\r\n    constructor(cRank, shape, rank) {\r\n        this.variableNames = ['c', 'a', 'b'];\r\n        this.outputShape = shape;\r\n        let cCoords;\r\n        let abCoords;\r\n        if (rank > 4) {\r\n            throw Error(`Where for rank ${rank} is not yet supported`);\r\n        }\r\n        if (rank === 1) {\r\n            abCoords = `resRC`;\r\n            cCoords = `resRC`;\r\n        }\r\n        else {\r\n            const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\r\n            const cCoordVars = [];\r\n            const abCoordVars = [];\r\n            for (let i = 0; i < shape.length; i++) {\r\n                abCoordVars.push(`${currentCoords[i]}`);\r\n                if (i < cRank) {\r\n                    cCoordVars.push(`${currentCoords[i]}`);\r\n                }\r\n            }\r\n            cCoords = cCoordVars.join();\r\n            abCoords = abCoordVars.join();\r\n        }\r\n        const dtype = getCoordsDataType(rank);\r\n        this.userCode = `\r\n      void main() {\r\n        ${dtype} resRC = getOutputCoords();\r\n        float cVal = getC(${cCoords});\r\n        if (cVal >= 1.0) {\r\n          setOutput(getA(${abCoords}));\r\n        } else {\r\n          setOutput(getB(${abCoords}));\r\n        }\r\n      }\r\n    `;\r\n    }\r\n}\r\n//# sourceMappingURL=select_gpu.js.map"]},"metadata":{},"sourceType":"module"}