{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { AvgPoolBackprop } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport * as conv_util from './conv_util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\r\n * Computes the backprop of an 2D avg pool.\r\n *\r\n * @param dy The dy error, of rank 4 or rank 3 of shape\r\n *     [batchSize, height, width, channels]. If rank 3, batch of 1 is\r\n * assumed.\r\n * @param input The input image, of rank 4 or rank 3 of shape\r\n *     [batchSize, height, width, channels]. If rank 3, batch of 1 is\r\n * assumed.\r\n * @param filterSize The filter size: `[filterHeight, filterWidth]`. If\r\n *     `filterSize` is a single number, then `filterHeight == filterWidth`.\r\n * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If\r\n *     `strides` is a single number, then `strideHeight == strideWidth`.\r\n * @param pad A string from: 'same', 'valid'. The type of padding algorithm\r\n *     used in the forward prop of the op.\r\n */\n\nfunction avgPoolBackprop_(dy, input, filterSize, strides, pad) {\n  const $dy = convertToTensor(dy, 'dy', 'avgPoolBackprop');\n  const $input = convertToTensor(input, 'input', 'avgPoolBackprop');\n  util.assert($input.rank === $dy.rank, () => `Rank of input (${$input.rank}) does not match rank of dy (${$dy.rank})`);\n  let input4D = $input;\n  let dy4D = $dy;\n  let reshapedTo4D = false;\n\n  if ($input.rank === 3) {\n    reshapedTo4D = true;\n    input4D = reshape($input, [1, $input.shape[0], $input.shape[1], $input.shape[2]]);\n    dy4D = reshape($dy, [1, $dy.shape[0], $dy.shape[1], $dy.shape[2]]);\n  }\n\n  util.assert(dy4D.rank === 4, () => `Error in avgPoolBackprop: dy must be rank 4 but got rank ` + `${dy4D.rank}.`);\n  util.assert(input4D.rank === 4, () => `Error in avgPoolBackprop: input must be rank 4 but got rank ` + `${input4D.rank}.`);\n\n  const forward = backend => {\n    const convInfo = conv_util.computePool2DInfo(input4D.shape, filterSize, strides, 1\n    /* dilations */\n    , pad);\n    return backend.avgPoolBackprop(dy4D, input4D, convInfo);\n  };\n\n  const inputs = {\n    dy: dy4D,\n    input: input4D\n  };\n  const attrs = {\n    filterSize,\n    strides,\n    pad\n  };\n  const res = ENGINE.runKernelFunc(forward, inputs, null, AvgPoolBackprop, attrs);\n\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n  }\n\n  return res;\n}\n\nexport const avgPoolBackprop = op({\n  avgPoolBackprop_\n});","map":{"version":3,"sources":["../../src/ops/avg_pool_backprop.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { ENGINE } from '../engine';\r\nimport { AvgPoolBackprop } from '../kernel_names';\r\nimport { convertToTensor } from '../tensor_util_env';\r\nimport * as util from '../util';\r\nimport * as conv_util from './conv_util';\r\nimport { op } from './operation';\r\nimport { reshape } from './reshape';\r\n/**\r\n * Computes the backprop of an 2D avg pool.\r\n *\r\n * @param dy The dy error, of rank 4 or rank 3 of shape\r\n *     [batchSize, height, width, channels]. If rank 3, batch of 1 is\r\n * assumed.\r\n * @param input The input image, of rank 4 or rank 3 of shape\r\n *     [batchSize, height, width, channels]. If rank 3, batch of 1 is\r\n * assumed.\r\n * @param filterSize The filter size: `[filterHeight, filterWidth]`. If\r\n *     `filterSize` is a single number, then `filterHeight == filterWidth`.\r\n * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If\r\n *     `strides` is a single number, then `strideHeight == strideWidth`.\r\n * @param pad A string from: 'same', 'valid'. The type of padding algorithm\r\n *     used in the forward prop of the op.\r\n */\r\nfunction avgPoolBackprop_(dy, input, filterSize, strides, pad) {\r\n    const $dy = convertToTensor(dy, 'dy', 'avgPoolBackprop');\r\n    const $input = convertToTensor(input, 'input', 'avgPoolBackprop');\r\n    util.assert($input.rank === $dy.rank, () => `Rank of input (${$input.rank}) does not match rank of dy (${$dy.rank})`);\r\n    let input4D = $input;\r\n    let dy4D = $dy;\r\n    let reshapedTo4D = false;\r\n    if ($input.rank === 3) {\r\n        reshapedTo4D = true;\r\n        input4D =\r\n            reshape($input, [1, $input.shape[0], $input.shape[1], $input.shape[2]]);\r\n        dy4D = reshape($dy, [1, $dy.shape[0], $dy.shape[1], $dy.shape[2]]);\r\n    }\r\n    util.assert(dy4D.rank === 4, () => `Error in avgPoolBackprop: dy must be rank 4 but got rank ` +\r\n        `${dy4D.rank}.`);\r\n    util.assert(input4D.rank === 4, () => `Error in avgPoolBackprop: input must be rank 4 but got rank ` +\r\n        `${input4D.rank}.`);\r\n    const forward = backend => {\r\n        const convInfo = conv_util.computePool2DInfo(input4D.shape, filterSize, strides, 1 /* dilations */, pad);\r\n        return backend.avgPoolBackprop(dy4D, input4D, convInfo);\r\n    };\r\n    const inputs = { dy: dy4D, input: input4D };\r\n    const attrs = { filterSize, strides, pad };\r\n    const res = ENGINE.runKernelFunc(forward, inputs, null, AvgPoolBackprop, attrs);\r\n    if (reshapedTo4D) {\r\n        return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\r\n    }\r\n    return res;\r\n}\r\nexport const avgPoolBackprop = op({ avgPoolBackprop_ });\r\n//# sourceMappingURL=avg_pool_backprop.js.map"]},"metadata":{},"sourceType":"module"}