{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { Transpose } from '@tensorflow/tfjs-core';\nimport { transposeImpl } from './Transpose_impl';\nimport { transposeImplCPU as cpuTranspose } from './Transpose_impl';\nexport var transposeConfig = {\n  kernelName: Transpose,\n  backendName: 'webgl',\n  kernelFunc: function kernelFunc(_ref) {\n    var inputs = _ref.inputs,\n        attrs = _ref.attrs,\n        backend = _ref.backend;\n    var x = inputs.x;\n    var perm = attrs.perm;\n    var webglBackend = backend;\n    var xRank = x.shape.length;\n    var newShape = new Array(xRank);\n\n    for (var i = 0; i < newShape.length; i++) {\n      newShape[i] = x.shape[perm[i]];\n    }\n\n    var out;\n\n    if (webglBackend.shouldExecuteOnCPU([x])) {\n      var xTexData = webglBackend.texData.get(x.dataId);\n      var values = xTexData.values;\n      var outValues = cpuTranspose(values, x.shape, x.dtype, perm, newShape);\n      out = webglBackend.makeTensorInfo(newShape, x.dtype);\n      var outData = webglBackend.texData.get(out.dataId);\n      outData.values = outValues;\n    } else {\n      out = transposeImpl(x, perm, webglBackend);\n    }\n\n    return out;\n  }\n};","map":{"version":3,"sources":["../../src/kernels/Transpose.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAkC,SAAlC,QAA+F,uBAA/F;AAIA,SAAQ,aAAR,QAA4B,kBAA5B;AACA,SAAQ,gBAAgB,IAAI,YAA5B,QAA+C,kBAA/C;AAEA,OAAO,IAAM,eAAe,GAAiB;AAC3C,EAAA,UAAU,EAAE,SAD+B;AAE3C,EAAA,WAAW,EAAE,OAF8B;AAG3C,EAAA,UAAU,EAAE,0BAA6B;AAAA,QAA3B,MAA2B,QAA3B,MAA2B;AAAA,QAAnB,KAAmB,QAAnB,KAAmB;AAAA,QAAZ,OAAY,QAAZ,OAAY;AAAA,QAChC,CADgC,GAC3B,MAD2B,CAChC,CADgC;AAAA,QAEhC,IAFgC,GAExB,KAFwB,CAEhC,IAFgC;AAGvC,QAAM,YAAY,GAAG,OAArB;AAEA,QAAM,KAAK,GAAG,CAAC,CAAC,KAAF,CAAQ,MAAtB;AAEA,QAAM,QAAQ,GAAa,IAAI,KAAJ,CAAU,KAAV,CAA3B;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,QAAQ,CAAC,MAA7B,EAAqC,CAAC,EAAtC,EAA0C;AACxC,MAAA,QAAQ,CAAC,CAAD,CAAR,GAAc,CAAC,CAAC,KAAF,CAAQ,IAAI,CAAC,CAAD,CAAZ,CAAd;AACD;;AAED,QAAI,GAAJ;;AACA,QAAI,YAAY,CAAC,kBAAb,CAAgC,CAAC,CAAD,CAAhC,CAAJ,EAA0C;AACxC,UAAM,QAAQ,GAAG,YAAY,CAAC,OAAb,CAAqB,GAArB,CAAyB,CAAC,CAAC,MAA3B,CAAjB;AACA,UAAM,MAAM,GAAG,QAAQ,CAAC,MAAxB;AACA,UAAM,SAAS,GAAG,YAAY,CAAC,MAAD,EAAS,CAAC,CAAC,KAAX,EAAkB,CAAC,CAAC,KAApB,EAA2B,IAA3B,EAAiC,QAAjC,CAA9B;AAEA,MAAA,GAAG,GAAG,YAAY,CAAC,cAAb,CAA4B,QAA5B,EAAsC,CAAC,CAAC,KAAxC,CAAN;AACA,UAAM,OAAO,GAAG,YAAY,CAAC,OAAb,CAAqB,GAArB,CAAyB,GAAG,CAAC,MAA7B,CAAhB;AACA,MAAA,OAAO,CAAC,MAAR,GAAiB,SAAjB;AACD,KARD,MAQO;AACL,MAAA,GAAG,GAAG,aAAa,CAAC,CAAD,EAAI,IAAJ,EAAU,YAAV,CAAnB;AACD;;AACD,WAAO,GAAP;AACD;AA5B0C,CAAtC","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { Transpose } from '@tensorflow/tfjs-core';\r\nimport { transposeImpl } from './Transpose_impl';\r\nimport { transposeImplCPU as cpuTranspose } from './Transpose_impl';\r\nexport const transposeConfig = {\r\n    kernelName: Transpose,\r\n    backendName: 'webgl',\r\n    kernelFunc: ({ inputs, attrs, backend }) => {\r\n        const { x } = inputs;\r\n        const { perm } = attrs;\r\n        const webglBackend = backend;\r\n        const xRank = x.shape.length;\r\n        const newShape = new Array(xRank);\r\n        for (let i = 0; i < newShape.length; i++) {\r\n            newShape[i] = x.shape[perm[i]];\r\n        }\r\n        let out;\r\n        if (webglBackend.shouldExecuteOnCPU([x])) {\r\n            const xTexData = webglBackend.texData.get(x.dataId);\r\n            const values = xTexData.values;\r\n            const outValues = cpuTranspose(values, x.shape, x.dtype, perm, newShape);\r\n            out = webglBackend.makeTensorInfo(newShape, x.dtype);\r\n            const outData = webglBackend.texData.get(out.dataId);\r\n            outData.values = outValues;\r\n        }\r\n        else {\r\n            out = transposeImpl(x, perm, webglBackend);\r\n        }\r\n        return out;\r\n    }\r\n};\r\n//# sourceMappingURL=Transpose.js.map"]},"metadata":{},"sourceType":"module"}