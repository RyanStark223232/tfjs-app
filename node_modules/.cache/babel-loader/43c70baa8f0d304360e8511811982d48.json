{"ast":null,"code":"import { isBigNumber } from '../../utils/is';\nimport { factory } from '../../utils/factory';\nvar name = 'rotationMatrix';\nvar dependencies = ['typed', 'config', 'multiplyScalar', 'addScalar', 'unaryMinus', 'norm', 'matrix', 'BigNumber', 'DenseMatrix', 'SparseMatrix', 'cos', 'sin'];\nexport var createRotationMatrix = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      multiplyScalar = _ref.multiplyScalar,\n      addScalar = _ref.addScalar,\n      unaryMinus = _ref.unaryMinus,\n      norm = _ref.norm,\n      BigNumber = _ref.BigNumber,\n      matrix = _ref.matrix,\n      DenseMatrix = _ref.DenseMatrix,\n      SparseMatrix = _ref.SparseMatrix,\n      cos = _ref.cos,\n      sin = _ref.sin;\n  /**\n   * Create a 2-dimensional counter-clockwise rotation matrix (2x2) for a given angle (expressed in radians).\n   * Create a 2-dimensional counter-clockwise rotation matrix (3x3) by a given angle (expressed in radians) around a given axis (1x3).\n   *\n   * Syntax:\n   *\n   *    math.rotationMatrix(theta)\n   *    math.rotationMatrix(theta, format)\n   *    math.rotationMatrix(theta, [v])\n   *    math.rotationMatrix(theta, [v], format)\n   *\n   * Examples:\n   *\n   *    math.rotationMatrix(math.pi / 2)                      // returns [[0, -1], [1, 0]]\n   *    math.rotationMatrix(math.bignumber(45))               // returns [[ bignumber(1 / sqrt(2)), - bignumber(1 / sqrt(2))], [ bignumber(1 / sqrt(2)),  bignumber(1 / sqrt(2))]]\n   *    math.rotationMatrix(math.complex(1 + i))              // returns [[cos(1 + i), -sin(1 + i)], [sin(1 + i), cos(1 + i)]]\n   *    math.rotationMatrix(math.unit('1rad'))                // returns [[cos(1), -sin(1)], [sin(1), cos(1)]]\n   *\n   *    math.rotationMatrix(math.pi / 2, [0, 1, 0])           // returns [[0, 0, 1], [0, 1, 0], [-1, 0, 0]]\n   *    math.rotationMatrix(math.pi / 2, matrix([0, 1, 0]))   // returns matrix([[0, 0, 1], [0, 1, 0], [-1, 0, 0]])\n   *\n   *\n   * See also:\n   *\n   *    matrix, cos, sin\n   *\n   *\n   * @param {number | BigNumber | Complex | Unit} theta    Rotation angle\n   * @param {Array | Matrix} [v]                           Rotation axis\n   * @param {string} [format]                              Result Matrix storage format\n   * @return {Array | Matrix}                              Rotation matrix\n   */\n\n  return typed(name, {\n    '': function _() {\n      return config.matrix === 'Matrix' ? matrix([]) : [];\n    },\n    string: function string(format) {\n      return matrix(format);\n    },\n    'number | BigNumber | Complex | Unit': function numberBigNumberComplexUnit(theta) {\n      return _rotationMatrix2x2(theta, config.matrix === 'Matrix' ? 'dense' : undefined);\n    },\n    'number | BigNumber | Complex | Unit, string': function numberBigNumberComplexUnitString(theta, format) {\n      return _rotationMatrix2x2(theta, format);\n    },\n    'number | BigNumber | Complex | Unit, Array': function numberBigNumberComplexUnitArray(theta, v) {\n      var matrixV = matrix(v);\n\n      _validateVector(matrixV);\n\n      return _rotationMatrix3x3(theta, matrixV, config.matrix === 'Matrix' ? 'dense' : undefined);\n    },\n    'number | BigNumber | Complex | Unit, Matrix': function numberBigNumberComplexUnitMatrix(theta, v) {\n      _validateVector(v);\n\n      return _rotationMatrix3x3(theta, v, config.matrix === 'Matrix' ? 'dense' : undefined);\n    },\n    'number | BigNumber | Complex | Unit, Array, string': function numberBigNumberComplexUnitArrayString(theta, v, format) {\n      var matrixV = matrix(v);\n\n      _validateVector(matrixV);\n\n      return _rotationMatrix3x3(theta, matrixV, format);\n    },\n    'number | BigNumber | Complex | Unit, Matrix, string': function numberBigNumberComplexUnitMatrixString(theta, v, format) {\n      _validateVector(v);\n\n      return _rotationMatrix3x3(theta, v, format);\n    }\n  });\n  /**\n   * Returns 2x2 matrix of 2D rotation of angle theta\n   *\n   * @param {number | BigNumber | Complex | Unit} theta  The rotation angle\n   * @param {string} format                              The result Matrix storage format\n   * @returns {Matrix}\n   * @private\n   */\n\n  function _rotationMatrix2x2(theta, format) {\n    var Big = isBigNumber(theta);\n    var minusOne = Big ? new BigNumber(-1) : -1;\n    var cosTheta = cos(theta);\n    var sinTheta = sin(theta);\n    var data = [[cosTheta, multiplyScalar(minusOne, sinTheta)], [sinTheta, cosTheta]];\n    return _convertToFormat(data, format);\n  }\n\n  function _validateVector(v) {\n    var size = v.size();\n\n    if (size.length < 1 || size[0] !== 3) {\n      throw new RangeError('Vector must be of dimensions 1x3');\n    }\n  }\n\n  function _mul(array) {\n    return array.reduce(function (p, curr) {\n      return multiplyScalar(p, curr);\n    });\n  }\n\n  function _convertToFormat(data, format) {\n    if (format) {\n      if (format === 'sparse') {\n        return new SparseMatrix(data);\n      }\n\n      if (format === 'dense') {\n        return new DenseMatrix(data);\n      }\n\n      throw new TypeError(\"Unknown matrix type \\\"\".concat(format, \"\\\"\"));\n    }\n\n    return data;\n  }\n  /**\n   * Returns a 3x3 matrix of rotation of angle theta around vector v\n   *\n   * @param {number | BigNumber | Complex | Unit} theta The rotation angle\n   * @param {Matrix} v                                  The rotation axis vector\n   * @param {string} format                             The storage format of the resulting matrix\n   * @returns {Matrix}\n   * @private\n   */\n\n\n  function _rotationMatrix3x3(theta, v, format) {\n    var normV = norm(v);\n\n    if (normV === 0) {\n      return _convertToFormat([], format);\n    }\n\n    var Big = isBigNumber(theta) ? BigNumber : null;\n    var one = Big ? new Big(1) : 1;\n    var minusOne = Big ? new Big(-1) : -1;\n    var vx = Big ? new Big(v.get([0]) / normV) : v.get([0]) / normV;\n    var vy = Big ? new Big(v.get([1]) / normV) : v.get([1]) / normV;\n    var vz = Big ? new Big(v.get([2]) / normV) : v.get([2]) / normV;\n    var c = cos(theta);\n    var oneMinusC = addScalar(one, unaryMinus(c));\n    var s = sin(theta);\n    var r11 = addScalar(c, _mul([vx, vx, oneMinusC]));\n    var r12 = addScalar(_mul([vx, vy, oneMinusC]), _mul([minusOne, vz, s]));\n    var r13 = addScalar(_mul([vx, vz, oneMinusC]), _mul([vy, s]));\n    var r21 = addScalar(_mul([vx, vy, oneMinusC]), _mul([vz, s]));\n    var r22 = addScalar(c, _mul([vy, vy, oneMinusC]));\n    var r23 = addScalar(_mul([vy, vz, oneMinusC]), _mul([minusOne, vx, s]));\n    var r31 = addScalar(_mul([vx, vz, oneMinusC]), _mul([minusOne, vy, s]));\n    var r32 = addScalar(_mul([vy, vz, oneMinusC]), _mul([vx, s]));\n    var r33 = addScalar(c, _mul([vz, vz, oneMinusC]));\n    var data = [[r11, r12, r13], [r21, r22, r23], [r31, r32, r33]];\n    return _convertToFormat(data, format);\n  }\n});","map":{"version":3,"sources":["C:/Users/wongh/finger/node_modules/mathjs/es/function/matrix/rotationMatrix.js"],"names":["isBigNumber","factory","name","dependencies","createRotationMatrix","_ref","typed","config","multiplyScalar","addScalar","unaryMinus","norm","BigNumber","matrix","DenseMatrix","SparseMatrix","cos","sin","_","string","format","numberBigNumberComplexUnit","theta","_rotationMatrix2x2","undefined","numberBigNumberComplexUnitString","numberBigNumberComplexUnitArray","v","matrixV","_validateVector","_rotationMatrix3x3","numberBigNumberComplexUnitMatrix","numberBigNumberComplexUnitArrayString","numberBigNumberComplexUnitMatrixString","Big","minusOne","cosTheta","sinTheta","data","_convertToFormat","size","length","RangeError","_mul","array","reduce","p","curr","TypeError","concat","normV","one","vx","get","vy","vz","c","oneMinusC","s","r11","r12","r13","r21","r22","r23","r31","r32","r33"],"mappings":"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","sourcesContent":["import { isBigNumber } from '../../utils/is';\nimport { factory } from '../../utils/factory';\nvar name = 'rotationMatrix';\nvar dependencies = ['typed', 'config', 'multiplyScalar', 'addScalar', 'unaryMinus', 'norm', 'matrix', 'BigNumber', 'DenseMatrix', 'SparseMatrix', 'cos', 'sin'];\nexport var createRotationMatrix = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      multiplyScalar = _ref.multiplyScalar,\n      addScalar = _ref.addScalar,\n      unaryMinus = _ref.unaryMinus,\n      norm = _ref.norm,\n      BigNumber = _ref.BigNumber,\n      matrix = _ref.matrix,\n      DenseMatrix = _ref.DenseMatrix,\n      SparseMatrix = _ref.SparseMatrix,\n      cos = _ref.cos,\n      sin = _ref.sin;\n\n  /**\n   * Create a 2-dimensional counter-clockwise rotation matrix (2x2) for a given angle (expressed in radians).\n   * Create a 2-dimensional counter-clockwise rotation matrix (3x3) by a given angle (expressed in radians) around a given axis (1x3).\n   *\n   * Syntax:\n   *\n   *    math.rotationMatrix(theta)\n   *    math.rotationMatrix(theta, format)\n   *    math.rotationMatrix(theta, [v])\n   *    math.rotationMatrix(theta, [v], format)\n   *\n   * Examples:\n   *\n   *    math.rotationMatrix(math.pi / 2)                      // returns [[0, -1], [1, 0]]\n   *    math.rotationMatrix(math.bignumber(45))               // returns [[ bignumber(1 / sqrt(2)), - bignumber(1 / sqrt(2))], [ bignumber(1 / sqrt(2)),  bignumber(1 / sqrt(2))]]\n   *    math.rotationMatrix(math.complex(1 + i))              // returns [[cos(1 + i), -sin(1 + i)], [sin(1 + i), cos(1 + i)]]\n   *    math.rotationMatrix(math.unit('1rad'))                // returns [[cos(1), -sin(1)], [sin(1), cos(1)]]\n   *\n   *    math.rotationMatrix(math.pi / 2, [0, 1, 0])           // returns [[0, 0, 1], [0, 1, 0], [-1, 0, 0]]\n   *    math.rotationMatrix(math.pi / 2, matrix([0, 1, 0]))   // returns matrix([[0, 0, 1], [0, 1, 0], [-1, 0, 0]])\n   *\n   *\n   * See also:\n   *\n   *    matrix, cos, sin\n   *\n   *\n   * @param {number | BigNumber | Complex | Unit} theta    Rotation angle\n   * @param {Array | Matrix} [v]                           Rotation axis\n   * @param {string} [format]                              Result Matrix storage format\n   * @return {Array | Matrix}                              Rotation matrix\n   */\n  return typed(name, {\n    '': function _() {\n      return config.matrix === 'Matrix' ? matrix([]) : [];\n    },\n    string: function string(format) {\n      return matrix(format);\n    },\n    'number | BigNumber | Complex | Unit': function numberBigNumberComplexUnit(theta) {\n      return _rotationMatrix2x2(theta, config.matrix === 'Matrix' ? 'dense' : undefined);\n    },\n    'number | BigNumber | Complex | Unit, string': function numberBigNumberComplexUnitString(theta, format) {\n      return _rotationMatrix2x2(theta, format);\n    },\n    'number | BigNumber | Complex | Unit, Array': function numberBigNumberComplexUnitArray(theta, v) {\n      var matrixV = matrix(v);\n\n      _validateVector(matrixV);\n\n      return _rotationMatrix3x3(theta, matrixV, config.matrix === 'Matrix' ? 'dense' : undefined);\n    },\n    'number | BigNumber | Complex | Unit, Matrix': function numberBigNumberComplexUnitMatrix(theta, v) {\n      _validateVector(v);\n\n      return _rotationMatrix3x3(theta, v, config.matrix === 'Matrix' ? 'dense' : undefined);\n    },\n    'number | BigNumber | Complex | Unit, Array, string': function numberBigNumberComplexUnitArrayString(theta, v, format) {\n      var matrixV = matrix(v);\n\n      _validateVector(matrixV);\n\n      return _rotationMatrix3x3(theta, matrixV, format);\n    },\n    'number | BigNumber | Complex | Unit, Matrix, string': function numberBigNumberComplexUnitMatrixString(theta, v, format) {\n      _validateVector(v);\n\n      return _rotationMatrix3x3(theta, v, format);\n    }\n  });\n  /**\n   * Returns 2x2 matrix of 2D rotation of angle theta\n   *\n   * @param {number | BigNumber | Complex | Unit} theta  The rotation angle\n   * @param {string} format                              The result Matrix storage format\n   * @returns {Matrix}\n   * @private\n   */\n\n  function _rotationMatrix2x2(theta, format) {\n    var Big = isBigNumber(theta);\n    var minusOne = Big ? new BigNumber(-1) : -1;\n    var cosTheta = cos(theta);\n    var sinTheta = sin(theta);\n    var data = [[cosTheta, multiplyScalar(minusOne, sinTheta)], [sinTheta, cosTheta]];\n    return _convertToFormat(data, format);\n  }\n\n  function _validateVector(v) {\n    var size = v.size();\n\n    if (size.length < 1 || size[0] !== 3) {\n      throw new RangeError('Vector must be of dimensions 1x3');\n    }\n  }\n\n  function _mul(array) {\n    return array.reduce(function (p, curr) {\n      return multiplyScalar(p, curr);\n    });\n  }\n\n  function _convertToFormat(data, format) {\n    if (format) {\n      if (format === 'sparse') {\n        return new SparseMatrix(data);\n      }\n\n      if (format === 'dense') {\n        return new DenseMatrix(data);\n      }\n\n      throw new TypeError(\"Unknown matrix type \\\"\".concat(format, \"\\\"\"));\n    }\n\n    return data;\n  }\n  /**\n   * Returns a 3x3 matrix of rotation of angle theta around vector v\n   *\n   * @param {number | BigNumber | Complex | Unit} theta The rotation angle\n   * @param {Matrix} v                                  The rotation axis vector\n   * @param {string} format                             The storage format of the resulting matrix\n   * @returns {Matrix}\n   * @private\n   */\n\n\n  function _rotationMatrix3x3(theta, v, format) {\n    var normV = norm(v);\n\n    if (normV === 0) {\n      return _convertToFormat([], format);\n    }\n\n    var Big = isBigNumber(theta) ? BigNumber : null;\n    var one = Big ? new Big(1) : 1;\n    var minusOne = Big ? new Big(-1) : -1;\n    var vx = Big ? new Big(v.get([0]) / normV) : v.get([0]) / normV;\n    var vy = Big ? new Big(v.get([1]) / normV) : v.get([1]) / normV;\n    var vz = Big ? new Big(v.get([2]) / normV) : v.get([2]) / normV;\n    var c = cos(theta);\n    var oneMinusC = addScalar(one, unaryMinus(c));\n    var s = sin(theta);\n    var r11 = addScalar(c, _mul([vx, vx, oneMinusC]));\n    var r12 = addScalar(_mul([vx, vy, oneMinusC]), _mul([minusOne, vz, s]));\n    var r13 = addScalar(_mul([vx, vz, oneMinusC]), _mul([vy, s]));\n    var r21 = addScalar(_mul([vx, vy, oneMinusC]), _mul([vz, s]));\n    var r22 = addScalar(c, _mul([vy, vy, oneMinusC]));\n    var r23 = addScalar(_mul([vy, vz, oneMinusC]), _mul([minusOne, vx, s]));\n    var r31 = addScalar(_mul([vx, vz, oneMinusC]), _mul([minusOne, vy, s]));\n    var r32 = addScalar(_mul([vy, vz, oneMinusC]), _mul([vx, s]));\n    var r33 = addScalar(c, _mul([vz, vz, oneMinusC]));\n    var data = [[r11, r12, r13], [r21, r22, r23], [r31, r32, r33]];\n    return _convertToFormat(data, format);\n  }\n});"]},"metadata":{},"sourceType":"module"}