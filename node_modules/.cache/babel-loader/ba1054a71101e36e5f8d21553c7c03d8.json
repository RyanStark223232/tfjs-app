{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { backend_util, MaxPool, util } from '@tensorflow/tfjs-core';\nimport { Pool2DProgram } from '../pool_gpu';\nimport { assertNotComplex } from '../webgl_util';\nimport { identity } from './Identity';\nexport function maxPool(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  assertNotComplex(x, 'maxPool');\n  const {\n    filterSize,\n    strides,\n    pad,\n    dimRoundingMode\n  } = attrs;\n  const dilations = 1;\n  util.assert(backend_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in maxPool: Either strides or dilations must be 1. ' + `Got strides ${strides} and dilations '${dilations}'`);\n  const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode);\n\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 && util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    return identity({\n      inputs: {\n        x\n      },\n      backend\n    });\n  }\n\n  const maxPoolProgram = new Pool2DProgram(convInfo, 'max', false);\n  return backend.runWebGLProgram(maxPoolProgram, [x], x.dtype);\n}\nexport const maxPoolConfig = {\n  kernelName: MaxPool,\n  backendName: 'webgl',\n  kernelFunc: maxPool\n};","map":{"version":3,"sources":["../../src/kernels/MaxPool.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AACH,SAAQ,YAAR,EAAgD,OAAhD,EAAkG,IAAlG,QAA6G,uBAA7G;AAGA,SAAQ,aAAR,QAA4B,aAA5B;AACA,SAAQ,gBAAR,QAA+B,eAA/B;AACA,SAAQ,QAAR,QAAuB,YAAvB;AAEA,OAAM,SAAU,OAAV,CAAkB,IAAlB,EAIL;AACC,QAAM;AAAC,IAAA,MAAD;AAAS,IAAA,OAAT;AAAkB,IAAA;AAAlB,MAA2B,IAAjC;AACA,QAAM;AAAC,IAAA;AAAD,MAAM,MAAZ;AACA,EAAA,gBAAgB,CAAC,CAAD,EAAI,SAAJ,CAAhB;AACA,QAAM;AAAC,IAAA,UAAD;AAAa,IAAA,OAAb;AAAsB,IAAA,GAAtB;AAA2B,IAAA;AAA3B,MAA8C,KAApD;AACA,QAAM,SAAS,GAAG,CAAlB;AAEA,EAAA,IAAI,CAAC,MAAL,CACI,YAAY,CAAC,8BAAb,CAA4C,OAA5C,EAAqD,SAArD,CADJ,EAEI,MAAM,8DACF,eAAe,OAAO,mBAAmB,SAAS,GAH1D;AAKA,QAAM,QAAQ,GAAG,YAAY,CAAC,iBAAb,CACb,CAAC,CAAC,KADW,EACgC,UADhC,EAC4C,OAD5C,EAEb,SAFa,EAEF,GAFE,EAEG,eAFH,CAAjB;;AAGA,MAAI,QAAQ,CAAC,WAAT,KAAyB,CAAzB,IAA8B,QAAQ,CAAC,YAAT,KAA0B,CAAxD,IACA,IAAI,CAAC,WAAL,CAAiB,QAAQ,CAAC,OAA1B,EAAmC,QAAQ,CAAC,QAA5C,CADJ,EAC2D;AACzD,WAAO,QAAQ,CAAC;AAAC,MAAA,MAAM,EAAE;AAAC,QAAA;AAAD,OAAT;AAAc,MAAA;AAAd,KAAD,CAAf;AACD;;AACD,QAAM,cAAc,GAAG,IAAI,aAAJ,CAAkB,QAAlB,EAA4B,KAA5B,EAAmC,KAAnC,CAAvB;AACA,SAAO,OAAO,CAAC,eAAR,CAAwB,cAAxB,EAAwC,CAAC,CAAD,CAAxC,EAA6C,CAAC,CAAC,KAA/C,CAAP;AACD;AAED,OAAO,MAAM,aAAa,GAAiB;AACzC,EAAA,UAAU,EAAE,OAD6B;AAEzC,EAAA,WAAW,EAAE,OAF4B;AAGzC,EAAA,UAAU,EAAE;AAH6B,CAApC","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { backend_util, MaxPool, util } from '@tensorflow/tfjs-core';\r\nimport { Pool2DProgram } from '../pool_gpu';\r\nimport { assertNotComplex } from '../webgl_util';\r\nimport { identity } from './Identity';\r\nexport function maxPool(args) {\r\n    const { inputs, backend, attrs } = args;\r\n    const { x } = inputs;\r\n    assertNotComplex(x, 'maxPool');\r\n    const { filterSize, strides, pad, dimRoundingMode } = attrs;\r\n    const dilations = 1;\r\n    util.assert(backend_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in maxPool: Either strides or dilations must be 1. ' +\r\n        `Got strides ${strides} and dilations '${dilations}'`);\r\n    const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode);\r\n    if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\r\n        util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\r\n        return identity({ inputs: { x }, backend });\r\n    }\r\n    const maxPoolProgram = new Pool2DProgram(convInfo, 'max', false);\r\n    return backend.runWebGLProgram(maxPoolProgram, [x], x.dtype);\r\n}\r\nexport const maxPoolConfig = {\r\n    kernelName: MaxPool,\r\n    backendName: 'webgl',\r\n    kernelFunc: maxPool\r\n};\r\n//# sourceMappingURL=MaxPool.js.map"]},"metadata":{},"sourceType":"module"}