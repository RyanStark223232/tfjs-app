{"ast":null,"code":"import _slicedToArray from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { Greater } from '../kernel_names';\nimport { makeTypesMatch } from '../tensor_util';\nimport { convertToTensor } from '../tensor_util_env';\nimport { assertAndGetBroadcastShape } from './broadcast_util';\nimport { op } from './operation';\n/**\r\n * Returns the truth value of (a > b) element-wise. Supports broadcasting.\r\n *\r\n * ```js\r\n * const a = tf.tensor1d([1, 2, 3]);\r\n * const b = tf.tensor1d([2, 2, 2]);\r\n *\r\n * a.greater(b).print();\r\n * ```\r\n *\r\n * @param a The first input tensor.\r\n * @param b The second input tensor. Must have the same dtype as `a`.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Logical'}\r\n */\n\nfunction greater_(a, b) {\n  var $a = convertToTensor(a, 'a', 'greater');\n  var $b = convertToTensor(b, 'b', 'greater');\n\n  var _makeTypesMatch = makeTypesMatch($a, $b);\n\n  var _makeTypesMatch2 = _slicedToArray(_makeTypesMatch, 2);\n\n  $a = _makeTypesMatch2[0];\n  $b = _makeTypesMatch2[1];\n  assertAndGetBroadcastShape($a.shape, $b.shape);\n\n  var forward = function forward(backend) {\n    return backend.greater($a, $b);\n  };\n\n  var inputs = {\n    a: $a,\n    b: $b\n  };\n  return ENGINE.runKernelFunc(forward, inputs, null\n  /* grad */\n  , Greater);\n}\n\nexport var greater = op({\n  greater_: greater_\n});","map":{"version":3,"sources":["../../src/ops/greater.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AACH,SAAQ,MAAR,QAAkC,WAAlC;AACA,SAAQ,OAAR,QAAqC,iBAArC;AAGA,SAAQ,cAAR,QAA6B,gBAA7B;AACA,SAAQ,eAAR,QAA8B,oBAA9B;AAGA,SAAQ,0BAAR,QAAyC,kBAAzC;AACA,SAAQ,EAAR,QAAiB,aAAjB;AAEA;;;;;;;;;;;;;;AAcG;;AACH,SAAS,QAAT,CACI,CADJ,EAC0B,CAD1B,EAC8C;AAC5C,MAAI,EAAE,GAAG,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,SAAT,CAAxB;AACA,MAAI,EAAE,GAAG,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,SAAT,CAAxB;;AAF4C,wBAGjC,cAAc,CAAC,EAAD,EAAK,EAAL,CAHmB;;AAAA;;AAG3C,EAAA,EAH2C;AAGvC,EAAA,EAHuC;AAK5C,EAAA,0BAA0B,CAAC,EAAE,CAAC,KAAJ,EAAW,EAAE,CAAC,KAAd,CAA1B;;AAEA,MAAM,OAAO,GAAwB,SAA/B,OAA+B,CAAA,OAAO;AAAA,WAAI,OAAO,CAAC,OAAR,CAAgB,EAAhB,EAAoB,EAApB,CAAJ;AAAA,GAA5C;;AAEA,MAAM,MAAM,GAAkB;AAAC,IAAA,CAAC,EAAE,EAAJ;AAAQ,IAAA,CAAC,EAAE;AAAX,GAA9B;AAEA,SAAO,MAAM,CAAC,aAAP,CACI,OADJ,EACa,MADb,EAC6C;AAAK;AADlD,IAEI,OAFJ,CAAP;AAGD;;AAED,OAAO,IAAM,OAAO,GAAG,EAAE,CAAC;AAAC,EAAA,QAAQ,EAAR;AAAD,CAAD,CAAlB","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { ENGINE } from '../engine';\r\nimport { Greater } from '../kernel_names';\r\nimport { makeTypesMatch } from '../tensor_util';\r\nimport { convertToTensor } from '../tensor_util_env';\r\nimport { assertAndGetBroadcastShape } from './broadcast_util';\r\nimport { op } from './operation';\r\n/**\r\n * Returns the truth value of (a > b) element-wise. Supports broadcasting.\r\n *\r\n * ```js\r\n * const a = tf.tensor1d([1, 2, 3]);\r\n * const b = tf.tensor1d([2, 2, 2]);\r\n *\r\n * a.greater(b).print();\r\n * ```\r\n *\r\n * @param a The first input tensor.\r\n * @param b The second input tensor. Must have the same dtype as `a`.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Logical'}\r\n */\r\nfunction greater_(a, b) {\r\n    let $a = convertToTensor(a, 'a', 'greater');\r\n    let $b = convertToTensor(b, 'b', 'greater');\r\n    [$a, $b] = makeTypesMatch($a, $b);\r\n    assertAndGetBroadcastShape($a.shape, $b.shape);\r\n    const forward = backend => backend.greater($a, $b);\r\n    const inputs = { a: $a, b: $b };\r\n    return ENGINE.runKernelFunc(forward, inputs, null /* grad */, Greater);\r\n}\r\nexport const greater = op({ greater_ });\r\n//# sourceMappingURL=greater.js.map"]},"metadata":{},"sourceType":"module"}