{"ast":null,"code":"import _slicedToArray from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { GatherV2 } from '../kernel_names';\nimport { getUndoAxesPermutation } from '../ops/axis_util';\nimport { reshape } from '../ops/reshape';\nimport { transpose } from '../ops/transpose';\nimport { unsortedSegmentSum } from '../ops/unsorted_segment_sum';\nimport { parseAxisParam } from '../util';\nexport var gatherGradConfig = {\n  kernelName: GatherV2,\n  inputsToSave: ['x', 'indices'],\n  gradFunc: function gradFunc(dy, saved, attrs) {\n    var _saved = _slicedToArray(saved, 2),\n        x = _saved[0],\n        _indices = _saved[1];\n\n    var axis = attrs.axis;\n    var parsedAxis = parseAxisParam(axis, x.shape)[0];\n\n    var derX = function derX() {\n      var paramsShape = x.shape;\n      var indicesSize = _indices.size;\n      var outerShape = paramsShape.slice(0, parsedAxis);\n      var outerDims = outerShape.length;\n      var innerShape = paramsShape.slice(axis, paramsShape.length).slice(1);\n      var innerDims = innerShape.length;\n      var outerAxesIndices = arrayRange(0, outerDims);\n      var innerAxesIndices = arrayRange(outerDims + 1, outerDims + 1 + innerDims);\n      var valuesShape = arrayConcat([outerShape, [indicesSize], innerShape]);\n      var values = reshape(dy, valuesShape);\n      var reshapedIndices = reshape(_indices, [indicesSize]);\n      var transposeDims = arrayConcat([[outerDims], outerAxesIndices, innerAxesIndices]);\n      var valuesTranspose = transpose(values, transposeDims);\n      var paramsGrad = unsortedSegmentSum(valuesTranspose, reshapedIndices, x.shape[parsedAxis]);\n      var invertTransposeDims = getUndoAxesPermutation(transposeDims);\n      paramsGrad = transpose(paramsGrad, invertTransposeDims);\n      return paramsGrad;\n    };\n\n    return {\n      x: derX,\n      indices: function indices() {\n        return _indices;\n      }\n    };\n  }\n};\n\nfunction arrayRange(start, stop) {\n  var result = [];\n\n  for (var i = start; i < stop; ++i) {\n    result.push(i);\n  }\n\n  return result;\n}\n\nfunction arrayConcat(arrays) {\n  var result = [];\n\n  for (var i = 0; i < arrays.length; ++i) {\n    for (var j = 0; j < arrays[i].length; ++j) {\n      result.push(arrays[i][j]);\n    }\n  }\n\n  return result;\n}","map":{"version":3,"sources":["../../src/gradients/GatherV2_grad.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { GatherV2 } from '../kernel_names';\r\nimport { getUndoAxesPermutation } from '../ops/axis_util';\r\nimport { reshape } from '../ops/reshape';\r\nimport { transpose } from '../ops/transpose';\r\nimport { unsortedSegmentSum } from '../ops/unsorted_segment_sum';\r\nimport { parseAxisParam } from '../util';\r\nexport const gatherGradConfig = {\r\n    kernelName: GatherV2,\r\n    inputsToSave: ['x', 'indices'],\r\n    gradFunc: (dy, saved, attrs) => {\r\n        const [x, indices] = saved;\r\n        const { axis } = attrs;\r\n        const parsedAxis = parseAxisParam(axis, x.shape)[0];\r\n        const derX = () => {\r\n            const paramsShape = x.shape;\r\n            const indicesSize = indices.size;\r\n            const outerShape = paramsShape.slice(0, parsedAxis);\r\n            const outerDims = outerShape.length;\r\n            const innerShape = paramsShape.slice(axis, paramsShape.length).slice(1);\r\n            const innerDims = innerShape.length;\r\n            const outerAxesIndices = arrayRange(0, outerDims);\r\n            const innerAxesIndices = arrayRange(outerDims + 1, outerDims + 1 + innerDims);\r\n            const valuesShape = arrayConcat([outerShape, [indicesSize], innerShape]);\r\n            const values = reshape(dy, valuesShape);\r\n            const reshapedIndices = reshape(indices, [indicesSize]);\r\n            const transposeDims = arrayConcat([[outerDims], outerAxesIndices, innerAxesIndices]);\r\n            const valuesTranspose = transpose(values, transposeDims);\r\n            let paramsGrad = unsortedSegmentSum(valuesTranspose, reshapedIndices, x.shape[parsedAxis]);\r\n            const invertTransposeDims = getUndoAxesPermutation(transposeDims);\r\n            paramsGrad = transpose(paramsGrad, invertTransposeDims);\r\n            return paramsGrad;\r\n        };\r\n        return { x: derX, indices: () => indices };\r\n    }\r\n};\r\nfunction arrayRange(start, stop) {\r\n    const result = [];\r\n    for (let i = start; i < stop; ++i) {\r\n        result.push(i);\r\n    }\r\n    return result;\r\n}\r\nfunction arrayConcat(arrays) {\r\n    const result = [];\r\n    for (let i = 0; i < arrays.length; ++i) {\r\n        for (let j = 0; j < arrays[i].length; ++j) {\r\n            result.push(arrays[i][j]);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n//# sourceMappingURL=GatherV2_grad.js.map"]},"metadata":{},"sourceType":"module"}