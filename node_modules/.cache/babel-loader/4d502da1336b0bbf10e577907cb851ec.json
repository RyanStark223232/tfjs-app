{"ast":null,"code":"import _classCallCheck from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport var TileProgram = function TileProgram(aShape, reps) {\n  _classCallCheck(this, TileProgram);\n\n  this.variableNames = ['A'];\n  var outputShape = new Array(aShape.length);\n\n  for (var i = 0; i < outputShape.length; i++) {\n    outputShape[i] = aShape[i] * reps[i];\n  }\n\n  this.outputShape = outputShape;\n  this.rank = outputShape.length;\n  var dtype = getCoordsDataType(this.rank);\n  var sourceCoords = getSourceCoords(aShape);\n  this.userCode = \"\\n      void main() {\\n        \".concat(dtype, \" resRC = getOutputCoords();\\n        setOutput(getA(\").concat(sourceCoords, \"));\\n      }\\n    \");\n};\n\nfunction getSourceCoords(aShape) {\n  var rank = aShape.length;\n\n  if (rank > 5) {\n    throw Error(\"Tile for rank \".concat(rank, \" is not yet supported\"));\n  }\n\n  if (rank === 1) {\n    return \"imod(resRC, \".concat(aShape[0], \")\");\n  }\n\n  var currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u'];\n  var sourceCoords = [];\n\n  for (var i = 0; i < aShape.length; i++) {\n    sourceCoords.push(\"imod(\".concat(currentCoords[i], \", \").concat(aShape[i], \")\"));\n  }\n\n  return sourceCoords.join();\n}","map":{"version":3,"sources":["../src/tile_gpu.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AAGH,SAAQ,iBAAR,QAAgC,mBAAhC;AAEA,WAAa,WAAb,GAME,qBAAY,MAAZ,EAA8B,IAA9B,EAA4C;AAAA;;AAL5C,OAAA,aAAA,GAAgB,CAAC,GAAD,CAAhB;AAME,MAAM,WAAW,GAAa,IAAI,KAAJ,CAAU,MAAM,CAAC,MAAjB,CAA9B;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,WAAW,CAAC,MAAhC,EAAwC,CAAC,EAAzC,EAA6C;AAC3C,IAAA,WAAW,CAAC,CAAD,CAAX,GAAiB,MAAM,CAAC,CAAD,CAAN,GAAY,IAAI,CAAC,CAAD,CAAjC;AACD;;AACD,OAAK,WAAL,GAAmB,WAAnB;AACA,OAAK,IAAL,GAAY,WAAW,CAAC,MAAxB;AACA,MAAM,KAAK,GAAG,iBAAiB,CAAC,KAAK,IAAN,CAA/B;AACA,MAAM,YAAY,GAAG,eAAe,CAAC,MAAD,CAApC;AAEA,OAAK,QAAL,4CAEM,KAFN,iEAGqB,YAHrB;AAMD,CAtBH;;AAyBA,SAAS,eAAT,CAAyB,MAAzB,EAAyC;AACvC,MAAM,IAAI,GAAG,MAAM,CAAC,MAApB;;AACA,MAAI,IAAI,GAAG,CAAX,EAAc;AACZ,UAAM,KAAK,yBAAkB,IAAlB,2BAAX;AACD;;AACD,MAAI,IAAI,KAAK,CAAb,EAAgB;AACd,iCAAsB,MAAM,CAAC,CAAD,CAA5B;AACD;;AAED,MAAM,aAAa,GAAG,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,SAAlC,EAA6C,SAA7C,CAAtB;AAEA,MAAM,YAAY,GAAG,EAArB;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAAM,CAAC,MAA3B,EAAmC,CAAC,EAApC,EAAwC;AACtC,IAAA,YAAY,CAAC,IAAb,gBAA0B,aAAa,CAAC,CAAD,CAAvC,eAA+C,MAAM,CAAC,CAAD,CAArD;AACD;;AACD,SAAO,YAAY,CAAC,IAAb,EAAP;AACD","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2017 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { getCoordsDataType } from './shader_compiler';\r\nexport class TileProgram {\r\n    constructor(aShape, reps) {\r\n        this.variableNames = ['A'];\r\n        const outputShape = new Array(aShape.length);\r\n        for (let i = 0; i < outputShape.length; i++) {\r\n            outputShape[i] = aShape[i] * reps[i];\r\n        }\r\n        this.outputShape = outputShape;\r\n        this.rank = outputShape.length;\r\n        const dtype = getCoordsDataType(this.rank);\r\n        const sourceCoords = getSourceCoords(aShape);\r\n        this.userCode = `\r\n      void main() {\r\n        ${dtype} resRC = getOutputCoords();\r\n        setOutput(getA(${sourceCoords}));\r\n      }\r\n    `;\r\n    }\r\n}\r\nfunction getSourceCoords(aShape) {\r\n    const rank = aShape.length;\r\n    if (rank > 5) {\r\n        throw Error(`Tile for rank ${rank} is not yet supported`);\r\n    }\r\n    if (rank === 1) {\r\n        return `imod(resRC, ${aShape[0]})`;\r\n    }\r\n    const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u'];\r\n    const sourceCoords = [];\r\n    for (let i = 0; i < aShape.length; i++) {\r\n        sourceCoords.push(`imod(${currentCoords[i]}, ${aShape[i]})`);\r\n    }\r\n    return sourceCoords.join();\r\n}\r\n//# sourceMappingURL=tile_gpu.js.map"]},"metadata":{},"sourceType":"module"}