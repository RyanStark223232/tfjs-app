{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { Conv3DBackpropFilterV2 } from '../kernel_names';\nimport * as util from '../util';\nimport * as conv_util from './conv_util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\r\n * Computes the derivative of the filter of a 3D convolution.\r\n *\r\n * @param x The input tensor, of rank 5 or rank 4 of shape\r\n *     [batch, depth, height, width, inChannels]. If rank 4, batch of 1 is\r\n *     assumed.\r\n * @param dy The dy image, of rank 5 or rank 4, of shape\r\n *     [batch, depth, height, width, outDepth]. If rank 4, batch of 1 is\r\n *     assumed.\r\n * @param filterShape The shape of the filter, length 5,\r\n *     [filterDepth, filterHeight, filterWidth, inDepth, outDepth].\r\n * @param strides The strides of the convolution: [strideDepth, strideHeight,\r\n * strideWidth].\r\n * @param pad A string from: 'same', 'valid'. The type of padding algorithm\r\n *     used in the forward prop of the op.\r\n */\n\nfunction conv3DBackpropFilter_(x, dy, filterShape, strides, pad) {\n  var x5D = x;\n\n  if (x.rank === 4) {\n    x5D = reshape(x, [1, x.shape[0], x.shape[1], x.shape[2], x.shape[3]]);\n  }\n\n  var dy5D = dy;\n\n  if (dy5D.rank === 4) {\n    dy5D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2], dy.shape[3]]);\n  }\n\n  util.assert(x5D.rank === 5, function () {\n    return \"Error in conv3dDerFilter: input must be rank 5, but got shape \" + \"\".concat(x5D.shape, \".\");\n  });\n  util.assert(dy5D.rank === 5, function () {\n    return \"Error in conv3dDerFilter: dy must be rank 5, but got shape \" + \"\".concat(dy5D.shape, \".\");\n  });\n  util.assert(filterShape.length === 5, function () {\n    return \"Error in conv3dDerFilter: filterShape must be length 5, but got \" + \"\".concat(filterShape, \".\");\n  });\n  util.assert(x5D.shape[4] === filterShape[3], function () {\n    return \"Error in conv3dDerFilter: depth of input \".concat(x5D.shape[4], \") must \") + \"match input depth in filter (\".concat(filterShape[3], \".\");\n  });\n  util.assert(dy5D.shape[4] === filterShape[4], function () {\n    return \"Error in conv3dDerFilter: depth of dy (\".concat(dy5D.shape[4], \") must \") + \"match output depth for filter (\".concat(filterShape[4], \").\");\n  });\n\n  var forward = function forward(backend) {\n    var dilations = 1;\n    var convInfo = conv_util.computeConv3DInfo(x5D.shape, filterShape, strides, dilations, pad);\n    return backend.conv3dDerFilter(x5D, dy5D, convInfo);\n  };\n\n  var inputs = {\n    x: x5D,\n    dy: dy5D\n  };\n  var attrs = {\n    strides: strides,\n    pad: pad,\n    filterShape: filterShape\n  };\n  return ENGINE.runKernelFunc(forward, inputs, null, Conv3DBackpropFilterV2, attrs);\n}\n\nexport var conv3DBackpropFilter = op({\n  conv3DBackpropFilter_: conv3DBackpropFilter_\n});","map":{"version":3,"sources":["../../src/ops/conv3d_backprop_filter.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { ENGINE } from '../engine';\r\nimport { Conv3DBackpropFilterV2 } from '../kernel_names';\r\nimport * as util from '../util';\r\nimport * as conv_util from './conv_util';\r\nimport { op } from './operation';\r\nimport { reshape } from './reshape';\r\n/**\r\n * Computes the derivative of the filter of a 3D convolution.\r\n *\r\n * @param x The input tensor, of rank 5 or rank 4 of shape\r\n *     [batch, depth, height, width, inChannels]. If rank 4, batch of 1 is\r\n *     assumed.\r\n * @param dy The dy image, of rank 5 or rank 4, of shape\r\n *     [batch, depth, height, width, outDepth]. If rank 4, batch of 1 is\r\n *     assumed.\r\n * @param filterShape The shape of the filter, length 5,\r\n *     [filterDepth, filterHeight, filterWidth, inDepth, outDepth].\r\n * @param strides The strides of the convolution: [strideDepth, strideHeight,\r\n * strideWidth].\r\n * @param pad A string from: 'same', 'valid'. The type of padding algorithm\r\n *     used in the forward prop of the op.\r\n */\r\nfunction conv3DBackpropFilter_(x, dy, filterShape, strides, pad) {\r\n    let x5D = x;\r\n    if (x.rank === 4) {\r\n        x5D = reshape(x, [1, x.shape[0], x.shape[1], x.shape[2], x.shape[3]]);\r\n    }\r\n    let dy5D = dy;\r\n    if (dy5D.rank === 4) {\r\n        dy5D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2], dy.shape[3]]);\r\n    }\r\n    util.assert(x5D.rank === 5, () => `Error in conv3dDerFilter: input must be rank 5, but got shape ` +\r\n        `${x5D.shape}.`);\r\n    util.assert(dy5D.rank === 5, () => `Error in conv3dDerFilter: dy must be rank 5, but got shape ` +\r\n        `${dy5D.shape}.`);\r\n    util.assert(filterShape.length === 5, () => `Error in conv3dDerFilter: filterShape must be length 5, but got ` +\r\n        `${filterShape}.`);\r\n    util.assert(x5D.shape[4] === filterShape[3], () => `Error in conv3dDerFilter: depth of input ${x5D.shape[4]}) must ` +\r\n        `match input depth in filter (${filterShape[3]}.`);\r\n    util.assert(dy5D.shape[4] === filterShape[4], () => `Error in conv3dDerFilter: depth of dy (${dy5D.shape[4]}) must ` +\r\n        `match output depth for filter (${filterShape[4]}).`);\r\n    const forward = backend => {\r\n        const dilations = 1;\r\n        const convInfo = conv_util.computeConv3DInfo(x5D.shape, filterShape, strides, dilations, pad);\r\n        return backend.conv3dDerFilter(x5D, dy5D, convInfo);\r\n    };\r\n    const inputs = { x: x5D, dy: dy5D };\r\n    const attrs = { strides, pad, filterShape };\r\n    return ENGINE.runKernelFunc(forward, inputs, null, Conv3DBackpropFilterV2, attrs);\r\n}\r\nexport const conv3DBackpropFilter = op({ conv3DBackpropFilter_ });\r\n//# sourceMappingURL=conv3d_backprop_filter.js.map"]},"metadata":{},"sourceType":"module"}