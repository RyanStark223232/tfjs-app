{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport { maximum } from './maximum';\nimport { mul } from './mul';\nimport { op } from './operation';\nimport { scalar } from './scalar';\n/**\r\n * Computes leaky rectified linear element-wise.\r\n *\r\n * See\r\n * [http://web.stanford.edu/~awni/papers/relu_hybrid_icml2013_final.pdf](\r\n *     http://web.stanford.edu/~awni/papers/relu_hybrid_icml2013_final.pdf)\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([-1, 2, -3, 4]);\r\n *\r\n * x.leakyRelu(0.1).print();  // or tf.leakyRelu(x, 0.1)\r\n * ```\r\n * @param x The input tensor.\r\n * @param alpha The scaling factor for negative values, defaults to 0.2.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Basic math'}\r\n */\n\nfunction leakyRelu_(x) {\n  var alpha = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.2;\n  var $x = convertToTensor(x, 'x', 'leakyRelu');\n  return maximum(mul(scalar(alpha), $x), $x);\n}\n\nexport var leakyRelu = op({\n  leakyRelu_: leakyRelu_\n});","map":{"version":3,"sources":["../../src/ops/leaky_relu.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAGH,SAAQ,eAAR,QAA8B,oBAA9B;AAGA,SAAQ,OAAR,QAAsB,WAAtB;AACA,SAAQ,GAAR,QAAkB,OAAlB;AACA,SAAQ,EAAR,QAAiB,aAAjB;AACA,SAAQ,MAAR,QAAqB,UAArB;AAEA;;;;;;;;;;;;;;;;AAgBG;;AACH,SAAS,UAAT,CAAsC,CAAtC,EAAkE;AAAA,MAAX,KAAW,uEAAH,GAAG;AAChE,MAAM,EAAE,GAAG,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,WAAT,CAA1B;AACA,SAAO,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,KAAD,CAAP,EAAgB,EAAhB,CAAJ,EAAyB,EAAzB,CAAd;AACD;;AAED,OAAO,IAAM,SAAS,GAAG,EAAE,CAAC;AAAC,EAAA,UAAU,EAAV;AAAD,CAAD,CAApB","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { convertToTensor } from '../tensor_util_env';\r\nimport { maximum } from './maximum';\r\nimport { mul } from './mul';\r\nimport { op } from './operation';\r\nimport { scalar } from './scalar';\r\n/**\r\n * Computes leaky rectified linear element-wise.\r\n *\r\n * See\r\n * [http://web.stanford.edu/~awni/papers/relu_hybrid_icml2013_final.pdf](\r\n *     http://web.stanford.edu/~awni/papers/relu_hybrid_icml2013_final.pdf)\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([-1, 2, -3, 4]);\r\n *\r\n * x.leakyRelu(0.1).print();  // or tf.leakyRelu(x, 0.1)\r\n * ```\r\n * @param x The input tensor.\r\n * @param alpha The scaling factor for negative values, defaults to 0.2.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Basic math'}\r\n */\r\nfunction leakyRelu_(x, alpha = 0.2) {\r\n    const $x = convertToTensor(x, 'x', 'leakyRelu');\r\n    return maximum(mul(scalar(alpha), $x), $x);\r\n}\r\nexport const leakyRelu = op({ leakyRelu_ });\r\n//# sourceMappingURL=leaky_relu.js.map"]},"metadata":{},"sourceType":"module"}