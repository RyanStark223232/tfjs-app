{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\wongh\\\\finger\\\\src\\\\App.js\";\nimport React from \"react\";\nimport * as handpose from \"@tensorflow-models/handpose\";\nimport * as posenet from \"@tensorflow-models/posenet\"; //import * as tf from '@tensorflow/tfjs-core';\n\nimport Webcam from \"react-webcam\";\nimport \"./App.css\";\nimport { drawHand, writeText, drawKeypoints, drawSkeleton } from \"./utilities\";\nimport { sqrt, pow } from \"mathjs\";\nimport { Line } from 'react-chartjs-2';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.sleep = milliseconds => {\n      return new Promise(resolve => setTimeout(resolve, milliseconds));\n    };\n\n    this.record_estimateHands = async (img, net, ctx) => {\n      const hand = await net.estimateHands(img);\n      console.log(hand);\n\n      if (hand.length > 0) {\n        //drawHand(hand, ctx);   \n        this.setState({\n          dead_frame: 0\n        });\n      } else {\n        if (this.state.dead_frame === 1) writeText(ctx, {\n          text: 'Hand Off Screen',\n          x: 180,\n          y: 70\n        });\n        this.setState({\n          dead_frame: 1\n        });\n      }\n    };\n\n    this.state = {\n      ID: 0,\n      tap_count: [],\n      rotate_count: [],\n      fist_count: [],\n      index_passed: 0,\n      rotate_passed: 0,\n      last_pressed: 0,\n      real_time_inferencing: false,\n      recording: false,\n      button_mode: false,\n      chart_ready: false,\n      finger_done: false,\n      rotate_done: false,\n      fist_done: false,\n      dist_array: [],\n      dist_time_array: [],\n      dist_record: [],\n      dist_time_record: [],\n      rotate_array: [],\n      rotate_time_array: [],\n      rotate_record: [],\n      rotate_time_record: [],\n      fist_array: [],\n      fist_time_array: [],\n      fist_record: [],\n      fist_time_record: [],\n      gait_record: [],\n      gait_time_record: [],\n      chart_data1: null,\n      chart_data2: null,\n      chart_data3: null,\n      wait: false,\n      wait_till: 0,\n      startAt: Date.now(),\n      dead_frame: 0\n    };\n    this.webcamRef = /*#__PURE__*/React.createRef(null);\n    this.canvasRef = /*#__PURE__*/React.createRef(null);\n    this.runHandpose = this.runHandpose.bind(this);\n    this.stop_real_time_inference = this.stop_real_time_inference.bind(this);\n    this.stop_tapping = this.stop_tapping.bind(this);\n    this.stop_rotating = this.stop_rotating.bind(this);\n    this.stop_record = this.stop_record.bind(this);\n    this.record_video = this.record_video.bind(this);\n    this.concat_frame = this.concat_frame.bind(this);\n    this.inference = this.inference.bind(this);\n    this.reset_counter = this.reset_counter.bind(this);\n    this.increment_tap1 = this.increment_tap1.bind(this);\n    this.increment_tap2 = this.increment_tap2.bind(this);\n    this.switch_button = this.switch_button.bind(this);\n    this.compose_chart = this.compose_chart.bind(this);\n  }\n\n  async runPosenet() {\n    require('@tensorflow/tfjs-backend-webgl'); //const uploadJSONInput = document.getElementById('upload-json');\n    //const uploadWeightsInput = document.getElementById('upload-weights');\n    //const model = await tf.loadLayersModel(tf.io.browserFiles([uploadJSONInput.files[0], uploadWeightsInput.files[0]]));\n\n\n    const net = await posenet.load();\n    console.log(\"PoseNet model loaded.\");\n    this.setState({\n      startAt: Date.now()\n    });\n    const Interval_ID = setInterval(() => {\n      this.read_time_posenet(net);\n    }, 50);\n    this.setState({\n      ID: Interval_ID\n    });\n    this.setState({\n      real_time_inferencing: true\n    });\n  }\n\n  async read_time_posenet(net) {\n    if (this.state.wait) {\n      this.setState({\n        wait_till: Date.now() + 3000\n      }); //await this.sleep(3000);\n\n      this.setState({\n        wait: false\n      });\n    }\n\n    if (typeof this.webcamRef.current !== \"undefined\" && this.webcamRef.current !== null && this.webcamRef.current.video.readyState === 4) {\n      const video = this.webcamRef.current.video;\n      const videoWidth = this.webcamRef.current.video.videoWidth;\n      const videoHeight = this.webcamRef.current.video.videoHeight;\n      this.webcamRef.current.video.width = videoWidth;\n      this.webcamRef.current.video.height = videoHeight;\n      this.canvasRef.current.width = videoWidth;\n      this.canvasRef.current.height = videoHeight;\n      const pose = await net.estimateSinglePose(video);\n      const ctx = this.canvasRef.current.getContext(\"2d\");\n      drawKeypoints(pose[\"keypoints\"], 0.6, ctx);\n      drawSkeleton(pose[\"keypoints\"], 0.7, ctx);\n    }\n  }\n\n  compose_chart() {\n    let time_array_1 = [];\n    let count_array_1 = [];\n    let start = this.state.dist_time_array[0];\n    let end = this.state.dist_time_array[this.state.dist_time_array.length - 1];\n\n    while (start + 1.0 < end) {\n      time_array_1 = [...time_array_1, start];\n      let count = 0,\n          temp_max = 0;\n\n      for (let i = 0; i < this.state.dist_array.length; i++) {\n        if (this.state.dist_time_array[i] >= start && this.state.dist_time_array[i] < start + 1.0) {\n          if (temp_max < this.state.dist_array[i]) temp_max = this.state.dist_array[i];\n\n          if (this.state.tap_count.includes(this.state.dist_time_array[i])) {\n            count += temp_max;\n            temp_max = 0;\n          }\n        }\n      }\n      /*\n      \n      let time_value = 0;\n      for (let tc in this.state.tap_count){\n        time_value = this.state.tap_count[tc];\n        if (time_value >= start && time_value < (start + 1.0)){\n          count += 1;\n        }\n      }\n      */\n\n\n      count_array_1 = [...count_array_1, count];\n      start += 0.1;\n    }\n\n    const data1 = {\n      labels: time_array_1,\n      datasets: [{\n        label: 'Tapping',\n        fill: false,\n        lineTension: 0.3,\n        backgroundColor: 'rgba(75,192,192,0.4)',\n        borderColor: 'rgba(75,192,192,1)',\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: 'rgba(75,192,192,1)',\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: count_array_1\n      }]\n    };\n    let time_array_2 = [];\n    let count_array_2 = [];\n    start = this.state.rotate_time_array[0];\n    end = this.state.rotate_time_array[this.state.rotate_time_array.length - 1];\n\n    while (start + 5.0 < end) {\n      time_array_2 = [...time_array_2, start + 2.5];\n      let count = 0.0;\n      let time_value = 0;\n\n      for (let tc in this.state.rotate_count) {\n        time_value = this.state.rotate_count[tc];\n\n        if (time_value >= start && time_value < start + 5.0) {\n          count += 1.0;\n        }\n      }\n\n      count_array_2 = [...count_array_2, count];\n      start += 0.1;\n    }\n\n    const data2 = {\n      labels: time_array_2,\n      datasets: [{\n        label: 'Rotation',\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: 'rgba(192,75,192,0.4)',\n        borderColor: 'rgba(192,75,192,1)',\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: 'rgba(192,75,192,1)',\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'rgba(192,75,192,1)',\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: count_array_2\n      }]\n    };\n    let time_array_3 = [];\n    let count_array_3 = [];\n    start = this.state.fist_time_array[0];\n    end = this.state.fist_time_array[this.state.fist_time_array.length - 1];\n\n    while (start + 5.0 < end) {\n      time_array_3 = [...time_array_3, start + 2.5];\n      let count = 0.0;\n      let time_value = 0;\n\n      for (let tc in this.state.fist_count) {\n        time_value = this.state.fist_count[tc];\n\n        if (time_value >= start && time_value < start + 5.0) {\n          count += 1.0;\n        }\n      }\n\n      count_array_3 = [...count_array_3, count];\n      start += 0.1;\n    }\n\n    const data3 = {\n      labels: time_array_3,\n      datasets: [{\n        label: 'Fist',\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: 'rgba(192,192,75,0.4)',\n        borderColor: 'rgba(192,192,75,1)',\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: 'rgba(192,192,75,1)',\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'rgba(192,192,75,1)',\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: count_array_3\n      }]\n    };\n    this.setState({\n      chart_data1: data1\n    });\n    this.setState({\n      chart_data2: data2\n    });\n    this.setState({\n      chart_data3: data3\n    });\n    this.setState({\n      chart_ready: true\n    });\n  }\n\n  switch_button() {\n    if (this.state.button_mode === true) {\n      this.setState({\n        button_mode: false\n      });\n      this.compose_chart();\n    } else {\n      this.setState({\n        button_mode: true\n      });\n    }\n  }\n\n  increment_tap1() {\n    if (this.state.last_pressed !== 1) {\n      let current_moment = (Date.now() - this.state.startAt) / 1000;\n      this.setState({\n        last_pressed: 1\n      });\n      this.setState({\n        dist_array: [...this.state.dist_array, 1.0]\n      });\n      this.setState({\n        dist_time_array: [...this.state.dist_time_array, current_moment]\n      });\n      this.setState({\n        tap_count: [...this.state.tap_count, current_moment]\n      });\n    }\n  }\n\n  increment_tap2() {\n    if (this.state.last_pressed !== 2) {\n      let current_moment = (Date.now() - this.state.startAt) / 1000;\n      this.setState({\n        last_pressed: 2\n      });\n      this.setState({\n        dist_array: [...this.state.dist_array, 1.0]\n      });\n      this.setState({\n        dist_time_array: [...this.state.dist_time_array, current_moment]\n      });\n      this.setState({\n        tap_count: [...this.state.tap_count, current_moment]\n      });\n    }\n  }\n\n  norm(lm1, lm2) {\n    return sqrt(pow(lm1[0] - lm2[0], 2) + pow(lm1[1] - lm2[1], 2));\n  }\n\n  reset_counter() {\n    clearInterval(this.state.ID);\n    this.setState({\n      ID: 0,\n      tap_count: [],\n      rotate_count: [],\n      fist_count: [],\n      index_passed: 0,\n      rotate_passed: 0,\n      last_pressed: 0,\n      real_time_inferencing: false,\n      recording: false,\n      button_mode: false,\n      chart_ready: false,\n      finger_done: false,\n      rotate_done: false,\n      fist_done: false,\n      dist_array: [],\n      dist_time_array: [],\n      dist_record: [],\n      dist_time_record: [],\n      rotate_array: [],\n      rotate_time_array: [],\n      rotate_record: [],\n      rotate_time_record: [],\n      fist_array: [],\n      fist_time_array: [],\n      fist_record: [],\n      fist_time_record: [],\n      chart_data1: null,\n      chart_data2: null,\n      chart_data3: null,\n      wait: false,\n      startAt: Date.now(),\n      dead_frame: 0\n    });\n  }\n\n  async runHandpose() {\n    require('@tensorflow/tfjs-backend-webgl'); //const uploadJSONInput = document.getElementById('upload-json');\n    //const uploadWeightsInput = document.getElementById('upload-weights');\n    //const model = await tf.loadLayersModel(tf.io.browserFiles([uploadJSONInput.files[0], uploadWeightsInput.files[0]]));\n\n\n    const net = await handpose.load();\n    console.log(\"Handpose model loaded.\");\n    this.setState({\n      startAt: Date.now()\n    });\n    const Interval_ID = setInterval(() => {\n      this.read_time_inference(net);\n    }, 50);\n    this.setState({\n      ID: Interval_ID\n    });\n    this.setState({\n      real_time_inferencing: true\n    });\n  }\n\n  async read_time_inference(net) {\n    if (this.state.wait) {\n      this.setState({\n        wait_till: Date.now() + 3000\n      }); //await this.sleep(3000);\n\n      this.setState({\n        wait: false\n      });\n    }\n\n    if (typeof this.webcamRef.current !== \"undefined\" && this.webcamRef.current !== null && this.webcamRef.current.video.readyState === 4) {\n      const video = this.webcamRef.current.video;\n      const videoWidth = this.webcamRef.current.video.videoWidth;\n      const videoHeight = this.webcamRef.current.video.videoHeight;\n      this.webcamRef.current.video.width = videoWidth;\n      this.webcamRef.current.video.height = videoHeight;\n      this.canvasRef.current.width = videoWidth;\n      this.canvasRef.current.height = videoHeight;\n      const hand = await net.estimateHands(video);\n      const ctx = this.canvasRef.current.getContext(\"2d\");\n      this.setState({\n        context: ctx\n      }); //check if hand exist, if yes, drawhand\n\n      if (hand.length > 0) drawHand(hand, ctx); //check if waiting\n\n      if (Date.now() < this.state.wait_till) {\n        console.log(\"Waiting till \", this.state.wait_till); //count down 3, 2, 1\n\n        if (this.state.wait_till - Date.now() < 1000) writeText(ctx, {\n          text: '1',\n          x: 180,\n          y: 70\n        });else if (this.state.wait_till - Date.now() < 2000) writeText(ctx, {\n          text: '2',\n          x: 180,\n          y: 70\n        });else if (this.state.wait_till - Date.now() < 3000) writeText(ctx, {\n          text: '3',\n          x: 180,\n          y: 70\n        });\n      } else {\n        if (hand.length > 0) {\n          hand.forEach(prediction => {\n            this.setState({\n              dead_frame: 0\n            });\n            const landmarks = prediction.landmarks;\n            let pawn_dist = this.norm(landmarks[0], landmarks[2]);\n            let current_moment = (Date.now() - this.state.startAt) / 1000;\n\n            if (this.state.finger_done === false) {\n              let index_dist = this.norm(landmarks[4], landmarks[8]);\n              index_dist = index_dist / pawn_dist;\n              this.setState({\n                dist_array: [...this.state.dist_array, index_dist]\n              });\n              this.setState({\n                dist_time_array: [...this.state.dist_time_array, current_moment]\n              });\n\n              if (index_dist >= 0.5) {\n                this.setState({\n                  index_passed: 1\n                });\n              }\n\n              if (index_dist < 0.5 && this.state.index_passed === 1) {\n                this.setState({\n                  index_passed: 0\n                });\n                this.setState({\n                  tap_count: [...this.state.tap_count, current_moment]\n                });\n              }\n            }\n\n            if (this.state.finger_done === true && this.state.rotate_done === false) {\n              let rotate_dist = (landmarks[2][0] - landmarks[17][0]) / pawn_dist;\n              this.setState({\n                rotate_array: [...this.state.rotate_array, rotate_dist]\n              });\n              this.setState({\n                rotate_time_array: [...this.state.rotate_time_array, current_moment]\n              });\n\n              if (this.state.rotate_passed === 0) {\n                if (rotate_dist >= 0.5) this.setState({\n                  rotate_passed: 1\n                });\n                if (rotate_dist <= -0.5) this.setState({\n                  rotate_passed: -1\n                });\n              }\n\n              if (this.state.rotate_passed === 1 && rotate_dist <= -0.5) {\n                this.setState({\n                  rotate_passed: -1\n                });\n              }\n\n              if (this.state.rotate_passed === -1 && rotate_dist >= 0.5) {\n                this.setState({\n                  rotate_passed: 1\n                });\n                this.setState({\n                  rotate_count: [...this.state.rotate_count, current_moment]\n                });\n              }\n            }\n\n            if (this.state.rotate_done === true && this.state.fist_done === false) {\n              let fist_dist = (landmarks[8][1] - landmarks[5][1] + (landmarks[12][1] - landmarks[9][1]) + (landmarks[16][1] - landmarks[13][1]) + (landmarks[20][1] - landmarks[17][1])) / (4 * pawn_dist);\n              this.setState({\n                fist_array: [...this.state.fist_array, fist_dist]\n              });\n              this.setState({\n                fist_time_array: [...this.state.fist_time_array, current_moment]\n              });\n\n              if (fist_dist >= 0.0) {\n                this.setState({\n                  fist_passed: 1\n                });\n              }\n\n              if (fist_dist < -0.4 && this.state.fist_passed === 1) {\n                this.setState({\n                  fist_passed: 0\n                });\n                this.setState({\n                  fist_count: [...this.state.fist_count, current_moment]\n                });\n              }\n            }\n          });\n        } else {\n          if (this.state.dead_frame > 9) writeText(ctx, {\n            text: 'Hand Off Screen',\n            x: 180,\n            y: 70\n          });\n          this.setState({\n            dead_frame: this.state.dead_frame + 1\n          });\n        }\n      }\n    }\n  }\n\n  async stop_tapping() {\n    this.setState({\n      finger_done: true\n    });\n    this.setState({\n      wait: true\n    });\n  }\n\n  async stop_rotating() {\n    this.setState({\n      rotate_done: true\n    });\n    this.setState({\n      wait: true\n    });\n  }\n\n  stop_real_time_inference() {\n    clearInterval(this.state.ID);\n    this.setState({\n      real_time_inferencing: false,\n      finger_done: false,\n      rotate_done: false,\n      fist_done: false\n    });\n    this.compose_chart();\n  }\n\n  async record_video() {\n    this.setState({\n      startAt: Date.now()\n    });\n    let count = 0;\n\n    require('@tensorflow/tfjs-backend-webgl');\n\n    const net = await handpose.load();\n    const ctx = this.canvasRef.current.getContext(\"2d\");\n    console.log(\"Handpose model loaded.\");\n    const Interval_ID = setInterval(() => {\n      this.concat_frame(count, net, ctx);\n      count = (count + 1) % 20;\n    }, 50);\n    this.setState({\n      ID: Interval_ID\n    });\n    this.setState({\n      recording: true\n    });\n  }\n\n  async concat_frame(count, net, ctx) {\n    if (this.state.wait) {\n      this.setState({\n        wait_till: Date.now() + 3000\n      }); //await this.sleep(3000);\n\n      this.setState({\n        wait: false\n      });\n    }\n\n    if (typeof this.webcamRef.current !== \"undefined\" && this.webcamRef.current !== null && this.webcamRef.current.video.readyState === 4) {\n      if (Date.now() < this.state.wait_till) {\n        console.log(\"Waiting till \", this.state.wait_till); //count down 3, 2, 1\n\n        ctx.clearRect(0, 0, this.canvasRef.current.width, this.canvasRef.current.height);\n        if (this.state.wait_till - Date.now() < 1000) writeText(ctx, {\n          text: '1',\n          x: 180,\n          y: 70\n        });else if (this.state.wait_till - Date.now() < 2000) writeText(ctx, {\n          text: '2',\n          x: 180,\n          y: 70\n        });else if (this.state.wait_till - Date.now() < 3000) writeText(ctx, {\n          text: '3',\n          x: 180,\n          y: 70\n        });\n      } else {\n        ctx.clearRect(0, 0, this.canvasRef.current.width, this.canvasRef.current.height);\n        let current_moment = (Date.now() - this.state.startAt) / 1000;\n        const image = this.webcamRef.current.getScreenshot();\n        var img = document.createElement(\"img\");\n\n        img.onload = function () {\n          if (this.state.finger_done === false) {\n            this.setState({\n              dist_record: [...this.state.dist_record, img]\n            });\n            this.setState({\n              dist_time_record: [...this.state.dist_time_record, current_moment]\n            });\n          } else if (this.state.finger_done === true && this.state.rotate_done === false) {\n            this.setState({\n              rotate_record: [...this.state.rotate_record, img]\n            });\n            this.setState({\n              rotate_time_record: [...this.state.rotate_time_record, current_moment]\n            });\n          } else if (this.state.rotate_done === true && this.state.fist_done === false) {\n            this.setState({\n              fist_record: [...this.state.fist_record, img]\n            });\n            this.setState({\n              fist_time_record: [...this.state.fist_time_record, current_moment]\n            });\n          }\n\n          if (count === 0) this.record_estimateHands(img, net, ctx);\n        }.bind(this);\n\n        img.src = image;\n      }\n    }\n  }\n\n  async inference() {\n    require('@tensorflow/tfjs-backend-webgl');\n\n    const net = await handpose.load();\n    console.log(\"Handpose model loaded.\"); // Run prediction on recorded tapping data\n\n    for (let i = 0; i < this.state.dist_record.length; i++) {\n      const hand = await net.estimateHands(this.state.dist_record[i]);\n\n      if (hand.length > 0) {\n        hand.forEach(prediction => {\n          const landmarks = prediction.landmarks;\n          let pawn_dist = this.norm(landmarks[0], landmarks[2]);\n          let index_dist = this.norm(landmarks[4], landmarks[8]);\n          index_dist = index_dist / pawn_dist;\n          this.setState({\n            dist_array: [...this.state.dist_array, index_dist]\n          });\n          this.setState({\n            dist_time_array: [...this.state.dist_time_array, this.state.dist_time_record[i]]\n          });\n\n          if (index_dist >= 0.5) {\n            this.setState({\n              index_passed: 1\n            });\n          }\n\n          if (index_dist < 0.5 && this.state.index_passed === 1) {\n            this.setState({\n              index_passed: 0\n            });\n            this.setState({\n              tap_count: [...this.state.tap_count, this.state.dist_time_record[i]]\n            });\n          }\n\n          console.log(\"INDEX COUNT:\", this.state.tap_count);\n        });\n      }\n    } // Run prediction on recorded rotation data\n\n\n    for (let i = 0; i < this.state.rotate_record.length; i++) {\n      const hand = await net.estimateHands(this.state.rotate_record[i]);\n\n      if (hand.length > 0) {\n        hand.forEach(prediction => {\n          const landmarks = prediction.landmarks;\n          let pawn_dist = this.norm(landmarks[0], landmarks[2]);\n          let rotate_dist = (landmarks[2][0] - landmarks[17][0]) / pawn_dist;\n          this.setState({\n            rotate_array: [...this.state.rotate_array, rotate_dist]\n          });\n          this.setState({\n            rotate_time_array: [...this.state.rotate_time_array, this.state.rotate_time_record[i]]\n          });\n\n          if (this.state.rotate_passed === 0) {\n            if (rotate_dist >= 0.5) this.setState({\n              rotate_passed: 1\n            });\n            if (rotate_dist <= -0.5) this.setState({\n              rotate_passed: -1\n            });\n          }\n\n          if (this.state.rotate_passed === 1 && rotate_dist <= -0.5) {\n            this.setState({\n              rotate_passed: -1\n            });\n          }\n\n          if (this.state.rotate_passed === -1 && rotate_dist >= 0.5) {\n            this.setState({\n              rotate_passed: 1\n            });\n            this.setState({\n              rotate_count: [...this.state.rotate_count, this.state.rotate_time_record[i]]\n            });\n          }\n\n          console.log(\"ROTATE COUNT:\", this.state.rotate_count);\n        });\n      }\n    } // Run prediction on recorded gripping data\n\n\n    for (let i = 0; i < this.state.fist_record.length; i++) {\n      const hand = await net.estimateHands(this.state.fist_record[i]);\n\n      if (hand.length > 0) {\n        hand.forEach(prediction => {\n          const landmarks = prediction.landmarks;\n          let pawn_dist = this.norm(landmarks[0], landmarks[2]);\n          let fist_dist = (landmarks[8][1] - landmarks[5][1] + (landmarks[12][1] - landmarks[9][1]) + (landmarks[16][1] - landmarks[13][1]) + (landmarks[20][1] - landmarks[17][1])) / (4 * pawn_dist);\n          this.setState({\n            fist_array: [...this.state.fist_array, fist_dist]\n          });\n          this.setState({\n            fist_time_array: [...this.state.fist_time_array, this.state.fist_time_record[i]]\n          });\n\n          if (fist_dist >= 0.0) {\n            this.setState({\n              fist_passed: 1\n            });\n          }\n\n          if (fist_dist < -0.4 && this.state.fist_passed === 1) {\n            this.setState({\n              fist_passed: 0\n            });\n            this.setState({\n              fist_count: [...this.state.fist_count, this.state.fist_time_record[i]]\n            });\n          }\n\n          console.log(\"FIST COUNT:\", this.state.fist_count);\n        });\n      }\n    }\n\n    this.setState({\n      record: []\n    });\n  }\n\n  async stop_record() {\n    clearInterval(this.state.ID);\n    await this.inference();\n    this.setState({\n      recording: false\n    });\n    this.compose_chart();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"App-header\",\n        children: [/*#__PURE__*/_jsxDEV(Webcam, {\n          ref: this.webcamRef,\n          style: {\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 9,\n            width: \"auto\",\n            height: \"auto\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 627,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: this.canvasRef,\n          style: {\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 9,\n            width: \"auto\",\n            height: \"auto\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 641,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 626,\n        columnNumber: 9\n      }, this), this.state.button_mode ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.increment_tap1,\n          id: \"button1\",\n          children: \"Index Finger\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 658,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.increment_tap2,\n          id: \"button2\",\n          children: \"Middle Finger\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 659,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 657,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 662,\n        columnNumber: 13\n      }, this), this.state.real_time_inferencing ? this.state.finger_done ? this.state.rotate_done ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.stop_real_time_inference,\n        children: \"Calculate Result\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 667,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.stop_rotating,\n        children: \"Finish Rotating\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 669,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.stop_tapping,\n        children: \"Finish Tapping\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 672,\n        columnNumber: 15\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.runHandpose,\n        children: \"Starting Real Time Inference\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 675,\n        columnNumber: 11\n      }, this), this.state.recording ? this.state.finger_done ? this.state.rotate_done ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.stop_record,\n        children: \"Calculate Result\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 681,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.stop_rotating,\n        children: \"Finish Rotating\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 683,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.stop_tapping,\n        children: \"Finish Tapping\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 686,\n        columnNumber: 15\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.record_video,\n        children: \"Starting Recording\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 689,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.reset_counter,\n        children: \"Reset Counter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 692,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.switch_button,\n        children: \"Switch On/Off Button\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 693,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: [\"Finger Tapping Count:\", this.state.tap_count.length, \"\\xA0\\xA0\\xA0\\xA0 Rotate Count:\", this.state.rotate_count.length, \"\\xA0\\xA0\\xA0\\xA0 Gripping Count: \", this.state.fist_count.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 694,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [this.state.chart_ready ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Line, {\n            data: this.state.chart_data1\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 702,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            data: this.state.chart_data2\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 703,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            data: this.state.chart_data3\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 704,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 701,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 707,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            id: \"upload-json\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 710,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 709,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            id: \"upload-weights\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 713,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 712,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 699,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 625,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/wongh/finger/src/App.js"],"names":["React","handpose","posenet","Webcam","drawHand","writeText","drawKeypoints","drawSkeleton","sqrt","pow","Line","App","Component","constructor","props","sleep","milliseconds","Promise","resolve","setTimeout","record_estimateHands","img","net","ctx","hand","estimateHands","console","log","length","setState","dead_frame","state","text","x","y","ID","tap_count","rotate_count","fist_count","index_passed","rotate_passed","last_pressed","real_time_inferencing","recording","button_mode","chart_ready","finger_done","rotate_done","fist_done","dist_array","dist_time_array","dist_record","dist_time_record","rotate_array","rotate_time_array","rotate_record","rotate_time_record","fist_array","fist_time_array","fist_record","fist_time_record","gait_record","gait_time_record","chart_data1","chart_data2","chart_data3","wait","wait_till","startAt","Date","now","webcamRef","createRef","canvasRef","runHandpose","bind","stop_real_time_inference","stop_tapping","stop_rotating","stop_record","record_video","concat_frame","inference","reset_counter","increment_tap1","increment_tap2","switch_button","compose_chart","runPosenet","require","load","Interval_ID","setInterval","read_time_posenet","current","video","readyState","videoWidth","videoHeight","width","height","pose","estimateSinglePose","getContext","time_array_1","count_array_1","start","end","count","temp_max","i","includes","data1","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","data","time_array_2","count_array_2","time_value","tc","data2","time_array_3","count_array_3","data3","current_moment","norm","lm1","lm2","clearInterval","read_time_inference","context","forEach","prediction","landmarks","pawn_dist","index_dist","rotate_dist","fist_dist","fist_passed","clearRect","image","getScreenshot","document","createElement","onload","src","record","render","position","marginLeft","marginRight","left","right","textAlign","zindex"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,QAAZ,MAA0B,6BAA1B;AACA,OAAO,KAAKC,OAAZ,MAAyB,4BAAzB,C,CACA;;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAO,WAAP;AACA,SAASC,QAAT,EAAmBC,SAAnB,EAA8BC,aAA9B,EAA6CC,YAA7C,QAAgE,aAAhE;AACA,SAASC,IAAT,EAAeC,GAAf,QAA0B,QAA1B;AACA,SAAQC,IAAR,QAAmB,iBAAnB;;AAEA,MAAMC,GAAN,SAAkBX,KAAK,CAACY,SAAxB,CAAkC;AAChCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SA6TnBC,KA7TmB,GA6TVC,YAAD,IAAkB;AACxB,aAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAIC,UAAU,CAACD,OAAD,EAAUF,YAAV,CAAjC,CAAP;AACD,KA/TkB;;AAAA,SAigBnBI,oBAjgBmB,GAigBI,OAAMC,GAAN,EAAWC,GAAX,EAAgBC,GAAhB,KAAuB;AAC5C,YAAMC,IAAI,GAAG,MAAMF,GAAG,CAACG,aAAJ,CAAkBJ,GAAlB,CAAnB;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;;AACA,UAAIA,IAAI,CAACI,MAAL,GAAc,CAAlB,EAAqB;AACnB;AACA,aAAKC,QAAL,CAAc;AAACC,UAAAA,UAAU,EAAE;AAAb,SAAd;AACD,OAHD,MAIK;AACH,YAAI,KAAKC,KAAL,CAAWD,UAAX,KAA0B,CAA9B,EAAiCzB,SAAS,CAACkB,GAAD,EAAM;AAAES,UAAAA,IAAI,EAAE,iBAAR;AAA2BC,UAAAA,CAAC,EAAE,GAA9B;AAAmCC,UAAAA,CAAC,EAAE;AAAtC,SAAN,CAAT;AACjC,aAAKL,QAAL,CAAc;AAACC,UAAAA,UAAU,EAAE;AAAb,SAAd;AACD;AACF,KA5gBkB;;AAEjB,SAAKC,KAAL,GAAa;AACXI,MAAAA,EAAE,EAAG,CADM;AAEXC,MAAAA,SAAS,EAAG,EAFD;AAGXC,MAAAA,YAAY,EAAG,EAHJ;AAIXC,MAAAA,UAAU,EAAG,EAJF;AAKXC,MAAAA,YAAY,EAAG,CALJ;AAMXC,MAAAA,aAAa,EAAG,CANL;AAOXC,MAAAA,YAAY,EAAC,CAPF;AAQXC,MAAAA,qBAAqB,EAAC,KARX;AASXC,MAAAA,SAAS,EAAC,KATC;AAUXC,MAAAA,WAAW,EAAC,KAVD;AAWXC,MAAAA,WAAW,EAAC,KAXD;AAYXC,MAAAA,WAAW,EAAG,KAZH;AAaXC,MAAAA,WAAW,EAAG,KAbH;AAcXC,MAAAA,SAAS,EAAG,KAdD;AAeXC,MAAAA,UAAU,EAAG,EAfF;AAgBXC,MAAAA,eAAe,EAAG,EAhBP;AAiBXC,MAAAA,WAAW,EAAG,EAjBH;AAkBXC,MAAAA,gBAAgB,EAAG,EAlBR;AAmBXC,MAAAA,YAAY,EAAG,EAnBJ;AAoBXC,MAAAA,iBAAiB,EAAG,EApBT;AAqBXC,MAAAA,aAAa,EAAG,EArBL;AAsBXC,MAAAA,kBAAkB,EAAG,EAtBV;AAuBXC,MAAAA,UAAU,EAAG,EAvBF;AAwBXC,MAAAA,eAAe,EAAG,EAxBP;AAyBXC,MAAAA,WAAW,EAAG,EAzBH;AA0BXC,MAAAA,gBAAgB,EAAG,EA1BR;AA2BXC,MAAAA,WAAW,EAAG,EA3BH;AA4BXC,MAAAA,gBAAgB,EAAG,EA5BR;AA6BXC,MAAAA,WAAW,EAAG,IA7BH;AA8BXC,MAAAA,WAAW,EAAG,IA9BH;AA+BXC,MAAAA,WAAW,EAAG,IA/BH;AAgCXC,MAAAA,IAAI,EAAG,KAhCI;AAiCXC,MAAAA,SAAS,EAAG,CAjCD;AAkCXC,MAAAA,OAAO,EAAEC,IAAI,CAACC,GAAL,EAlCE;AAmCXxC,MAAAA,UAAU,EAAE;AAnCD,KAAb;AAqCA,SAAKyC,SAAL,gBAAiBvE,KAAK,CAACwE,SAAN,CAAgB,IAAhB,CAAjB;AACA,SAAKC,SAAL,gBAAiBzE,KAAK,CAACwE,SAAN,CAAgB,IAAhB,CAAjB;AACA,SAAKE,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKC,wBAAL,GAAgC,KAAKA,wBAAL,CAA8BD,IAA9B,CAAmC,IAAnC,CAAhC;AACA,SAAKE,YAAL,GAAoB,KAAKA,YAAL,CAAkBF,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKG,aAAL,GAAqB,KAAKA,aAAL,CAAmBH,IAAnB,CAAwB,IAAxB,CAArB;AACA,SAAKI,WAAL,GAAmB,KAAKA,WAAL,CAAiBJ,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKK,YAAL,GAAoB,KAAKA,YAAL,CAAkBL,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKM,YAAL,GAAoB,KAAKA,YAAL,CAAkBN,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKO,SAAL,GAAiB,KAAKA,SAAL,CAAeP,IAAf,CAAoB,IAApB,CAAjB;AACA,SAAKQ,aAAL,GAAqB,KAAKA,aAAL,CAAmBR,IAAnB,CAAwB,IAAxB,CAArB;AACA,SAAKS,cAAL,GAAsB,KAAKA,cAAL,CAAoBT,IAApB,CAAyB,IAAzB,CAAtB;AACA,SAAKU,cAAL,GAAsB,KAAKA,cAAL,CAAoBV,IAApB,CAAyB,IAAzB,CAAtB;AACA,SAAKW,aAAL,GAAqB,KAAKA,aAAL,CAAmBX,IAAnB,CAAwB,IAAxB,CAArB;AACA,SAAKY,aAAL,GAAqB,KAAKA,aAAL,CAAmBZ,IAAnB,CAAwB,IAAxB,CAArB;AACD;;AAED,QAAMa,UAAN,GAAkB;AAChBC,IAAAA,OAAO,CAAC,gCAAD,CAAP,CADgB,CAEhB;AACA;AACA;;;AACA,UAAMnE,GAAG,GAAG,MAAMpB,OAAO,CAACwF,IAAR,EAAlB;AACAhE,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACA,SAAKE,QAAL,CAAc;AAACuC,MAAAA,OAAO,EAACC,IAAI,CAACC,GAAL;AAAT,KAAd;AACA,UAAMqB,WAAW,GAAGC,WAAW,CAAC,MAAM;AACpC,WAAKC,iBAAL,CAAuBvE,GAAvB;AACD,KAF8B,EAE5B,EAF4B,CAA/B;AAGA,SAAKO,QAAL,CAAc;AAACM,MAAAA,EAAE,EAACwD;AAAJ,KAAd;AACA,SAAK9D,QAAL,CAAc;AAACa,MAAAA,qBAAqB,EAAC;AAAvB,KAAd;AACD;;AAED,QAAMmD,iBAAN,CAAwBvE,GAAxB,EAA6B;AAC3B,QAAI,KAAKS,KAAL,CAAWmC,IAAf,EAAoB;AAClB,WAAKrC,QAAL,CAAc;AAACsC,QAAAA,SAAS,EAACE,IAAI,CAACC,GAAL,KAAW;AAAtB,OAAd,EADkB,CAElB;;AACA,WAAKzC,QAAL,CAAc;AAACqC,QAAAA,IAAI,EAAC;AAAN,OAAd;AACD;;AACD,QACE,OAAO,KAAKK,SAAL,CAAeuB,OAAtB,KAAkC,WAAlC,IACA,KAAKvB,SAAL,CAAeuB,OAAf,KAA2B,IAD3B,IAEA,KAAKvB,SAAL,CAAeuB,OAAf,CAAuBC,KAAvB,CAA6BC,UAA7B,KAA4C,CAH9C,EAIE;AACA,YAAMD,KAAK,GAAG,KAAKxB,SAAL,CAAeuB,OAAf,CAAuBC,KAArC;AACA,YAAME,UAAU,GAAG,KAAK1B,SAAL,CAAeuB,OAAf,CAAuBC,KAAvB,CAA6BE,UAAhD;AACA,YAAMC,WAAW,GAAG,KAAK3B,SAAL,CAAeuB,OAAf,CAAuBC,KAAvB,CAA6BG,WAAjD;AACA,WAAK3B,SAAL,CAAeuB,OAAf,CAAuBC,KAAvB,CAA6BI,KAA7B,GAAqCF,UAArC;AACA,WAAK1B,SAAL,CAAeuB,OAAf,CAAuBC,KAAvB,CAA6BK,MAA7B,GAAsCF,WAAtC;AACA,WAAKzB,SAAL,CAAeqB,OAAf,CAAuBK,KAAvB,GAA+BF,UAA/B;AACA,WAAKxB,SAAL,CAAeqB,OAAf,CAAuBM,MAAvB,GAAgCF,WAAhC;AACA,YAAMG,IAAI,GAAG,MAAM/E,GAAG,CAACgF,kBAAJ,CAAuBP,KAAvB,CAAnB;AACA,YAAMxE,GAAG,GAAG,KAAKkD,SAAL,CAAeqB,OAAf,CAAuBS,UAAvB,CAAkC,IAAlC,CAAZ;AACAjG,MAAAA,aAAa,CAAC+F,IAAI,CAAC,WAAD,CAAL,EAAoB,GAApB,EAAyB9E,GAAzB,CAAb;AACAhB,MAAAA,YAAY,CAAC8F,IAAI,CAAC,WAAD,CAAL,EAAoB,GAApB,EAAyB9E,GAAzB,CAAZ;AACC;AACF;;AAGHgE,EAAAA,aAAa,GAAE;AACb,QAAIiB,YAAY,GAAG,EAAnB;AACA,QAAIC,aAAa,GAAG,EAApB;AACA,QAAIC,KAAK,GAAG,KAAK3E,KAAL,CAAWmB,eAAX,CAA2B,CAA3B,CAAZ;AACA,QAAIyD,GAAG,GAAG,KAAK5E,KAAL,CAAWmB,eAAX,CAA2B,KAAKnB,KAAL,CAAWmB,eAAX,CAA2BtB,MAA3B,GAAoC,CAA/D,CAAV;;AACA,WAAO8E,KAAK,GAAG,GAAR,GAAcC,GAArB,EAAyB;AACvBH,MAAAA,YAAY,GAAG,CAAC,GAAGA,YAAJ,EAAkBE,KAAlB,CAAf;AACA,UAAIE,KAAK,GAAG,CAAZ;AAAA,UAAeC,QAAQ,GAAG,CAA1B;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK/E,KAAL,CAAWkB,UAAX,CAAsBrB,MAA1C,EAAkDkF,CAAC,EAAnD,EAAsD;AACpD,YAAI,KAAK/E,KAAL,CAAWmB,eAAX,CAA2B4D,CAA3B,KAAiCJ,KAAjC,IAA0C,KAAK3E,KAAL,CAAWmB,eAAX,CAA2B4D,CAA3B,IAAiCJ,KAAK,GAAG,GAAvF,EAA4F;AAC1F,cAAIG,QAAQ,GAAG,KAAK9E,KAAL,CAAWkB,UAAX,CAAsB6D,CAAtB,CAAf,EAAyCD,QAAQ,GAAG,KAAK9E,KAAL,CAAWkB,UAAX,CAAsB6D,CAAtB,CAAX;;AACzC,cAAI,KAAK/E,KAAL,CAAWK,SAAX,CAAqB2E,QAArB,CAA8B,KAAKhF,KAAL,CAAWmB,eAAX,CAA2B4D,CAA3B,CAA9B,CAAJ,EAAiE;AAC/DF,YAAAA,KAAK,IAAIC,QAAT;AACAA,YAAAA,QAAQ,GAAG,CAAX;AACD;AACF;AACF;AACD;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACMJ,MAAAA,aAAa,GAAG,CAAC,GAAGA,aAAJ,EAAmBG,KAAnB,CAAhB;AACAF,MAAAA,KAAK,IAAI,GAAT;AACD;;AACD,UAAMM,KAAK,GAAG;AACZC,MAAAA,MAAM,EAAET,YADI;AAEZU,MAAAA,QAAQ,EAAE,CACR;AACEC,QAAAA,KAAK,EAAE,SADT;AAEEC,QAAAA,IAAI,EAAE,KAFR;AAGEC,QAAAA,WAAW,EAAE,GAHf;AAIEC,QAAAA,eAAe,EAAE,sBAJnB;AAKEC,QAAAA,WAAW,EAAE,oBALf;AAMEC,QAAAA,cAAc,EAAE,MANlB;AAOEC,QAAAA,UAAU,EAAE,EAPd;AAQEC,QAAAA,gBAAgB,EAAE,GARpB;AASEC,QAAAA,eAAe,EAAE,OATnB;AAUEC,QAAAA,gBAAgB,EAAE,oBAVpB;AAWEC,QAAAA,oBAAoB,EAAE,MAXxB;AAYEC,QAAAA,gBAAgB,EAAE,CAZpB;AAaEC,QAAAA,gBAAgB,EAAE,CAbpB;AAcEC,QAAAA,yBAAyB,EAAE,oBAd7B;AAeEC,QAAAA,qBAAqB,EAAE,qBAfzB;AAgBEC,QAAAA,qBAAqB,EAAE,CAhBzB;AAiBEC,QAAAA,WAAW,EAAE,CAjBf;AAkBEC,QAAAA,cAAc,EAAE,EAlBlB;AAmBEC,QAAAA,IAAI,EAAE5B;AAnBR,OADQ;AAFE,KAAd;AA0BA,QAAI6B,YAAY,GAAG,EAAnB;AACA,QAAIC,aAAa,GAAG,EAApB;AACA7B,IAAAA,KAAK,GAAG,KAAK3E,KAAL,CAAWuB,iBAAX,CAA6B,CAA7B,CAAR;AACAqD,IAAAA,GAAG,GAAG,KAAK5E,KAAL,CAAWuB,iBAAX,CAA6B,KAAKvB,KAAL,CAAWuB,iBAAX,CAA6B1B,MAA7B,GAAsC,CAAnE,CAAN;;AACA,WAAO8E,KAAK,GAAG,GAAR,GAAcC,GAArB,EAAyB;AACvB2B,MAAAA,YAAY,GAAG,CAAC,GAAGA,YAAJ,EAAkB5B,KAAK,GAAG,GAA1B,CAAf;AACA,UAAIE,KAAK,GAAG,GAAZ;AACA,UAAI4B,UAAU,GAAG,CAAjB;;AACA,WAAK,IAAIC,EAAT,IAAe,KAAK1G,KAAL,CAAWM,YAA1B,EAAuC;AACrCmG,QAAAA,UAAU,GAAG,KAAKzG,KAAL,CAAWM,YAAX,CAAwBoG,EAAxB,CAAb;;AACA,YAAID,UAAU,IAAI9B,KAAd,IAAuB8B,UAAU,GAAI9B,KAAK,GAAG,GAAjD,EAAsD;AACpDE,UAAAA,KAAK,IAAI,GAAT;AACD;AACF;;AACD2B,MAAAA,aAAa,GAAG,CAAC,GAAGA,aAAJ,EAAmB3B,KAAnB,CAAhB;AACAF,MAAAA,KAAK,IAAI,GAAT;AACD;;AACD,UAAMgC,KAAK,GAAG;AACZzB,MAAAA,MAAM,EAAEqB,YADI;AAEZpB,MAAAA,QAAQ,EAAE,CACR;AACEC,QAAAA,KAAK,EAAE,UADT;AAEEC,QAAAA,IAAI,EAAE,KAFR;AAGEC,QAAAA,WAAW,EAAE,GAHf;AAIEC,QAAAA,eAAe,EAAE,sBAJnB;AAKEC,QAAAA,WAAW,EAAE,oBALf;AAMEC,QAAAA,cAAc,EAAE,MANlB;AAOEC,QAAAA,UAAU,EAAE,EAPd;AAQEC,QAAAA,gBAAgB,EAAE,GARpB;AASEC,QAAAA,eAAe,EAAE,OATnB;AAUEC,QAAAA,gBAAgB,EAAE,oBAVpB;AAWEC,QAAAA,oBAAoB,EAAE,MAXxB;AAYEC,QAAAA,gBAAgB,EAAE,CAZpB;AAaEC,QAAAA,gBAAgB,EAAE,CAbpB;AAcEC,QAAAA,yBAAyB,EAAE,oBAd7B;AAeEC,QAAAA,qBAAqB,EAAE,qBAfzB;AAgBEC,QAAAA,qBAAqB,EAAE,CAhBzB;AAiBEC,QAAAA,WAAW,EAAE,CAjBf;AAkBEC,QAAAA,cAAc,EAAE,EAlBlB;AAmBEC,QAAAA,IAAI,EAAEE;AAnBR,OADQ;AAFE,KAAd;AA0BA,QAAII,YAAY,GAAG,EAAnB;AACA,QAAIC,aAAa,GAAG,EAApB;AACAlC,IAAAA,KAAK,GAAG,KAAK3E,KAAL,CAAW2B,eAAX,CAA2B,CAA3B,CAAR;AACAiD,IAAAA,GAAG,GAAG,KAAK5E,KAAL,CAAW2B,eAAX,CAA2B,KAAK3B,KAAL,CAAW2B,eAAX,CAA2B9B,MAA3B,GAAoC,CAA/D,CAAN;;AACA,WAAO8E,KAAK,GAAG,GAAR,GAAcC,GAArB,EAAyB;AACvBgC,MAAAA,YAAY,GAAG,CAAC,GAAGA,YAAJ,EAAkBjC,KAAK,GAAG,GAA1B,CAAf;AACA,UAAIE,KAAK,GAAG,GAAZ;AACA,UAAI4B,UAAU,GAAG,CAAjB;;AACA,WAAK,IAAIC,EAAT,IAAe,KAAK1G,KAAL,CAAWO,UAA1B,EAAqC;AACnCkG,QAAAA,UAAU,GAAG,KAAKzG,KAAL,CAAWO,UAAX,CAAsBmG,EAAtB,CAAb;;AACA,YAAID,UAAU,IAAI9B,KAAd,IAAuB8B,UAAU,GAAI9B,KAAK,GAAG,GAAjD,EAAsD;AACpDE,UAAAA,KAAK,IAAI,GAAT;AACD;AACF;;AACDgC,MAAAA,aAAa,GAAG,CAAC,GAAGA,aAAJ,EAAmBhC,KAAnB,CAAhB;AACAF,MAAAA,KAAK,IAAI,GAAT;AACD;;AACD,UAAMmC,KAAK,GAAG;AACZ5B,MAAAA,MAAM,EAAE0B,YADI;AAEZzB,MAAAA,QAAQ,EAAE,CACR;AACEC,QAAAA,KAAK,EAAE,MADT;AAEEC,QAAAA,IAAI,EAAE,KAFR;AAGEC,QAAAA,WAAW,EAAE,GAHf;AAIEC,QAAAA,eAAe,EAAE,sBAJnB;AAKEC,QAAAA,WAAW,EAAE,oBALf;AAMEC,QAAAA,cAAc,EAAE,MANlB;AAOEC,QAAAA,UAAU,EAAE,EAPd;AAQEC,QAAAA,gBAAgB,EAAE,GARpB;AASEC,QAAAA,eAAe,EAAE,OATnB;AAUEC,QAAAA,gBAAgB,EAAE,oBAVpB;AAWEC,QAAAA,oBAAoB,EAAE,MAXxB;AAYEC,QAAAA,gBAAgB,EAAE,CAZpB;AAaEC,QAAAA,gBAAgB,EAAE,CAbpB;AAcEC,QAAAA,yBAAyB,EAAE,oBAd7B;AAeEC,QAAAA,qBAAqB,EAAE,qBAfzB;AAgBEC,QAAAA,qBAAqB,EAAE,CAhBzB;AAiBEC,QAAAA,WAAW,EAAE,CAjBf;AAkBEC,QAAAA,cAAc,EAAE,EAlBlB;AAmBEC,QAAAA,IAAI,EAAEO;AAnBR,OADQ;AAFE,KAAd;AA0BA,SAAK/G,QAAL,CAAc;AAACkC,MAAAA,WAAW,EAACiD;AAAb,KAAd;AACA,SAAKnF,QAAL,CAAc;AAACmC,MAAAA,WAAW,EAAC0E;AAAb,KAAd;AACA,SAAK7G,QAAL,CAAc;AAACoC,MAAAA,WAAW,EAAC4E;AAAb,KAAd;AACA,SAAKhH,QAAL,CAAc;AAACgB,MAAAA,WAAW,EAAC;AAAb,KAAd;AACD;;AAEDyC,EAAAA,aAAa,GAAE;AACb,QAAI,KAAKvD,KAAL,CAAWa,WAAX,KAA2B,IAA/B,EAAoC;AAClC,WAAKf,QAAL,CAAc;AAACe,QAAAA,WAAW,EAAC;AAAb,OAAd;AACA,WAAK2C,aAAL;AACD,KAHD,MAII;AACF,WAAK1D,QAAL,CAAc;AAACe,QAAAA,WAAW,EAAC;AAAb,OAAd;AACD;AACF;;AAEDwC,EAAAA,cAAc,GAAE;AACd,QAAI,KAAKrD,KAAL,CAAWU,YAAX,KAA4B,CAAhC,EAAkC;AAChC,UAAIqG,cAAc,GAAG,CAACzE,IAAI,CAACC,GAAL,KAAa,KAAKvC,KAAL,CAAWqC,OAAzB,IAAkC,IAAvD;AACA,WAAKvC,QAAL,CAAc;AAACY,QAAAA,YAAY,EAAC;AAAd,OAAd;AACA,WAAKZ,QAAL,CAAc;AAACoB,QAAAA,UAAU,EAAC,CAAC,GAAG,KAAKlB,KAAL,CAAWkB,UAAf,EAA2B,GAA3B;AAAZ,OAAd;AACA,WAAKpB,QAAL,CAAc;AAACqB,QAAAA,eAAe,EAAC,CAAC,GAAG,KAAKnB,KAAL,CAAWmB,eAAf,EAAgC4F,cAAhC;AAAjB,OAAd;AACA,WAAKjH,QAAL,CAAc;AAACO,QAAAA,SAAS,EAAC,CAAC,GAAG,KAAKL,KAAL,CAAWK,SAAf,EAA0B0G,cAA1B;AAAX,OAAd;AACD;AACF;;AAEDzD,EAAAA,cAAc,GAAE;AACd,QAAI,KAAKtD,KAAL,CAAWU,YAAX,KAA4B,CAAhC,EAAkC;AAChC,UAAIqG,cAAc,GAAG,CAACzE,IAAI,CAACC,GAAL,KAAa,KAAKvC,KAAL,CAAWqC,OAAzB,IAAkC,IAAvD;AACA,WAAKvC,QAAL,CAAc;AAACY,QAAAA,YAAY,EAAC;AAAd,OAAd;AACA,WAAKZ,QAAL,CAAc;AAACoB,QAAAA,UAAU,EAAC,CAAC,GAAG,KAAKlB,KAAL,CAAWkB,UAAf,EAA2B,GAA3B;AAAZ,OAAd;AACA,WAAKpB,QAAL,CAAc;AAACqB,QAAAA,eAAe,EAAC,CAAC,GAAG,KAAKnB,KAAL,CAAWmB,eAAf,EAAgC4F,cAAhC;AAAjB,OAAd;AACA,WAAKjH,QAAL,CAAc;AAACO,QAAAA,SAAS,EAAC,CAAC,GAAG,KAAKL,KAAL,CAAWK,SAAf,EAA0B0G,cAA1B;AAAX,OAAd;AACD;AACF;;AAEDC,EAAAA,IAAI,CAACC,GAAD,EAAMC,GAAN,EAAU;AACZ,WAAOzI,IAAI,CAACC,GAAG,CAACuI,GAAG,CAAC,CAAD,CAAH,GAAOC,GAAG,CAAC,CAAD,CAAX,EAAgB,CAAhB,CAAH,GAAsBxI,GAAG,CAACuI,GAAG,CAAC,CAAD,CAAH,GAAOC,GAAG,CAAC,CAAD,CAAX,EAAgB,CAAhB,CAA1B,CAAX;AACD;;AAED9D,EAAAA,aAAa,GAAE;AACb+D,IAAAA,aAAa,CAAC,KAAKnH,KAAL,CAAWI,EAAZ,CAAb;AACA,SAAKN,QAAL,CAAc;AACZM,MAAAA,EAAE,EAAG,CADO;AAEZC,MAAAA,SAAS,EAAG,EAFA;AAGZC,MAAAA,YAAY,EAAG,EAHH;AAIZC,MAAAA,UAAU,EAAG,EAJD;AAKZC,MAAAA,YAAY,EAAG,CALH;AAMZC,MAAAA,aAAa,EAAG,CANJ;AAOZC,MAAAA,YAAY,EAAC,CAPD;AAQZC,MAAAA,qBAAqB,EAAC,KARV;AASZC,MAAAA,SAAS,EAAC,KATE;AAUZC,MAAAA,WAAW,EAAC,KAVA;AAWZC,MAAAA,WAAW,EAAC,KAXA;AAYZC,MAAAA,WAAW,EAAG,KAZF;AAaZC,MAAAA,WAAW,EAAG,KAbF;AAcZC,MAAAA,SAAS,EAAG,KAdA;AAeZC,MAAAA,UAAU,EAAG,EAfD;AAgBZC,MAAAA,eAAe,EAAG,EAhBN;AAiBZC,MAAAA,WAAW,EAAG,EAjBF;AAkBZC,MAAAA,gBAAgB,EAAG,EAlBP;AAmBZC,MAAAA,YAAY,EAAG,EAnBH;AAoBZC,MAAAA,iBAAiB,EAAG,EApBR;AAqBZC,MAAAA,aAAa,EAAG,EArBJ;AAsBZC,MAAAA,kBAAkB,EAAG,EAtBT;AAuBZC,MAAAA,UAAU,EAAG,EAvBD;AAwBZC,MAAAA,eAAe,EAAG,EAxBN;AAyBZC,MAAAA,WAAW,EAAG,EAzBF;AA0BZC,MAAAA,gBAAgB,EAAG,EA1BP;AA2BZG,MAAAA,WAAW,EAAG,IA3BF;AA4BZC,MAAAA,WAAW,EAAG,IA5BF;AA6BZC,MAAAA,WAAW,EAAG,IA7BF;AA8BZC,MAAAA,IAAI,EAAG,KA9BK;AA+BZE,MAAAA,OAAO,EAAEC,IAAI,CAACC,GAAL,EA/BG;AAgCZxC,MAAAA,UAAU,EAAE;AAhCA,KAAd;AAkCD;;AAMD,QAAM4C,WAAN,GAAoB;AAClBe,IAAAA,OAAO,CAAC,gCAAD,CAAP,CADkB,CAElB;AACA;AACA;;;AACA,UAAMnE,GAAG,GAAG,MAAMrB,QAAQ,CAACyF,IAAT,EAAlB;AACAhE,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACA,SAAKE,QAAL,CAAc;AAACuC,MAAAA,OAAO,EAACC,IAAI,CAACC,GAAL;AAAT,KAAd;AACA,UAAMqB,WAAW,GAAGC,WAAW,CAAC,MAAM;AACpC,WAAKuD,mBAAL,CAAyB7H,GAAzB;AACD,KAF8B,EAE5B,EAF4B,CAA/B;AAGA,SAAKO,QAAL,CAAc;AAACM,MAAAA,EAAE,EAACwD;AAAJ,KAAd;AACA,SAAK9D,QAAL,CAAc;AAACa,MAAAA,qBAAqB,EAAC;AAAvB,KAAd;AACD;;AAED,QAAMyG,mBAAN,CAA0B7H,GAA1B,EAA+B;AAC7B,QAAI,KAAKS,KAAL,CAAWmC,IAAf,EAAoB;AAClB,WAAKrC,QAAL,CAAc;AAACsC,QAAAA,SAAS,EAACE,IAAI,CAACC,GAAL,KAAW;AAAtB,OAAd,EADkB,CAElB;;AACA,WAAKzC,QAAL,CAAc;AAACqC,QAAAA,IAAI,EAAC;AAAN,OAAd;AACD;;AACD,QACE,OAAO,KAAKK,SAAL,CAAeuB,OAAtB,KAAkC,WAAlC,IACA,KAAKvB,SAAL,CAAeuB,OAAf,KAA2B,IAD3B,IAEA,KAAKvB,SAAL,CAAeuB,OAAf,CAAuBC,KAAvB,CAA6BC,UAA7B,KAA4C,CAH9C,EAIE;AACA,YAAMD,KAAK,GAAG,KAAKxB,SAAL,CAAeuB,OAAf,CAAuBC,KAArC;AACA,YAAME,UAAU,GAAG,KAAK1B,SAAL,CAAeuB,OAAf,CAAuBC,KAAvB,CAA6BE,UAAhD;AACA,YAAMC,WAAW,GAAG,KAAK3B,SAAL,CAAeuB,OAAf,CAAuBC,KAAvB,CAA6BG,WAAjD;AACA,WAAK3B,SAAL,CAAeuB,OAAf,CAAuBC,KAAvB,CAA6BI,KAA7B,GAAqCF,UAArC;AACA,WAAK1B,SAAL,CAAeuB,OAAf,CAAuBC,KAAvB,CAA6BK,MAA7B,GAAsCF,WAAtC;AACA,WAAKzB,SAAL,CAAeqB,OAAf,CAAuBK,KAAvB,GAA+BF,UAA/B;AACA,WAAKxB,SAAL,CAAeqB,OAAf,CAAuBM,MAAvB,GAAgCF,WAAhC;AACA,YAAM1E,IAAI,GAAG,MAAMF,GAAG,CAACG,aAAJ,CAAkBsE,KAAlB,CAAnB;AACA,YAAMxE,GAAG,GAAG,KAAKkD,SAAL,CAAeqB,OAAf,CAAuBS,UAAvB,CAAkC,IAAlC,CAAZ;AACA,WAAK1E,QAAL,CAAc;AAACuH,QAAAA,OAAO,EAAC7H;AAAT,OAAd,EAVA,CAYA;;AACA,UAAIC,IAAI,CAACI,MAAL,GAAc,CAAlB,EAAqBxB,QAAQ,CAACoB,IAAD,EAAOD,GAAP,CAAR,CAbrB,CAeA;;AACA,UAAI8C,IAAI,CAACC,GAAL,KAAa,KAAKvC,KAAL,CAAWoC,SAA5B,EAAsC;AACpCzC,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6B,KAAKI,KAAL,CAAWoC,SAAxC,EADoC,CAEpC;;AACA,YAAI,KAAKpC,KAAL,CAAWoC,SAAX,GAAuBE,IAAI,CAACC,GAAL,EAAvB,GAAoC,IAAxC,EAA8CjE,SAAS,CAACkB,GAAD,EAAM;AAAES,UAAAA,IAAI,EAAE,GAAR;AAAaC,UAAAA,CAAC,EAAE,GAAhB;AAAqBC,UAAAA,CAAC,EAAE;AAAxB,SAAN,CAAT,CAA9C,KACK,IAAI,KAAKH,KAAL,CAAWoC,SAAX,GAAuBE,IAAI,CAACC,GAAL,EAAvB,GAAoC,IAAxC,EAA8CjE,SAAS,CAACkB,GAAD,EAAM;AAAES,UAAAA,IAAI,EAAE,GAAR;AAAaC,UAAAA,CAAC,EAAE,GAAhB;AAAqBC,UAAAA,CAAC,EAAE;AAAxB,SAAN,CAAT,CAA9C,KACA,IAAI,KAAKH,KAAL,CAAWoC,SAAX,GAAuBE,IAAI,CAACC,GAAL,EAAvB,GAAoC,IAAxC,EAA8CjE,SAAS,CAACkB,GAAD,EAAM;AAAES,UAAAA,IAAI,EAAE,GAAR;AAAaC,UAAAA,CAAC,EAAE,GAAhB;AAAqBC,UAAAA,CAAC,EAAE;AAAxB,SAAN,CAAT;AACpD,OAND,MAOK;AACH,YAAIV,IAAI,CAACI,MAAL,GAAc,CAAlB,EAAoB;AAClBJ,UAAAA,IAAI,CAAC6H,OAAL,CAAcC,UAAD,IAAgB;AAC3B,iBAAKzH,QAAL,CAAc;AAACC,cAAAA,UAAU,EAAE;AAAb,aAAd;AACA,kBAAMyH,SAAS,GAAGD,UAAU,CAACC,SAA7B;AAEA,gBAAIC,SAAS,GAAG,KAAKT,IAAL,CAAUQ,SAAS,CAAC,CAAD,CAAnB,EAAwBA,SAAS,CAAC,CAAD,CAAjC,CAAhB;AACA,gBAAIT,cAAc,GAAG,CAACzE,IAAI,CAACC,GAAL,KAAa,KAAKvC,KAAL,CAAWqC,OAAzB,IAAkC,IAAvD;;AAEA,gBAAI,KAAKrC,KAAL,CAAWe,WAAX,KAA2B,KAA/B,EAAqC;AACnC,kBAAI2G,UAAU,GAAG,KAAKV,IAAL,CAAUQ,SAAS,CAAC,CAAD,CAAnB,EAAwBA,SAAS,CAAC,CAAD,CAAjC,CAAjB;AACAE,cAAAA,UAAU,GAAGA,UAAU,GAACD,SAAxB;AACA,mBAAK3H,QAAL,CAAc;AAACoB,gBAAAA,UAAU,EAAC,CAAC,GAAG,KAAKlB,KAAL,CAAWkB,UAAf,EAA2BwG,UAA3B;AAAZ,eAAd;AACA,mBAAK5H,QAAL,CAAc;AAACqB,gBAAAA,eAAe,EAAC,CAAC,GAAG,KAAKnB,KAAL,CAAWmB,eAAf,EAAgC4F,cAAhC;AAAjB,eAAd;;AACA,kBAAIW,UAAU,IAAI,GAAlB,EAAsB;AAAC,qBAAK5H,QAAL,CAAc;AAACU,kBAAAA,YAAY,EAAC;AAAd,iBAAd;AAAgC;;AACvD,kBAAIkH,UAAU,GAAG,GAAb,IAAoB,KAAK1H,KAAL,CAAWQ,YAAX,KAA4B,CAApD,EAAsD;AACpD,qBAAKV,QAAL,CAAc;AAACU,kBAAAA,YAAY,EAAC;AAAd,iBAAd;AACA,qBAAKV,QAAL,CAAc;AAACO,kBAAAA,SAAS,EAAC,CAAC,GAAG,KAAKL,KAAL,CAAWK,SAAf,EAA0B0G,cAA1B;AAAX,iBAAd;AACD;AACF;;AAED,gBAAI,KAAK/G,KAAL,CAAWe,WAAX,KAA2B,IAA3B,IAAmC,KAAKf,KAAL,CAAWgB,WAAX,KAA2B,KAAlE,EAAwE;AACtE,kBAAI2G,WAAW,GAAG,CAACH,SAAS,CAAC,CAAD,CAAT,CAAa,CAAb,IAAkBA,SAAS,CAAC,EAAD,CAAT,CAAc,CAAd,CAAnB,IAAuCC,SAAzD;AACA,mBAAK3H,QAAL,CAAc;AAACwB,gBAAAA,YAAY,EAAC,CAAC,GAAG,KAAKtB,KAAL,CAAWsB,YAAf,EAA6BqG,WAA7B;AAAd,eAAd;AACA,mBAAK7H,QAAL,CAAc;AAACyB,gBAAAA,iBAAiB,EAAC,CAAC,GAAG,KAAKvB,KAAL,CAAWuB,iBAAf,EAAkCwF,cAAlC;AAAnB,eAAd;;AACA,kBAAI,KAAK/G,KAAL,CAAWS,aAAX,KAA6B,CAAjC,EAAmC;AACjC,oBAAIkH,WAAW,IAAI,GAAnB,EAAwB,KAAK7H,QAAL,CAAc;AAACW,kBAAAA,aAAa,EAAC;AAAf,iBAAd;AACxB,oBAAIkH,WAAW,IAAI,CAAC,GAApB,EAAyB,KAAK7H,QAAL,CAAc;AAACW,kBAAAA,aAAa,EAAC,CAAC;AAAhB,iBAAd;AAC1B;;AACD,kBAAI,KAAKT,KAAL,CAAWS,aAAX,KAA6B,CAA7B,IAAkCkH,WAAW,IAAI,CAAC,GAAtD,EAA0D;AACxD,qBAAK7H,QAAL,CAAc;AAACW,kBAAAA,aAAa,EAAC,CAAC;AAAhB,iBAAd;AACD;;AACD,kBAAI,KAAKT,KAAL,CAAWS,aAAX,KAA6B,CAAC,CAA9B,IAAmCkH,WAAW,IAAI,GAAtD,EAA0D;AACxD,qBAAK7H,QAAL,CAAc;AAACW,kBAAAA,aAAa,EAAC;AAAf,iBAAd;AACA,qBAAKX,QAAL,CAAc;AAACQ,kBAAAA,YAAY,EAAC,CAAC,GAAG,KAAKN,KAAL,CAAWM,YAAf,EAA6ByG,cAA7B;AAAd,iBAAd;AACD;AACF;;AAED,gBAAI,KAAK/G,KAAL,CAAWgB,WAAX,KAA2B,IAA3B,IAAmC,KAAKhB,KAAL,CAAWiB,SAAX,KAAyB,KAAhE,EAAsE;AACpE,kBAAI2G,SAAS,GAAI,CAAEJ,SAAS,CAAC,CAAD,CAAT,CAAa,CAAb,IAAkBA,SAAS,CAAC,CAAD,CAAT,CAAa,CAAb,CAAnB,IACCA,SAAS,CAAC,EAAD,CAAT,CAAc,CAAd,IAAmBA,SAAS,CAAC,CAAD,CAAT,CAAa,CAAb,CADpB,KAECA,SAAS,CAAC,EAAD,CAAT,CAAc,CAAd,IAAmBA,SAAS,CAAC,EAAD,CAAT,CAAc,CAAd,CAFpB,KAGDA,SAAS,CAAC,EAAD,CAAT,CAAc,CAAd,IAAmBA,SAAS,CAAC,EAAD,CAAT,CAAc,CAAd,CAHlB,CAAD,KAIE,IAAEC,SAJJ,CAAjB;AAKA,mBAAK3H,QAAL,CAAc;AAAC4B,gBAAAA,UAAU,EAAC,CAAC,GAAG,KAAK1B,KAAL,CAAW0B,UAAf,EAA2BkG,SAA3B;AAAZ,eAAd;AACA,mBAAK9H,QAAL,CAAc;AAAC6B,gBAAAA,eAAe,EAAC,CAAC,GAAG,KAAK3B,KAAL,CAAW2B,eAAf,EAAgCoF,cAAhC;AAAjB,eAAd;;AACA,kBAAIa,SAAS,IAAI,GAAjB,EAAqB;AAAC,qBAAK9H,QAAL,CAAc;AAAC+H,kBAAAA,WAAW,EAAC;AAAb,iBAAd;AAA+B;;AACrD,kBAAID,SAAS,GAAG,CAAC,GAAb,IAAoB,KAAK5H,KAAL,CAAW6H,WAAX,KAA2B,CAAnD,EAAqD;AACnD,qBAAK/H,QAAL,CAAc;AAAC+H,kBAAAA,WAAW,EAAC;AAAb,iBAAd;AACA,qBAAK/H,QAAL,CAAc;AAACS,kBAAAA,UAAU,EAAC,CAAC,GAAG,KAAKP,KAAL,CAAWO,UAAf,EAA2BwG,cAA3B;AAAZ,iBAAd;AACD;AACF;AACF,WAlDD;AAmDD,SApDD,MAqDK;AACH,cAAI,KAAK/G,KAAL,CAAWD,UAAX,GAAwB,CAA5B,EAA+BzB,SAAS,CAACkB,GAAD,EAAM;AAAES,YAAAA,IAAI,EAAE,iBAAR;AAA2BC,YAAAA,CAAC,EAAE,GAA9B;AAAmCC,YAAAA,CAAC,EAAE;AAAtC,WAAN,CAAT;AAC/B,eAAKL,QAAL,CAAc;AAACC,YAAAA,UAAU,EAAE,KAAKC,KAAL,CAAWD,UAAX,GAAwB;AAArC,WAAd;AACD;AACF;AACF;AACF;;AAED,QAAM+C,YAAN,GAAqB;AACnB,SAAKhD,QAAL,CAAc;AAACiB,MAAAA,WAAW,EAAC;AAAb,KAAd;AACA,SAAKjB,QAAL,CAAc;AAACqC,MAAAA,IAAI,EAAC;AAAN,KAAd;AACD;;AAED,QAAMY,aAAN,GAAsB;AACpB,SAAKjD,QAAL,CAAc;AAACkB,MAAAA,WAAW,EAAC;AAAb,KAAd;AACA,SAAKlB,QAAL,CAAc;AAACqC,MAAAA,IAAI,EAAC;AAAN,KAAd;AACD;;AAEDU,EAAAA,wBAAwB,GAAG;AACzBsE,IAAAA,aAAa,CAAC,KAAKnH,KAAL,CAAWI,EAAZ,CAAb;AACA,SAAKN,QAAL,CAAc;AAACa,MAAAA,qBAAqB,EAAC,KAAvB;AACCI,MAAAA,WAAW,EAAC,KADb;AAECC,MAAAA,WAAW,EAAC,KAFb;AAGCC,MAAAA,SAAS,EAAC;AAHX,KAAd;AAIA,SAAKuC,aAAL;AACD;;AAED,QAAMP,YAAN,GAAoB;AAClB,SAAKnD,QAAL,CAAc;AAACuC,MAAAA,OAAO,EAACC,IAAI,CAACC,GAAL;AAAT,KAAd;AACA,QAAIsC,KAAK,GAAG,CAAZ;;AACAnB,IAAAA,OAAO,CAAC,gCAAD,CAAP;;AACA,UAAMnE,GAAG,GAAG,MAAMrB,QAAQ,CAACyF,IAAT,EAAlB;AACA,UAAMnE,GAAG,GAAG,KAAKkD,SAAL,CAAeqB,OAAf,CAAuBS,UAAvB,CAAkC,IAAlC,CAAZ;AACA7E,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACA,UAAMgE,WAAW,GAAGC,WAAW,CAAC,MAAM;AACpC,WAAKX,YAAL,CAAkB2B,KAAlB,EAAyBtF,GAAzB,EAA8BC,GAA9B;AACAqF,MAAAA,KAAK,GAAG,CAACA,KAAK,GAAG,CAAT,IAAY,EAApB;AACD,KAH8B,EAG5B,EAH4B,CAA/B;AAIA,SAAK/E,QAAL,CAAc;AAACM,MAAAA,EAAE,EAACwD;AAAJ,KAAd;AACA,SAAK9D,QAAL,CAAc;AAACc,MAAAA,SAAS,EAAC;AAAX,KAAd;AACD;;AAED,QAAMsC,YAAN,CAAmB2B,KAAnB,EAA0BtF,GAA1B,EAA+BC,GAA/B,EAAoC;AAClC,QAAI,KAAKQ,KAAL,CAAWmC,IAAf,EAAoB;AAClB,WAAKrC,QAAL,CAAc;AAACsC,QAAAA,SAAS,EAACE,IAAI,CAACC,GAAL,KAAW;AAAtB,OAAd,EADkB,CAElB;;AACA,WAAKzC,QAAL,CAAc;AAACqC,QAAAA,IAAI,EAAC;AAAN,OAAd;AACD;;AACD,QACE,OAAO,KAAKK,SAAL,CAAeuB,OAAtB,KAAkC,WAAlC,IACA,KAAKvB,SAAL,CAAeuB,OAAf,KAA2B,IAD3B,IAEA,KAAKvB,SAAL,CAAeuB,OAAf,CAAuBC,KAAvB,CAA6BC,UAA7B,KAA4C,CAH9C,EAIE;AACA,UAAI3B,IAAI,CAACC,GAAL,KAAa,KAAKvC,KAAL,CAAWoC,SAA5B,EAAsC;AACpCzC,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6B,KAAKI,KAAL,CAAWoC,SAAxC,EADoC,CAEpC;;AACA5C,QAAAA,GAAG,CAACsI,SAAJ,CAAc,CAAd,EAAgB,CAAhB,EAAmB,KAAKpF,SAAL,CAAeqB,OAAf,CAAuBK,KAA1C,EAAiD,KAAK1B,SAAL,CAAeqB,OAAf,CAAuBM,MAAxE;AACA,YAAI,KAAKrE,KAAL,CAAWoC,SAAX,GAAuBE,IAAI,CAACC,GAAL,EAAvB,GAAoC,IAAxC,EAA8CjE,SAAS,CAACkB,GAAD,EAAM;AAAES,UAAAA,IAAI,EAAE,GAAR;AAAaC,UAAAA,CAAC,EAAE,GAAhB;AAAqBC,UAAAA,CAAC,EAAE;AAAxB,SAAN,CAAT,CAA9C,KACK,IAAI,KAAKH,KAAL,CAAWoC,SAAX,GAAuBE,IAAI,CAACC,GAAL,EAAvB,GAAoC,IAAxC,EAA8CjE,SAAS,CAACkB,GAAD,EAAM;AAAES,UAAAA,IAAI,EAAE,GAAR;AAAaC,UAAAA,CAAC,EAAE,GAAhB;AAAqBC,UAAAA,CAAC,EAAE;AAAxB,SAAN,CAAT,CAA9C,KACA,IAAI,KAAKH,KAAL,CAAWoC,SAAX,GAAuBE,IAAI,CAACC,GAAL,EAAvB,GAAoC,IAAxC,EAA8CjE,SAAS,CAACkB,GAAD,EAAM;AAAES,UAAAA,IAAI,EAAE,GAAR;AAAaC,UAAAA,CAAC,EAAE,GAAhB;AAAqBC,UAAAA,CAAC,EAAE;AAAxB,SAAN,CAAT;AAEpD,OARD,MASK;AACHX,QAAAA,GAAG,CAACsI,SAAJ,CAAc,CAAd,EAAgB,CAAhB,EAAmB,KAAKpF,SAAL,CAAeqB,OAAf,CAAuBK,KAA1C,EAAiD,KAAK1B,SAAL,CAAeqB,OAAf,CAAuBM,MAAxE;AACA,YAAI0C,cAAc,GAAG,CAACzE,IAAI,CAACC,GAAL,KAAa,KAAKvC,KAAL,CAAWqC,OAAzB,IAAkC,IAAvD;AACA,cAAM0F,KAAK,GAAG,KAAKvF,SAAL,CAAeuB,OAAf,CAAuBiE,aAAvB,EAAd;AACA,YAAI1I,GAAG,GAAG2I,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAV;;AACA5I,QAAAA,GAAG,CAAC6I,MAAJ,GAAa,YAAU;AACrB,cAAI,KAAKnI,KAAL,CAAWe,WAAX,KAA2B,KAA/B,EAAqC;AACnC,iBAAKjB,QAAL,CAAc;AAACsB,cAAAA,WAAW,EAAC,CAAC,GAAG,KAAKpB,KAAL,CAAWoB,WAAf,EAA4B9B,GAA5B;AAAb,aAAd;AACA,iBAAKQ,QAAL,CAAc;AAACuB,cAAAA,gBAAgB,EAAC,CAAC,GAAG,KAAKrB,KAAL,CAAWqB,gBAAf,EAAiC0F,cAAjC;AAAlB,aAAd;AACD,WAHD,MAKK,IAAI,KAAK/G,KAAL,CAAWe,WAAX,KAA2B,IAA3B,IAAmC,KAAKf,KAAL,CAAWgB,WAAX,KAA2B,KAAlE,EAAwE;AAC3E,iBAAKlB,QAAL,CAAc;AAAC0B,cAAAA,aAAa,EAAC,CAAC,GAAG,KAAKxB,KAAL,CAAWwB,aAAf,EAA8BlC,GAA9B;AAAf,aAAd;AACA,iBAAKQ,QAAL,CAAc;AAAC2B,cAAAA,kBAAkB,EAAC,CAAC,GAAG,KAAKzB,KAAL,CAAWyB,kBAAf,EAAmCsF,cAAnC;AAApB,aAAd;AACD,WAHI,MAKA,IAAI,KAAK/G,KAAL,CAAWgB,WAAX,KAA2B,IAA3B,IAAmC,KAAKhB,KAAL,CAAWiB,SAAX,KAAyB,KAAhE,EAAsE;AACzE,iBAAKnB,QAAL,CAAc;AAAC8B,cAAAA,WAAW,EAAC,CAAC,GAAG,KAAK5B,KAAL,CAAW4B,WAAf,EAA4BtC,GAA5B;AAAb,aAAd;AACA,iBAAKQ,QAAL,CAAc;AAAC+B,cAAAA,gBAAgB,EAAC,CAAC,GAAG,KAAK7B,KAAL,CAAW6B,gBAAf,EAAiCkF,cAAjC;AAAlB,aAAd;AACD;;AAED,cAAIlC,KAAK,KAAK,CAAd,EAAiB,KAAKxF,oBAAL,CAA0BC,GAA1B,EAA+BC,GAA/B,EAAoCC,GAApC;AAClB,SAjBY,CAiBXoD,IAjBW,CAiBN,IAjBM,CAAb;;AAkBAtD,QAAAA,GAAG,CAAC8I,GAAJ,GAAUL,KAAV;AACD;AACF;AACF;;AAeD,QAAM5E,SAAN,GAAkB;AAChBO,IAAAA,OAAO,CAAC,gCAAD,CAAP;;AACA,UAAMnE,GAAG,GAAG,MAAMrB,QAAQ,CAACyF,IAAT,EAAlB;AACAhE,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAHgB,CAKhB;;AACA,SAAK,IAAImF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAC,KAAK/E,KAAL,CAAWoB,WAAX,CAAuBvB,MAAzC,EAAiDkF,CAAC,EAAlD,EAAqD;AACnD,YAAMtF,IAAI,GAAG,MAAMF,GAAG,CAACG,aAAJ,CAAkB,KAAKM,KAAL,CAAWoB,WAAX,CAAuB2D,CAAvB,CAAlB,CAAnB;;AACA,UAAItF,IAAI,CAACI,MAAL,GAAc,CAAlB,EAAoB;AAClBJ,QAAAA,IAAI,CAAC6H,OAAL,CAAcC,UAAD,IAAgB;AAC3B,gBAAMC,SAAS,GAAGD,UAAU,CAACC,SAA7B;AACA,cAAIC,SAAS,GAAG,KAAKT,IAAL,CAAUQ,SAAS,CAAC,CAAD,CAAnB,EAAwBA,SAAS,CAAC,CAAD,CAAjC,CAAhB;AACA,cAAIE,UAAU,GAAG,KAAKV,IAAL,CAAUQ,SAAS,CAAC,CAAD,CAAnB,EAAwBA,SAAS,CAAC,CAAD,CAAjC,CAAjB;AACAE,UAAAA,UAAU,GAAGA,UAAU,GAACD,SAAxB;AACA,eAAK3H,QAAL,CAAc;AAACoB,YAAAA,UAAU,EAAC,CAAC,GAAG,KAAKlB,KAAL,CAAWkB,UAAf,EAA2BwG,UAA3B;AAAZ,WAAd;AACA,eAAK5H,QAAL,CAAc;AAACqB,YAAAA,eAAe,EAAC,CAAC,GAAG,KAAKnB,KAAL,CAAWmB,eAAf,EAAgC,KAAKnB,KAAL,CAAWqB,gBAAX,CAA4B0D,CAA5B,CAAhC;AAAjB,WAAd;;AACA,cAAI2C,UAAU,IAAI,GAAlB,EAAsB;AAAC,iBAAK5H,QAAL,CAAc;AAACU,cAAAA,YAAY,EAAC;AAAd,aAAd;AAAgC;;AACvD,cAAIkH,UAAU,GAAG,GAAb,IAAoB,KAAK1H,KAAL,CAAWQ,YAAX,KAA4B,CAApD,EAAsD;AACpD,iBAAKV,QAAL,CAAc;AAACU,cAAAA,YAAY,EAAC;AAAd,aAAd;AACA,iBAAKV,QAAL,CAAc;AAACO,cAAAA,SAAS,EAAC,CAAC,GAAG,KAAKL,KAAL,CAAWK,SAAf,EAA0B,KAAKL,KAAL,CAAWqB,gBAAX,CAA4B0D,CAA5B,CAA1B;AAAX,aAAd;AACD;;AACDpF,UAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4B,KAAKI,KAAL,CAAWK,SAAvC;AACD,SAbD;AAcD;AACF,KAxBe,CA0BhB;;;AACA,SAAK,IAAI0E,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAC,KAAK/E,KAAL,CAAWwB,aAAX,CAAyB3B,MAA3C,EAAmDkF,CAAC,EAApD,EAAuD;AACrD,YAAMtF,IAAI,GAAG,MAAMF,GAAG,CAACG,aAAJ,CAAkB,KAAKM,KAAL,CAAWwB,aAAX,CAAyBuD,CAAzB,CAAlB,CAAnB;;AACA,UAAItF,IAAI,CAACI,MAAL,GAAc,CAAlB,EAAoB;AAClBJ,QAAAA,IAAI,CAAC6H,OAAL,CAAcC,UAAD,IAAgB;AAC3B,gBAAMC,SAAS,GAAGD,UAAU,CAACC,SAA7B;AACA,cAAIC,SAAS,GAAG,KAAKT,IAAL,CAAUQ,SAAS,CAAC,CAAD,CAAnB,EAAwBA,SAAS,CAAC,CAAD,CAAjC,CAAhB;AACA,cAAIG,WAAW,GAAG,CAACH,SAAS,CAAC,CAAD,CAAT,CAAa,CAAb,IAAkBA,SAAS,CAAC,EAAD,CAAT,CAAc,CAAd,CAAnB,IAAuCC,SAAzD;AACA,eAAK3H,QAAL,CAAc;AAACwB,YAAAA,YAAY,EAAC,CAAC,GAAG,KAAKtB,KAAL,CAAWsB,YAAf,EAA6BqG,WAA7B;AAAd,WAAd;AACA,eAAK7H,QAAL,CAAc;AAACyB,YAAAA,iBAAiB,EAAC,CAAC,GAAG,KAAKvB,KAAL,CAAWuB,iBAAf,EAAkC,KAAKvB,KAAL,CAAWyB,kBAAX,CAA8BsD,CAA9B,CAAlC;AAAnB,WAAd;;AACA,cAAI,KAAK/E,KAAL,CAAWS,aAAX,KAA6B,CAAjC,EAAmC;AACjC,gBAAIkH,WAAW,IAAI,GAAnB,EAAwB,KAAK7H,QAAL,CAAc;AAACW,cAAAA,aAAa,EAAC;AAAf,aAAd;AACxB,gBAAIkH,WAAW,IAAI,CAAC,GAApB,EAAyB,KAAK7H,QAAL,CAAc;AAACW,cAAAA,aAAa,EAAC,CAAC;AAAhB,aAAd;AAC1B;;AACD,cAAI,KAAKT,KAAL,CAAWS,aAAX,KAA6B,CAA7B,IAAkCkH,WAAW,IAAI,CAAC,GAAtD,EAA0D;AACxD,iBAAK7H,QAAL,CAAc;AAACW,cAAAA,aAAa,EAAC,CAAC;AAAhB,aAAd;AACD;;AACD,cAAI,KAAKT,KAAL,CAAWS,aAAX,KAA6B,CAAC,CAA9B,IAAmCkH,WAAW,IAAI,GAAtD,EAA0D;AACxD,iBAAK7H,QAAL,CAAc;AAACW,cAAAA,aAAa,EAAC;AAAf,aAAd;AACA,iBAAKX,QAAL,CAAc;AAACQ,cAAAA,YAAY,EAAC,CAAC,GAAG,KAAKN,KAAL,CAAWM,YAAf,EAA6B,KAAKN,KAAL,CAAWyB,kBAAX,CAA8BsD,CAA9B,CAA7B;AAAd,aAAd;AACD;;AACDpF,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6B,KAAKI,KAAL,CAAWM,YAAxC;AACD,SAlBD;AAmBD;AACF,KAlDe,CAoDhB;;;AACA,SAAK,IAAIyE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAC,KAAK/E,KAAL,CAAW4B,WAAX,CAAuB/B,MAAzC,EAAiDkF,CAAC,EAAlD,EAAqD;AACnD,YAAMtF,IAAI,GAAG,MAAMF,GAAG,CAACG,aAAJ,CAAkB,KAAKM,KAAL,CAAW4B,WAAX,CAAuBmD,CAAvB,CAAlB,CAAnB;;AACA,UAAItF,IAAI,CAACI,MAAL,GAAc,CAAlB,EAAoB;AAClBJ,QAAAA,IAAI,CAAC6H,OAAL,CAAcC,UAAD,IAAgB;AAC3B,gBAAMC,SAAS,GAAGD,UAAU,CAACC,SAA7B;AACA,cAAIC,SAAS,GAAG,KAAKT,IAAL,CAAUQ,SAAS,CAAC,CAAD,CAAnB,EAAwBA,SAAS,CAAC,CAAD,CAAjC,CAAhB;AACA,cAAII,SAAS,GAAI,CAAEJ,SAAS,CAAC,CAAD,CAAT,CAAa,CAAb,IAAkBA,SAAS,CAAC,CAAD,CAAT,CAAa,CAAb,CAAnB,IACfA,SAAS,CAAC,EAAD,CAAT,CAAc,CAAd,IAAmBA,SAAS,CAAC,CAAD,CAAT,CAAa,CAAb,CADJ,KAEfA,SAAS,CAAC,EAAD,CAAT,CAAc,CAAd,IAAmBA,SAAS,CAAC,EAAD,CAAT,CAAc,CAAd,CAFJ,KAGfA,SAAS,CAAC,EAAD,CAAT,CAAc,CAAd,IAAmBA,SAAS,CAAC,EAAD,CAAT,CAAc,CAAd,CAHJ,CAAD,KAId,IAAEC,SAJY,CAAjB;AAKA,eAAK3H,QAAL,CAAc;AAAC4B,YAAAA,UAAU,EAAC,CAAC,GAAG,KAAK1B,KAAL,CAAW0B,UAAf,EAA2BkG,SAA3B;AAAZ,WAAd;AACA,eAAK9H,QAAL,CAAc;AAAC6B,YAAAA,eAAe,EAAC,CAAC,GAAG,KAAK3B,KAAL,CAAW2B,eAAf,EAAgC,KAAK3B,KAAL,CAAW6B,gBAAX,CAA4BkD,CAA5B,CAAhC;AAAjB,WAAd;;AACA,cAAI6C,SAAS,IAAI,GAAjB,EAAqB;AAAC,iBAAK9H,QAAL,CAAc;AAAC+H,cAAAA,WAAW,EAAC;AAAb,aAAd;AAA+B;;AACrD,cAAID,SAAS,GAAG,CAAC,GAAb,IAAoB,KAAK5H,KAAL,CAAW6H,WAAX,KAA2B,CAAnD,EAAqD;AACnD,iBAAK/H,QAAL,CAAc;AAAC+H,cAAAA,WAAW,EAAC;AAAb,aAAd;AACA,iBAAK/H,QAAL,CAAc;AAACS,cAAAA,UAAU,EAAC,CAAC,GAAG,KAAKP,KAAL,CAAWO,UAAf,EAA2B,KAAKP,KAAL,CAAW6B,gBAAX,CAA4BkD,CAA5B,CAA3B;AAAZ,aAAd;AACD;;AACDpF,UAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2B,KAAKI,KAAL,CAAWO,UAAtC;AACD,SAhBD;AAiBD;AACF;;AACD,SAAKT,QAAL,CAAc;AAACuI,MAAAA,MAAM,EAAC;AAAR,KAAd;AACD;;AAED,QAAMrF,WAAN,GAAoB;AAClBmE,IAAAA,aAAa,CAAC,KAAKnH,KAAL,CAAWI,EAAZ,CAAb;AACA,UAAM,KAAK+C,SAAL,EAAN;AACA,SAAKrD,QAAL,CAAc;AAACc,MAAAA,SAAS,EAAC;AAAX,KAAd;AACA,SAAK4C,aAAL;AACD;;AAED8E,EAAAA,MAAM,GAAE;AACN,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACE;AAAQ,QAAA,SAAS,EAAC,YAAlB;AAAA,gCACA,QAAC,MAAD;AACE,UAAA,GAAG,EAAE,KAAK9F,SADZ;AAEE,UAAA,KAAK,EAAE;AACL+F,YAAAA,QAAQ,EAAE,UADL;AAELC,YAAAA,UAAU,EAAE,MAFP;AAGLC,YAAAA,WAAW,EAAE,MAHR;AAILC,YAAAA,IAAI,EAAE,CAJD;AAKLC,YAAAA,KAAK,EAAE,CALF;AAMLC,YAAAA,SAAS,EAAE,QANN;AAOLC,YAAAA,MAAM,EAAE,CAPH;AAQLzE,YAAAA,KAAK,EAAE,MARF;AASLC,YAAAA,MAAM,EAAE;AATH;AAFT;AAAA;AAAA;AAAA;AAAA,gBADA,eAeA;AACE,UAAA,GAAG,EAAE,KAAK3B,SADZ;AAEE,UAAA,KAAK,EAAE;AACL6F,YAAAA,QAAQ,EAAE,UADL;AAELC,YAAAA,UAAU,EAAE,MAFP;AAGLC,YAAAA,WAAW,EAAE,MAHR;AAILC,YAAAA,IAAI,EAAE,CAJD;AAKLC,YAAAA,KAAK,EAAE,CALF;AAMLC,YAAAA,SAAS,EAAE,QANN;AAOLC,YAAAA,MAAM,EAAE,CAPH;AAQLzE,YAAAA,KAAK,EAAE,MARF;AASLC,YAAAA,MAAM,EAAE;AATH;AAFT;AAAA;AAAA;AAAA;AAAA,gBAfA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EA+BK,KAAKrE,KAAL,CAAWa,WAAX,gBACC;AAAA,gCACE;AAAQ,UAAA,OAAO,EAAE,KAAKwC,cAAtB;AAAsC,UAAA,EAAE,EAAC,SAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAQ,UAAA,OAAO,EAAE,KAAKC,cAAtB;AAAsC,UAAA,EAAE,EAAC,SAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADD,gBAMC;AAAA;AAAA;AAAA;AAAA,cArCN,EAuCK,KAAKtD,KAAL,CAAWW,qBAAX,GACC,KAAKX,KAAL,CAAWe,WAAX,GACE,KAAKf,KAAL,CAAWgB,WAAX,gBACE;AAAQ,QAAA,OAAO,EAAE,KAAK6B,wBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,gBAGE;AAAQ,QAAA,OAAO,EAAE,KAAKE,aAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ,gBAOE;AAAQ,QAAA,OAAO,EAAE,KAAKD,YAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cARH,gBAWD;AAAQ,QAAA,OAAO,EAAE,KAAKH,WAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAlDJ,EAqDK,KAAK3C,KAAL,CAAWY,SAAX,GACC,KAAKZ,KAAL,CAAWe,WAAX,GACE,KAAKf,KAAL,CAAWgB,WAAX,gBACE;AAAQ,QAAA,OAAO,EAAE,KAAKgC,WAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,gBAGE;AAAQ,QAAA,OAAO,EAAE,KAAKD,aAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ,gBAOE;AAAQ,QAAA,OAAO,EAAE,KAAKD,YAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cARH,gBAWD;AAAQ,QAAA,OAAO,EAAE,KAAKG,YAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAhEJ,eAmEI;AAAQ,QAAA,OAAO,EAAE,KAAKG,aAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAnEJ,eAoEI;AAAQ,QAAA,OAAO,EAAE,KAAKG,aAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cApEJ,eAqEM;AAAA,4CACwB,KAAKvD,KAAL,CAAWK,SAAX,CAAqBR,MAD7C,oCAEgB,KAAKG,KAAL,CAAWM,YAAX,CAAwBT,MAFxC,uCAGmB,KAAKG,KAAL,CAAWO,UAAX,CAAsBV,MAHzC;AAAA;AAAA;AAAA;AAAA;AAAA,cArEN,eA0EI;AAAA,mBACG,KAAKG,KAAL,CAAWc,WAAX,gBACC;AAAA,kCACE,QAAC,IAAD;AAAM,YAAA,IAAI,EAAE,KAAKd,KAAL,CAAWgC;AAAvB;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,IAAD;AAAM,YAAA,IAAI,EAAE,KAAKhC,KAAL,CAAWiC;AAAvB;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE,QAAC,IAAD;AAAM,YAAA,IAAI,EAAE,KAAKjC,KAAL,CAAWkC;AAAvB;AAAA;AAAA;AAAA;AAAA,kBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADD,gBAOC;AAAA;AAAA;AAAA;AAAA,gBARJ,eAUE;AAAA,iCACE;AAAO,YAAA,IAAI,EAAC,MAAZ;AAAmB,YAAA,EAAE,EAAC;AAAtB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAVF,eAaE;AAAA,iCACE;AAAO,YAAA,IAAI,EAAC,MAAZ;AAAmB,YAAA,EAAE,EAAC;AAAtB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAbF;AAAA;AAAA;AAAA;AAAA;AAAA,cA1EJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AA8FD;;AAnsB+B;;AAssBlC,eAAetD,GAAf","sourcesContent":["import React from \"react\";\nimport * as handpose from \"@tensorflow-models/handpose\";\nimport * as posenet from \"@tensorflow-models/posenet\";\n//import * as tf from '@tensorflow/tfjs-core';\nimport Webcam from \"react-webcam\";\nimport \"./App.css\";\nimport { drawHand, writeText, drawKeypoints, drawSkeleton} from \"./utilities\";\nimport { sqrt, pow } from \"mathjs\"\nimport {Line} from 'react-chartjs-2';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      ID : 0,\n      tap_count : [],\n      rotate_count : [],\n      fist_count : [],\n      index_passed : 0,\n      rotate_passed : 0,\n      last_pressed:0,\n      real_time_inferencing:false,\n      recording:false,\n      button_mode:false,\n      chart_ready:false,\n      finger_done : false,\n      rotate_done : false,\n      fist_done : false,\n      dist_array : [],\n      dist_time_array : [],\n      dist_record : [],\n      dist_time_record : [],\n      rotate_array : [],\n      rotate_time_array : [],\n      rotate_record : [],\n      rotate_time_record : [],\n      fist_array : [],\n      fist_time_array : [],\n      fist_record : [],\n      fist_time_record : [],\n      gait_record : [],\n      gait_time_record : [],\n      chart_data1 : null,\n      chart_data2 : null,\n      chart_data3 : null,\n      wait : false,\n      wait_till : 0,\n      startAt: Date.now(),\n      dead_frame: 0,\n    };\n    this.webcamRef = React.createRef(null);\n    this.canvasRef = React.createRef(null);\n    this.runHandpose = this.runHandpose.bind(this);\n    this.stop_real_time_inference = this.stop_real_time_inference.bind(this);\n    this.stop_tapping = this.stop_tapping.bind(this);\n    this.stop_rotating = this.stop_rotating.bind(this);\n    this.stop_record = this.stop_record.bind(this);\n    this.record_video = this.record_video.bind(this);\n    this.concat_frame = this.concat_frame.bind(this);\n    this.inference = this.inference.bind(this);\n    this.reset_counter = this.reset_counter.bind(this);\n    this.increment_tap1 = this.increment_tap1.bind(this);\n    this.increment_tap2 = this.increment_tap2.bind(this);\n    this.switch_button = this.switch_button.bind(this);\n    this.compose_chart = this.compose_chart.bind(this);\n  }\n\n  async runPosenet(){\n    require('@tensorflow/tfjs-backend-webgl');\n    //const uploadJSONInput = document.getElementById('upload-json');\n    //const uploadWeightsInput = document.getElementById('upload-weights');\n    //const model = await tf.loadLayersModel(tf.io.browserFiles([uploadJSONInput.files[0], uploadWeightsInput.files[0]]));\n    const net = await posenet.load();\n    console.log(\"PoseNet model loaded.\");\n    this.setState({startAt:Date.now()});\n    const Interval_ID = setInterval(() => {\n      this.read_time_posenet(net);\n    }, 50);\n    this.setState({ID:Interval_ID});\n    this.setState({real_time_inferencing:true});\n  }\n\n  async read_time_posenet(net) {\n    if (this.state.wait){\n      this.setState({wait_till:Date.now()+3000});\n      //await this.sleep(3000);\n      this.setState({wait:false});\n    }\n    if (\n      typeof this.webcamRef.current !== \"undefined\" &&\n      this.webcamRef.current !== null &&\n      this.webcamRef.current.video.readyState === 4\n    ) {\n      const video = this.webcamRef.current.video;\n      const videoWidth = this.webcamRef.current.video.videoWidth;\n      const videoHeight = this.webcamRef.current.video.videoHeight;\n      this.webcamRef.current.video.width = videoWidth;\n      this.webcamRef.current.video.height = videoHeight;\n      this.canvasRef.current.width = videoWidth;\n      this.canvasRef.current.height = videoHeight;\n      const pose = await net.estimateSinglePose(video);\n      const ctx = this.canvasRef.current.getContext(\"2d\");\n      drawKeypoints(pose[\"keypoints\"], 0.6, ctx);\n      drawSkeleton(pose[\"keypoints\"], 0.7, ctx);\n      }\n    }\n  \n\n  compose_chart(){\n    let time_array_1 = [];\n    let count_array_1 = [];\n    let start = this.state.dist_time_array[0];\n    let end = this.state.dist_time_array[this.state.dist_time_array.length - 1];\n    while (start + 1.0 < end){\n      time_array_1 = [...time_array_1, start];\n      let count = 0, temp_max = 0;\n      for (let i = 0; i < this.state.dist_array.length; i++){        \n        if (this.state.dist_time_array[i] >= start && this.state.dist_time_array[i] < (start + 1.0)){\n          if (temp_max < this.state.dist_array[i]) temp_max = this.state.dist_array[i];\n          if (this.state.tap_count.includes(this.state.dist_time_array[i])){\n            count += temp_max;\n            temp_max = 0;\n          }\n        }\n      }\n      /*\n      \n      let time_value = 0;\n      for (let tc in this.state.tap_count){\n        time_value = this.state.tap_count[tc];\n        if (time_value >= start && time_value < (start + 1.0)){\n          count += 1;\n        }\n      }\n      */\n      count_array_1 = [...count_array_1, count];\n      start += 0.1;\n    }\n    const data1 = {\n      labels: time_array_1,\n      datasets: [        \n        {\n          label: 'Tapping',\n          fill: false,\n          lineTension: 0.3,\n          backgroundColor: 'rgba(75,192,192,0.4)',\n          borderColor: 'rgba(75,192,192,1)',\n          borderCapStyle: 'butt',\n          borderDash: [],\n          borderDashOffset: 0.0,\n          borderJoinStyle: 'miter',\n          pointBorderColor: 'rgba(75,192,192,1)',\n          pointBackgroundColor: '#fff',\n          pointBorderWidth: 1,\n          pointHoverRadius: 5,\n          pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n          pointHoverBorderColor: 'rgba(220,220,220,1)',\n          pointHoverBorderWidth: 2,\n          pointRadius: 1,\n          pointHitRadius: 10,\n          data: count_array_1\n        }\n      ]\n    };\n    let time_array_2 = [];\n    let count_array_2 = [];\n    start = this.state.rotate_time_array[0];\n    end = this.state.rotate_time_array[this.state.rotate_time_array.length - 1];\n    while (start + 5.0 < end){\n      time_array_2 = [...time_array_2, start + 2.5];\n      let count = 0.0;\n      let time_value = 0;\n      for (let tc in this.state.rotate_count){\n        time_value = this.state.rotate_count[tc];\n        if (time_value >= start && time_value < (start + 5.0)){\n          count += 1.0;\n        }\n      }\n      count_array_2 = [...count_array_2, count];\n      start += 0.1;\n    }\n    const data2 = {\n      labels: time_array_2,\n      datasets: [        \n        {\n          label: 'Rotation',\n          fill: false,\n          lineTension: 0.1,\n          backgroundColor: 'rgba(192,75,192,0.4)',\n          borderColor: 'rgba(192,75,192,1)',\n          borderCapStyle: 'butt',\n          borderDash: [],\n          borderDashOffset: 0.0,\n          borderJoinStyle: 'miter',\n          pointBorderColor: 'rgba(192,75,192,1)',\n          pointBackgroundColor: '#fff',\n          pointBorderWidth: 1,\n          pointHoverRadius: 5,\n          pointHoverBackgroundColor: 'rgba(192,75,192,1)',\n          pointHoverBorderColor: 'rgba(220,220,220,1)',\n          pointHoverBorderWidth: 2,\n          pointRadius: 1,\n          pointHitRadius: 10,\n          data: count_array_2 \n        },\n      ]\n    };\n    let time_array_3 = [];\n    let count_array_3 = [];\n    start = this.state.fist_time_array[0];\n    end = this.state.fist_time_array[this.state.fist_time_array.length - 1];\n    while (start + 5.0 < end){\n      time_array_3 = [...time_array_3, start + 2.5];\n      let count = 0.0;\n      let time_value = 0;\n      for (let tc in this.state.fist_count){\n        time_value = this.state.fist_count[tc];\n        if (time_value >= start && time_value < (start + 5.0)){\n          count += 1.0;\n        }\n      }\n      count_array_3 = [...count_array_3, count];\n      start += 0.1;\n    }\n    const data3 = {\n      labels: time_array_3,\n      datasets: [        \n        {\n          label: 'Fist',\n          fill: false,\n          lineTension: 0.1,\n          backgroundColor: 'rgba(192,192,75,0.4)',\n          borderColor: 'rgba(192,192,75,1)',\n          borderCapStyle: 'butt',\n          borderDash: [],\n          borderDashOffset: 0.0,\n          borderJoinStyle: 'miter',\n          pointBorderColor: 'rgba(192,192,75,1)',\n          pointBackgroundColor: '#fff',\n          pointBorderWidth: 1,\n          pointHoverRadius: 5,\n          pointHoverBackgroundColor: 'rgba(192,192,75,1)',\n          pointHoverBorderColor: 'rgba(220,220,220,1)',\n          pointHoverBorderWidth: 2,\n          pointRadius: 1,\n          pointHitRadius: 10,\n          data: count_array_3\n        }\n      ]\n    };\n    this.setState({chart_data1:data1});\n    this.setState({chart_data2:data2});\n    this.setState({chart_data3:data3});\n    this.setState({chart_ready:true});\n  }\n\n  switch_button(){\n    if (this.state.button_mode === true){\n      this.setState({button_mode:false});\n      this.compose_chart();\n    }\n    else{\n      this.setState({button_mode:true})\n    }\n  }\n\n  increment_tap1(){\n    if (this.state.last_pressed !== 1){\n      let current_moment = (Date.now() - this.state.startAt)/1000\n      this.setState({last_pressed:1})\n      this.setState({dist_array:[...this.state.dist_array, 1.0]});\n      this.setState({dist_time_array:[...this.state.dist_time_array, current_moment]});\n      this.setState({tap_count:[...this.state.tap_count, current_moment]});\n    }\n  }\n\n  increment_tap2(){\n    if (this.state.last_pressed !== 2){\n      let current_moment = (Date.now() - this.state.startAt)/1000\n      this.setState({last_pressed:2})\n      this.setState({dist_array:[...this.state.dist_array, 1.0]});\n      this.setState({dist_time_array:[...this.state.dist_time_array, current_moment]});\n      this.setState({tap_count:[...this.state.tap_count, current_moment]});\n    }\n  }\n\n  norm(lm1, lm2){\n    return sqrt(pow(lm1[0]-lm2[0], 2)+pow(lm1[1]-lm2[1], 2))\n  }\n\n  reset_counter(){\n    clearInterval(this.state.ID);\n    this.setState({\n      ID : 0,\n      tap_count : [],\n      rotate_count : [],\n      fist_count : [],\n      index_passed : 0,\n      rotate_passed : 0,\n      last_pressed:0,\n      real_time_inferencing:false,\n      recording:false,\n      button_mode:false,\n      chart_ready:false,\n      finger_done : false,\n      rotate_done : false,\n      fist_done : false,\n      dist_array : [],\n      dist_time_array : [],\n      dist_record : [],\n      dist_time_record : [],\n      rotate_array : [],\n      rotate_time_array : [],\n      rotate_record : [],\n      rotate_time_record : [],\n      fist_array : [],\n      fist_time_array : [],\n      fist_record : [],\n      fist_time_record : [],\n      chart_data1 : null,\n      chart_data2 : null,\n      chart_data3 : null,\n      wait : false,\n      startAt: Date.now(),\n      dead_frame: 0,\n    });\n  }\n\n  sleep = (milliseconds) => {\n    return new Promise(resolve => setTimeout(resolve, milliseconds))\n  }\n\n  async runHandpose() {\n    require('@tensorflow/tfjs-backend-webgl');\n    //const uploadJSONInput = document.getElementById('upload-json');\n    //const uploadWeightsInput = document.getElementById('upload-weights');\n    //const model = await tf.loadLayersModel(tf.io.browserFiles([uploadJSONInput.files[0], uploadWeightsInput.files[0]]));\n    const net = await handpose.load();\n    console.log(\"Handpose model loaded.\");\n    this.setState({startAt:Date.now()});\n    const Interval_ID = setInterval(() => {\n      this.read_time_inference(net);\n    }, 50);\n    this.setState({ID:Interval_ID});\n    this.setState({real_time_inferencing:true});\n  };\n\n  async read_time_inference(net) {\n    if (this.state.wait){\n      this.setState({wait_till:Date.now()+3000});\n      //await this.sleep(3000);\n      this.setState({wait:false});\n    }\n    if (\n      typeof this.webcamRef.current !== \"undefined\" &&\n      this.webcamRef.current !== null &&\n      this.webcamRef.current.video.readyState === 4\n    ) {\n      const video = this.webcamRef.current.video;\n      const videoWidth = this.webcamRef.current.video.videoWidth;\n      const videoHeight = this.webcamRef.current.video.videoHeight;\n      this.webcamRef.current.video.width = videoWidth;\n      this.webcamRef.current.video.height = videoHeight;\n      this.canvasRef.current.width = videoWidth;\n      this.canvasRef.current.height = videoHeight;\n      const hand = await net.estimateHands(video);\n      const ctx = this.canvasRef.current.getContext(\"2d\");\n      this.setState({context:ctx});\n\n      //check if hand exist, if yes, drawhand\n      if (hand.length > 0) drawHand(hand, ctx);\n      \n      //check if waiting\n      if (Date.now() < this.state.wait_till){\n        console.log(\"Waiting till \", this.state.wait_till);\n        //count down 3, 2, 1\n        if (this.state.wait_till - Date.now() < 1000) writeText(ctx, { text: '1', x: 180, y: 70 });\n        else if (this.state.wait_till - Date.now() < 2000) writeText(ctx, { text: '2', x: 180, y: 70 });\n        else if (this.state.wait_till - Date.now() < 3000) writeText(ctx, { text: '3', x: 180, y: 70 });\n      }\n      else {\n        if (hand.length > 0){\n          hand.forEach((prediction) => {\n            this.setState({dead_frame: 0});\n            const landmarks = prediction.landmarks\n\n            let pawn_dist = this.norm(landmarks[0], landmarks[2]);\n            let current_moment = (Date.now() - this.state.startAt)/1000\n\n            if (this.state.finger_done === false){\n              let index_dist = this.norm(landmarks[4], landmarks[8]);\n              index_dist = index_dist/pawn_dist\n              this.setState({dist_array:[...this.state.dist_array, index_dist]});\n              this.setState({dist_time_array:[...this.state.dist_time_array, current_moment]});\n              if (index_dist >= 0.5){this.setState({index_passed:1})}\n              if (index_dist < 0.5 && this.state.index_passed === 1){\n                this.setState({index_passed:0});\n                this.setState({tap_count:[...this.state.tap_count, current_moment]});\n              }\n            }\n            \n            if (this.state.finger_done === true && this.state.rotate_done === false){\n              let rotate_dist = (landmarks[2][0] - landmarks[17][0]) / pawn_dist;\n              this.setState({rotate_array:[...this.state.rotate_array, rotate_dist]});\n              this.setState({rotate_time_array:[...this.state.rotate_time_array, current_moment]});\n              if (this.state.rotate_passed === 0){\n                if (rotate_dist >= 0.5) this.setState({rotate_passed:1});\n                if (rotate_dist <= -0.5) this.setState({rotate_passed:-1});\n              }\n              if (this.state.rotate_passed === 1 && rotate_dist <= -0.5){\n                this.setState({rotate_passed:-1});\n              }\n              if (this.state.rotate_passed === -1 && rotate_dist >= 0.5){\n                this.setState({rotate_passed:1});\n                this.setState({rotate_count:[...this.state.rotate_count, current_moment]});\n              }\n            }\n\n            if (this.state.rotate_done === true && this.state.fist_done === false){\n              let fist_dist =  ((landmarks[8][1] - landmarks[5][1])+\n                                (landmarks[12][1] - landmarks[9][1])+\n                                (landmarks[16][1] - landmarks[13][1])+\n                              (landmarks[20][1] - landmarks[17][1]))/\n                                (4*pawn_dist)\n              this.setState({fist_array:[...this.state.fist_array, fist_dist]});\n              this.setState({fist_time_array:[...this.state.fist_time_array, current_moment]});\n              if (fist_dist >= 0.0){this.setState({fist_passed:1})}\n              if (fist_dist < -0.4 && this.state.fist_passed === 1){\n                this.setState({fist_passed:0});\n                this.setState({fist_count:[...this.state.fist_count, current_moment]});\n              }\n            }                  \n          });\n        }\n        else {\n          if (this.state.dead_frame > 9) writeText(ctx, { text: 'Hand Off Screen', x: 180, y: 70 });\n          this.setState({dead_frame: this.state.dead_frame + 1});\n        }\n      }\n    }\n  };\n\n  async stop_tapping() {\n    this.setState({finger_done:true});\n    this.setState({wait:true});\n  }\n\n  async stop_rotating() {\n    this.setState({rotate_done:true});\n    this.setState({wait:true});\n  }\n\n  stop_real_time_inference() {\n    clearInterval(this.state.ID);\n    this.setState({real_time_inferencing:false,\n                   finger_done:false,\n                   rotate_done:false,\n                   fist_done:false});\n    this.compose_chart();\n  }\n\n  async record_video(){\n    this.setState({startAt:Date.now()});\n    let count = 0;\n    require('@tensorflow/tfjs-backend-webgl');\n    const net = await handpose.load();\n    const ctx = this.canvasRef.current.getContext(\"2d\");\n    console.log(\"Handpose model loaded.\");\n    const Interval_ID = setInterval(() => {\n      this.concat_frame(count, net, ctx);\n      count = (count + 1)%20;\n    }, 50);\n    this.setState({ID:Interval_ID});\n    this.setState({recording:true});\n  }\n\n  async concat_frame(count, net, ctx) {\n    if (this.state.wait){\n      this.setState({wait_till:Date.now()+3000});\n      //await this.sleep(3000);\n      this.setState({wait:false});\n    }\n    if (\n      typeof this.webcamRef.current !== \"undefined\" &&\n      this.webcamRef.current !== null &&\n      this.webcamRef.current.video.readyState === 4\n    ) {\n      if (Date.now() < this.state.wait_till){\n        console.log(\"Waiting till \", this.state.wait_till);\n        //count down 3, 2, 1\n        ctx.clearRect(0,0, this.canvasRef.current.width, this.canvasRef.current.height);\n        if (this.state.wait_till - Date.now() < 1000) writeText(ctx, { text: '1', x: 180, y: 70 });\n        else if (this.state.wait_till - Date.now() < 2000) writeText(ctx, { text: '2', x: 180, y: 70 });\n        else if (this.state.wait_till - Date.now() < 3000) writeText(ctx, { text: '3', x: 180, y: 70 });\n        \n      }\n      else {\n        ctx.clearRect(0,0, this.canvasRef.current.width, this.canvasRef.current.height);\n        let current_moment = (Date.now() - this.state.startAt)/1000;\n        const image = this.webcamRef.current.getScreenshot();      \n        var img = document.createElement(\"img\");\n        img.onload = function(){\n          if (this.state.finger_done === false){\n            this.setState({dist_record:[...this.state.dist_record, img]});\n            this.setState({dist_time_record:[...this.state.dist_time_record, current_moment]});\n          }\n\n          else if (this.state.finger_done === true && this.state.rotate_done === false){\n            this.setState({rotate_record:[...this.state.rotate_record, img]});\n            this.setState({rotate_time_record:[...this.state.rotate_time_record, current_moment]});\n          }\n\n          else if (this.state.rotate_done === true && this.state.fist_done === false){\n            this.setState({fist_record:[...this.state.fist_record, img]});\n            this.setState({fist_time_record:[...this.state.fist_time_record, current_moment]});\n          }\n\n          if (count === 0) this.record_estimateHands(img, net, ctx);\n        }.bind(this)\n        img.src = image;\n      }\n    }\n  }\n\n  record_estimateHands = async(img, net, ctx) =>{\n    const hand = await net.estimateHands(img);\n    console.log(hand);\n    if (hand.length > 0) {\n      //drawHand(hand, ctx);   \n      this.setState({dead_frame: 0});\n    }\n    else {\n      if (this.state.dead_frame === 1) writeText(ctx, { text: 'Hand Off Screen', x: 180, y: 70 })\n      this.setState({dead_frame: 1});\n    }\n  }\n\n  async inference() {\n    require('@tensorflow/tfjs-backend-webgl');\n    const net = await handpose.load();\n    console.log(\"Handpose model loaded.\");\n\n    // Run prediction on recorded tapping data\n    for (let i = 0; i<this.state.dist_record.length; i++){\n      const hand = await net.estimateHands(this.state.dist_record[i]);\n      if (hand.length > 0){\n        hand.forEach((prediction) => {\n          const landmarks = prediction.landmarks\n          let pawn_dist = this.norm(landmarks[0], landmarks[2]);\n          let index_dist = this.norm(landmarks[4], landmarks[8]);\n          index_dist = index_dist/pawn_dist\n          this.setState({dist_array:[...this.state.dist_array, index_dist]});\n          this.setState({dist_time_array:[...this.state.dist_time_array, this.state.dist_time_record[i]]});\n          if (index_dist >= 0.5){this.setState({index_passed:1})}\n          if (index_dist < 0.5 && this.state.index_passed === 1){\n            this.setState({index_passed:0});\n            this.setState({tap_count:[...this.state.tap_count, this.state.dist_time_record[i]]});\n          }\n          console.log(\"INDEX COUNT:\", this.state.tap_count);\n        });\n      }\n    }\n\n    // Run prediction on recorded rotation data\n    for (let i = 0; i<this.state.rotate_record.length; i++){\n      const hand = await net.estimateHands(this.state.rotate_record[i]);\n      if (hand.length > 0){\n        hand.forEach((prediction) => {\n          const landmarks = prediction.landmarks\n          let pawn_dist = this.norm(landmarks[0], landmarks[2]);\n          let rotate_dist = (landmarks[2][0] - landmarks[17][0]) / pawn_dist;\n          this.setState({rotate_array:[...this.state.rotate_array, rotate_dist]});\n          this.setState({rotate_time_array:[...this.state.rotate_time_array, this.state.rotate_time_record[i]]});\n          if (this.state.rotate_passed === 0){\n            if (rotate_dist >= 0.5) this.setState({rotate_passed:1});\n            if (rotate_dist <= -0.5) this.setState({rotate_passed:-1});\n          }\n          if (this.state.rotate_passed === 1 && rotate_dist <= -0.5){\n            this.setState({rotate_passed:-1});\n          }\n          if (this.state.rotate_passed === -1 && rotate_dist >= 0.5){\n            this.setState({rotate_passed:1});\n            this.setState({rotate_count:[...this.state.rotate_count, this.state.rotate_time_record[i]]});\n          }\n          console.log(\"ROTATE COUNT:\", this.state.rotate_count);\n        });\n      }\n    }\n\n    // Run prediction on recorded gripping data\n    for (let i = 0; i<this.state.fist_record.length; i++){\n      const hand = await net.estimateHands(this.state.fist_record[i]);\n      if (hand.length > 0){\n        hand.forEach((prediction) => {\n          const landmarks = prediction.landmarks\n          let pawn_dist = this.norm(landmarks[0], landmarks[2]);\n          let fist_dist =  ((landmarks[8][1] - landmarks[5][1])+\n            (landmarks[12][1] - landmarks[9][1])+\n            (landmarks[16][1] - landmarks[13][1])+\n            (landmarks[20][1] - landmarks[17][1]))/\n            (4*pawn_dist)\n          this.setState({fist_array:[...this.state.fist_array, fist_dist]});\n          this.setState({fist_time_array:[...this.state.fist_time_array, this.state.fist_time_record[i]]});\n          if (fist_dist >= 0.0){this.setState({fist_passed:1})}\n          if (fist_dist < -0.4 && this.state.fist_passed === 1){\n            this.setState({fist_passed:0});\n            this.setState({fist_count:[...this.state.fist_count, this.state.fist_time_record[i]]});\n          }\n          console.log(\"FIST COUNT:\", this.state.fist_count);\n        });\n      }\n    }\n    this.setState({record:[]});\n  }\n\n  async stop_record() {\n    clearInterval(this.state.ID);\n    await this.inference();\n    this.setState({recording:false});\n    this.compose_chart();\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n        <Webcam\n          ref={this.webcamRef}\n          style={{\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 9,\n            width: \"auto\",\n            height: \"auto\",\n          }}\n        />\n        <canvas\n          ref={this.canvasRef}\n          style={{\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 9,\n            width: \"auto\",\n            height: \"auto\",\n          }}\n        />\n        </header>\n          {this.state.button_mode ? (\n            <div>\n              <button onClick={this.increment_tap1} id=\"button1\">Index Finger</button>\n              <button onClick={this.increment_tap2} id=\"button2\">Middle Finger</button>\n            </div>\n          ) : (\n            <div></div>\n          )}     \n          {this.state.real_time_inferencing ? (\n            this.state.finger_done ? (\n              this.state.rotate_done ? (\n                <button onClick={this.stop_real_time_inference}>Calculate Result</button>\n              ):(\n                <button onClick={this.stop_rotating}>Finish Rotating</button>\n              )\n            ):(\n              <button onClick={this.stop_tapping}>Finish Tapping</button>\n            )            \n          ) : (\n          <button onClick={this.runHandpose}>Starting Real Time Inference</button>\n          )}\n\n          {this.state.recording ? (\n            this.state.finger_done ? (\n              this.state.rotate_done ? (\n                <button onClick={this.stop_record}>Calculate Result</button>\n              ):(\n                <button onClick={this.stop_rotating}>Finish Rotating</button>\n              )\n            ):(\n              <button onClick={this.stop_tapping}>Finish Tapping</button>\n            )            \n          ) : (\n          <button onClick={this.record_video}>Starting Recording</button>\n          )}\n\n          <button onClick={this.reset_counter}>Reset Counter</button>\n          <button onClick={this.switch_button}>Switch On/Off Button</button>       \n            <h5>\n              Finger Tapping Count:{this.state.tap_count.length}&nbsp;&nbsp;&nbsp;&nbsp;\n              Rotate Count:{this.state.rotate_count.length}&nbsp;&nbsp;&nbsp;&nbsp;\n              Gripping Count: {this.state.fist_count.length}\n            </h5>\n          <div>\n            {this.state.chart_ready ? (\n              <div>\n                <Line data={this.state.chart_data1} />\n                <Line data={this.state.chart_data2} />\n                <Line data={this.state.chart_data3} />\n              </div>\n            ) : (\n              <div/>\n            )}\n            <div>\n              <input type=\"file\" id=\"upload-json\"></input>\n            </div>\n            <div>\n              <input type=\"file\" id=\"upload-weights\"></input>\n            </div>\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}