{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { Sum } from '../kernel_names';\nimport { mul } from '../ops/mul';\nimport { ones } from '../ops/ones';\nimport { reshape } from '../ops/reshape';\nimport { parseAxisParam } from '../util';\nexport const sumGradConfig = {\n  kernelName: Sum,\n  inputsToSave: ['x'],\n  gradFunc: (dy, saved, attrs) => {\n    const [x] = saved;\n    const expandedDyShape = x.shape.slice();\n    const {\n      axis\n    } = attrs;\n    const axes = parseAxisParam(axis, x.shape);\n    axes.forEach(axis => {\n      expandedDyShape[axis] = 1;\n    });\n    const expandedDy = reshape(dy, expandedDyShape);\n    const derX = mul(expandedDy, ones(x.shape, 'float32'));\n    return {\n      x: () => derX\n    };\n  }\n};","map":{"version":3,"sources":["../../src/gradients/Sum_grad.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,GAAR,QAA4B,iBAA5B;AAEA,SAAQ,GAAR,QAAkB,YAAlB;AACA,SAAQ,IAAR,QAAmB,aAAnB;AACA,SAAQ,OAAR,QAAsB,gBAAtB;AAEA,SAAQ,cAAR,QAA6B,SAA7B;AAEA,OAAO,MAAM,aAAa,GAAe;AACvC,EAAA,UAAU,EAAE,GAD2B;AAEvC,EAAA,YAAY,EAAE,CAAC,GAAD,CAFyB;AAGvC,EAAA,QAAQ,EAAE,CAAC,EAAD,EAAa,KAAb,EAA8B,KAA9B,KAAqD;AAC7D,UAAM,CAAC,CAAD,IAAM,KAAZ;AACA,UAAM,eAAe,GAAG,CAAC,CAAC,KAAF,CAAQ,KAAR,EAAxB;AACA,UAAM;AAAC,MAAA;AAAD,QAAS,KAAf;AAEA,UAAM,IAAI,GAAG,cAAc,CAAC,IAAD,EAAO,CAAC,CAAC,KAAT,CAA3B;AACA,IAAA,IAAI,CAAC,OAAL,CAAa,IAAI,IAAG;AAClB,MAAA,eAAe,CAAC,IAAD,CAAf,GAAwB,CAAxB;AACD,KAFD;AAGA,UAAM,UAAU,GAAG,OAAO,CAAC,EAAD,EAAK,eAAL,CAA1B;AACA,UAAM,IAAI,GAAG,GAAG,CAAC,UAAD,EAAa,IAAI,CAAC,CAAC,CAAC,KAAH,EAAU,SAAV,CAAjB,CAAhB;AAEA,WAAO;AAAC,MAAA,CAAC,EAAE,MAAM;AAAV,KAAP;AACD;AAhBsC,CAAlC","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { Sum } from '../kernel_names';\r\nimport { mul } from '../ops/mul';\r\nimport { ones } from '../ops/ones';\r\nimport { reshape } from '../ops/reshape';\r\nimport { parseAxisParam } from '../util';\r\nexport const sumGradConfig = {\r\n    kernelName: Sum,\r\n    inputsToSave: ['x'],\r\n    gradFunc: (dy, saved, attrs) => {\r\n        const [x] = saved;\r\n        const expandedDyShape = x.shape.slice();\r\n        const { axis } = attrs;\r\n        const axes = parseAxisParam(axis, x.shape);\r\n        axes.forEach(axis => {\r\n            expandedDyShape[axis] = 1;\r\n        });\r\n        const expandedDy = reshape(dy, expandedDyShape);\r\n        const derX = mul(expandedDy, ones(x.shape, 'float32'));\r\n        return { x: () => derX };\r\n    }\r\n};\r\n//# sourceMappingURL=Sum_grad.js.map"]},"metadata":{},"sourceType":"module"}