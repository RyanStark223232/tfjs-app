{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../../engine';\nimport { FFT } from '../../kernel_names';\nimport { assert } from '../../util';\nimport { op } from '../operation';\n/**\r\n * Fast Fourier transform.\r\n *\r\n * Computes the 1-dimensional discrete Fourier transform over the inner-most\r\n * dimension of input.\r\n *\r\n * ```js\r\n * const real = tf.tensor1d([1, 2, 3]);\r\n * const imag = tf.tensor1d([1, 2, 3]);\r\n * const x = tf.complex(real, imag);\r\n *\r\n * x.fft().print();  // tf.spectral.fft(x).print();\r\n * ```\r\n * @param input The complex input to compute an fft over.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}\r\n */\n\nfunction fft_(input) {\n  assert(input.dtype === 'complex64', () => `The dtype for tf.spectral.fft() must be complex64 ` + `but got ${input.dtype}.`);\n  const inputs = {\n    input\n  };\n  return ENGINE.runKernelFunc(backend => {\n    // Collapse all outer dimensions to a single batch dimension.\n    const innerDimensionSize = input.shape[input.shape.length - 1];\n    const batch = input.size / innerDimensionSize;\n    const input2D = input.as2D(batch, innerDimensionSize);\n    const result = backend.fft(input2D);\n    return result.reshape(input.shape);\n  }, inputs, null\n  /* gradient */\n  , FFT);\n}\n\nexport const fft = op({\n  fft_\n});","map":{"version":3,"sources":["../../../src/ops/spectral/fft.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,MAAR,QAAqB,cAArB;AACA,SAAQ,GAAR,QAA6B,oBAA7B;AAGA,SAAQ,MAAR,QAAqB,YAArB;AACA,SAAQ,EAAR,QAAiB,cAAjB;AAEA;;;;;;;;;;;;;;;;AAgBG;;AACH,SAAS,IAAT,CAAc,KAAd,EAA2B;AACzB,EAAA,MAAM,CACF,KAAK,CAAC,KAAN,KAAgB,WADd,EAEF,MAAM,oDAAA,GACF,WAAW,KAAK,CAAC,KAAK,GAHxB,CAAN;AAKA,QAAM,MAAM,GAAc;AAAC,IAAA;AAAD,GAA1B;AAEA,SAAO,MAAM,CAAC,aAAP,CAAqB,OAAO,IAAG;AACpC;AACA,UAAM,kBAAkB,GAAG,KAAK,CAAC,KAAN,CAAY,KAAK,CAAC,KAAN,CAAY,MAAZ,GAAqB,CAAjC,CAA3B;AACA,UAAM,KAAK,GAAG,KAAK,CAAC,IAAN,GAAa,kBAA3B;AAEA,UAAM,OAAO,GAAG,KAAK,CAAC,IAAN,CAAW,KAAX,EAAkB,kBAAlB,CAAhB;AACA,UAAM,MAAM,GAAG,OAAO,CAAC,GAAR,CAAY,OAAZ,CAAf;AACA,WAAO,MAAM,CAAC,OAAP,CAAe,KAAK,CAAC,KAArB,CAAP;AACD,GARM,EAQJ,MARI,EAQ4B;AAAK;AARjC,IAQiD,GARjD,CAAP;AASD;;AAED,OAAO,MAAM,GAAG,GAAG,EAAE,CAAC;AAAC,EAAA;AAAD,CAAD,CAAd","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { ENGINE } from '../../engine';\r\nimport { FFT } from '../../kernel_names';\r\nimport { assert } from '../../util';\r\nimport { op } from '../operation';\r\n/**\r\n * Fast Fourier transform.\r\n *\r\n * Computes the 1-dimensional discrete Fourier transform over the inner-most\r\n * dimension of input.\r\n *\r\n * ```js\r\n * const real = tf.tensor1d([1, 2, 3]);\r\n * const imag = tf.tensor1d([1, 2, 3]);\r\n * const x = tf.complex(real, imag);\r\n *\r\n * x.fft().print();  // tf.spectral.fft(x).print();\r\n * ```\r\n * @param input The complex input to compute an fft over.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}\r\n */\r\nfunction fft_(input) {\r\n    assert(input.dtype === 'complex64', () => `The dtype for tf.spectral.fft() must be complex64 ` +\r\n        `but got ${input.dtype}.`);\r\n    const inputs = { input };\r\n    return ENGINE.runKernelFunc(backend => {\r\n        // Collapse all outer dimensions to a single batch dimension.\r\n        const innerDimensionSize = input.shape[input.shape.length - 1];\r\n        const batch = input.size / innerDimensionSize;\r\n        const input2D = input.as2D(batch, innerDimensionSize);\r\n        const result = backend.fft(input2D);\r\n        return result.reshape(input.shape);\r\n    }, inputs, null /* gradient */, FFT);\r\n}\r\nexport const fft = op({ fft_ });\r\n//# sourceMappingURL=fft.js.map"]},"metadata":{},"sourceType":"module"}