{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\wongh\\\\finger\\\\src\\\\App.js\";\nimport React from \"react\";\nimport * as handpose from \"@tensorflow-models/handpose\"; //import * as tf from '@tensorflow/tfjs';\n\nimport Webcam from \"react-webcam\";\nimport \"./App.css\";\nimport { drawHand } from \"./utilities\";\nimport { sqrt, pow } from \"mathjs\";\nimport { Line } from 'react-chartjs-2';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.sleep = milliseconds => {\n      return new Promise(resolve => setTimeout(resolve, milliseconds));\n    };\n\n    this.state = {\n      ID: 0,\n      tap_count: [],\n      rotate_count: [],\n      fist_count: [],\n      index_passed: 0,\n      rotate_passed: 0,\n      last_pressed: 0,\n      real_time_inferencing: false,\n      recording: false,\n      button_mode: false,\n      chart_ready: false,\n      finger_done: false,\n      rotate_done: false,\n      fist_done: false,\n      record: [],\n      dist_time_array: [],\n      dist_array: [],\n      rotate_time_array: [],\n      rotate_array: [],\n      fist_time_array: [],\n      fist_array: [],\n      chart_data1: null,\n      chart_data2: null,\n      chart_data3: null,\n      wait: false,\n      startAt: Date.now(),\n      dead_frame: 0\n    };\n    this.webcamRef = /*#__PURE__*/React.createRef(null);\n    this.canvasRef = /*#__PURE__*/React.createRef(null);\n    this.runHandpose = this.runHandpose.bind(this);\n    this.stop_real_time_inference = this.stop_real_time_inference.bind(this);\n    this.stop_tapping = this.stop_tapping.bind(this);\n    this.stop_rotating = this.stop_rotating.bind(this);\n    this.stop_record = this.stop_record.bind(this);\n    this.record_video = this.record_video.bind(this);\n    this.concat_frame = this.concat_frame.bind(this);\n    this.inference = this.inference.bind(this);\n    this.reset_counter = this.reset_counter.bind(this);\n    this.increment_tap1 = this.increment_tap1.bind(this);\n    this.increment_tap2 = this.increment_tap2.bind(this);\n    this.switch_button = this.switch_button.bind(this);\n    this.compose_chart = this.compose_chart.bind(this);\n  }\n\n  compose_chart() {\n    let time_array_1 = [];\n    let count_array_1 = [];\n    let start = this.state.dist_time_array[0];\n    let end = this.state.dist_time_array[this.state.dist_time_array.length - 1];\n\n    while (start + 1.0 < end) {\n      time_array_1 = [...time_array_1, start + 0.5];\n      let i;\n      let count = 0;\n\n      for (i = 0; i < this.state.dist_array.length; i++) {\n        if (this.state.dist_time_array[i] >= start && this.state.dist_time_array[i] < start + 1.0) {\n          count += this.state.dist_array[i];\n        }\n      }\n      /*\n      \n      let time_value = 0;\n      for (let tc in this.state.tap_count){\n        time_value = this.state.tap_count[tc];\n        if (time_value >= start && time_value < (start + 1.0)){\n          count += 1;\n        }\n      }\n      */\n\n\n      count_array_1 = [...count_array_1, count];\n      start += 0.1;\n    }\n\n    const data1 = {\n      labels: time_array_1,\n      datasets: [{\n        label: 'Tapping',\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: 'rgba(75,192,192,0.4)',\n        borderColor: 'rgba(75,192,192,1)',\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: 'rgba(75,192,192,1)',\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: count_array_1\n      }]\n    };\n    let time_array_2 = [];\n    let count_array_2 = [];\n    start = this.state.rotate_time_array[0];\n    end = this.state.rotate_time_array[this.state.rotate_time_array.length - 1];\n\n    while (start + 5.0 < end) {\n      time_array_2 = [...time_array_2, start + 2.5];\n      let count = 0;\n      let time_value = 0;\n\n      for (let tc in this.state.rotate_count) {\n        time_value = this.state.rotate_count[tc];\n\n        if (time_value >= start && time_value < start + 5.0) {\n          count += 1;\n        }\n      }\n\n      count_array_2 = [...count_array_2, count];\n      start += 0.1;\n    }\n\n    const data2 = {\n      labels: time_array_2,\n      datasets: [{\n        label: 'Rotation',\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: 'rgba(192,75,192,0.4)',\n        borderColor: 'rgba(192,75,192,1)',\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: 'rgba(192,75,192,1)',\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'rgba(192,75,192,1)',\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: count_array_2\n      }]\n    };\n    let time_array_3 = [];\n    let count_array_3 = [];\n    start = this.state.fist_time_array[0];\n    end = this.state.fist_time_array[this.state.fist_time_array.length - 1];\n\n    while (start + 5.0 < end) {\n      time_array_3 = [...time_array_3, start + 2.5];\n      let count = 0;\n      let time_value = 0;\n\n      for (let tc in this.state.fist_count) {\n        time_value = this.state.fist_count[tc];\n\n        if (time_value >= start && time_value < start + 5.0) {\n          count += 1;\n        }\n      }\n\n      count_array_3 = [...count_array_3, count];\n      start += 0.1;\n    }\n\n    const data3 = {\n      labels: time_array_3,\n      datasets: [{\n        label: 'Fist',\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: 'rgba(192,192,75,0.4)',\n        borderColor: 'rgba(192,192,75,1)',\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: 'rgba(192,192,75,1)',\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'rgba(192,192,75,1)',\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: count_array_3\n      }]\n    };\n    this.setState({\n      chart_data1: data1\n    });\n    this.setState({\n      chart_data2: data2\n    });\n    this.setState({\n      chart_data3: data3\n    });\n    this.setState({\n      chart_ready: true\n    });\n  }\n\n  switch_button() {\n    if (this.state.button_mode === true) {\n      this.setState({\n        button_mode: false\n      });\n    } else {\n      this.setState({\n        button_mode: true\n      });\n    }\n  }\n\n  increment_tap1() {\n    if (this.state.last_pressed !== 1) {\n      this.setState({\n        last_pressed: 1\n      });\n      this.setState({\n        count: this.state.count + 1\n      });\n    }\n  }\n\n  increment_tap2() {\n    if (this.state.last_pressed !== 2) {\n      this.setState({\n        last_pressed: 2\n      });\n      this.setState({\n        count: this.state.count + 1\n      });\n    }\n  }\n\n  norm(lm1, lm2) {\n    return sqrt(pow(lm1[0] - lm2[0], 2) + pow(lm1[1] - lm2[1], 2));\n  }\n\n  reset_counter() {\n    clearInterval(this.state.ID);\n    this.setState({\n      ID: 0,\n      tap_count: [],\n      rotate_count: [],\n      fist_count: [],\n      index_passed: 0,\n      rotate_passed: 0,\n      fist_passed: 0,\n      last_pressed: 0,\n      real_time_inferencing: false,\n      recording: false,\n      button_mode: false,\n      chart_ready: false,\n      finger_done: false,\n      rotate_done: false,\n      fist_done: false,\n      record: [],\n      dist_time_array: [],\n      dist_array: [],\n      rotate_time_array: [],\n      rotate_array: [],\n      fist_time_array: [],\n      fist_array: [],\n      chart_data1: null,\n      chart_data2: null,\n      chart_data3: null,\n      startAt: Date.now(),\n      dead_frame: 0\n    });\n  }\n\n  async runHandpose() {\n    require('@tensorflow/tfjs-backend-webgl'); //const uploadJSONInput = document.getElementById('upload-json');\n    //const uploadWeightsInput = document.getElementById('upload-weights');\n    //const model = await tf.loadLayersModel(tf.io.browserFiles([uploadJSONInput.files[0], uploadWeightsInput.files[0]]));\n\n\n    const net = await handpose.load();\n    console.log(\"Handpose model loaded.\");\n    await this.sleep(3000);\n    const Interval_ID = setInterval(() => {\n      this.read_time_inference(net);\n    }, 50);\n    this.setState({\n      ID: Interval_ID\n    });\n    this.setState({\n      real_time_inferencing: true\n    });\n  }\n\n  async read_time_inference(net) {\n    if (this.state.wait) {\n      await this.sleep(3000);\n      this.setState({\n        wait: false\n      });\n    }\n\n    if (typeof this.webcamRef.current !== \"undefined\" && this.webcamRef.current !== null && this.webcamRef.current.video.readyState === 4) {\n      const video = this.webcamRef.current.video;\n      const videoWidth = this.webcamRef.current.video.videoWidth;\n      const videoHeight = this.webcamRef.current.video.videoHeight;\n      this.webcamRef.current.video.width = videoWidth;\n      this.webcamRef.current.video.height = videoHeight;\n      this.canvasRef.current.width = videoWidth;\n      this.canvasRef.current.height = videoHeight;\n      const hand = await net.estimateHands(video);\n\n      if (hand.length > 0) {\n        hand.forEach(prediction => {\n          this.setState({\n            dead_frame: 0\n          });\n          const landmarks = prediction.landmarks;\n          let pawn_dist = this.norm(landmarks[0], landmarks[2]);\n          let current_moment = (Date.now() - this.state.startAt) / 1000;\n\n          if (this.state.finger_done === false) {\n            let index_dist = this.norm(landmarks[4], landmarks[8]);\n            index_dist = index_dist / pawn_dist;\n            this.setState({\n              dist_array: [...this.state.dist_array, index_dist]\n            });\n            this.setState({\n              dist_time_array: [...this.state.dist_time_array, current_moment]\n            });\n\n            if (index_dist >= 0.5) {\n              this.setState({\n                index_passed: 1\n              });\n            }\n\n            if (index_dist < 0.5 && this.state.index_passed === 1) {\n              this.setState({\n                index_passed: 0\n              });\n              this.setState({\n                tap_count: [...this.state.tap_count, current_moment]\n              });\n            }\n          }\n\n          if (this.state.finger_done === true && this.state.rotate_done === false) {\n            let rotate_dist = (landmarks[2][0] - landmarks[17][0]) / pawn_dist;\n            this.setState({\n              rotate_array: [...this.state.rotate_array, rotate_dist]\n            });\n            this.setState({\n              rotate_time_array: [...this.state.rotate_time_array, current_moment]\n            });\n\n            if (this.state.rotate_passed === 0) {\n              if (rotate_dist >= 0.5) this.setState({\n                rotate_passed: 1\n              });\n              if (rotate_dist <= -0.5) this.setState({\n                rotate_passed: -1\n              });\n            }\n\n            if (this.state.rotate_passed === 1 && rotate_dist <= -0.5) {\n              this.setState({\n                rotate_passed: -1\n              });\n            }\n\n            if (this.state.rotate_passed === -1 && rotate_dist >= 0.5) {\n              this.setState({\n                rotate_passed: 1\n              });\n              this.setState({\n                rotate_count: [...this.state.rotate_count, current_moment]\n              });\n            }\n          }\n\n          if (this.state.rotate_done === true && this.state.fist_done === false) {\n            let fist_dist = (landmarks[8][1] - landmarks[5][1] + (landmarks[12][1] - landmarks[9][1]) + (landmarks[16][1] - landmarks[13][1]) + (landmarks[20][1] - landmarks[17][1])) / (4 * pawn_dist);\n            this.setState({\n              fist_array: [...this.state.fist_array, fist_dist]\n            });\n            this.setState({\n              fist_time_array: [...this.state.fist_time_array, current_moment]\n            });\n\n            if (fist_dist >= 0.0) {\n              this.setState({\n                fist_passed: 1\n              });\n            }\n\n            if (fist_dist < -0.4 && this.state.fist_passed === 1) {\n              this.setState({\n                fist_passed: 0\n              });\n              this.setState({\n                fist_count: [...this.state.fist_count, current_moment]\n              });\n            }\n          }\n\n          const ctx = this.canvasRef.current.getContext(\"2d\");\n          this.setState({\n            context: ctx\n          });\n          drawHand(hand, ctx);\n        });\n      }\n      /*\n      else{\n        if (this.state.dist_array.length !== 0){\n          this.setState({dead_frame: this.state.dead_frame+1});\n          if (this.state.dead_frame >= 10) this.stop_real_time_inference();\n        }\n      }\n      */\n\n    }\n  }\n\n  async stop_tapping() {\n    this.setState({\n      finger_done: true\n    });\n    this.setState({\n      wait: true\n    });\n  }\n\n  async stop_rotating() {\n    this.setState({\n      rotate_done: true\n    });\n    this.setState({\n      wait: true\n    });\n  }\n\n  stop_real_time_inference() {\n    clearInterval(this.state.ID);\n    this.setState({\n      real_time_inferencing: false,\n      finger_done: false,\n      rotate_done: false,\n      fist_done: false\n    });\n    this.compose_chart();\n  }\n\n  async record_video() {\n    this.setState({\n      startAt: Date.now()\n    });\n    const Interval_ID = setInterval(() => {\n      this.concat_frame();\n    }, 50);\n    this.setState({\n      ID: Interval_ID\n    });\n    this.setState({\n      recording: true\n    });\n  }\n\n  async concat_frame() {\n    this.setState({\n      time_array: [...this.state.time_array, (Date.now() - this.state.startAt) / 1000]\n    });\n\n    if (typeof this.webcamRef.current !== \"undefined\" && this.webcamRef.current !== null && this.webcamRef.current.video.readyState === 4) {\n      const image = this.webcamRef.current.getScreenshot();\n      var img = document.createElement(\"img\");\n\n      img.onload = function () {\n        this.setState({\n          record: [...this.state.record, img]\n        }); //console.log(this.state.record, this.state.recording);\n      }.bind(this);\n\n      img.src = image;\n    }\n  }\n\n  async inference() {\n    require('@tensorflow/tfjs-backend-webgl');\n\n    const net = await handpose.load();\n    console.log(\"Handpose model loaded.\");\n    var i;\n\n    for (i = 0; i < this.state.record.length; i++) {\n      const hand = await net.estimateHands(this.state.record[i]);\n      console.log(hand);\n\n      if (hand.length > 0) {\n        hand.forEach(prediction => {\n          const landmarks = prediction.landmarks;\n          let pawn_dist = this.norm(landmarks[0], landmarks[2]); //sqrt(pow(landmarks[0][0]-landmarks[2][0], 2)+pow(landmarks[0][1]-landmarks[2][1], 2))\n\n          let index_dist = this.norm(landmarks[4], landmarks[8]); //sqrt(pow(landmarks[8][0]-landmarks[4][0], 2)+pow(landmarks[8][1]-landmarks[4][1], 2))\n\n          index_dist = index_dist / pawn_dist;\n          this.setState({\n            dist_array: [...this.state.dist_array, index_dist]\n          });\n\n          if (index_dist >= 0.5) {\n            this.setState({\n              index_passed: 1\n            });\n          }\n\n          if (index_dist < 0.5 && this.state.index_passed === 1) {\n            this.setState({\n              index_passed: 0\n            });\n            this.setState({\n              count: this.state.count + 1\n            });\n          }\n\n          let rotate_dist = (landmarks[2][0] - landmarks[17][0]) / pawn_dist;\n\n          if (this.state.rotate_passed === 0) {\n            if (rotate_dist >= 0.5) this.setState({\n              rotate_passed: 1\n            });\n            if (rotate_dist <= -0.5) this.setState({\n              rotate_passed: -1\n            });\n          }\n\n          if (this.state.rotate_passed === 1 && rotate_dist <= -0.5) {\n            this.setState({\n              rotate_passed: -1\n            });\n          }\n\n          if (this.state.rotate_passed === -1 && rotate_dist >= 0.5) {\n            this.setState({\n              rotate_passed: 1\n            });\n            this.setState({\n              rcount: this.state.rcount + 1\n            });\n          }\n        });\n      }\n    }\n\n    this.setState({\n      record: []\n    });\n  }\n\n  stop_record() {\n    clearInterval(this.state.ID);\n    this.inference();\n    this.setState({\n      recording: false\n    });\n    this.compose_chart();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"App-header\",\n        children: [/*#__PURE__*/_jsxDEV(Webcam, {\n          ref: this.webcamRef,\n          style: {\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 9,\n            width: \"auto\",\n            height: \"auto\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 465,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: this.canvasRef,\n          style: {\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 9,\n            width: \"auto\",\n            height: \"auto\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 479,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 464,\n        columnNumber: 9\n      }, this), this.state.button_mode ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.increment_tap1,\n          id: \"button1\",\n          children: \"Index Finger\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 496,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.increment_tap2,\n          id: \"button2\",\n          children: \"Middle Finger\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 497,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 495,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 500,\n        columnNumber: 13\n      }, this), this.state.real_time_inferencing ? this.state.finger_done ? this.state.rotate_done ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.stop_real_time_inference,\n        children: \"Calculate Result\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 505,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.stop_rotating,\n        children: \"Finish Rotating\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 507,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.stop_tapping,\n        children: \"Finish Tapping\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 510,\n        columnNumber: 15\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.runHandpose,\n        children: \"Starting Real Time Inference\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 513,\n        columnNumber: 11\n      }, this), this.state.recording ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.stop_record,\n        children: \"Stopping Recording\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 517,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.record_video,\n        children: \"Starting Recording\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 519,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.reset_counter,\n        children: \"Reset Counter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 521,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.switch_button,\n        children: \"Switch On/Off Button\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 522,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: [\"Finger Tapping Count: \", this.state.tap_count.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 523,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: [\"Rotate Count: \", this.state.rotate_count.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: [\"Gripping Count: \", this.state.fist_count.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [this.state.chart_ready ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Line, {\n            data: this.state.chart_data1\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 529,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            data: this.state.chart_data2\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 530,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            data: this.state.chart_data3\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 531,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 528,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 534,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            id: \"upload-json\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 537,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 536,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            id: \"upload-weights\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 540,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 539,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 526,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 463,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/wongh/finger/src/App.js"],"names":["React","handpose","Webcam","drawHand","sqrt","pow","Line","App","Component","constructor","props","sleep","milliseconds","Promise","resolve","setTimeout","state","ID","tap_count","rotate_count","fist_count","index_passed","rotate_passed","last_pressed","real_time_inferencing","recording","button_mode","chart_ready","finger_done","rotate_done","fist_done","record","dist_time_array","dist_array","rotate_time_array","rotate_array","fist_time_array","fist_array","chart_data1","chart_data2","chart_data3","wait","startAt","Date","now","dead_frame","webcamRef","createRef","canvasRef","runHandpose","bind","stop_real_time_inference","stop_tapping","stop_rotating","stop_record","record_video","concat_frame","inference","reset_counter","increment_tap1","increment_tap2","switch_button","compose_chart","time_array_1","count_array_1","start","end","length","i","count","data1","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","data","time_array_2","count_array_2","time_value","tc","data2","time_array_3","count_array_3","data3","setState","norm","lm1","lm2","clearInterval","fist_passed","require","net","load","console","log","Interval_ID","setInterval","read_time_inference","current","video","readyState","videoWidth","videoHeight","width","height","hand","estimateHands","forEach","prediction","landmarks","pawn_dist","current_moment","index_dist","rotate_dist","fist_dist","ctx","getContext","context","time_array","image","getScreenshot","img","document","createElement","onload","src","rcount","render","position","marginLeft","marginRight","left","right","textAlign","zindex"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport * as handpose from \"@tensorflow-models/handpose\";\n//import * as tf from '@tensorflow/tfjs';\nimport Webcam from \"react-webcam\";\nimport \"./App.css\";\nimport { drawHand } from \"./utilities\";\nimport { sqrt, pow } from \"mathjs\"\nimport {Line} from 'react-chartjs-2';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      ID : 0,\n      tap_count : [],\n      rotate_count : [],\n      fist_count : [],\n      index_passed : 0,\n      rotate_passed : 0,\n      last_pressed:0,\n      real_time_inferencing:false,\n      recording:false,\n      button_mode:false,\n      chart_ready:false,\n      finger_done : false,\n      rotate_done : false,\n      fist_done : false,\n      record : [],\n      dist_time_array : [],\n      dist_array : [],\n      rotate_time_array : [],\n      rotate_array : [],\n      fist_time_array : [],\n      fist_array : [],\n      chart_data1 : null,\n      chart_data2 : null,\n      chart_data3 : null,\n      wait : false,\n      startAt: Date.now(),\n      dead_frame: 0,\n    };\n    this.webcamRef = React.createRef(null);\n    this.canvasRef = React.createRef(null);\n    this.runHandpose = this.runHandpose.bind(this);\n    this.stop_real_time_inference = this.stop_real_time_inference.bind(this);\n    this.stop_tapping = this.stop_tapping.bind(this);\n    this.stop_rotating = this.stop_rotating.bind(this);\n    this.stop_record = this.stop_record.bind(this);\n    this.record_video = this.record_video.bind(this);\n    this.concat_frame = this.concat_frame.bind(this);\n    this.inference = this.inference.bind(this);\n    this.reset_counter = this.reset_counter.bind(this);\n    this.increment_tap1 = this.increment_tap1.bind(this);\n    this.increment_tap2 = this.increment_tap2.bind(this);\n    this.switch_button = this.switch_button.bind(this);\n    this.compose_chart = this.compose_chart.bind(this);\n  }\n\n  compose_chart(){\n    let time_array_1 = [];\n    let count_array_1 = [];\n    let start = this.state.dist_time_array[0];\n    let end = this.state.dist_time_array[this.state.dist_time_array.length - 1];\n    while (start + 1.0 < end){\n      time_array_1 = [...time_array_1, start + 0.5];\n      let i;\n      let count = 0;\n      for (i = 0; i < this.state.dist_array.length; i++){\n        if (this.state.dist_time_array[i] >= start && this.state.dist_time_array[i] < (start + 1.0)){\n          count += this.state.dist_array[i];\n        }\n      }\n      /*\n      \n      let time_value = 0;\n      for (let tc in this.state.tap_count){\n        time_value = this.state.tap_count[tc];\n        if (time_value >= start && time_value < (start + 1.0)){\n          count += 1;\n        }\n      }\n      */\n      count_array_1 = [...count_array_1, count];\n      start += 0.1;\n    }\n    const data1 = {\n      labels: time_array_1,\n      datasets: [        \n        {\n          label: 'Tapping',\n          fill: false,\n          lineTension: 0.1,\n          backgroundColor: 'rgba(75,192,192,0.4)',\n          borderColor: 'rgba(75,192,192,1)',\n          borderCapStyle: 'butt',\n          borderDash: [],\n          borderDashOffset: 0.0,\n          borderJoinStyle: 'miter',\n          pointBorderColor: 'rgba(75,192,192,1)',\n          pointBackgroundColor: '#fff',\n          pointBorderWidth: 1,\n          pointHoverRadius: 5,\n          pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n          pointHoverBorderColor: 'rgba(220,220,220,1)',\n          pointHoverBorderWidth: 2,\n          pointRadius: 1,\n          pointHitRadius: 10,\n          data: count_array_1\n        }\n      ]\n    };\n    let time_array_2 = [];\n    let count_array_2 = [];\n    start = this.state.rotate_time_array[0];\n    end = this.state.rotate_time_array[this.state.rotate_time_array.length - 1];\n    while (start + 5.0 < end){\n      time_array_2 = [...time_array_2, start + 2.5];\n      let count = 0;\n      let time_value = 0;\n      for (let tc in this.state.rotate_count){\n        time_value = this.state.rotate_count[tc];\n        if (time_value >= start && time_value < (start + 5.0)){\n          count += 1;\n        }\n      }\n      count_array_2 = [...count_array_2, count];\n      start += 0.1;\n    }\n    const data2 = {\n      labels: time_array_2,\n      datasets: [        \n        {\n          label: 'Rotation',\n          fill: false,\n          lineTension: 0.1,\n          backgroundColor: 'rgba(192,75,192,0.4)',\n          borderColor: 'rgba(192,75,192,1)',\n          borderCapStyle: 'butt',\n          borderDash: [],\n          borderDashOffset: 0.0,\n          borderJoinStyle: 'miter',\n          pointBorderColor: 'rgba(192,75,192,1)',\n          pointBackgroundColor: '#fff',\n          pointBorderWidth: 1,\n          pointHoverRadius: 5,\n          pointHoverBackgroundColor: 'rgba(192,75,192,1)',\n          pointHoverBorderColor: 'rgba(220,220,220,1)',\n          pointHoverBorderWidth: 2,\n          pointRadius: 1,\n          pointHitRadius: 10,\n          data: count_array_2 \n        },\n      ]\n    };\n    let time_array_3 = [];\n    let count_array_3 = [];\n    start = this.state.fist_time_array[0];\n    end = this.state.fist_time_array[this.state.fist_time_array.length - 1];\n    while (start + 5.0 < end){\n      time_array_3 = [...time_array_3, start + 2.5];\n      let count = 0;\n      let time_value = 0;\n      for (let tc in this.state.fist_count){\n        time_value = this.state.fist_count[tc];\n        if (time_value >= start && time_value < (start + 5.0)){\n          count += 1;\n        }\n      }\n      count_array_3 = [...count_array_3, count];\n      start += 0.1;\n    }\n    const data3 = {\n      labels: time_array_3,\n      datasets: [        \n        {\n          label: 'Fist',\n          fill: false,\n          lineTension: 0.1,\n          backgroundColor: 'rgba(192,192,75,0.4)',\n          borderColor: 'rgba(192,192,75,1)',\n          borderCapStyle: 'butt',\n          borderDash: [],\n          borderDashOffset: 0.0,\n          borderJoinStyle: 'miter',\n          pointBorderColor: 'rgba(192,192,75,1)',\n          pointBackgroundColor: '#fff',\n          pointBorderWidth: 1,\n          pointHoverRadius: 5,\n          pointHoverBackgroundColor: 'rgba(192,192,75,1)',\n          pointHoverBorderColor: 'rgba(220,220,220,1)',\n          pointHoverBorderWidth: 2,\n          pointRadius: 1,\n          pointHitRadius: 10,\n          data: count_array_3\n        }\n      ]\n    };\n    this.setState({chart_data1:data1});\n    this.setState({chart_data2:data2});\n    this.setState({chart_data3:data3});\n    this.setState({chart_ready:true});\n  }\n\n  switch_button(){\n    if (this.state.button_mode === true){\n      this.setState({button_mode:false})\n    }\n    else{\n      this.setState({button_mode:true})\n    }\n  }\n\n  increment_tap1(){\n    if (this.state.last_pressed !== 1){\n      this.setState({last_pressed:1})\n      this.setState({count:this.state.count+1});\n    }\n  }\n\n  increment_tap2(){\n    if (this.state.last_pressed !== 2){\n      this.setState({last_pressed:2})\n      this.setState({count:this.state.count+1});\n    }\n  }\n\n  norm(lm1, lm2){\n    return sqrt(pow(lm1[0]-lm2[0], 2)+pow(lm1[1]-lm2[1], 2))\n  }\n\n  reset_counter(){\n    clearInterval(this.state.ID);\n    this.setState({\n      ID : 0,\n      tap_count : [],\n      rotate_count : [],\n      fist_count : [],\n      index_passed : 0,\n      rotate_passed : 0,\n      fist_passed : 0,\n      last_pressed:0,\n      real_time_inferencing:false,\n      recording:false,\n      button_mode:false,\n      chart_ready:false,\n      finger_done : false,\n      rotate_done : false,\n      fist_done : false,\n      record : [],\n      dist_time_array : [],\n      dist_array : [],\n      rotate_time_array : [],\n      rotate_array : [],\n      fist_time_array : [],\n      fist_array : [],\n      chart_data1 : null,\n      chart_data2 : null,\n      chart_data3 : null,\n      startAt: Date.now(),\n      dead_frame: 0,\n    });\n  }\n\n  sleep = (milliseconds) => {\n    return new Promise(resolve => setTimeout(resolve, milliseconds))\n  }\n\n  async runHandpose() {\n    require('@tensorflow/tfjs-backend-webgl');\n    //const uploadJSONInput = document.getElementById('upload-json');\n    //const uploadWeightsInput = document.getElementById('upload-weights');\n    //const model = await tf.loadLayersModel(tf.io.browserFiles([uploadJSONInput.files[0], uploadWeightsInput.files[0]]));\n    const net = await handpose.load();\n    console.log(\"Handpose model loaded.\");\n    await this.sleep(3000); \n    const Interval_ID = setInterval(() => {\n      this.read_time_inference(net);\n    }, 50);\n    this.setState({ID:Interval_ID});\n    this.setState({real_time_inferencing:true});\n  };\n\n  async read_time_inference(net) {    \n    if (this.state.wait){\n      await this.sleep(3000);\n      this.setState({wait:false});\n    }\n    if (\n      typeof this.webcamRef.current !== \"undefined\" &&\n      this.webcamRef.current !== null &&\n      this.webcamRef.current.video.readyState === 4\n    ) {\n      const video = this.webcamRef.current.video;\n      const videoWidth = this.webcamRef.current.video.videoWidth;\n      const videoHeight = this.webcamRef.current.video.videoHeight;\n      this.webcamRef.current.video.width = videoWidth;\n      this.webcamRef.current.video.height = videoHeight;\n      this.canvasRef.current.width = videoWidth;\n      this.canvasRef.current.height = videoHeight;\n      const hand = await net.estimateHands(video);\n      if (hand.length > 0){\n        hand.forEach((prediction) => {\n          this.setState({dead_frame: 0});\n          const landmarks = prediction.landmarks\n\n          let pawn_dist = this.norm(landmarks[0], landmarks[2]);\n          let current_moment = (Date.now() - this.state.startAt)/1000\n\n          if (this.state.finger_done === false){\n            let index_dist = this.norm(landmarks[4], landmarks[8]);\n            index_dist = index_dist/pawn_dist\n            this.setState({dist_array:[...this.state.dist_array, index_dist]});\n            this.setState({dist_time_array:[...this.state.dist_time_array, current_moment]});\n            if (index_dist >= 0.5){this.setState({index_passed:1})}\n            if (index_dist < 0.5 && this.state.index_passed === 1){\n              this.setState({index_passed:0});\n              this.setState({tap_count:[...this.state.tap_count, current_moment]});\n            }\n          }\n          \n          if (this.state.finger_done === true && this.state.rotate_done === false){\n            let rotate_dist = (landmarks[2][0] - landmarks[17][0]) / pawn_dist;\n            this.setState({rotate_array:[...this.state.rotate_array, rotate_dist]});\n            this.setState({rotate_time_array:[...this.state.rotate_time_array, current_moment]});\n            if (this.state.rotate_passed === 0){\n              if (rotate_dist >= 0.5) this.setState({rotate_passed:1});\n              if (rotate_dist <= -0.5) this.setState({rotate_passed:-1});\n            }\n            if (this.state.rotate_passed === 1 && rotate_dist <= -0.5){\n              this.setState({rotate_passed:-1});\n            }\n            if (this.state.rotate_passed === -1 && rotate_dist >= 0.5){\n              this.setState({rotate_passed:1});\n              this.setState({rotate_count:[...this.state.rotate_count, current_moment]});\n            }\n          }\n\n          if (this.state.rotate_done === true && this.state.fist_done === false){\n            let fist_dist =  ((landmarks[8][1] - landmarks[5][1])+\n                              (landmarks[12][1] - landmarks[9][1])+\n                              (landmarks[16][1] - landmarks[13][1])+\n                              (landmarks[20][1] - landmarks[17][1]))/\n                              (4*pawn_dist)\n            this.setState({fist_array:[...this.state.fist_array, fist_dist]});\n            this.setState({fist_time_array:[...this.state.fist_time_array, current_moment]});\n            if (fist_dist >= 0.0){this.setState({fist_passed:1})}\n            if (fist_dist < -0.4 && this.state.fist_passed === 1){\n              this.setState({fist_passed:0});\n              this.setState({fist_count:[...this.state.fist_count, current_moment]});\n            }\n          }          \n\n          const ctx = this.canvasRef.current.getContext(\"2d\");\n          this.setState({context:ctx});\n          drawHand(hand, ctx);\n        });\n      }\n      /*\n      else{\n        if (this.state.dist_array.length !== 0){\n          this.setState({dead_frame: this.state.dead_frame+1});\n          if (this.state.dead_frame >= 10) this.stop_real_time_inference();\n        }\n      }\n      */\n    }\n  };\n\n  async stop_tapping() {\n    this.setState({finger_done:true});\n    this.setState({wait:true});\n  }\n\n  async stop_rotating() {\n    this.setState({rotate_done:true});\n    this.setState({wait:true});\n  }\n\n  stop_real_time_inference() {\n    clearInterval(this.state.ID);\n    this.setState({real_time_inferencing:false,\n                   finger_done:false,\n                   rotate_done:false,\n                   fist_done:false});\n    this.compose_chart();\n  }\n\n  async record_video(){\n    this.setState({startAt:Date.now()});\n    const Interval_ID = setInterval(() => {\n      this.concat_frame();\n    }, 50);\n    this.setState({ID:Interval_ID});\n    this.setState({recording:true});\n  }\n\n  async concat_frame() {\n    this.setState({time_array:[...this.state.time_array, (Date.now() - this.state.startAt)/1000]});\n    if (\n      typeof this.webcamRef.current !== \"undefined\" &&\n      this.webcamRef.current !== null &&\n      this.webcamRef.current.video.readyState === 4\n    ) {\n      const image = this.webcamRef.current.getScreenshot();      \n      var img = document.createElement(\"img\");\n      img.onload = function(){\n        this.setState({record:[...this.state.record, img]});\n        //console.log(this.state.record, this.state.recording);\n      }.bind(this)\n      img.src = image;\n    }\n  }\n\n  async inference() {\n    require('@tensorflow/tfjs-backend-webgl');\n    const net = await handpose.load();\n    console.log(\"Handpose model loaded.\");\n    var i;\n    for (i = 0; i<this.state.record.length; i++){\n      const hand = await net.estimateHands(this.state.record[i]);\n      console.log(hand);\n      if (hand.length > 0){\n        hand.forEach((prediction) => {\n          const landmarks = prediction.landmarks\n\n          let pawn_dist = this.norm(landmarks[0], landmarks[2]); //sqrt(pow(landmarks[0][0]-landmarks[2][0], 2)+pow(landmarks[0][1]-landmarks[2][1], 2))\n          let index_dist = this.norm(landmarks[4], landmarks[8]); //sqrt(pow(landmarks[8][0]-landmarks[4][0], 2)+pow(landmarks[8][1]-landmarks[4][1], 2))\n          index_dist = index_dist/pawn_dist\n          this.setState({dist_array:[...this.state.dist_array, index_dist]});\n          if (index_dist >= 0.5){this.setState({index_passed:1})}\n          if (index_dist < 0.5 && this.state.index_passed === 1){\n            this.setState({index_passed:0});\n            this.setState({count:this.state.count+1});\n          }\n\n          let rotate_dist = (landmarks[2][0] - landmarks[17][0]) / pawn_dist;\n          if (this.state.rotate_passed === 0){\n            if (rotate_dist >= 0.5) this.setState({rotate_passed:1});\n            if (rotate_dist <= -0.5) this.setState({rotate_passed:-1});\n          }\n          if (this.state.rotate_passed === 1 && rotate_dist <= -0.5){\n            this.setState({rotate_passed:-1});\n          }\n          if (this.state.rotate_passed === -1 && rotate_dist >= 0.5){\n            this.setState({rotate_passed:1});\n            this.setState({rcount:this.state.rcount+1});\n          }\n        });\n      }\n    }\n    this.setState({record:[]});\n  }\n\n  stop_record() {\n    clearInterval(this.state.ID);\n    this.inference();\n    this.setState({recording:false});\n    this.compose_chart();\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n        <Webcam\n          ref={this.webcamRef}\n          style={{\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 9,\n            width: \"auto\",\n            height: \"auto\",\n          }}\n        />\n        <canvas\n          ref={this.canvasRef}\n          style={{\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 9,\n            width: \"auto\",\n            height: \"auto\",\n          }}\n        />\n        </header>\n          {this.state.button_mode ? (\n            <div>\n              <button onClick={this.increment_tap1} id=\"button1\">Index Finger</button>\n              <button onClick={this.increment_tap2} id=\"button2\">Middle Finger</button>\n            </div>\n          ) : (\n            <div></div>\n          )}     \n          {this.state.real_time_inferencing ? (\n            this.state.finger_done ? (\n              this.state.rotate_done ? (\n                <button onClick={this.stop_real_time_inference}>Calculate Result</button>\n              ):(\n                <button onClick={this.stop_rotating}>Finish Rotating</button>\n              )\n            ):(\n              <button onClick={this.stop_tapping}>Finish Tapping</button>\n            )            \n          ) : (\n          <button onClick={this.runHandpose}>Starting Real Time Inference</button>\n          )}\n\n          {this.state.recording ? (\n          <button onClick={this.stop_record}>Stopping Recording</button>\n          ) : (\n          <button onClick={this.record_video}>Starting Recording</button>\n          )}\n          <button onClick={this.reset_counter}>Reset Counter</button>\n          <button onClick={this.switch_button}>Switch On/Off Button</button>       \n          <h5>Finger Tapping Count: {this.state.tap_count.length}</h5>\n          <h5>Rotate Count: {this.state.rotate_count.length}</h5>\n          <h5>Gripping Count: {this.state.fist_count.length}</h5>\n          <div>\n            {this.state.chart_ready ? (\n              <div>\n                <Line data={this.state.chart_data1} />\n                <Line data={this.state.chart_data2} />\n                <Line data={this.state.chart_data3} />\n              </div>\n            ) : (\n              <div/>\n            )}\n            <div>\n            <input type=\"file\" id=\"upload-json\"></input>\n            </div>\n            <div>\n            <input type=\"file\" id=\"upload-weights\"></input>\n            </div>\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}