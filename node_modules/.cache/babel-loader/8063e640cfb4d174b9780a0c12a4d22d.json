{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2017 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport { util } from '@tensorflow/tfjs-core';\nexport var PackingScheme;\n\n(function (PackingScheme) {\n  /**\r\n   * All values in a single texel are densely packed without any constraints.\r\n   *\r\n   * This is how the shader encodes a tensor with shape = [2, 3, 4]\r\n   * (indices are [batch, row, col]).\r\n   *\r\n   * 000|001   010|011   020|021\r\n   * -------   -------   -------\r\n   * 002|003   012|013   022|023\r\n   *\r\n   * 100|101   110|111   120|121\r\n   * -------   -------   -------\r\n   * 102|103   112|113   122|123\r\n   *\r\n   */\n  PackingScheme[PackingScheme[\"DENSE\"] = 0] = \"DENSE\";\n  /**\r\n   * Single texels contain only values from the same batch, and from adjacent\r\n   * rows and columns.\r\n   *\r\n   * This is how the shader encodes a tensor with shape = [2, 3, 5]\r\n   * (indices are [batch, row, col]).\r\n   *\r\n   * 000|001   002|003   004|xxx   020|021   022|023   024|xxx\r\n   * -------   -------   -------   -------   -------   -------\r\n   * 010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx\r\n   *\r\n   * 100|101   102|103   104|xxx   120|121   122|123   124|xxx\r\n   * -------   -------   -------   -------   -------   -------\r\n   * 110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx\r\n   *\r\n   */\n\n  PackingScheme[PackingScheme[\"SHARED_BATCH\"] = 1] = \"SHARED_BATCH\";\n})(PackingScheme || (PackingScheme = {}));\n\nexport var TextureUsage;\n\n(function (TextureUsage) {\n  TextureUsage[TextureUsage[\"RENDER\"] = 0] = \"RENDER\";\n  TextureUsage[TextureUsage[\"UPLOAD\"] = 1] = \"UPLOAD\";\n  TextureUsage[TextureUsage[\"PIXELS\"] = 2] = \"PIXELS\";\n  TextureUsage[TextureUsage[\"DOWNLOAD\"] = 3] = \"DOWNLOAD\";\n})(TextureUsage || (TextureUsage = {}));\n\nexport var PhysicalTextureType;\n\n(function (PhysicalTextureType) {\n  PhysicalTextureType[PhysicalTextureType[\"UNPACKED_FLOAT16\"] = 0] = \"UNPACKED_FLOAT16\";\n  PhysicalTextureType[PhysicalTextureType[\"UNPACKED_FLOAT32\"] = 1] = \"UNPACKED_FLOAT32\";\n  PhysicalTextureType[PhysicalTextureType[\"PACKED_4X1_UNSIGNED_BYTE\"] = 2] = \"PACKED_4X1_UNSIGNED_BYTE\";\n  PhysicalTextureType[PhysicalTextureType[\"PACKED_2X2_FLOAT32\"] = 3] = \"PACKED_2X2_FLOAT32\";\n  PhysicalTextureType[PhysicalTextureType[\"PACKED_2X2_FLOAT16\"] = 4] = \"PACKED_2X2_FLOAT16\";\n})(PhysicalTextureType || (PhysicalTextureType = {}));\n\nexport function getUnpackedMatrixTextureShapeWidthHeight(rows, columns) {\n  return [columns, rows];\n}\nexport function getUnpackedArraySizeFromMatrixSize(matrixSize, channelsPerTexture) {\n  return matrixSize * channelsPerTexture;\n}\nexport function getColorMatrixTextureShapeWidthHeight(rows, columns) {\n  return [columns * 4, rows];\n}\n/**\r\n * Get shape for densely packed RGBA texture.\r\n */\n\nexport function getDenseTexShape(shape) {\n  const size = util.sizeFromShape(shape);\n  const texelsNeeded = Math.ceil(size / 4);\n  return util.sizeToSquarishShape(texelsNeeded);\n}\nexport function getMatrixSizeFromUnpackedArraySize(unpackedSize, channelsPerTexture) {\n  if (unpackedSize % channelsPerTexture !== 0) {\n    throw new Error(`unpackedSize (${unpackedSize}) must be a multiple of ` + `${channelsPerTexture}`);\n  }\n\n  return unpackedSize / channelsPerTexture;\n}\nexport function decodeMatrixFromUnpackedColorRGBAArray(unpackedArray, matrix, channels) {\n  const requiredSize = unpackedArray.length * channels / 4;\n\n  if (matrix.length < requiredSize) {\n    throw new Error(`matrix length (${matrix.length}) must be >= ${requiredSize}`);\n  }\n\n  let dst = 0;\n\n  for (let src = 0; src < unpackedArray.length; src += 4) {\n    for (let c = 0; c < channels; c++) {\n      matrix[dst++] = unpackedArray[src + c];\n    }\n  }\n}\nexport function getPackedMatrixTextureShapeWidthHeight(rows, columns) {\n  return [Math.max(1, Math.ceil(columns / 2)), Math.max(1, Math.ceil(rows / 2))];\n}\nexport function getPackedRGBAArraySizeFromMatrixShape(rows, columns) {\n  const [w, h] = getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return w * h * 4;\n}\nexport function getTextureConfig( // tslint:disable-next-line:no-any\ngl, textureHalfFloatExtension) {\n  // tslint:disable-next-line:no-any\n  const glany = gl;\n  let internalFormatFloat;\n  let internalFormatHalfFloat;\n  let internalFormatPackedHalfFloat;\n  let internalFormatPackedFloat;\n  let textureFormatFloat;\n  let downloadTextureFormat;\n  let downloadUnpackNumChannels;\n  let defaultNumChannels;\n  let textureTypeHalfFloat;\n  let textureTypeFloat;\n\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    internalFormatFloat = glany.R32F;\n    internalFormatHalfFloat = glany.R16F;\n    internalFormatPackedHalfFloat = glany.RGBA16F;\n    internalFormatPackedFloat = glany.RGBA32F;\n    textureFormatFloat = glany.RED;\n    downloadUnpackNumChannels = 4;\n    defaultNumChannels = 1;\n    textureTypeHalfFloat = glany.HALF_FLOAT;\n    textureTypeFloat = glany.FLOAT;\n  } else {\n    internalFormatFloat = gl.RGBA;\n    internalFormatHalfFloat = gl.RGBA;\n    internalFormatPackedHalfFloat = gl.RGBA;\n    internalFormatPackedFloat = glany.RGBA;\n    textureFormatFloat = gl.RGBA;\n    downloadUnpackNumChannels = 4;\n    defaultNumChannels = 4;\n    textureTypeHalfFloat = textureHalfFloatExtension != null ? textureHalfFloatExtension.HALF_FLOAT_OES : null;\n    textureTypeFloat = gl.FLOAT;\n  }\n\n  downloadTextureFormat = gl.RGBA;\n  return {\n    internalFormatFloat,\n    internalFormatHalfFloat,\n    internalFormatPackedHalfFloat,\n    internalFormatPackedFloat,\n    textureFormatFloat,\n    downloadTextureFormat,\n    downloadUnpackNumChannels,\n    defaultNumChannels,\n    textureTypeHalfFloat,\n    textureTypeFloat\n  };\n}","map":{"version":3,"sources":["../src/tex_util.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2017 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { env } from '@tensorflow/tfjs-core';\r\nimport { util } from '@tensorflow/tfjs-core';\r\nexport var PackingScheme;\r\n(function (PackingScheme) {\r\n    /**\r\n     * All values in a single texel are densely packed without any constraints.\r\n     *\r\n     * This is how the shader encodes a tensor with shape = [2, 3, 4]\r\n     * (indices are [batch, row, col]).\r\n     *\r\n     * 000|001   010|011   020|021\r\n     * -------   -------   -------\r\n     * 002|003   012|013   022|023\r\n     *\r\n     * 100|101   110|111   120|121\r\n     * -------   -------   -------\r\n     * 102|103   112|113   122|123\r\n     *\r\n     */\r\n    PackingScheme[PackingScheme[\"DENSE\"] = 0] = \"DENSE\";\r\n    /**\r\n     * Single texels contain only values from the same batch, and from adjacent\r\n     * rows and columns.\r\n     *\r\n     * This is how the shader encodes a tensor with shape = [2, 3, 5]\r\n     * (indices are [batch, row, col]).\r\n     *\r\n     * 000|001   002|003   004|xxx   020|021   022|023   024|xxx\r\n     * -------   -------   -------   -------   -------   -------\r\n     * 010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx\r\n     *\r\n     * 100|101   102|103   104|xxx   120|121   122|123   124|xxx\r\n     * -------   -------   -------   -------   -------   -------\r\n     * 110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx\r\n     *\r\n     */\r\n    PackingScheme[PackingScheme[\"SHARED_BATCH\"] = 1] = \"SHARED_BATCH\";\r\n})(PackingScheme || (PackingScheme = {}));\r\nexport var TextureUsage;\r\n(function (TextureUsage) {\r\n    TextureUsage[TextureUsage[\"RENDER\"] = 0] = \"RENDER\";\r\n    TextureUsage[TextureUsage[\"UPLOAD\"] = 1] = \"UPLOAD\";\r\n    TextureUsage[TextureUsage[\"PIXELS\"] = 2] = \"PIXELS\";\r\n    TextureUsage[TextureUsage[\"DOWNLOAD\"] = 3] = \"DOWNLOAD\";\r\n})(TextureUsage || (TextureUsage = {}));\r\nexport var PhysicalTextureType;\r\n(function (PhysicalTextureType) {\r\n    PhysicalTextureType[PhysicalTextureType[\"UNPACKED_FLOAT16\"] = 0] = \"UNPACKED_FLOAT16\";\r\n    PhysicalTextureType[PhysicalTextureType[\"UNPACKED_FLOAT32\"] = 1] = \"UNPACKED_FLOAT32\";\r\n    PhysicalTextureType[PhysicalTextureType[\"PACKED_4X1_UNSIGNED_BYTE\"] = 2] = \"PACKED_4X1_UNSIGNED_BYTE\";\r\n    PhysicalTextureType[PhysicalTextureType[\"PACKED_2X2_FLOAT32\"] = 3] = \"PACKED_2X2_FLOAT32\";\r\n    PhysicalTextureType[PhysicalTextureType[\"PACKED_2X2_FLOAT16\"] = 4] = \"PACKED_2X2_FLOAT16\";\r\n})(PhysicalTextureType || (PhysicalTextureType = {}));\r\nexport function getUnpackedMatrixTextureShapeWidthHeight(rows, columns) {\r\n    return [columns, rows];\r\n}\r\nexport function getUnpackedArraySizeFromMatrixSize(matrixSize, channelsPerTexture) {\r\n    return matrixSize * channelsPerTexture;\r\n}\r\nexport function getColorMatrixTextureShapeWidthHeight(rows, columns) {\r\n    return [columns * 4, rows];\r\n}\r\n/**\r\n * Get shape for densely packed RGBA texture.\r\n */\r\nexport function getDenseTexShape(shape) {\r\n    const size = util.sizeFromShape(shape);\r\n    const texelsNeeded = Math.ceil(size / 4);\r\n    return util.sizeToSquarishShape(texelsNeeded);\r\n}\r\nexport function getMatrixSizeFromUnpackedArraySize(unpackedSize, channelsPerTexture) {\r\n    if (unpackedSize % channelsPerTexture !== 0) {\r\n        throw new Error(`unpackedSize (${unpackedSize}) must be a multiple of ` +\r\n            `${channelsPerTexture}`);\r\n    }\r\n    return unpackedSize / channelsPerTexture;\r\n}\r\nexport function decodeMatrixFromUnpackedColorRGBAArray(unpackedArray, matrix, channels) {\r\n    const requiredSize = unpackedArray.length * channels / 4;\r\n    if (matrix.length < requiredSize) {\r\n        throw new Error(`matrix length (${matrix.length}) must be >= ${requiredSize}`);\r\n    }\r\n    let dst = 0;\r\n    for (let src = 0; src < unpackedArray.length; src += 4) {\r\n        for (let c = 0; c < channels; c++) {\r\n            matrix[dst++] = unpackedArray[src + c];\r\n        }\r\n    }\r\n}\r\nexport function getPackedMatrixTextureShapeWidthHeight(rows, columns) {\r\n    return [\r\n        Math.max(1, Math.ceil(columns / 2)), Math.max(1, Math.ceil(rows / 2))\r\n    ];\r\n}\r\nexport function getPackedRGBAArraySizeFromMatrixShape(rows, columns) {\r\n    const [w, h] = getPackedMatrixTextureShapeWidthHeight(rows, columns);\r\n    return w * h * 4;\r\n}\r\nexport function getTextureConfig(\r\n// tslint:disable-next-line:no-any\r\ngl, textureHalfFloatExtension) {\r\n    // tslint:disable-next-line:no-any\r\n    const glany = gl;\r\n    let internalFormatFloat;\r\n    let internalFormatHalfFloat;\r\n    let internalFormatPackedHalfFloat;\r\n    let internalFormatPackedFloat;\r\n    let textureFormatFloat;\r\n    let downloadTextureFormat;\r\n    let downloadUnpackNumChannels;\r\n    let defaultNumChannels;\r\n    let textureTypeHalfFloat;\r\n    let textureTypeFloat;\r\n    if (env().getNumber('WEBGL_VERSION') === 2) {\r\n        internalFormatFloat = glany.R32F;\r\n        internalFormatHalfFloat = glany.R16F;\r\n        internalFormatPackedHalfFloat = glany.RGBA16F;\r\n        internalFormatPackedFloat = glany.RGBA32F;\r\n        textureFormatFloat = glany.RED;\r\n        downloadUnpackNumChannels = 4;\r\n        defaultNumChannels = 1;\r\n        textureTypeHalfFloat = glany.HALF_FLOAT;\r\n        textureTypeFloat = glany.FLOAT;\r\n    }\r\n    else {\r\n        internalFormatFloat = gl.RGBA;\r\n        internalFormatHalfFloat = gl.RGBA;\r\n        internalFormatPackedHalfFloat = gl.RGBA;\r\n        internalFormatPackedFloat = glany.RGBA;\r\n        textureFormatFloat = gl.RGBA;\r\n        downloadUnpackNumChannels = 4;\r\n        defaultNumChannels = 4;\r\n        textureTypeHalfFloat = textureHalfFloatExtension != null ?\r\n            textureHalfFloatExtension.HALF_FLOAT_OES :\r\n            null;\r\n        textureTypeFloat = gl.FLOAT;\r\n    }\r\n    downloadTextureFormat = gl.RGBA;\r\n    return {\r\n        internalFormatFloat,\r\n        internalFormatHalfFloat,\r\n        internalFormatPackedHalfFloat,\r\n        internalFormatPackedFloat,\r\n        textureFormatFloat,\r\n        downloadTextureFormat,\r\n        downloadUnpackNumChannels,\r\n        defaultNumChannels,\r\n        textureTypeHalfFloat,\r\n        textureTypeFloat\r\n    };\r\n}\r\n//# sourceMappingURL=tex_util.js.map"]},"metadata":{},"sourceType":"module"}