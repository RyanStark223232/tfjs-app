{"ast":null,"code":"import _classCallCheck from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nexport var UnaryOpProgram = function UnaryOpProgram(aShape, opSnippet) {\n  _classCallCheck(this, UnaryOpProgram);\n\n  this.variableNames = ['A'];\n  this.outputShape = aShape;\n  this.userCode = \"\\n      float unaryOperation(float x) {\\n        \".concat(opSnippet, \"\\n      }\\n\\n      void main() {\\n        float x = getAAtOutCoords();\\n        float y = unaryOperation(x);\\n\\n        setOutput(y);\\n      }\\n    \");\n};\nvar CHECK_NAN_SNIPPET = \"if (isnan(x)) return x;\";\nexport var LINEAR = \"return x;\";\nexport var ABS = \"return abs(x);\";\nexport var RELU = CHECK_NAN_SNIPPET + \"\\n  return (x < 0.0) ? 0.0 : x;\\n\";\nexport var RELU6 = CHECK_NAN_SNIPPET + \"\\n  return (x < 0.0) ? 0.0 : min(6.0, x);\\n\";\nexport var ELU = \"return (x >= 0.0) ? x : (exp(x) - 1.0);\";\nexport var SELU = \"\\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\\n  // see: https://arxiv.org/abs/1706.02515\\n  float scaleAlpha = \".concat(backend_util.SELU_SCALEALPHA, \";\\n  float scale = \").concat(backend_util.SELU_SCALE, \";\\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\\n\");\nexport function STEP() {\n  var alpha = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.0;\n  return CHECK_NAN_SNIPPET + \"\\n    return x > 0.0 ? 1.0 : float(\".concat(alpha, \");\\n  \");\n}\nexport var NEG = \"return -x;\";\nexport var CEIL = \"return ceil(x);\";\nexport var FLOOR = \"return floor(x);\";\nexport var SIGN = \"\\n  if (isnan(x)) { return 0.0; }\\n  return sign(x);\\n\";\nexport var IS_NAN = \"return float(isnan(x));\";\nexport var IS_INF = \"return float(isinf(x));\";\nexport var IS_FINITE = \"return float(!isnan(x) && !isinf(x));\";\nexport var ROUND = \"\\n  // OpenGL ES does not support round function.\\n  // The algorithm is based on banker's rounding.\\n  float base = floor(x);\\n  if ((x - base) < 0.5) {\\n    return floor(x);\\n  } else if ((x - base) > 0.5) {\\n    return ceil(x);\\n  } else {\\n    if (mod(base, 2.0) == 0.0) {\\n      return base;\\n    } else {\\n      return base + 1.0;\\n    }\\n  }\\n\";\nexport var EXP = \"return exp(x);\";\nexport var EXPM1 = \"return exp(x) - 1.0;\";\nexport var LOG = \"if (x < 0.0) return NAN;\\n  return log(x);\";\nexport var LOG1P = \"return log(1.0 + x);\";\nexport var SQRT = \"return sqrt(x);\";\nexport var RSQRT = \"return inversesqrt(x);\";\nexport var SIGMOID = \"return 1.0 / (1.0 + exp(-1.0 * x));\";\n/**\r\n * mirrors the implementation of tf.nn.softplus: https://goo.gl/vkcvwX\r\n *\r\n * epsilon is the difference between 1.0 and the next representable\r\n * float. For a single precision 32 bit float this should be 2^-23, see:\r\n * https://math.byu.edu/~schow/work/IEEEFloatingPoint.htm\r\n *\r\n * too_large = (x > -threshold) is value above which exp(x) may overflow\r\n * but softplus(x) == x is within machine epsilon\r\n *\r\n * too_small = (x < threshold) is value below which exp(x) may underflow,\r\n * but softplus(x) == exp(x) is within machine epsilon.\r\n */\n\nexport var SOFTPLUS = \"\\n  float epsilon = 1.1920928955078125e-7;\\n  float threshold = log(epsilon) + 2.0;\\n\\n  bool too_large = x > -threshold;\\n  bool too_small = x < threshold;\\n\\n  float result;\\n  float exp_x = exp(x);\\n\\n  if (too_large){\\n    result = x;\\n  }\\n  else if (too_small){\\n    result = exp_x;\\n  }\\n  else{\\n    result = log(exp_x + 1.0);\\n  }\\n  return result;\\n\";\nexport var ASIN = CHECK_NAN_SNIPPET + \"\\n  if (abs(x) > 1.) {\\n    return NAN;\\n  }\\n  return asin(x);\\n\";\nexport var ACOS = CHECK_NAN_SNIPPET + \"\\n  if (abs(x) > 1.) {\\n    return NAN;\\n  }\\n  return acos(x);\\n\";\nexport var ATAN = CHECK_NAN_SNIPPET + \"\\n  return atan(x);\\n\";\nexport var SINH = \"\\n  float e2x = exp(x);\\n  return (e2x - 1.0 / e2x) / 2.0;\\n\";\nexport var COSH = \"\\n  float e2x = exp(-x);\\n  return (e2x + 1.0 / e2x) / 2.0;\\n\";\nexport var TANH = \"\\n  float e2x = exp(-2.0 * abs(x));\\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\\n\";\nexport var ASINH = CHECK_NAN_SNIPPET + \"return log(x + sqrt(x * x + 1.0));\";\nexport var ACOSH = CHECK_NAN_SNIPPET + \"\\n  if (x < 1.0) return NAN;\\n  return log(x + sqrt(x * x - 1.0));\";\nexport var ATANH = CHECK_NAN_SNIPPET + \"\\n  if ((x < -1.0) || (x > 1.0)) return NAN;\\n  return (log(1.0 + x) - log(1.0 - x)) / 2.0;\";\nexport var ERF = \"\\n  // Error function is calculated approximately with elementary function.\\n  // See \\\"Handbook of Mathematical Functions with Formulas,\\n  // Graphs, and Mathematical Tables\\\", Abramowitz and Stegun.\\n  float p = \".concat(backend_util.ERF_P, \";\\n  float a1 = \").concat(backend_util.ERF_A1, \";\\n  float a2 = \").concat(backend_util.ERF_A2, \";\\n  float a3 = \").concat(backend_util.ERF_A3, \";\\n  float a4 = \").concat(backend_util.ERF_A4, \";\\n  float a5 = \").concat(backend_util.ERF_A5, \";\\n\\n  float sign = sign(x);\\n  x = abs(x);\\n  float t = 1.0 / (1.0 + p * x);\\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\\n\");\nexport var RECIPROCAL = \"return 1.0 / x;\";\nexport var LOGICAL_NOT = \"return float(!(x >= 1.0));\";\nexport var TO_INT = \"return float(int(x));\";\nexport var CLONE = 'return x;';","map":{"version":3,"sources":["../src/unaryop_gpu.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,YAAR,QAA2B,uBAA3B;AAGA,WAAa,cAAb,GAKE,wBAAY,MAAZ,EAA8B,SAA9B,EAA+C;AAAA;;AAJ/C,OAAA,aAAA,GAAgB,CAAC,GAAD,CAAhB;AAKE,OAAK,WAAL,GAAmB,MAAnB;AACA,OAAK,QAAL,8DAEM,SAFN;AAYD,CAnBH;AAsBA,IAAM,iBAAiB,4BAAvB;AAEA,OAAO,IAAM,MAAM,cAAZ;AAEP,OAAO,IAAM,GAAG,mBAAT;AAEP,OAAO,IAAM,IAAI,GAAG,iBAAiB,sCAA9B;AAIP,OAAO,IAAM,KAAK,GAAG,iBAAiB,gDAA/B;AAIP,OAAO,IAAM,GAAG,4CAAT;AAEP,OAAO,IAAM,IAAI,uJAGM,YAAY,CAAC,eAHnB,gCAIC,YAAY,CAAC,UAJd,wEAAV;AAQP,OAAM,SAAU,IAAV,GAA0B;AAAA,MAAX,KAAW,uEAAH,GAAG;AAC9B,SAAO,iBAAiB,gDACS,KADT,WAAxB;AAGD;AAED,OAAO,IAAM,GAAG,eAAT;AAEP,OAAO,IAAM,IAAI,oBAAV;AAEP,OAAO,IAAM,KAAK,qBAAX;AAEP,OAAO,IAAM,IAAI,2DAAV;AAKP,OAAO,IAAM,MAAM,4BAAZ;AAEP,OAAO,IAAM,MAAM,4BAAZ;AAEP,OAAO,IAAM,SAAS,0CAAf;AAEP,OAAO,IAAM,KAAK,mWAAX;AAiBP,OAAO,IAAM,GAAG,mBAAT;AAEP,OAAO,IAAM,KAAK,yBAAX;AAEP,OAAO,IAAM,GAAG,+CAAT;AAGP,OAAO,IAAM,KAAK,yBAAX;AAEP,OAAO,IAAM,IAAI,oBAAV;AAEP,OAAO,IAAM,KAAK,2BAAX;AAEP,OAAO,IAAM,OAAO,wCAAb;AAEP;;;;;;;;;;;;AAYG;;AACH,OAAO,IAAM,QAAQ,4WAAd;AAsBP,OAAO,IAAM,IAAI,GAAG,iBAAiB,sEAA9B;AAOP,OAAO,IAAM,IAAI,GAAG,iBAAiB,sEAA9B;AAOP,OAAO,IAAM,IAAI,GAAG,iBAAiB,0BAA9B;AAIP,OAAO,IAAM,IAAI,iEAAV;AAKP,OAAO,IAAM,IAAI,kEAAV;AAKP,OAAO,IAAM,IAAI,yFAAV;AAKP,OAAO,IAAM,KAAK,GAAG,iBAAiB,uCAA/B;AAEP,OAAO,IAAM,KAAK,GAAG,iBAAiB,uEAA/B;AAIP,OAAO,IAAM,KAAK,GAAG,iBAAiB,gGAA/B;AAIP,OAAO,IAAM,GAAG,oOAIF,YAAY,CAAC,KAJX,6BAKD,YAAY,CAAC,MALZ,6BAMD,YAAY,CAAC,MANZ,6BAOD,YAAY,CAAC,MAPZ,6BAQD,YAAY,CAAC,MARZ,6BASD,YAAY,CAAC,MATZ,mKAAT;AAiBP,OAAO,IAAM,UAAU,oBAAhB;AAEP,OAAO,IAAM,WAAW,+BAAjB;AAEP,OAAO,IAAM,MAAM,0BAAZ;AAEP,OAAO,IAAM,KAAK,GAAG,WAAd","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2017 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { backend_util } from '@tensorflow/tfjs-core';\r\nexport class UnaryOpProgram {\r\n    constructor(aShape, opSnippet) {\r\n        this.variableNames = ['A'];\r\n        this.outputShape = aShape;\r\n        this.userCode = `\r\n      float unaryOperation(float x) {\r\n        ${opSnippet}\r\n      }\r\n\r\n      void main() {\r\n        float x = getAAtOutCoords();\r\n        float y = unaryOperation(x);\r\n\r\n        setOutput(y);\r\n      }\r\n    `;\r\n    }\r\n}\r\nconst CHECK_NAN_SNIPPET = `if (isnan(x)) return x;`;\r\nexport const LINEAR = `return x;`;\r\nexport const ABS = `return abs(x);`;\r\nexport const RELU = CHECK_NAN_SNIPPET + `\r\n  return (x < 0.0) ? 0.0 : x;\r\n`;\r\nexport const RELU6 = CHECK_NAN_SNIPPET + `\r\n  return (x < 0.0) ? 0.0 : min(6.0, x);\r\n`;\r\nexport const ELU = `return (x >= 0.0) ? x : (exp(x) - 1.0);`;\r\nexport const SELU = `\r\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\r\n  // see: https://arxiv.org/abs/1706.02515\r\n  float scaleAlpha = ${backend_util.SELU_SCALEALPHA};\r\n  float scale = ${backend_util.SELU_SCALE};\r\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\r\n`;\r\nexport function STEP(alpha = 0.0) {\r\n    return CHECK_NAN_SNIPPET + `\r\n    return x > 0.0 ? 1.0 : float(${alpha});\r\n  `;\r\n}\r\nexport const NEG = `return -x;`;\r\nexport const CEIL = `return ceil(x);`;\r\nexport const FLOOR = `return floor(x);`;\r\nexport const SIGN = `\r\n  if (isnan(x)) { return 0.0; }\r\n  return sign(x);\r\n`;\r\nexport const IS_NAN = `return float(isnan(x));`;\r\nexport const IS_INF = `return float(isinf(x));`;\r\nexport const IS_FINITE = `return float(!isnan(x) && !isinf(x));`;\r\nexport const ROUND = `\r\n  // OpenGL ES does not support round function.\r\n  // The algorithm is based on banker's rounding.\r\n  float base = floor(x);\r\n  if ((x - base) < 0.5) {\r\n    return floor(x);\r\n  } else if ((x - base) > 0.5) {\r\n    return ceil(x);\r\n  } else {\r\n    if (mod(base, 2.0) == 0.0) {\r\n      return base;\r\n    } else {\r\n      return base + 1.0;\r\n    }\r\n  }\r\n`;\r\nexport const EXP = `return exp(x);`;\r\nexport const EXPM1 = `return exp(x) - 1.0;`;\r\nexport const LOG = `if (x < 0.0) return NAN;\r\n  return log(x);`;\r\nexport const LOG1P = `return log(1.0 + x);`;\r\nexport const SQRT = `return sqrt(x);`;\r\nexport const RSQRT = `return inversesqrt(x);`;\r\nexport const SIGMOID = `return 1.0 / (1.0 + exp(-1.0 * x));`;\r\n/**\r\n * mirrors the implementation of tf.nn.softplus: https://goo.gl/vkcvwX\r\n *\r\n * epsilon is the difference between 1.0 and the next representable\r\n * float. For a single precision 32 bit float this should be 2^-23, see:\r\n * https://math.byu.edu/~schow/work/IEEEFloatingPoint.htm\r\n *\r\n * too_large = (x > -threshold) is value above which exp(x) may overflow\r\n * but softplus(x) == x is within machine epsilon\r\n *\r\n * too_small = (x < threshold) is value below which exp(x) may underflow,\r\n * but softplus(x) == exp(x) is within machine epsilon.\r\n */\r\nexport const SOFTPLUS = `\r\n  float epsilon = 1.1920928955078125e-7;\r\n  float threshold = log(epsilon) + 2.0;\r\n\r\n  bool too_large = x > -threshold;\r\n  bool too_small = x < threshold;\r\n\r\n  float result;\r\n  float exp_x = exp(x);\r\n\r\n  if (too_large){\r\n    result = x;\r\n  }\r\n  else if (too_small){\r\n    result = exp_x;\r\n  }\r\n  else{\r\n    result = log(exp_x + 1.0);\r\n  }\r\n  return result;\r\n`;\r\nexport const ASIN = CHECK_NAN_SNIPPET + `\r\n  if (abs(x) > 1.) {\r\n    return NAN;\r\n  }\r\n  return asin(x);\r\n`;\r\nexport const ACOS = CHECK_NAN_SNIPPET + `\r\n  if (abs(x) > 1.) {\r\n    return NAN;\r\n  }\r\n  return acos(x);\r\n`;\r\nexport const ATAN = CHECK_NAN_SNIPPET + `\r\n  return atan(x);\r\n`;\r\nexport const SINH = `\r\n  float e2x = exp(x);\r\n  return (e2x - 1.0 / e2x) / 2.0;\r\n`;\r\nexport const COSH = `\r\n  float e2x = exp(-x);\r\n  return (e2x + 1.0 / e2x) / 2.0;\r\n`;\r\nexport const TANH = `\r\n  float e2x = exp(-2.0 * abs(x));\r\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\r\n`;\r\nexport const ASINH = CHECK_NAN_SNIPPET + `return log(x + sqrt(x * x + 1.0));`;\r\nexport const ACOSH = CHECK_NAN_SNIPPET + `\r\n  if (x < 1.0) return NAN;\r\n  return log(x + sqrt(x * x - 1.0));`;\r\nexport const ATANH = CHECK_NAN_SNIPPET + `\r\n  if ((x < -1.0) || (x > 1.0)) return NAN;\r\n  return (log(1.0 + x) - log(1.0 - x)) / 2.0;`;\r\nexport const ERF = `\r\n  // Error function is calculated approximately with elementary function.\r\n  // See \"Handbook of Mathematical Functions with Formulas,\r\n  // Graphs, and Mathematical Tables\", Abramowitz and Stegun.\r\n  float p = ${backend_util.ERF_P};\r\n  float a1 = ${backend_util.ERF_A1};\r\n  float a2 = ${backend_util.ERF_A2};\r\n  float a3 = ${backend_util.ERF_A3};\r\n  float a4 = ${backend_util.ERF_A4};\r\n  float a5 = ${backend_util.ERF_A5};\r\n\r\n  float sign = sign(x);\r\n  x = abs(x);\r\n  float t = 1.0 / (1.0 + p * x);\r\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\r\n`;\r\nexport const RECIPROCAL = `return 1.0 / x;`;\r\nexport const LOGICAL_NOT = `return float(!(x >= 1.0));`;\r\nexport const TO_INT = `return float(int(x));`;\r\nexport const CLONE = 'return x;';\r\n//# sourceMappingURL=unaryop_gpu.js.map"]},"metadata":{},"sourceType":"module"}