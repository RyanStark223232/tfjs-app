{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\n\n/**\r\n * Shuffles the array in-place using Fisher-Yates algorithm.\r\n *\r\n * ```js\r\n * const a = [1, 2, 3, 4, 5];\r\n * tf.util.shuffle(a);\r\n * console.log(a);\r\n * ```\r\n *\r\n * @param array The array to shuffle in-place.\r\n *\r\n * @doc {heading: 'Util', namespace: 'util'}\r\n */\n// tslint:disable-next-line:no-any\nexport function shuffle(array) {\n  var counter = array.length;\n  var temp = 0;\n  var index = 0; // While there are elements in the array\n\n  while (counter > 0) {\n    // Pick a random index\n    index = Math.random() * counter | 0; // Decrease counter by 1\n\n    counter--; // And swap the last element with it\n\n    temp = array[counter];\n    array[counter] = array[index];\n    array[index] = temp;\n  }\n}\n/** Clamps a value to a specified range. */\n\nexport function clamp(min, x, max) {\n  return Math.max(min, Math.min(x, max));\n}\nexport function nearestLargerEven(val) {\n  return val % 2 === 0 ? val : val + 1;\n}\nexport function sum(arr) {\n  var sum = 0;\n\n  for (var i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n\n  return sum;\n}\n/**\r\n * Returns a sample from a uniform [a, b) distribution.\r\n *\r\n * @param a The minimum support (inclusive).\r\n * @param b The maximum support (exclusive).\r\n * @return A pseudorandom number on the half-open interval [a,b).\r\n */\n\nexport function randUniform(a, b) {\n  var r = Math.random();\n  return b * r + (1 - r) * a;\n}\n/** Returns the squared Euclidean distance between two vectors. */\n\nexport function distSquared(a, b) {\n  var result = 0;\n\n  for (var i = 0; i < a.length; i++) {\n    var diff = Number(a[i]) - Number(b[i]);\n    result += diff * diff;\n  }\n\n  return result;\n}\n/**\r\n * Asserts that the expression is true. Otherwise throws an error with the\r\n * provided message.\r\n *\r\n * ```js\r\n * const x = 2;\r\n * tf.util.assert(x === 2, 'x is not 2');\r\n * ```\r\n *\r\n * @param expr The expression to assert (as a boolean).\r\n * @param msg A function that returns the message to report when throwing an\r\n *     error. We use a function for performance reasons.\r\n *\r\n * @doc {heading: 'Util', namespace: 'util'}\r\n */\n\nexport function assert(expr, msg) {\n  if (!expr) {\n    throw new Error(typeof msg === 'string' ? msg : msg());\n  }\n}\nexport function assertShapesMatch(shapeA, shapeB) {\n  var errorMessagePrefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  assert(arraysEqual(shapeA, shapeB), function () {\n    return errorMessagePrefix + \" Shapes \".concat(shapeA, \" and \").concat(shapeB, \" must match\");\n  });\n}\nexport function assertNonNull(a) {\n  assert(a != null, function () {\n    return \"The input to the tensor constructor must be a non-null value.\";\n  });\n} // NOTE: We explicitly type out what T extends instead of any so that\n// util.flatten on a nested array of number doesn't try to infer T as a\n// number[][], causing us to explicitly type util.flatten<number>().\n\n/**\r\n *  Flattens an arbitrarily nested array.\r\n *\r\n * ```js\r\n * const a = [[1, 2], [3, 4], [5, [6, [7]]]];\r\n * const flat = tf.util.flatten(a);\r\n * console.log(flat);\r\n * ```\r\n *\r\n *  @param arr The nested array to flatten.\r\n *  @param result The destination array which holds the elements.\r\n *  @param skipTypedArray If true, avoids flattening the typed arrays. Defaults\r\n *      to false.\r\n *\r\n * @doc {heading: 'Util', namespace: 'util'}\r\n */\n\nexport function flatten(arr) {\n  var result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var skipTypedArray = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  if (result == null) {\n    result = [];\n  }\n\n  if (Array.isArray(arr) || isTypedArray(arr) && !skipTypedArray) {\n    for (var i = 0; i < arr.length; ++i) {\n      flatten(arr[i], result, skipTypedArray);\n    }\n  } else {\n    result.push(arr);\n  }\n\n  return result;\n}\n/**\r\n * Returns the size (number of elements) of the tensor given its shape.\r\n *\r\n * ```js\r\n * const shape = [3, 4, 2];\r\n * const size = tf.util.sizeFromShape(shape);\r\n * console.log(size);\r\n * ```\r\n *\r\n * @doc {heading: 'Util', namespace: 'util'}\r\n */\n\nexport function sizeFromShape(shape) {\n  if (shape.length === 0) {\n    // Scalar.\n    return 1;\n  }\n\n  var size = shape[0];\n\n  for (var i = 1; i < shape.length; i++) {\n    size *= shape[i];\n  }\n\n  return size;\n}\nexport function isScalarShape(shape) {\n  return shape.length === 0;\n}\nexport function arraysEqual(n1, n2) {\n  if (n1 === n2) {\n    return true;\n  }\n\n  if (n1 == null || n2 == null) {\n    return false;\n  }\n\n  if (n1.length !== n2.length) {\n    return false;\n  }\n\n  for (var i = 0; i < n1.length; i++) {\n    if (n1[i] !== n2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\nexport function isInt(a) {\n  return a % 1 === 0;\n}\nexport function tanh(x) {\n  // tslint:disable-next-line:no-any\n  if (Math.tanh != null) {\n    // tslint:disable-next-line:no-any\n    return Math.tanh(x);\n  }\n\n  if (x === Infinity) {\n    return 1;\n  } else if (x === -Infinity) {\n    return -1;\n  } else {\n    var e2x = Math.exp(2 * x);\n    return (e2x - 1) / (e2x + 1);\n  }\n}\nexport function sizeToSquarishShape(size) {\n  var width = Math.ceil(Math.sqrt(size));\n  return [width, Math.ceil(size / width)];\n}\n/**\r\n * Creates a new array with randomized indicies to a given quantity.\r\n *\r\n * ```js\r\n * const randomTen = tf.util.createShuffledIndices(10);\r\n * console.log(randomTen);\r\n * ```\r\n *\r\n * @param number Quantity of how many shuffled indicies to create.\r\n *\r\n * @doc {heading: 'Util', namespace: 'util'}\r\n */\n\nexport function createShuffledIndices(n) {\n  var shuffledIndices = new Uint32Array(n);\n\n  for (var i = 0; i < n; ++i) {\n    shuffledIndices[i] = i;\n  }\n\n  shuffle(shuffledIndices);\n  return shuffledIndices;\n}\nexport function rightPad(a, size) {\n  if (size <= a.length) {\n    return a;\n  }\n\n  return a + ' '.repeat(size - a.length);\n}\nexport function repeatedTry(checkFn) {\n  var delayFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (counter) {\n    return 0;\n  };\n  var maxCounter = arguments.length > 2 ? arguments[2] : undefined;\n  return new Promise(function (resolve, reject) {\n    var tryCount = 0;\n\n    var tryFn = function tryFn() {\n      if (checkFn()) {\n        resolve();\n        return;\n      }\n\n      tryCount++;\n      var nextBackoff = delayFn(tryCount);\n\n      if (maxCounter != null && tryCount >= maxCounter) {\n        reject();\n        return;\n      }\n\n      setTimeout(tryFn, nextBackoff);\n    };\n\n    tryFn();\n  });\n}\n/**\r\n * Given the full size of the array and a shape that may contain -1 as the\r\n * implicit dimension, returns the inferred shape where -1 is replaced.\r\n * E.g. For shape=[2, -1, 3] and size=24, it will return [2, 4, 3].\r\n *\r\n * @param shape The shape, which may contain -1 in some dimension.\r\n * @param size The full size (number of elements) of the array.\r\n * @return The inferred shape where -1 is replaced with the inferred size.\r\n */\n\nexport function inferFromImplicitShape(shape, size) {\n  var shapeProd = 1;\n  var implicitIdx = -1;\n\n  for (var i = 0; i < shape.length; ++i) {\n    if (shape[i] >= 0) {\n      shapeProd *= shape[i];\n    } else if (shape[i] === -1) {\n      if (implicitIdx !== -1) {\n        throw Error(\"Shapes can only have 1 implicit size. \" + \"Found -1 at dim \".concat(implicitIdx, \" and dim \").concat(i));\n      }\n\n      implicitIdx = i;\n    } else if (shape[i] < 0) {\n      throw Error(\"Shapes can not be < 0. Found \".concat(shape[i], \" at dim \").concat(i));\n    }\n  }\n\n  if (implicitIdx === -1) {\n    if (size > 0 && size !== shapeProd) {\n      throw Error(\"Size(\".concat(size, \") must match the product of shape \").concat(shape));\n    }\n\n    return shape;\n  }\n\n  if (shapeProd === 0) {\n    throw Error(\"Cannot infer the missing size in [\".concat(shape, \"] when \") + \"there are 0 elements\");\n  }\n\n  if (size % shapeProd !== 0) {\n    throw Error(\"The implicit shape can't be a fractional number. \" + \"Got \".concat(size, \" / \").concat(shapeProd));\n  }\n\n  var newShape = shape.slice();\n  newShape[implicitIdx] = size / shapeProd;\n  return newShape;\n}\nexport function parseAxisParam(axis, shape) {\n  var rank = shape.length; // Normalize input\n\n  axis = axis == null ? shape.map(function (s, i) {\n    return i;\n  }) : [].concat(axis); // Check for valid range\n\n  assert(axis.every(function (ax) {\n    return ax >= -rank && ax < rank;\n  }), function () {\n    return \"All values in axis param must be in range [-\".concat(rank, \", \").concat(rank, \") but \") + \"got axis \".concat(axis);\n  }); // Check for only integers\n\n  assert(axis.every(function (ax) {\n    return isInt(ax);\n  }), function () {\n    return \"All values in axis param must be integers but \" + \"got axis \".concat(axis);\n  }); // Handle negative axis.\n\n  return axis.map(function (a) {\n    return a < 0 ? rank + a : a;\n  });\n}\n/** Reduces the shape by removing all dimensions of shape 1. */\n\nexport function squeezeShape(shape, axis) {\n  var newShape = [];\n  var keptDims = [];\n  var isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;\n  var axes = axis == null || isEmptyArray ? null : parseAxisParam(axis, shape).sort();\n  var j = 0;\n\n  for (var i = 0; i < shape.length; ++i) {\n    if (axes != null) {\n      if (axes[j] === i && shape[i] !== 1) {\n        throw new Error(\"Can't squeeze axis \".concat(i, \" since its dim '\").concat(shape[i], \"' is not 1\"));\n      }\n\n      if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {\n        newShape.push(shape[i]);\n        keptDims.push(i);\n      }\n\n      if (axes[j] <= i) {\n        j++;\n      }\n    }\n\n    if (shape[i] !== 1) {\n      newShape.push(shape[i]);\n      keptDims.push(i);\n    }\n  }\n\n  return {\n    newShape: newShape,\n    keptDims: keptDims\n  };\n}\nexport function getTypedArrayFromDType(dtype, size) {\n  var values = null;\n\n  if (dtype == null || dtype === 'float32') {\n    values = new Float32Array(size);\n  } else if (dtype === 'int32') {\n    values = new Int32Array(size);\n  } else if (dtype === 'bool') {\n    values = new Uint8Array(size);\n  } else {\n    throw new Error(\"Unknown data type \".concat(dtype));\n  }\n\n  return values;\n}\nexport function getArrayFromDType(dtype, size) {\n  var values = null;\n\n  if (dtype == null || dtype === 'float32') {\n    values = new Float32Array(size);\n  } else if (dtype === 'int32') {\n    values = new Int32Array(size);\n  } else if (dtype === 'bool') {\n    values = new Uint8Array(size);\n  } else if (dtype === 'string') {\n    values = new Array(size);\n  } else {\n    throw new Error(\"Unknown data type \".concat(dtype));\n  }\n\n  return values;\n}\nexport function checkConversionForErrors(vals, dtype) {\n  for (var i = 0; i < vals.length; i++) {\n    var num = vals[i];\n\n    if (isNaN(num) || !isFinite(num)) {\n      throw Error(\"A tensor of type \".concat(dtype, \" being uploaded contains \").concat(num, \".\"));\n    }\n  }\n}\n/** Returns true if the dtype is valid. */\n\nexport function isValidDtype(dtype) {\n  return dtype === 'bool' || dtype === 'complex64' || dtype === 'float32' || dtype === 'int32' || dtype === 'string';\n}\n/**\r\n * Returns true if the new type can't encode the old type without loss of\r\n * precision.\r\n */\n\nexport function hasEncodingLoss(oldType, newType) {\n  if (newType === 'complex64') {\n    return false;\n  }\n\n  if (newType === 'float32' && oldType !== 'complex64') {\n    return false;\n  }\n\n  if (newType === 'int32' && oldType !== 'float32' && oldType !== 'complex64') {\n    return false;\n  }\n\n  if (newType === 'bool' && oldType === 'bool') {\n    return false;\n  }\n\n  return true;\n}\nexport function isTypedArray(a) {\n  return a instanceof Float32Array || a instanceof Int32Array || a instanceof Uint8Array;\n}\nexport function bytesPerElement(dtype) {\n  if (dtype === 'float32' || dtype === 'int32') {\n    return 4;\n  } else if (dtype === 'complex64') {\n    return 8;\n  } else if (dtype === 'bool') {\n    return 1;\n  } else {\n    throw new Error(\"Unknown dtype \".concat(dtype));\n  }\n}\n/**\r\n * Returns the approximate number of bytes allocated in the string array - 2\r\n * bytes per character. Computing the exact bytes for a native string in JS is\r\n * not possible since it depends on the encoding of the html page that serves\r\n * the website.\r\n */\n\nexport function bytesFromStringArray(arr) {\n  if (arr == null) {\n    return 0;\n  }\n\n  var bytes = 0;\n  arr.forEach(function (x) {\n    return bytes += x.length;\n  });\n  return bytes;\n}\n/** Returns true if the value is a string. */\n\nexport function isString(value) {\n  return typeof value === 'string' || value instanceof String;\n}\nexport function isBoolean(value) {\n  return typeof value === 'boolean';\n}\nexport function isNumber(value) {\n  return typeof value === 'number';\n}\nexport function inferDtype(values) {\n  if (Array.isArray(values)) {\n    return inferDtype(values[0]);\n  }\n\n  if (values instanceof Float32Array) {\n    return 'float32';\n  } else if (values instanceof Int32Array || values instanceof Uint8Array) {\n    return 'int32';\n  } else if (isNumber(values)) {\n    return 'float32';\n  } else if (isString(values)) {\n    return 'string';\n  } else if (isBoolean(values)) {\n    return 'bool';\n  }\n\n  return 'float32';\n}\nexport function isFunction(f) {\n  return !!(f && f.constructor && f.call && f.apply);\n}\nexport function nearestDivisor(size, start) {\n  for (var i = start; i < size; ++i) {\n    if (size % i === 0) {\n      return i;\n    }\n  }\n\n  return size;\n}\nexport function computeStrides(shape) {\n  var rank = shape.length;\n\n  if (rank < 2) {\n    return [];\n  } // Last dimension has implicit stride of 1, thus having D-1 (instead of D)\n  // strides.\n\n\n  var strides = new Array(rank - 1);\n  strides[rank - 2] = shape[rank - 1];\n\n  for (var i = rank - 3; i >= 0; --i) {\n    strides[i] = strides[i + 1] * shape[i + 1];\n  }\n\n  return strides;\n}\n\nfunction createNestedArray(offset, shape, a) {\n  var ret = new Array();\n\n  if (shape.length === 1) {\n    var d = shape[0];\n\n    for (var i = 0; i < d; i++) {\n      ret[i] = a[offset + i];\n    }\n  } else {\n    var _d = shape[0];\n    var rest = shape.slice(1);\n    var len = rest.reduce(function (acc, c) {\n      return acc * c;\n    });\n\n    for (var _i = 0; _i < _d; _i++) {\n      ret[_i] = createNestedArray(offset + _i * len, rest, a);\n    }\n  }\n\n  return ret;\n} // Provide a nested array of TypedArray in given shape.\n\n\nexport function toNestedArray(shape, a) {\n  if (shape.length === 0) {\n    // Scalar type should return a single number.\n    return a[0];\n  }\n\n  var size = shape.reduce(function (acc, c) {\n    return acc * c;\n  });\n\n  if (size === 0) {\n    // A tensor with shape zero should be turned into empty list.\n    return [];\n  }\n\n  if (size !== a.length) {\n    throw new Error(\"[\".concat(shape, \"] does not match the input size \").concat(a.length, \".\"));\n  }\n\n  return createNestedArray(0, shape, a);\n}\nexport function makeOnesTypedArray(size, dtype) {\n  var array = makeZerosTypedArray(size, dtype);\n\n  for (var i = 0; i < array.length; i++) {\n    array[i] = 1;\n  }\n\n  return array;\n}\nexport function makeZerosTypedArray(size, dtype) {\n  if (dtype == null || dtype === 'float32' || dtype === 'complex64') {\n    return new Float32Array(size);\n  } else if (dtype === 'int32') {\n    return new Int32Array(size);\n  } else if (dtype === 'bool') {\n    return new Uint8Array(size);\n  } else {\n    throw new Error(\"Unknown data type \".concat(dtype));\n  }\n}\n/**\r\n * Make nested `TypedArray` filled with zeros.\r\n * @param shape The shape information for the nested array.\r\n * @param dtype dtype of the array element.\r\n */\n\nexport function makeZerosNestedTypedArray(shape, dtype) {\n  var size = shape.reduce(function (prev, curr) {\n    return prev * curr;\n  }, 1);\n\n  if (dtype == null || dtype === 'float32') {\n    return toNestedArray(shape, new Float32Array(size));\n  } else if (dtype === 'int32') {\n    return toNestedArray(shape, new Int32Array(size));\n  } else if (dtype === 'bool') {\n    return toNestedArray(shape, new Uint8Array(size));\n  } else {\n    throw new Error(\"Unknown data type \".concat(dtype));\n  }\n}\nexport function assertNonNegativeIntegerDimensions(shape) {\n  shape.forEach(function (dimSize) {\n    assert(Number.isInteger(dimSize) && dimSize >= 0, function () {\n      return \"Tensor must have a shape comprised of positive integers but got \" + \"shape [\".concat(shape, \"].\");\n    });\n  });\n}\n/**\r\n * Computes flat index for a given location (multidimentionsal index) in a\r\n * Tensor/multidimensional array.\r\n *\r\n * @param locs Location in the tensor.\r\n * @param rank Rank of the tensor.\r\n * @param strides Tensor strides.\r\n */\n\nexport function locToIndex(locs, rank, strides) {\n  if (rank === 0) {\n    return 0;\n  } else if (rank === 1) {\n    return locs[0];\n  }\n\n  var index = locs[locs.length - 1];\n\n  for (var i = 0; i < locs.length - 1; ++i) {\n    index += strides[i] * locs[i];\n  }\n\n  return index;\n}\n/**\r\n * Computes the location (multidimensional index) in a tensor/multidimentional\r\n * array for a given flat index.\r\n *\r\n * @param index Index in flat array.\r\n * @param rank Rank of tensor.\r\n * @param strides Strides of tensor.\r\n */\n\nexport function indexToLoc(index, rank, strides) {\n  if (rank === 0) {\n    return [];\n  } else if (rank === 1) {\n    return [index];\n  }\n\n  var locs = new Array(rank);\n\n  for (var i = 0; i < locs.length - 1; ++i) {\n    locs[i] = Math.floor(index / strides[i]);\n    index -= locs[i] * strides[i];\n  }\n\n  locs[locs.length - 1] = index;\n  return locs;\n}\n/**\r\n * This method asserts whether an object is a Promise instance.\r\n * @param object\r\n */\n// tslint:disable-next-line: no-any\n\nexport function isPromise(object) {\n  //  We chose to not use 'obj instanceOf Promise' for two reasons:\n  //  1. It only reliably works for es6 Promise, not other Promise\n  //  implementations.\n  //  2. It doesn't work with framework that uses zone.js. zone.js monkey patch\n  //  the async calls, so it is possible the obj (patched) is comparing to a\n  //  pre-patched Promise.\n  return object && object.then && typeof object.then === 'function';\n}","map":{"version":3,"sources":["../src/util_base.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\n/**\r\n * Shuffles the array in-place using Fisher-Yates algorithm.\r\n *\r\n * ```js\r\n * const a = [1, 2, 3, 4, 5];\r\n * tf.util.shuffle(a);\r\n * console.log(a);\r\n * ```\r\n *\r\n * @param array The array to shuffle in-place.\r\n *\r\n * @doc {heading: 'Util', namespace: 'util'}\r\n */\r\n// tslint:disable-next-line:no-any\r\nexport function shuffle(array) {\r\n    let counter = array.length;\r\n    let temp = 0;\r\n    let index = 0;\r\n    // While there are elements in the array\r\n    while (counter > 0) {\r\n        // Pick a random index\r\n        index = (Math.random() * counter) | 0;\r\n        // Decrease counter by 1\r\n        counter--;\r\n        // And swap the last element with it\r\n        temp = array[counter];\r\n        array[counter] = array[index];\r\n        array[index] = temp;\r\n    }\r\n}\r\n/** Clamps a value to a specified range. */\r\nexport function clamp(min, x, max) {\r\n    return Math.max(min, Math.min(x, max));\r\n}\r\nexport function nearestLargerEven(val) {\r\n    return val % 2 === 0 ? val : val + 1;\r\n}\r\nexport function sum(arr) {\r\n    let sum = 0;\r\n    for (let i = 0; i < arr.length; i++) {\r\n        sum += arr[i];\r\n    }\r\n    return sum;\r\n}\r\n/**\r\n * Returns a sample from a uniform [a, b) distribution.\r\n *\r\n * @param a The minimum support (inclusive).\r\n * @param b The maximum support (exclusive).\r\n * @return A pseudorandom number on the half-open interval [a,b).\r\n */\r\nexport function randUniform(a, b) {\r\n    const r = Math.random();\r\n    return (b * r) + (1 - r) * a;\r\n}\r\n/** Returns the squared Euclidean distance between two vectors. */\r\nexport function distSquared(a, b) {\r\n    let result = 0;\r\n    for (let i = 0; i < a.length; i++) {\r\n        const diff = Number(a[i]) - Number(b[i]);\r\n        result += diff * diff;\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Asserts that the expression is true. Otherwise throws an error with the\r\n * provided message.\r\n *\r\n * ```js\r\n * const x = 2;\r\n * tf.util.assert(x === 2, 'x is not 2');\r\n * ```\r\n *\r\n * @param expr The expression to assert (as a boolean).\r\n * @param msg A function that returns the message to report when throwing an\r\n *     error. We use a function for performance reasons.\r\n *\r\n * @doc {heading: 'Util', namespace: 'util'}\r\n */\r\nexport function assert(expr, msg) {\r\n    if (!expr) {\r\n        throw new Error(typeof msg === 'string' ? msg : msg());\r\n    }\r\n}\r\nexport function assertShapesMatch(shapeA, shapeB, errorMessagePrefix = '') {\r\n    assert(arraysEqual(shapeA, shapeB), () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\r\n}\r\nexport function assertNonNull(a) {\r\n    assert(a != null, () => `The input to the tensor constructor must be a non-null value.`);\r\n}\r\n// NOTE: We explicitly type out what T extends instead of any so that\r\n// util.flatten on a nested array of number doesn't try to infer T as a\r\n// number[][], causing us to explicitly type util.flatten<number>().\r\n/**\r\n *  Flattens an arbitrarily nested array.\r\n *\r\n * ```js\r\n * const a = [[1, 2], [3, 4], [5, [6, [7]]]];\r\n * const flat = tf.util.flatten(a);\r\n * console.log(flat);\r\n * ```\r\n *\r\n *  @param arr The nested array to flatten.\r\n *  @param result The destination array which holds the elements.\r\n *  @param skipTypedArray If true, avoids flattening the typed arrays. Defaults\r\n *      to false.\r\n *\r\n * @doc {heading: 'Util', namespace: 'util'}\r\n */\r\nexport function flatten(arr, result = [], skipTypedArray = false) {\r\n    if (result == null) {\r\n        result = [];\r\n    }\r\n    if (Array.isArray(arr) || isTypedArray(arr) && !skipTypedArray) {\r\n        for (let i = 0; i < arr.length; ++i) {\r\n            flatten(arr[i], result, skipTypedArray);\r\n        }\r\n    }\r\n    else {\r\n        result.push(arr);\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Returns the size (number of elements) of the tensor given its shape.\r\n *\r\n * ```js\r\n * const shape = [3, 4, 2];\r\n * const size = tf.util.sizeFromShape(shape);\r\n * console.log(size);\r\n * ```\r\n *\r\n * @doc {heading: 'Util', namespace: 'util'}\r\n */\r\nexport function sizeFromShape(shape) {\r\n    if (shape.length === 0) {\r\n        // Scalar.\r\n        return 1;\r\n    }\r\n    let size = shape[0];\r\n    for (let i = 1; i < shape.length; i++) {\r\n        size *= shape[i];\r\n    }\r\n    return size;\r\n}\r\nexport function isScalarShape(shape) {\r\n    return shape.length === 0;\r\n}\r\nexport function arraysEqual(n1, n2) {\r\n    if (n1 === n2) {\r\n        return true;\r\n    }\r\n    if (n1 == null || n2 == null) {\r\n        return false;\r\n    }\r\n    if (n1.length !== n2.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < n1.length; i++) {\r\n        if (n1[i] !== n2[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nexport function isInt(a) {\r\n    return a % 1 === 0;\r\n}\r\nexport function tanh(x) {\r\n    // tslint:disable-next-line:no-any\r\n    if (Math.tanh != null) {\r\n        // tslint:disable-next-line:no-any\r\n        return Math.tanh(x);\r\n    }\r\n    if (x === Infinity) {\r\n        return 1;\r\n    }\r\n    else if (x === -Infinity) {\r\n        return -1;\r\n    }\r\n    else {\r\n        const e2x = Math.exp(2 * x);\r\n        return (e2x - 1) / (e2x + 1);\r\n    }\r\n}\r\nexport function sizeToSquarishShape(size) {\r\n    const width = Math.ceil(Math.sqrt(size));\r\n    return [width, Math.ceil(size / width)];\r\n}\r\n/**\r\n * Creates a new array with randomized indicies to a given quantity.\r\n *\r\n * ```js\r\n * const randomTen = tf.util.createShuffledIndices(10);\r\n * console.log(randomTen);\r\n * ```\r\n *\r\n * @param number Quantity of how many shuffled indicies to create.\r\n *\r\n * @doc {heading: 'Util', namespace: 'util'}\r\n */\r\nexport function createShuffledIndices(n) {\r\n    const shuffledIndices = new Uint32Array(n);\r\n    for (let i = 0; i < n; ++i) {\r\n        shuffledIndices[i] = i;\r\n    }\r\n    shuffle(shuffledIndices);\r\n    return shuffledIndices;\r\n}\r\nexport function rightPad(a, size) {\r\n    if (size <= a.length) {\r\n        return a;\r\n    }\r\n    return a + ' '.repeat(size - a.length);\r\n}\r\nexport function repeatedTry(checkFn, delayFn = (counter) => 0, maxCounter) {\r\n    return new Promise((resolve, reject) => {\r\n        let tryCount = 0;\r\n        const tryFn = () => {\r\n            if (checkFn()) {\r\n                resolve();\r\n                return;\r\n            }\r\n            tryCount++;\r\n            const nextBackoff = delayFn(tryCount);\r\n            if (maxCounter != null && tryCount >= maxCounter) {\r\n                reject();\r\n                return;\r\n            }\r\n            setTimeout(tryFn, nextBackoff);\r\n        };\r\n        tryFn();\r\n    });\r\n}\r\n/**\r\n * Given the full size of the array and a shape that may contain -1 as the\r\n * implicit dimension, returns the inferred shape where -1 is replaced.\r\n * E.g. For shape=[2, -1, 3] and size=24, it will return [2, 4, 3].\r\n *\r\n * @param shape The shape, which may contain -1 in some dimension.\r\n * @param size The full size (number of elements) of the array.\r\n * @return The inferred shape where -1 is replaced with the inferred size.\r\n */\r\nexport function inferFromImplicitShape(shape, size) {\r\n    let shapeProd = 1;\r\n    let implicitIdx = -1;\r\n    for (let i = 0; i < shape.length; ++i) {\r\n        if (shape[i] >= 0) {\r\n            shapeProd *= shape[i];\r\n        }\r\n        else if (shape[i] === -1) {\r\n            if (implicitIdx !== -1) {\r\n                throw Error(`Shapes can only have 1 implicit size. ` +\r\n                    `Found -1 at dim ${implicitIdx} and dim ${i}`);\r\n            }\r\n            implicitIdx = i;\r\n        }\r\n        else if (shape[i] < 0) {\r\n            throw Error(`Shapes can not be < 0. Found ${shape[i]} at dim ${i}`);\r\n        }\r\n    }\r\n    if (implicitIdx === -1) {\r\n        if (size > 0 && size !== shapeProd) {\r\n            throw Error(`Size(${size}) must match the product of shape ${shape}`);\r\n        }\r\n        return shape;\r\n    }\r\n    if (shapeProd === 0) {\r\n        throw Error(`Cannot infer the missing size in [${shape}] when ` +\r\n            `there are 0 elements`);\r\n    }\r\n    if (size % shapeProd !== 0) {\r\n        throw Error(`The implicit shape can't be a fractional number. ` +\r\n            `Got ${size} / ${shapeProd}`);\r\n    }\r\n    const newShape = shape.slice();\r\n    newShape[implicitIdx] = size / shapeProd;\r\n    return newShape;\r\n}\r\nexport function parseAxisParam(axis, shape) {\r\n    const rank = shape.length;\r\n    // Normalize input\r\n    axis = axis == null ? shape.map((s, i) => i) : [].concat(axis);\r\n    // Check for valid range\r\n    assert(axis.every(ax => ax >= -rank && ax < rank), () => `All values in axis param must be in range [-${rank}, ${rank}) but ` +\r\n        `got axis ${axis}`);\r\n    // Check for only integers\r\n    assert(axis.every(ax => isInt(ax)), () => `All values in axis param must be integers but ` +\r\n        `got axis ${axis}`);\r\n    // Handle negative axis.\r\n    return axis.map(a => a < 0 ? rank + a : a);\r\n}\r\n/** Reduces the shape by removing all dimensions of shape 1. */\r\nexport function squeezeShape(shape, axis) {\r\n    const newShape = [];\r\n    const keptDims = [];\r\n    const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;\r\n    const axes = (axis == null || isEmptyArray) ?\r\n        null :\r\n        parseAxisParam(axis, shape).sort();\r\n    let j = 0;\r\n    for (let i = 0; i < shape.length; ++i) {\r\n        if (axes != null) {\r\n            if (axes[j] === i && shape[i] !== 1) {\r\n                throw new Error(`Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);\r\n            }\r\n            if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {\r\n                newShape.push(shape[i]);\r\n                keptDims.push(i);\r\n            }\r\n            if (axes[j] <= i) {\r\n                j++;\r\n            }\r\n        }\r\n        if (shape[i] !== 1) {\r\n            newShape.push(shape[i]);\r\n            keptDims.push(i);\r\n        }\r\n    }\r\n    return { newShape, keptDims };\r\n}\r\nexport function getTypedArrayFromDType(dtype, size) {\r\n    let values = null;\r\n    if (dtype == null || dtype === 'float32') {\r\n        values = new Float32Array(size);\r\n    }\r\n    else if (dtype === 'int32') {\r\n        values = new Int32Array(size);\r\n    }\r\n    else if (dtype === 'bool') {\r\n        values = new Uint8Array(size);\r\n    }\r\n    else {\r\n        throw new Error(`Unknown data type ${dtype}`);\r\n    }\r\n    return values;\r\n}\r\nexport function getArrayFromDType(dtype, size) {\r\n    let values = null;\r\n    if (dtype == null || dtype === 'float32') {\r\n        values = new Float32Array(size);\r\n    }\r\n    else if (dtype === 'int32') {\r\n        values = new Int32Array(size);\r\n    }\r\n    else if (dtype === 'bool') {\r\n        values = new Uint8Array(size);\r\n    }\r\n    else if (dtype === 'string') {\r\n        values = new Array(size);\r\n    }\r\n    else {\r\n        throw new Error(`Unknown data type ${dtype}`);\r\n    }\r\n    return values;\r\n}\r\nexport function checkConversionForErrors(vals, dtype) {\r\n    for (let i = 0; i < vals.length; i++) {\r\n        const num = vals[i];\r\n        if (isNaN(num) || !isFinite(num)) {\r\n            throw Error(`A tensor of type ${dtype} being uploaded contains ${num}.`);\r\n        }\r\n    }\r\n}\r\n/** Returns true if the dtype is valid. */\r\nexport function isValidDtype(dtype) {\r\n    return dtype === 'bool' || dtype === 'complex64' || dtype === 'float32' ||\r\n        dtype === 'int32' || dtype === 'string';\r\n}\r\n/**\r\n * Returns true if the new type can't encode the old type without loss of\r\n * precision.\r\n */\r\nexport function hasEncodingLoss(oldType, newType) {\r\n    if (newType === 'complex64') {\r\n        return false;\r\n    }\r\n    if (newType === 'float32' && oldType !== 'complex64') {\r\n        return false;\r\n    }\r\n    if (newType === 'int32' && oldType !== 'float32' && oldType !== 'complex64') {\r\n        return false;\r\n    }\r\n    if (newType === 'bool' && oldType === 'bool') {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\nexport function isTypedArray(a) {\r\n    return a instanceof Float32Array || a instanceof Int32Array ||\r\n        a instanceof Uint8Array;\r\n}\r\nexport function bytesPerElement(dtype) {\r\n    if (dtype === 'float32' || dtype === 'int32') {\r\n        return 4;\r\n    }\r\n    else if (dtype === 'complex64') {\r\n        return 8;\r\n    }\r\n    else if (dtype === 'bool') {\r\n        return 1;\r\n    }\r\n    else {\r\n        throw new Error(`Unknown dtype ${dtype}`);\r\n    }\r\n}\r\n/**\r\n * Returns the approximate number of bytes allocated in the string array - 2\r\n * bytes per character. Computing the exact bytes for a native string in JS is\r\n * not possible since it depends on the encoding of the html page that serves\r\n * the website.\r\n */\r\nexport function bytesFromStringArray(arr) {\r\n    if (arr == null) {\r\n        return 0;\r\n    }\r\n    let bytes = 0;\r\n    arr.forEach(x => bytes += x.length);\r\n    return bytes;\r\n}\r\n/** Returns true if the value is a string. */\r\nexport function isString(value) {\r\n    return typeof value === 'string' || value instanceof String;\r\n}\r\nexport function isBoolean(value) {\r\n    return typeof value === 'boolean';\r\n}\r\nexport function isNumber(value) {\r\n    return typeof value === 'number';\r\n}\r\nexport function inferDtype(values) {\r\n    if (Array.isArray(values)) {\r\n        return inferDtype(values[0]);\r\n    }\r\n    if (values instanceof Float32Array) {\r\n        return 'float32';\r\n    }\r\n    else if (values instanceof Int32Array || values instanceof Uint8Array) {\r\n        return 'int32';\r\n    }\r\n    else if (isNumber(values)) {\r\n        return 'float32';\r\n    }\r\n    else if (isString(values)) {\r\n        return 'string';\r\n    }\r\n    else if (isBoolean(values)) {\r\n        return 'bool';\r\n    }\r\n    return 'float32';\r\n}\r\nexport function isFunction(f) {\r\n    return !!(f && f.constructor && f.call && f.apply);\r\n}\r\nexport function nearestDivisor(size, start) {\r\n    for (let i = start; i < size; ++i) {\r\n        if (size % i === 0) {\r\n            return i;\r\n        }\r\n    }\r\n    return size;\r\n}\r\nexport function computeStrides(shape) {\r\n    const rank = shape.length;\r\n    if (rank < 2) {\r\n        return [];\r\n    }\r\n    // Last dimension has implicit stride of 1, thus having D-1 (instead of D)\r\n    // strides.\r\n    const strides = new Array(rank - 1);\r\n    strides[rank - 2] = shape[rank - 1];\r\n    for (let i = rank - 3; i >= 0; --i) {\r\n        strides[i] = strides[i + 1] * shape[i + 1];\r\n    }\r\n    return strides;\r\n}\r\nfunction createNestedArray(offset, shape, a) {\r\n    const ret = new Array();\r\n    if (shape.length === 1) {\r\n        const d = shape[0];\r\n        for (let i = 0; i < d; i++) {\r\n            ret[i] = a[offset + i];\r\n        }\r\n    }\r\n    else {\r\n        const d = shape[0];\r\n        const rest = shape.slice(1);\r\n        const len = rest.reduce((acc, c) => acc * c);\r\n        for (let i = 0; i < d; i++) {\r\n            ret[i] = createNestedArray(offset + i * len, rest, a);\r\n        }\r\n    }\r\n    return ret;\r\n}\r\n// Provide a nested array of TypedArray in given shape.\r\nexport function toNestedArray(shape, a) {\r\n    if (shape.length === 0) {\r\n        // Scalar type should return a single number.\r\n        return a[0];\r\n    }\r\n    const size = shape.reduce((acc, c) => acc * c);\r\n    if (size === 0) {\r\n        // A tensor with shape zero should be turned into empty list.\r\n        return [];\r\n    }\r\n    if (size !== a.length) {\r\n        throw new Error(`[${shape}] does not match the input size ${a.length}.`);\r\n    }\r\n    return createNestedArray(0, shape, a);\r\n}\r\nexport function makeOnesTypedArray(size, dtype) {\r\n    const array = makeZerosTypedArray(size, dtype);\r\n    for (let i = 0; i < array.length; i++) {\r\n        array[i] = 1;\r\n    }\r\n    return array;\r\n}\r\nexport function makeZerosTypedArray(size, dtype) {\r\n    if (dtype == null || dtype === 'float32' || dtype === 'complex64') {\r\n        return new Float32Array(size);\r\n    }\r\n    else if (dtype === 'int32') {\r\n        return new Int32Array(size);\r\n    }\r\n    else if (dtype === 'bool') {\r\n        return new Uint8Array(size);\r\n    }\r\n    else {\r\n        throw new Error(`Unknown data type ${dtype}`);\r\n    }\r\n}\r\n/**\r\n * Make nested `TypedArray` filled with zeros.\r\n * @param shape The shape information for the nested array.\r\n * @param dtype dtype of the array element.\r\n */\r\nexport function makeZerosNestedTypedArray(shape, dtype) {\r\n    const size = shape.reduce((prev, curr) => prev * curr, 1);\r\n    if (dtype == null || dtype === 'float32') {\r\n        return toNestedArray(shape, new Float32Array(size));\r\n    }\r\n    else if (dtype === 'int32') {\r\n        return toNestedArray(shape, new Int32Array(size));\r\n    }\r\n    else if (dtype === 'bool') {\r\n        return toNestedArray(shape, new Uint8Array(size));\r\n    }\r\n    else {\r\n        throw new Error(`Unknown data type ${dtype}`);\r\n    }\r\n}\r\nexport function assertNonNegativeIntegerDimensions(shape) {\r\n    shape.forEach(dimSize => {\r\n        assert(Number.isInteger(dimSize) && dimSize >= 0, () => `Tensor must have a shape comprised of positive integers but got ` +\r\n            `shape [${shape}].`);\r\n    });\r\n}\r\n/**\r\n * Computes flat index for a given location (multidimentionsal index) in a\r\n * Tensor/multidimensional array.\r\n *\r\n * @param locs Location in the tensor.\r\n * @param rank Rank of the tensor.\r\n * @param strides Tensor strides.\r\n */\r\nexport function locToIndex(locs, rank, strides) {\r\n    if (rank === 0) {\r\n        return 0;\r\n    }\r\n    else if (rank === 1) {\r\n        return locs[0];\r\n    }\r\n    let index = locs[locs.length - 1];\r\n    for (let i = 0; i < locs.length - 1; ++i) {\r\n        index += strides[i] * locs[i];\r\n    }\r\n    return index;\r\n}\r\n/**\r\n * Computes the location (multidimensional index) in a tensor/multidimentional\r\n * array for a given flat index.\r\n *\r\n * @param index Index in flat array.\r\n * @param rank Rank of tensor.\r\n * @param strides Strides of tensor.\r\n */\r\nexport function indexToLoc(index, rank, strides) {\r\n    if (rank === 0) {\r\n        return [];\r\n    }\r\n    else if (rank === 1) {\r\n        return [index];\r\n    }\r\n    const locs = new Array(rank);\r\n    for (let i = 0; i < locs.length - 1; ++i) {\r\n        locs[i] = Math.floor(index / strides[i]);\r\n        index -= locs[i] * strides[i];\r\n    }\r\n    locs[locs.length - 1] = index;\r\n    return locs;\r\n}\r\n/**\r\n * This method asserts whether an object is a Promise instance.\r\n * @param object\r\n */\r\n// tslint:disable-next-line: no-any\r\nexport function isPromise(object) {\r\n    //  We chose to not use 'obj instanceOf Promise' for two reasons:\r\n    //  1. It only reliably works for es6 Promise, not other Promise\r\n    //  implementations.\r\n    //  2. It doesn't work with framework that uses zone.js. zone.js monkey patch\r\n    //  the async calls, so it is possible the obj (patched) is comparing to a\r\n    //  pre-patched Promise.\r\n    return object && object.then && typeof object.then === 'function';\r\n}\r\n//# sourceMappingURL=util_base.js.map"]},"metadata":{},"sourceType":"module"}