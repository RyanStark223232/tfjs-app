{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { inferShape } from '../tensor_util_env';\nimport { assertNonNull } from '../util';\nimport { makeTensor } from './tensor_ops_util';\n/**\r\n * Creates rank-1 `tf.Tensor` with the provided values, shape and dtype.\r\n *\r\n * The same functionality can be achieved with `tf.tensor`, but in general\r\n * we recommend using `tf.tensor1d` as it makes the code more readable.\r\n *\r\n * ```js\r\n * tf.tensor1d([1, 2, 3]).print();\r\n * ```\r\n *\r\n * @param values The values of the tensor. Can be array of numbers,\r\n *     or a `TypedArray`.\r\n * @param dtype The data type.\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Creation'}\r\n */\n\nexport function tensor1d(values, dtype) {\n  assertNonNull(values);\n  const inferredShape = inferShape(values, dtype);\n\n  if (inferredShape.length !== 1) {\n    throw new Error('tensor1d() requires values to be a flat/TypedArray');\n  }\n\n  const shape = null;\n  return makeTensor(values, shape, inferredShape, dtype);\n}","map":{"version":3,"sources":["../../src/ops/tensor1d.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAGH,SAAQ,UAAR,QAAyB,oBAAzB;AAGA,SAAQ,aAAR,QAA4B,SAA5B;AACA,SAAQ,UAAR,QAAyB,mBAAzB;AAEA;;;;;;;;;;;;;;;AAeG;;AACH,OAAM,SAAU,QAAV,CAAmB,MAAnB,EAAyC,KAAzC,EAAyD;AAC7D,EAAA,aAAa,CAAC,MAAD,CAAb;AACA,QAAM,aAAa,GAAG,UAAU,CAAC,MAAD,EAAS,KAAT,CAAhC;;AACA,MAAI,aAAa,CAAC,MAAd,KAAyB,CAA7B,EAAgC;AAC9B,UAAM,IAAI,KAAJ,CAAU,oDAAV,CAAN;AACD;;AACD,QAAM,KAAK,GAAa,IAAxB;AACA,SAAO,UAAU,CAAC,MAAD,EAAS,KAAT,EAAgB,aAAhB,EAA+B,KAA/B,CAAjB;AACD","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { inferShape } from '../tensor_util_env';\r\nimport { assertNonNull } from '../util';\r\nimport { makeTensor } from './tensor_ops_util';\r\n/**\r\n * Creates rank-1 `tf.Tensor` with the provided values, shape and dtype.\r\n *\r\n * The same functionality can be achieved with `tf.tensor`, but in general\r\n * we recommend using `tf.tensor1d` as it makes the code more readable.\r\n *\r\n * ```js\r\n * tf.tensor1d([1, 2, 3]).print();\r\n * ```\r\n *\r\n * @param values The values of the tensor. Can be array of numbers,\r\n *     or a `TypedArray`.\r\n * @param dtype The data type.\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Creation'}\r\n */\r\nexport function tensor1d(values, dtype) {\r\n    assertNonNull(values);\r\n    const inferredShape = inferShape(values, dtype);\r\n    if (inferredShape.length !== 1) {\r\n        throw new Error('tensor1d() requires values to be a flat/TypedArray');\r\n    }\r\n    const shape = null;\r\n    return makeTensor(values, shape, inferredShape, dtype);\r\n}\r\n//# sourceMappingURL=tensor1d.js.map"]},"metadata":{},"sourceType":"module"}