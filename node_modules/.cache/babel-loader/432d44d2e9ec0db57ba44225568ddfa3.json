{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _regeneratorRuntime from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _asyncToGenerator from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport '../flags';\nimport { env } from '../environment';\nimport { getModelArtifactsInfoForJSON } from './io_utils';\nimport { IORouterRegistry } from './router_registry';\nvar DATABASE_NAME = 'tensorflowjs';\nvar DATABASE_VERSION = 1; // Model data and ModelArtifactsInfo (metadata) are stored in two separate\n// stores for efficient access of the list of stored models and their metadata.\n// 1. The object store for model data: topology, weights and weight manifests.\n\nvar MODEL_STORE_NAME = 'models_store'; // 2. The object store for ModelArtifactsInfo, including meta-information such\n//    as the type of topology (JSON vs binary), byte size of the topology, byte\n//    size of the weights, etc.\n\nvar INFO_STORE_NAME = 'model_info_store';\n/**\r\n * Delete the entire database for tensorflow.js, including the models store.\r\n */\n\nexport function deleteDatabase() {\n  return _deleteDatabase.apply(this, arguments);\n}\n\nfunction _deleteDatabase() {\n  _deleteDatabase = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n    var idbFactory;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            idbFactory = getIndexedDBFactory();\n            return _context5.abrupt(\"return\", new Promise(function (resolve, reject) {\n              var deleteRequest = idbFactory.deleteDatabase(DATABASE_NAME);\n\n              deleteRequest.onsuccess = function () {\n                return resolve();\n              };\n\n              deleteRequest.onerror = function (error) {\n                return reject(error);\n              };\n            }));\n\n          case 2:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return _deleteDatabase.apply(this, arguments);\n}\n\nfunction getIndexedDBFactory() {\n  if (!env().getBool('IS_BROWSER')) {\n    // TODO(cais): Add more info about what IOHandler subtypes are available.\n    //   Maybe point to a doc page on the web and/or automatically determine\n    //   the available IOHandlers and print them in the error message.\n    throw new Error('Failed to obtain IndexedDB factory because the current environment' + 'is not a web browser.');\n  } // tslint:disable-next-line:no-any\n\n\n  var theWindow = typeof window === 'undefined' ? self : window;\n  var factory = theWindow.indexedDB || theWindow.mozIndexedDB || theWindow.webkitIndexedDB || theWindow.msIndexedDB || theWindow.shimIndexedDB;\n\n  if (factory == null) {\n    throw new Error('The current browser does not appear to support IndexedDB.');\n  }\n\n  return factory;\n}\n\nfunction setUpDatabase(openRequest) {\n  var db = openRequest.result;\n  db.createObjectStore(MODEL_STORE_NAME, {\n    keyPath: 'modelPath'\n  });\n  db.createObjectStore(INFO_STORE_NAME, {\n    keyPath: 'modelPath'\n  });\n}\n/**\r\n * IOHandler subclass: Browser IndexedDB.\r\n *\r\n * See the doc string of `browserIndexedDB` for more details.\r\n */\n\n\nexport var BrowserIndexedDB = /*#__PURE__*/function () {\n  function BrowserIndexedDB(modelPath) {\n    _classCallCheck(this, BrowserIndexedDB);\n\n    this.indexedDB = getIndexedDBFactory();\n\n    if (modelPath == null || !modelPath) {\n      throw new Error('For IndexedDB, modelPath must not be null, undefined or empty.');\n    }\n\n    this.modelPath = modelPath;\n  }\n\n  _createClass(BrowserIndexedDB, [{\n    key: \"save\",\n    value: function () {\n      var _save = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(modelArtifacts) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(modelArtifacts.modelTopology instanceof ArrayBuffer)) {\n                  _context.next = 2;\n                  break;\n                }\n\n                throw new Error('BrowserLocalStorage.save() does not support saving model topology ' + 'in binary formats yet.');\n\n              case 2:\n                return _context.abrupt(\"return\", this.databaseAction(this.modelPath, modelArtifacts));\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function save(_x) {\n        return _save.apply(this, arguments);\n      }\n\n      return save;\n    }()\n  }, {\n    key: \"load\",\n    value: function () {\n      var _load = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", this.databaseAction(this.modelPath));\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function load() {\n        return _load.apply(this, arguments);\n      }\n\n      return load;\n    }()\n    /**\r\n     * Perform database action to put model artifacts into or read model artifacts\r\n     * from IndexedDB object store.\r\n     *\r\n     * Whether the action is put or get depends on whether `modelArtifacts` is\r\n     * specified. If it is specified, the action will be put; otherwise the action\r\n     * will be get.\r\n     *\r\n     * @param modelPath A unique string path for the model.\r\n     * @param modelArtifacts If specified, it will be the model artifacts to be\r\n     *   stored in IndexedDB.\r\n     * @returns A `Promise` of `SaveResult`, if the action is put, or a `Promise`\r\n     *   of `ModelArtifacts`, if the action is get.\r\n     */\n\n  }, {\n    key: \"databaseAction\",\n    value: function databaseAction(modelPath, modelArtifacts) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        var openRequest = _this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n\n        openRequest.onupgradeneeded = function () {\n          return setUpDatabase(openRequest);\n        };\n\n        openRequest.onsuccess = function () {\n          var db = openRequest.result;\n\n          if (modelArtifacts == null) {\n            // Read model out from object store.\n            var modelTx = db.transaction(MODEL_STORE_NAME, 'readonly');\n            var modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n            var getRequest = modelStore.get(_this.modelPath);\n\n            getRequest.onsuccess = function () {\n              if (getRequest.result == null) {\n                db.close();\n                return reject(new Error(\"Cannot find model with path '\".concat(_this.modelPath, \"' \") + \"in IndexedDB.\"));\n              } else {\n                resolve(getRequest.result.modelArtifacts);\n              }\n            };\n\n            getRequest.onerror = function (error) {\n              db.close();\n              return reject(getRequest.error);\n            };\n\n            modelTx.oncomplete = function () {\n              return db.close();\n            };\n          } else {\n            // Put model into object store.\n            var modelArtifactsInfo = getModelArtifactsInfoForJSON(modelArtifacts); // First, put ModelArtifactsInfo into info store.\n\n            var infoTx = db.transaction(INFO_STORE_NAME, 'readwrite');\n            var infoStore = infoTx.objectStore(INFO_STORE_NAME);\n            var putInfoRequest = infoStore.put({\n              modelPath: _this.modelPath,\n              modelArtifactsInfo: modelArtifactsInfo\n            });\n\n            var _modelTx;\n\n            putInfoRequest.onsuccess = function () {\n              // Second, put model data into model store.\n              _modelTx = db.transaction(MODEL_STORE_NAME, 'readwrite');\n\n              var modelStore = _modelTx.objectStore(MODEL_STORE_NAME);\n\n              var putModelRequest = modelStore.put({\n                modelPath: _this.modelPath,\n                modelArtifacts: modelArtifacts,\n                modelArtifactsInfo: modelArtifactsInfo\n              });\n\n              putModelRequest.onsuccess = function () {\n                return resolve({\n                  modelArtifactsInfo: modelArtifactsInfo\n                });\n              };\n\n              putModelRequest.onerror = function (error) {\n                // If the put-model request fails, roll back the info entry as\n                // well.\n                infoStore = infoTx.objectStore(INFO_STORE_NAME);\n                var deleteInfoRequest = infoStore.delete(_this.modelPath);\n\n                deleteInfoRequest.onsuccess = function () {\n                  db.close();\n                  return reject(putModelRequest.error);\n                };\n\n                deleteInfoRequest.onerror = function (error) {\n                  db.close();\n                  return reject(putModelRequest.error);\n                };\n              };\n            };\n\n            putInfoRequest.onerror = function (error) {\n              db.close();\n              return reject(putInfoRequest.error);\n            };\n\n            infoTx.oncomplete = function () {\n              if (_modelTx == null) {\n                db.close();\n              } else {\n                _modelTx.oncomplete = function () {\n                  return db.close();\n                };\n              }\n            };\n          }\n        };\n\n        openRequest.onerror = function (error) {\n          return reject(openRequest.error);\n        };\n      });\n    }\n  }]);\n\n  return BrowserIndexedDB;\n}();\nBrowserIndexedDB.URL_SCHEME = 'indexeddb://';\nexport var indexedDBRouter = function indexedDBRouter(url) {\n  if (!env().getBool('IS_BROWSER')) {\n    return null;\n  } else {\n    if (!Array.isArray(url) && url.startsWith(BrowserIndexedDB.URL_SCHEME)) {\n      return browserIndexedDB(url.slice(BrowserIndexedDB.URL_SCHEME.length));\n    } else {\n      return null;\n    }\n  }\n};\nIORouterRegistry.registerSaveRouter(indexedDBRouter);\nIORouterRegistry.registerLoadRouter(indexedDBRouter);\n/**\r\n * Creates a browser IndexedDB IOHandler for saving and loading models.\r\n *\r\n * ```js\r\n * const model = tf.sequential();\r\n * model.add(\r\n *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));\r\n *\r\n * const saveResult = await model.save('indexeddb://MyModel'));\r\n * console.log(saveResult);\r\n * ```\r\n *\r\n * @param modelPath A unique identifier for the model to be saved. Must be a\r\n *   non-empty string.\r\n * @returns An instance of `BrowserIndexedDB` (sublcass of `IOHandler`),\r\n *   which can be used with, e.g., `tf.Model.save`.\r\n */\n\nexport function browserIndexedDB(modelPath) {\n  return new BrowserIndexedDB(modelPath);\n}\n\nfunction maybeStripScheme(key) {\n  return key.startsWith(BrowserIndexedDB.URL_SCHEME) ? key.slice(BrowserIndexedDB.URL_SCHEME.length) : key;\n}\n\nexport var BrowserIndexedDBManager = /*#__PURE__*/function () {\n  function BrowserIndexedDBManager() {\n    _classCallCheck(this, BrowserIndexedDBManager);\n\n    this.indexedDB = getIndexedDBFactory();\n  }\n\n  _createClass(BrowserIndexedDBManager, [{\n    key: \"listModels\",\n    value: function () {\n      var _listModels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var _this2 = this;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                return _context3.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  var openRequest = _this2.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n\n                  openRequest.onupgradeneeded = function () {\n                    return setUpDatabase(openRequest);\n                  };\n\n                  openRequest.onsuccess = function () {\n                    var db = openRequest.result;\n                    var tx = db.transaction(INFO_STORE_NAME, 'readonly');\n                    var store = tx.objectStore(INFO_STORE_NAME); // tslint:disable:max-line-length\n                    // Need to cast `store` as `any` here because TypeScript's DOM\n                    // library does not have the `getAll()` method even though the\n                    // method is supported in the latest version of most mainstream\n                    // browsers:\n                    // https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/getAll\n                    // tslint:enable:max-line-length\n                    // tslint:disable-next-line:no-any\n\n                    var getAllInfoRequest = store.getAll();\n\n                    getAllInfoRequest.onsuccess = function () {\n                      var out = {};\n\n                      var _iterator = _createForOfIteratorHelper(getAllInfoRequest.result),\n                          _step;\n\n                      try {\n                        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                          var item = _step.value;\n                          out[item.modelPath] = item.modelArtifactsInfo;\n                        }\n                      } catch (err) {\n                        _iterator.e(err);\n                      } finally {\n                        _iterator.f();\n                      }\n\n                      resolve(out);\n                    };\n\n                    getAllInfoRequest.onerror = function (error) {\n                      db.close();\n                      return reject(getAllInfoRequest.error);\n                    };\n\n                    tx.oncomplete = function () {\n                      return db.close();\n                    };\n                  };\n\n                  openRequest.onerror = function (error) {\n                    return reject(openRequest.error);\n                  };\n                }));\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function listModels() {\n        return _listModels.apply(this, arguments);\n      }\n\n      return listModels;\n    }()\n  }, {\n    key: \"removeModel\",\n    value: function () {\n      var _removeModel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(path) {\n        var _this3 = this;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                path = maybeStripScheme(path);\n                return _context4.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  var openRequest = _this3.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n\n                  openRequest.onupgradeneeded = function () {\n                    return setUpDatabase(openRequest);\n                  };\n\n                  openRequest.onsuccess = function () {\n                    var db = openRequest.result;\n                    var infoTx = db.transaction(INFO_STORE_NAME, 'readwrite');\n                    var infoStore = infoTx.objectStore(INFO_STORE_NAME);\n                    var getInfoRequest = infoStore.get(path);\n                    var modelTx;\n\n                    getInfoRequest.onsuccess = function () {\n                      if (getInfoRequest.result == null) {\n                        db.close();\n                        return reject(new Error(\"Cannot find model with path '\".concat(path, \"' \") + \"in IndexedDB.\"));\n                      } else {\n                        // First, delete the entry in the info store.\n                        var deleteInfoRequest = infoStore.delete(path);\n\n                        var deleteModelData = function deleteModelData() {\n                          // Second, delete the entry in the model store.\n                          modelTx = db.transaction(MODEL_STORE_NAME, 'readwrite');\n                          var modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n                          var deleteModelRequest = modelStore.delete(path);\n\n                          deleteModelRequest.onsuccess = function () {\n                            return resolve(getInfoRequest.result.modelArtifactsInfo);\n                          };\n\n                          deleteModelRequest.onerror = function (error) {\n                            return reject(getInfoRequest.error);\n                          };\n                        }; // Proceed with deleting model data regardless of whether deletion\n                        // of info data succeeds or not.\n\n\n                        deleteInfoRequest.onsuccess = deleteModelData;\n\n                        deleteInfoRequest.onerror = function (error) {\n                          deleteModelData();\n                          db.close();\n                          return reject(getInfoRequest.error);\n                        };\n                      }\n                    };\n\n                    getInfoRequest.onerror = function (error) {\n                      db.close();\n                      return reject(getInfoRequest.error);\n                    };\n\n                    infoTx.oncomplete = function () {\n                      if (modelTx == null) {\n                        db.close();\n                      } else {\n                        modelTx.oncomplete = function () {\n                          return db.close();\n                        };\n                      }\n                    };\n                  };\n\n                  openRequest.onerror = function (error) {\n                    return reject(openRequest.error);\n                  };\n                }));\n\n              case 2:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function removeModel(_x2) {\n        return _removeModel.apply(this, arguments);\n      }\n\n      return removeModel;\n    }()\n  }]);\n\n  return BrowserIndexedDBManager;\n}();","map":{"version":3,"sources":["../../src/io/indexed_db.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport '../flags';\r\nimport { env } from '../environment';\r\nimport { getModelArtifactsInfoForJSON } from './io_utils';\r\nimport { IORouterRegistry } from './router_registry';\r\nconst DATABASE_NAME = 'tensorflowjs';\r\nconst DATABASE_VERSION = 1;\r\n// Model data and ModelArtifactsInfo (metadata) are stored in two separate\r\n// stores for efficient access of the list of stored models and their metadata.\r\n// 1. The object store for model data: topology, weights and weight manifests.\r\nconst MODEL_STORE_NAME = 'models_store';\r\n// 2. The object store for ModelArtifactsInfo, including meta-information such\r\n//    as the type of topology (JSON vs binary), byte size of the topology, byte\r\n//    size of the weights, etc.\r\nconst INFO_STORE_NAME = 'model_info_store';\r\n/**\r\n * Delete the entire database for tensorflow.js, including the models store.\r\n */\r\nexport async function deleteDatabase() {\r\n    const idbFactory = getIndexedDBFactory();\r\n    return new Promise((resolve, reject) => {\r\n        const deleteRequest = idbFactory.deleteDatabase(DATABASE_NAME);\r\n        deleteRequest.onsuccess = () => resolve();\r\n        deleteRequest.onerror = error => reject(error);\r\n    });\r\n}\r\nfunction getIndexedDBFactory() {\r\n    if (!env().getBool('IS_BROWSER')) {\r\n        // TODO(cais): Add more info about what IOHandler subtypes are available.\r\n        //   Maybe point to a doc page on the web and/or automatically determine\r\n        //   the available IOHandlers and print them in the error message.\r\n        throw new Error('Failed to obtain IndexedDB factory because the current environment' +\r\n            'is not a web browser.');\r\n    }\r\n    // tslint:disable-next-line:no-any\r\n    const theWindow = typeof window === 'undefined' ? self : window;\r\n    const factory = theWindow.indexedDB || theWindow.mozIndexedDB ||\r\n        theWindow.webkitIndexedDB || theWindow.msIndexedDB ||\r\n        theWindow.shimIndexedDB;\r\n    if (factory == null) {\r\n        throw new Error('The current browser does not appear to support IndexedDB.');\r\n    }\r\n    return factory;\r\n}\r\nfunction setUpDatabase(openRequest) {\r\n    const db = openRequest.result;\r\n    db.createObjectStore(MODEL_STORE_NAME, { keyPath: 'modelPath' });\r\n    db.createObjectStore(INFO_STORE_NAME, { keyPath: 'modelPath' });\r\n}\r\n/**\r\n * IOHandler subclass: Browser IndexedDB.\r\n *\r\n * See the doc string of `browserIndexedDB` for more details.\r\n */\r\nexport class BrowserIndexedDB {\r\n    constructor(modelPath) {\r\n        this.indexedDB = getIndexedDBFactory();\r\n        if (modelPath == null || !modelPath) {\r\n            throw new Error('For IndexedDB, modelPath must not be null, undefined or empty.');\r\n        }\r\n        this.modelPath = modelPath;\r\n    }\r\n    async save(modelArtifacts) {\r\n        // TODO(cais): Support saving GraphDef models.\r\n        if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\r\n            throw new Error('BrowserLocalStorage.save() does not support saving model topology ' +\r\n                'in binary formats yet.');\r\n        }\r\n        return this.databaseAction(this.modelPath, modelArtifacts);\r\n    }\r\n    async load() {\r\n        return this.databaseAction(this.modelPath);\r\n    }\r\n    /**\r\n     * Perform database action to put model artifacts into or read model artifacts\r\n     * from IndexedDB object store.\r\n     *\r\n     * Whether the action is put or get depends on whether `modelArtifacts` is\r\n     * specified. If it is specified, the action will be put; otherwise the action\r\n     * will be get.\r\n     *\r\n     * @param modelPath A unique string path for the model.\r\n     * @param modelArtifacts If specified, it will be the model artifacts to be\r\n     *   stored in IndexedDB.\r\n     * @returns A `Promise` of `SaveResult`, if the action is put, or a `Promise`\r\n     *   of `ModelArtifacts`, if the action is get.\r\n     */\r\n    databaseAction(modelPath, modelArtifacts) {\r\n        return new Promise((resolve, reject) => {\r\n            const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\r\n            openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\r\n            openRequest.onsuccess = () => {\r\n                const db = openRequest.result;\r\n                if (modelArtifacts == null) {\r\n                    // Read model out from object store.\r\n                    const modelTx = db.transaction(MODEL_STORE_NAME, 'readonly');\r\n                    const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\r\n                    const getRequest = modelStore.get(this.modelPath);\r\n                    getRequest.onsuccess = () => {\r\n                        if (getRequest.result == null) {\r\n                            db.close();\r\n                            return reject(new Error(`Cannot find model with path '${this.modelPath}' ` +\r\n                                `in IndexedDB.`));\r\n                        }\r\n                        else {\r\n                            resolve(getRequest.result.modelArtifacts);\r\n                        }\r\n                    };\r\n                    getRequest.onerror = error => {\r\n                        db.close();\r\n                        return reject(getRequest.error);\r\n                    };\r\n                    modelTx.oncomplete = () => db.close();\r\n                }\r\n                else {\r\n                    // Put model into object store.\r\n                    const modelArtifactsInfo = getModelArtifactsInfoForJSON(modelArtifacts);\r\n                    // First, put ModelArtifactsInfo into info store.\r\n                    const infoTx = db.transaction(INFO_STORE_NAME, 'readwrite');\r\n                    let infoStore = infoTx.objectStore(INFO_STORE_NAME);\r\n                    const putInfoRequest = infoStore.put({ modelPath: this.modelPath, modelArtifactsInfo });\r\n                    let modelTx;\r\n                    putInfoRequest.onsuccess = () => {\r\n                        // Second, put model data into model store.\r\n                        modelTx = db.transaction(MODEL_STORE_NAME, 'readwrite');\r\n                        const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\r\n                        const putModelRequest = modelStore.put({\r\n                            modelPath: this.modelPath,\r\n                            modelArtifacts,\r\n                            modelArtifactsInfo\r\n                        });\r\n                        putModelRequest.onsuccess = () => resolve({ modelArtifactsInfo });\r\n                        putModelRequest.onerror = error => {\r\n                            // If the put-model request fails, roll back the info entry as\r\n                            // well.\r\n                            infoStore = infoTx.objectStore(INFO_STORE_NAME);\r\n                            const deleteInfoRequest = infoStore.delete(this.modelPath);\r\n                            deleteInfoRequest.onsuccess = () => {\r\n                                db.close();\r\n                                return reject(putModelRequest.error);\r\n                            };\r\n                            deleteInfoRequest.onerror = error => {\r\n                                db.close();\r\n                                return reject(putModelRequest.error);\r\n                            };\r\n                        };\r\n                    };\r\n                    putInfoRequest.onerror = error => {\r\n                        db.close();\r\n                        return reject(putInfoRequest.error);\r\n                    };\r\n                    infoTx.oncomplete = () => {\r\n                        if (modelTx == null) {\r\n                            db.close();\r\n                        }\r\n                        else {\r\n                            modelTx.oncomplete = () => db.close();\r\n                        }\r\n                    };\r\n                }\r\n            };\r\n            openRequest.onerror = error => reject(openRequest.error);\r\n        });\r\n    }\r\n}\r\nBrowserIndexedDB.URL_SCHEME = 'indexeddb://';\r\nexport const indexedDBRouter = (url) => {\r\n    if (!env().getBool('IS_BROWSER')) {\r\n        return null;\r\n    }\r\n    else {\r\n        if (!Array.isArray(url) && url.startsWith(BrowserIndexedDB.URL_SCHEME)) {\r\n            return browserIndexedDB(url.slice(BrowserIndexedDB.URL_SCHEME.length));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n};\r\nIORouterRegistry.registerSaveRouter(indexedDBRouter);\r\nIORouterRegistry.registerLoadRouter(indexedDBRouter);\r\n/**\r\n * Creates a browser IndexedDB IOHandler for saving and loading models.\r\n *\r\n * ```js\r\n * const model = tf.sequential();\r\n * model.add(\r\n *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));\r\n *\r\n * const saveResult = await model.save('indexeddb://MyModel'));\r\n * console.log(saveResult);\r\n * ```\r\n *\r\n * @param modelPath A unique identifier for the model to be saved. Must be a\r\n *   non-empty string.\r\n * @returns An instance of `BrowserIndexedDB` (sublcass of `IOHandler`),\r\n *   which can be used with, e.g., `tf.Model.save`.\r\n */\r\nexport function browserIndexedDB(modelPath) {\r\n    return new BrowserIndexedDB(modelPath);\r\n}\r\nfunction maybeStripScheme(key) {\r\n    return key.startsWith(BrowserIndexedDB.URL_SCHEME) ?\r\n        key.slice(BrowserIndexedDB.URL_SCHEME.length) :\r\n        key;\r\n}\r\nexport class BrowserIndexedDBManager {\r\n    constructor() {\r\n        this.indexedDB = getIndexedDBFactory();\r\n    }\r\n    async listModels() {\r\n        return new Promise((resolve, reject) => {\r\n            const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\r\n            openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\r\n            openRequest.onsuccess = () => {\r\n                const db = openRequest.result;\r\n                const tx = db.transaction(INFO_STORE_NAME, 'readonly');\r\n                const store = tx.objectStore(INFO_STORE_NAME);\r\n                // tslint:disable:max-line-length\r\n                // Need to cast `store` as `any` here because TypeScript's DOM\r\n                // library does not have the `getAll()` method even though the\r\n                // method is supported in the latest version of most mainstream\r\n                // browsers:\r\n                // https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/getAll\r\n                // tslint:enable:max-line-length\r\n                // tslint:disable-next-line:no-any\r\n                const getAllInfoRequest = store.getAll();\r\n                getAllInfoRequest.onsuccess = () => {\r\n                    const out = {};\r\n                    for (const item of getAllInfoRequest.result) {\r\n                        out[item.modelPath] = item.modelArtifactsInfo;\r\n                    }\r\n                    resolve(out);\r\n                };\r\n                getAllInfoRequest.onerror = error => {\r\n                    db.close();\r\n                    return reject(getAllInfoRequest.error);\r\n                };\r\n                tx.oncomplete = () => db.close();\r\n            };\r\n            openRequest.onerror = error => reject(openRequest.error);\r\n        });\r\n    }\r\n    async removeModel(path) {\r\n        path = maybeStripScheme(path);\r\n        return new Promise((resolve, reject) => {\r\n            const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\r\n            openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\r\n            openRequest.onsuccess = () => {\r\n                const db = openRequest.result;\r\n                const infoTx = db.transaction(INFO_STORE_NAME, 'readwrite');\r\n                const infoStore = infoTx.objectStore(INFO_STORE_NAME);\r\n                const getInfoRequest = infoStore.get(path);\r\n                let modelTx;\r\n                getInfoRequest.onsuccess = () => {\r\n                    if (getInfoRequest.result == null) {\r\n                        db.close();\r\n                        return reject(new Error(`Cannot find model with path '${path}' ` +\r\n                            `in IndexedDB.`));\r\n                    }\r\n                    else {\r\n                        // First, delete the entry in the info store.\r\n                        const deleteInfoRequest = infoStore.delete(path);\r\n                        const deleteModelData = () => {\r\n                            // Second, delete the entry in the model store.\r\n                            modelTx = db.transaction(MODEL_STORE_NAME, 'readwrite');\r\n                            const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\r\n                            const deleteModelRequest = modelStore.delete(path);\r\n                            deleteModelRequest.onsuccess = () => resolve(getInfoRequest.result.modelArtifactsInfo);\r\n                            deleteModelRequest.onerror = error => reject(getInfoRequest.error);\r\n                        };\r\n                        // Proceed with deleting model data regardless of whether deletion\r\n                        // of info data succeeds or not.\r\n                        deleteInfoRequest.onsuccess = deleteModelData;\r\n                        deleteInfoRequest.onerror = error => {\r\n                            deleteModelData();\r\n                            db.close();\r\n                            return reject(getInfoRequest.error);\r\n                        };\r\n                    }\r\n                };\r\n                getInfoRequest.onerror = error => {\r\n                    db.close();\r\n                    return reject(getInfoRequest.error);\r\n                };\r\n                infoTx.oncomplete = () => {\r\n                    if (modelTx == null) {\r\n                        db.close();\r\n                    }\r\n                    else {\r\n                        modelTx.oncomplete = () => db.close();\r\n                    }\r\n                };\r\n            };\r\n            openRequest.onerror = error => reject(openRequest.error);\r\n        });\r\n    }\r\n}\r\n//# sourceMappingURL=indexed_db.js.map"]},"metadata":{},"sourceType":"module"}