{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { BroadcastTo } from '../kernel_names';\nimport { sum } from '../ops/sum';\nexport const broadcastToGradConfig = {\n  kernelName: BroadcastTo,\n  gradFunc: (dy, saved, attrs) => {\n    const broadCastToAttrs = attrs;\n    const inputShape = broadCastToAttrs.inputShape;\n    const outputShape = broadCastToAttrs.shape;\n    const reps = Array.from(outputShape);\n\n    for (let i = inputShape.length - 1; i >= 0; i--) {\n      if (inputShape[i] === outputShape[i]) {\n        reps[i] = 1;\n      } else if (inputShape[i] !== 1) {\n        throw new Error(`broadcastTo(): [${inputShape}] cannot be broadcast to [${outputShape}].`);\n      }\n    }\n\n    const axes = [];\n\n    for (let i = 0; i < reps.length; i++) {\n      if (reps[i] > 1) {\n        axes.push(i);\n      }\n    }\n\n    return {\n      x: () => sum(dy, axes, true\n      /* keepDims */\n      )\n    };\n  }\n};","map":{"version":3,"sources":["../../src/gradients/BroadcastTo_grad.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,WAAR,QAA4C,iBAA5C;AAEA,SAAQ,GAAR,QAAkB,YAAlB;AAGA,OAAO,MAAM,qBAAqB,GAAe;AAC/C,EAAA,UAAU,EAAE,WADmC;AAE/C,EAAA,QAAQ,EAAE,CAAC,EAAD,EAAa,KAAb,EAA8B,KAA9B,KAAqD;AAC7D,UAAM,gBAAgB,GAClB,KADJ;AAGA,UAAM,UAAU,GAAG,gBAAgB,CAAC,UAApC;AACA,UAAM,WAAW,GAAG,gBAAgB,CAAC,KAArC;AAEA,UAAM,IAAI,GAAa,KAAK,CAAC,IAAN,CAAW,WAAX,CAAvB;;AACA,SAAK,IAAI,CAAC,GAAG,UAAU,CAAC,MAAX,GAAoB,CAAjC,EAAoC,CAAC,IAAI,CAAzC,EAA4C,CAAC,EAA7C,EAAiD;AAC/C,UAAI,UAAU,CAAC,CAAD,CAAV,KAAkB,WAAW,CAAC,CAAD,CAAjC,EAAsC;AACpC,QAAA,IAAI,CAAC,CAAD,CAAJ,GAAU,CAAV;AACD,OAFD,MAEO,IAAI,UAAU,CAAC,CAAD,CAAV,KAAkB,CAAtB,EAAyB;AAC9B,cAAM,IAAI,KAAJ,CAAU,mBACZ,UAAU,6BAA6B,WAAW,IADhD,CAAN;AAED;AACF;;AACD,UAAM,IAAI,GAAa,EAAvB;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,IAAI,CAAC,MAAzB,EAAiC,CAAC,EAAlC,EAAsC;AACpC,UAAI,IAAI,CAAC,CAAD,CAAJ,GAAU,CAAd,EAAiB;AACf,QAAA,IAAI,CAAC,IAAL,CAAU,CAAV;AACD;AACF;;AAED,WAAO;AAAC,MAAA,CAAC,EAAE,MAAM,GAAG,CAAC,EAAD,EAAK,IAAL,EAAW;AAAK;AAAhB;AAAb,KAAP;AACD;AA1B8C,CAA1C","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { BroadcastTo } from '../kernel_names';\r\nimport { sum } from '../ops/sum';\r\nexport const broadcastToGradConfig = {\r\n    kernelName: BroadcastTo,\r\n    gradFunc: (dy, saved, attrs) => {\r\n        const broadCastToAttrs = attrs;\r\n        const inputShape = broadCastToAttrs.inputShape;\r\n        const outputShape = broadCastToAttrs.shape;\r\n        const reps = Array.from(outputShape);\r\n        for (let i = inputShape.length - 1; i >= 0; i--) {\r\n            if (inputShape[i] === outputShape[i]) {\r\n                reps[i] = 1;\r\n            }\r\n            else if (inputShape[i] !== 1) {\r\n                throw new Error(`broadcastTo(): [${inputShape}] cannot be broadcast to [${outputShape}].`);\r\n            }\r\n        }\r\n        const axes = [];\r\n        for (let i = 0; i < reps.length; i++) {\r\n            if (reps[i] > 1) {\r\n                axes.push(i);\r\n            }\r\n        }\r\n        return { x: () => sum(dy, axes, true /* keepDims */) };\r\n    }\r\n};\r\n//# sourceMappingURL=BroadcastTo_grad.js.map"]},"metadata":{},"sourceType":"module"}