{"ast":null,"code":"import { flatten } from '../../utils/array';\nimport { factory } from '../../utils/factory';\nvar name = 'setDistinct';\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];\nexport var createSetDistinct = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      size = _ref.size,\n      subset = _ref.subset,\n      compareNatural = _ref.compareNatural,\n      Index = _ref.Index,\n      DenseMatrix = _ref.DenseMatrix;\n  /**\r\n   * Collect the distinct elements of a multiset.\r\n   * A multi-dimension array will be converted to a single-dimension array before the operation.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.setDistinct(set)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.setDistinct([1, 1, 1, 2, 2, 3])        // returns [1, 2, 3]\r\n   *\r\n   * See also:\r\n   *\r\n   *    setMultiplicity\r\n   *\r\n   * @param {Array | Matrix}    a  A multiset\r\n   * @return {Array | Matrix}    A set containing the distinc elements of the multiset\r\n   */\n\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(a) {\n      var result;\n\n      if (subset(size(a), new Index(0)) === 0) {\n        // if empty, return empty\n        result = [];\n      } else {\n        var b = flatten(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);\n        result = [];\n        result.push(b[0]);\n\n        for (var i = 1; i < b.length; i++) {\n          if (compareNatural(b[i], b[i - 1]) !== 0) {\n            result.push(b[i]);\n          }\n        }\n      } // return an array, if the input was an array\n\n\n      if (Array.isArray(a)) {\n        return result;\n      } // return a matrix otherwise\n\n\n      return new DenseMatrix(result);\n    }\n  });\n});","map":{"version":3,"sources":["C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/mathjs/es/function/set/setDistinct.js"],"names":["flatten","factory","name","dependencies","createSetDistinct","_ref","typed","size","subset","compareNatural","Index","DenseMatrix","ArrayMatrix","a","result","b","Array","isArray","toArray","sort","push","i","length"],"mappings":"AAAA,SAASA,OAAT,QAAwB,mBAAxB;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,IAAIC,IAAI,GAAG,aAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,MAAV,EAAkB,QAAlB,EAA4B,gBAA5B,EAA8C,OAA9C,EAAuD,aAAvD,CAAnB;AACA,OAAO,IAAIC,iBAAiB,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AACxF,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAAA,MACIC,IAAI,GAAGF,IAAI,CAACE,IADhB;AAAA,MAEIC,MAAM,GAAGH,IAAI,CAACG,MAFlB;AAAA,MAGIC,cAAc,GAAGJ,IAAI,CAACI,cAH1B;AAAA,MAIIC,KAAK,GAAGL,IAAI,CAACK,KAJjB;AAAA,MAKIC,WAAW,GAAGN,IAAI,CAACM,WALvB;AAOA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOL,KAAK,CAACJ,IAAD,EAAO;AACjB,sBAAkB,SAASU,WAAT,CAAqBC,CAArB,EAAwB;AACxC,UAAIC,MAAJ;;AAEA,UAAIN,MAAM,CAACD,IAAI,CAACM,CAAD,CAAL,EAAU,IAAIH,KAAJ,CAAU,CAAV,CAAV,CAAN,KAAkC,CAAtC,EAAyC;AACvC;AACAI,QAAAA,MAAM,GAAG,EAAT;AACD,OAHD,MAGO;AACL,YAAIC,CAAC,GAAGf,OAAO,CAACgB,KAAK,CAACC,OAAN,CAAcJ,CAAd,IAAmBA,CAAnB,GAAuBA,CAAC,CAACK,OAAF,EAAxB,CAAP,CAA4CC,IAA5C,CAAiDV,cAAjD,CAAR;AACAK,QAAAA,MAAM,GAAG,EAAT;AACAA,QAAAA,MAAM,CAACM,IAAP,CAAYL,CAAC,CAAC,CAAD,CAAb;;AAEA,aAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,CAAC,CAACO,MAAtB,EAA8BD,CAAC,EAA/B,EAAmC;AACjC,cAAIZ,cAAc,CAACM,CAAC,CAACM,CAAD,CAAF,EAAON,CAAC,CAACM,CAAC,GAAG,CAAL,CAAR,CAAd,KAAmC,CAAvC,EAA0C;AACxCP,YAAAA,MAAM,CAACM,IAAP,CAAYL,CAAC,CAACM,CAAD,CAAb;AACD;AACF;AACF,OAhBuC,CAgBtC;;;AAGF,UAAIL,KAAK,CAACC,OAAN,CAAcJ,CAAd,CAAJ,EAAsB;AACpB,eAAOC,MAAP;AACD,OArBuC,CAqBtC;;;AAGF,aAAO,IAAIH,WAAJ,CAAgBG,MAAhB,CAAP;AACD;AA1BgB,GAAP,CAAZ;AA4BD,CAvDoD,CAA9C","sourcesContent":["import { flatten } from '../../utils/array';\r\nimport { factory } from '../../utils/factory';\r\nvar name = 'setDistinct';\r\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];\r\nexport var createSetDistinct = /* #__PURE__ */factory(name, dependencies, function (_ref) {\r\n  var typed = _ref.typed,\r\n      size = _ref.size,\r\n      subset = _ref.subset,\r\n      compareNatural = _ref.compareNatural,\r\n      Index = _ref.Index,\r\n      DenseMatrix = _ref.DenseMatrix;\r\n\r\n  /**\r\n   * Collect the distinct elements of a multiset.\r\n   * A multi-dimension array will be converted to a single-dimension array before the operation.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.setDistinct(set)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.setDistinct([1, 1, 1, 2, 2, 3])        // returns [1, 2, 3]\r\n   *\r\n   * See also:\r\n   *\r\n   *    setMultiplicity\r\n   *\r\n   * @param {Array | Matrix}    a  A multiset\r\n   * @return {Array | Matrix}    A set containing the distinc elements of the multiset\r\n   */\r\n  return typed(name, {\r\n    'Array | Matrix': function ArrayMatrix(a) {\r\n      var result;\r\n\r\n      if (subset(size(a), new Index(0)) === 0) {\r\n        // if empty, return empty\r\n        result = [];\r\n      } else {\r\n        var b = flatten(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);\r\n        result = [];\r\n        result.push(b[0]);\r\n\r\n        for (var i = 1; i < b.length; i++) {\r\n          if (compareNatural(b[i], b[i - 1]) !== 0) {\r\n            result.push(b[i]);\r\n          }\r\n        }\r\n      } // return an array, if the input was an array\r\n\r\n\r\n      if (Array.isArray(a)) {\r\n        return result;\r\n      } // return a matrix otherwise\r\n\r\n\r\n      return new DenseMatrix(result);\r\n    }\r\n  });\r\n});"]},"metadata":{},"sourceType":"module"}