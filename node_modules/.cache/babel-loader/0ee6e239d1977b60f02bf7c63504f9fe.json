{"ast":null,"code":"import { convertToTensor } from '../tensor_util_env';\nimport { conv3DBackpropInput } from './conv3d_backprop_input';\nimport { op } from './operation';\n/**\r\n * Computes the transposed 3D convolution of a volume, also known as a\r\n * deconvolution.\r\n *\r\n * @param x The input image, of rank 5 or rank 4, of shape\r\n *   `[batch, depth, height, width, inDepth]`. If rank 4, batch of 1 is assumed.\r\n * @param filter The filter, rank 4, of shape\r\n *     `[depth, filterHeight, filterWidth, outDepth, inDepth]`.\r\n *     `inDepth` must match `inDepth` in `x`.\r\n * @param outputShape Output shape, of rank 5 or rank 4:\r\n *     `[batch, depth, height, width, outDepth]`. If rank 3, batch of 1 is\r\n *    assumed.\r\n * @param strides The strides of the original convolution:\r\n *     `[strideDepth, strideHeight, strideWidth]`.\r\n * @param pad  The type of padding algorithm used in the non-transpose version\r\n *    of the op.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Convolution'}\r\n */\n\nfunction conv3dTranspose_(x, filter, outputShape, strides, pad) {\n  const $x = convertToTensor(x, 'x', 'conv3dTranspose');\n  const $filter = convertToTensor(filter, 'filter', 'conv3dTranspose');\n  return conv3DBackpropInput(outputShape, $x, $filter, strides, pad);\n}\n\nexport const conv3dTranspose = op({\n  conv3dTranspose_\n});","map":{"version":3,"sources":["../../src/ops/conv3d_transpose.ts"],"names":[],"mappings":"AAiBA,SAAQ,eAAR,QAA8B,oBAA9B;AAGA,SAAQ,mBAAR,QAAkC,yBAAlC;AACA,SAAQ,EAAR,QAAiB,aAAjB;AAEA;;;;;;;;;;;;;;;;;;AAkBG;;AACH,SAAS,gBAAT,CACI,CADJ,EACqB,MADrB,EAEI,WAFJ,EAKI,OALJ,EAK8C,GAL9C,EAKiE;AAC/D,QAAM,EAAE,GAAG,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,iBAAT,CAA1B;AACA,QAAM,OAAO,GAAG,eAAe,CAAC,MAAD,EAAS,QAAT,EAAmB,iBAAnB,CAA/B;AAEA,SAAO,mBAAmB,CAAC,WAAD,EAAc,EAAd,EAAkB,OAAlB,EAA2B,OAA3B,EAAoC,GAApC,CAA1B;AACD;;AAED,OAAO,MAAM,eAAe,GAAG,EAAE,CAAC;AAAC,EAAA;AAAD,CAAD,CAA1B","sourceRoot":"","sourcesContent":["import { convertToTensor } from '../tensor_util_env';\r\nimport { conv3DBackpropInput } from './conv3d_backprop_input';\r\nimport { op } from './operation';\r\n/**\r\n * Computes the transposed 3D convolution of a volume, also known as a\r\n * deconvolution.\r\n *\r\n * @param x The input image, of rank 5 or rank 4, of shape\r\n *   `[batch, depth, height, width, inDepth]`. If rank 4, batch of 1 is assumed.\r\n * @param filter The filter, rank 4, of shape\r\n *     `[depth, filterHeight, filterWidth, outDepth, inDepth]`.\r\n *     `inDepth` must match `inDepth` in `x`.\r\n * @param outputShape Output shape, of rank 5 or rank 4:\r\n *     `[batch, depth, height, width, outDepth]`. If rank 3, batch of 1 is\r\n *    assumed.\r\n * @param strides The strides of the original convolution:\r\n *     `[strideDepth, strideHeight, strideWidth]`.\r\n * @param pad  The type of padding algorithm used in the non-transpose version\r\n *    of the op.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Convolution'}\r\n */\r\nfunction conv3dTranspose_(x, filter, outputShape, strides, pad) {\r\n    const $x = convertToTensor(x, 'x', 'conv3dTranspose');\r\n    const $filter = convertToTensor(filter, 'filter', 'conv3dTranspose');\r\n    return conv3DBackpropInput(outputShape, $x, $filter, strides, pad);\r\n}\r\nexport const conv3dTranspose = op({ conv3dTranspose_ });\r\n//# sourceMappingURL=conv3d_transpose.js.map"]},"metadata":{},"sourceType":"module"}