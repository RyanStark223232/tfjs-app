{"ast":null,"code":"import _classCallCheck from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\r\n * ExecutionContext captures the runtime environment of the node. It keeps\r\n * track of the current frame and iteration for the control flow ops.\r\n *\r\n * For example, typical Dynamic RNN model may contain loops, for which\r\n * TensorFlow will generate graphs with Enter/Exit nodes to control the\r\n * current execution frame, and NextIteration Nodes for iteration id increment.\r\n * For model with branch logic, TensorFLow will generate Switch/Merge ops.\r\n */\nexport var ExecutionContext = /*#__PURE__*/function () {\n  function ExecutionContext() {\n    var weightMap = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var tensorArrayMap = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var tensorListMap = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var functionMap = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n    _classCallCheck(this, ExecutionContext);\n\n    this.weightMap = weightMap;\n    this.tensorArrayMap = tensorArrayMap;\n    this.tensorListMap = tensorListMap;\n    this.functionMap = functionMap;\n    this.rootContext = {\n      id: 0,\n      frameName: '',\n      iterationId: 0\n    };\n    this.contexts = [this.rootContext];\n    this.lastId = 0;\n    this.generateCurrentContextIds();\n  }\n\n  _createClass(ExecutionContext, [{\n    key: \"newFrame\",\n    value: function newFrame(id, frameName) {\n      return {\n        id: id,\n        frameName: frameName,\n        iterationId: 0\n      };\n    }\n    /**\r\n     * Set the current context\r\n     * @param contexts: ExecutionContextInfo[] the current path of execution\r\n     * frames\r\n     */\n\n  }, {\n    key: \"generateCurrentContextIds\",\n    value: function generateCurrentContextIds() {\n      var names = [];\n\n      for (var i = 0; i < this.contexts.length - 1; i++) {\n        var contexts = this.contexts.slice(0, this.contexts.length - i);\n        names.push(this.contextIdforContexts(contexts));\n      }\n\n      names.push('');\n      this._currentContextIds = names;\n    }\n  }, {\n    key: \"contextIdforContexts\",\n    value: function contextIdforContexts(contexts) {\n      return contexts ? contexts.map(function (context) {\n        return context.id === 0 && context.iterationId === 0 ? '' : \"\".concat(context.frameName, \"-\").concat(context.iterationId);\n      }).join('/') : '';\n    }\n    /**\r\n     * Enter a new frame, a new context is pushed on the current context list.\r\n     * @param frameId new frame id\r\n     */\n\n  }, {\n    key: \"enterFrame\",\n    value: function enterFrame(frameId) {\n      if (this.contexts) {\n        this.lastId++;\n        this.contexts = this.contexts.slice();\n        this.contexts.push(this.newFrame(this.lastId, frameId));\n\n        this._currentContextIds.unshift(this.contextIdforContexts(this.contexts));\n      }\n    }\n    /**\r\n     * Exit the current frame, the last context is removed from the current\r\n     * context list.\r\n     */\n\n  }, {\n    key: \"exitFrame\",\n    value: function exitFrame() {\n      if (this.contexts && this.contexts.length > 1) {\n        this.contexts = this.contexts.slice();\n        this.contexts.splice(-1);\n        this.currentContextIds.shift();\n      } else {\n        throw new Error('Cannot exit frame, the context is empty');\n      }\n    }\n    /**\r\n     * Enter the next iteration of a loop, the iteration id of last context is\r\n     * increased.\r\n     */\n\n  }, {\n    key: \"nextIteration\",\n    value: function nextIteration() {\n      if (this.contexts && this.contexts.length > 0) {\n        this.contexts = this.contexts.slice();\n        this.lastId++;\n        var context = Object.assign({}, this.contexts[this.contexts.length - 1]);\n        context.iterationId += 1;\n        context.id = this.lastId;\n        this.contexts.splice(-1, 1, context);\n\n        this._currentContextIds.splice(0, 1, this.contextIdforContexts(this.contexts));\n      } else {\n        throw new Error('Cannot increase frame iteration, the context is empty');\n      }\n    }\n  }, {\n    key: \"getWeight\",\n    value: function getWeight(name) {\n      return this.weightMap[name];\n    }\n  }, {\n    key: \"addTensorArray\",\n    value: function addTensorArray(tensorArray) {\n      this.tensorArrayMap[tensorArray.id] = tensorArray;\n    }\n  }, {\n    key: \"getTensorArray\",\n    value: function getTensorArray(id) {\n      return this.tensorArrayMap[id];\n    }\n  }, {\n    key: \"addTensorList\",\n    value: function addTensorList(tensorList) {\n      this.tensorListMap[tensorList.id] = tensorList;\n    }\n  }, {\n    key: \"getTensorList\",\n    value: function getTensorList(id) {\n      return this.tensorListMap[id];\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose(keepIds) {\n      for (var key in this.tensorArrayMap) {\n        this.tensorArrayMap[key].clearAndClose(keepIds);\n      }\n\n      for (var _key in this.tensorListMap) {\n        this.tensorListMap[_key].clearAndClose(keepIds);\n      }\n    }\n  }, {\n    key: \"currentContext\",\n    set: function set(contexts) {\n      if (this.contexts !== contexts) {\n        this.contexts = contexts;\n        this.generateCurrentContextIds();\n      }\n    },\n    get: function get() {\n      return this.contexts;\n    }\n    /**\r\n     * Returns the current context in string format.\r\n     */\n\n  }, {\n    key: \"currentContextId\",\n    get: function get() {\n      return this._currentContextIds[0];\n    }\n    /**\r\n     * Returns the current context and all parent contexts in string format.\r\n     * This allow access to the nodes in the current and parent frames.\r\n     */\n\n  }, {\n    key: \"currentContextIds\",\n    get: function get() {\n      return this._currentContextIds;\n    }\n  }]);\n\n  return ExecutionContext;\n}();","map":{"version":3,"sources":["../../src/executor/execution_context.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * ExecutionContext captures the runtime environment of the node. It keeps\r\n * track of the current frame and iteration for the control flow ops.\r\n *\r\n * For example, typical Dynamic RNN model may contain loops, for which\r\n * TensorFlow will generate graphs with Enter/Exit nodes to control the\r\n * current execution frame, and NextIteration Nodes for iteration id increment.\r\n * For model with branch logic, TensorFLow will generate Switch/Merge ops.\r\n */\r\nexport class ExecutionContext {\r\n    constructor(weightMap = {}, tensorArrayMap = {}, tensorListMap = {}, functionMap = {}) {\r\n        this.weightMap = weightMap;\r\n        this.tensorArrayMap = tensorArrayMap;\r\n        this.tensorListMap = tensorListMap;\r\n        this.functionMap = functionMap;\r\n        this.rootContext = { id: 0, frameName: '', iterationId: 0 };\r\n        this.contexts = [this.rootContext];\r\n        this.lastId = 0;\r\n        this.generateCurrentContextIds();\r\n    }\r\n    newFrame(id, frameName) {\r\n        return { id, frameName, iterationId: 0 };\r\n    }\r\n    /**\r\n     * Set the current context\r\n     * @param contexts: ExecutionContextInfo[] the current path of execution\r\n     * frames\r\n     */\r\n    set currentContext(contexts) {\r\n        if (this.contexts !== contexts) {\r\n            this.contexts = contexts;\r\n            this.generateCurrentContextIds();\r\n        }\r\n    }\r\n    get currentContext() {\r\n        return this.contexts;\r\n    }\r\n    /**\r\n     * Returns the current context in string format.\r\n     */\r\n    get currentContextId() {\r\n        return this._currentContextIds[0];\r\n    }\r\n    /**\r\n     * Returns the current context and all parent contexts in string format.\r\n     * This allow access to the nodes in the current and parent frames.\r\n     */\r\n    get currentContextIds() {\r\n        return this._currentContextIds;\r\n    }\r\n    generateCurrentContextIds() {\r\n        const names = [];\r\n        for (let i = 0; i < this.contexts.length - 1; i++) {\r\n            const contexts = this.contexts.slice(0, this.contexts.length - i);\r\n            names.push(this.contextIdforContexts(contexts));\r\n        }\r\n        names.push('');\r\n        this._currentContextIds = names;\r\n    }\r\n    contextIdforContexts(contexts) {\r\n        return contexts ?\r\n            contexts\r\n                .map(context => (context.id === 0 && context.iterationId === 0) ?\r\n                '' :\r\n                `${context.frameName}-${context.iterationId}`)\r\n                .join('/') :\r\n            '';\r\n    }\r\n    /**\r\n     * Enter a new frame, a new context is pushed on the current context list.\r\n     * @param frameId new frame id\r\n     */\r\n    enterFrame(frameId) {\r\n        if (this.contexts) {\r\n            this.lastId++;\r\n            this.contexts = this.contexts.slice();\r\n            this.contexts.push(this.newFrame(this.lastId, frameId));\r\n            this._currentContextIds.unshift(this.contextIdforContexts(this.contexts));\r\n        }\r\n    }\r\n    /**\r\n     * Exit the current frame, the last context is removed from the current\r\n     * context list.\r\n     */\r\n    exitFrame() {\r\n        if (this.contexts && this.contexts.length > 1) {\r\n            this.contexts = this.contexts.slice();\r\n            this.contexts.splice(-1);\r\n            this.currentContextIds.shift();\r\n        }\r\n        else {\r\n            throw new Error('Cannot exit frame, the context is empty');\r\n        }\r\n    }\r\n    /**\r\n     * Enter the next iteration of a loop, the iteration id of last context is\r\n     * increased.\r\n     */\r\n    nextIteration() {\r\n        if (this.contexts && this.contexts.length > 0) {\r\n            this.contexts = this.contexts.slice();\r\n            this.lastId++;\r\n            const context = Object.assign({}, this.contexts[this.contexts.length - 1]);\r\n            context.iterationId += 1;\r\n            context.id = this.lastId;\r\n            this.contexts.splice(-1, 1, context);\r\n            this._currentContextIds.splice(0, 1, this.contextIdforContexts(this.contexts));\r\n        }\r\n        else {\r\n            throw new Error('Cannot increase frame iteration, the context is empty');\r\n        }\r\n    }\r\n    getWeight(name) {\r\n        return this.weightMap[name];\r\n    }\r\n    addTensorArray(tensorArray) {\r\n        this.tensorArrayMap[tensorArray.id] = tensorArray;\r\n    }\r\n    getTensorArray(id) {\r\n        return this.tensorArrayMap[id];\r\n    }\r\n    addTensorList(tensorList) {\r\n        this.tensorListMap[tensorList.id] = tensorList;\r\n    }\r\n    getTensorList(id) {\r\n        return this.tensorListMap[id];\r\n    }\r\n    dispose(keepIds) {\r\n        for (const key in this.tensorArrayMap) {\r\n            this.tensorArrayMap[key].clearAndClose(keepIds);\r\n        }\r\n        for (const key in this.tensorListMap) {\r\n            this.tensorListMap[key].clearAndClose(keepIds);\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=execution_context.js.map"]},"metadata":{},"sourceType":"module"}