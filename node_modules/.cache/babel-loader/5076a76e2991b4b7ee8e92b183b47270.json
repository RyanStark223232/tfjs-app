{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { MaxPoolWithArgmax } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\r\n * Computes the 2D max pooling of an image with Argmax index.\r\n * The indices in argmax are flattened, so that a maximum value at position `[b,\r\n * y, x, c]` becomes flattened index: `(y * width + x) * channels + c` if\r\n * include_batch_in_index is False; `((b * height + y) * width + x) * channels\r\n * +c` if include_batch_in_index is True.\r\n *\r\n * The indices returned are always in `[0, height) x [0, width)` before\r\n * flattening.\r\n *\r\n * @param x The input tensor, of rank 4 or rank 3 of shape\r\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\r\n * @param filterSize The filter size: `[filterHeight, filterWidth]`. If\r\n *     `filterSize` is a single number, then `filterHeight == filterWidth`.\r\n * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If\r\n *     `strides` is a single number, then `strideHeight == strideWidth`.\r\n * @param dataFormat An optional string from: \"NDHWC\", \"NCDHW\". Defaults to\r\n *     \"NDHWC\". Specify the data format of the input and output data. With the\r\n *     default format \"NDHWC\", the data is stored in the order of: [batch,\r\n *     depth, height, width, channels]. Only \"NDHWC\" is currently supported.\r\n * @param pad The type of padding algorithm.\r\n *    - `same` and stride 1: output will be of same size as input,\r\n *       regardless of filter size.\r\n *    - `valid`: output will be smaller than input if filter is larger\r\n *       than 1x1.\r\n *    - For more info, see this guide:\r\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\r\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\r\n * @param includeBatchIndex Defaults to False. Whether to include batch\r\n *    dimension in flattened index of argmax.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Convolution'}\r\n */\n\nfunction maxPoolWithArgmax_(x, filterSize, strides, pad, includeBatchInIndex = false) {\n  const $x = convertToTensor(x, 'x', 'maxPoolWithArgmax');\n  const inputs = {\n    x: $x\n  };\n  const attrs = {\n    filterSize,\n    strides,\n    pad,\n    includeBatchInIndex\n  };\n  const result = ENGINE.runKernel(MaxPoolWithArgmax, inputs, attrs);\n  return {\n    result: result[0],\n    indexes: result[1]\n  };\n}\n\nexport const maxPoolWithArgmax = op({\n  maxPoolWithArgmax_\n});","map":{"version":3,"sources":["../../src/ops/max_pool_with_argmax.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,MAAR,QAAqB,WAArB;AACA,SAAQ,iBAAR,QAAiF,iBAAjF;AAIA,SAAQ,eAAR,QAA8B,oBAA9B;AAGA,SAAQ,EAAR,QAAiB,aAAjB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCG;;AACH,SAAS,kBAAT,CACI,CADJ,EACqB,UADrB,EAEI,OAFJ,EAEsC,GAFtC,EAGI,mBAAmB,GAAG,KAH1B,EAG+B;AAC7B,QAAM,EAAE,GAAG,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,mBAAT,CAA1B;AAEA,QAAM,MAAM,GAA4B;AAAC,IAAA,CAAC,EAAE;AAAJ,GAAxC;AACA,QAAM,KAAK,GACkB;AAAC,IAAA,UAAD;AAAa,IAAA,OAAb;AAAsB,IAAA,GAAtB;AAA2B,IAAA;AAA3B,GAD7B;AAGA,QAAM,MAAM,GAAG,MAAM,CAAC,SAAP,CACI,iBADJ,EACuB,MADvB,EAEI,KAFJ,CAAf;AAIA,SAAO;AAAC,IAAA,MAAM,EAAE,MAAM,CAAC,CAAD,CAAf;AAAoB,IAAA,OAAO,EAAE,MAAM,CAAC,CAAD;AAAnC,GAAP;AACD;;AAED,OAAO,MAAM,iBAAiB,GAAG,EAAE,CAAC;AAAC,EAAA;AAAD,CAAD,CAA5B","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { ENGINE } from '../engine';\r\nimport { MaxPoolWithArgmax } from '../kernel_names';\r\nimport { convertToTensor } from '../tensor_util_env';\r\nimport { op } from './operation';\r\n/**\r\n * Computes the 2D max pooling of an image with Argmax index.\r\n * The indices in argmax are flattened, so that a maximum value at position `[b,\r\n * y, x, c]` becomes flattened index: `(y * width + x) * channels + c` if\r\n * include_batch_in_index is False; `((b * height + y) * width + x) * channels\r\n * +c` if include_batch_in_index is True.\r\n *\r\n * The indices returned are always in `[0, height) x [0, width)` before\r\n * flattening.\r\n *\r\n * @param x The input tensor, of rank 4 or rank 3 of shape\r\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\r\n * @param filterSize The filter size: `[filterHeight, filterWidth]`. If\r\n *     `filterSize` is a single number, then `filterHeight == filterWidth`.\r\n * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If\r\n *     `strides` is a single number, then `strideHeight == strideWidth`.\r\n * @param dataFormat An optional string from: \"NDHWC\", \"NCDHW\". Defaults to\r\n *     \"NDHWC\". Specify the data format of the input and output data. With the\r\n *     default format \"NDHWC\", the data is stored in the order of: [batch,\r\n *     depth, height, width, channels]. Only \"NDHWC\" is currently supported.\r\n * @param pad The type of padding algorithm.\r\n *    - `same` and stride 1: output will be of same size as input,\r\n *       regardless of filter size.\r\n *    - `valid`: output will be smaller than input if filter is larger\r\n *       than 1x1.\r\n *    - For more info, see this guide:\r\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\r\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\r\n * @param includeBatchIndex Defaults to False. Whether to include batch\r\n *    dimension in flattened index of argmax.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Convolution'}\r\n */\r\nfunction maxPoolWithArgmax_(x, filterSize, strides, pad, includeBatchInIndex = false) {\r\n    const $x = convertToTensor(x, 'x', 'maxPoolWithArgmax');\r\n    const inputs = { x: $x };\r\n    const attrs = { filterSize, strides, pad, includeBatchInIndex };\r\n    const result = ENGINE.runKernel(MaxPoolWithArgmax, inputs, attrs);\r\n    return { result: result[0], indexes: result[1] };\r\n}\r\nexport const maxPoolWithArgmax = op({ maxPoolWithArgmax_ });\r\n//# sourceMappingURL=max_pool_with_argmax.js.map"]},"metadata":{},"sourceType":"module"}