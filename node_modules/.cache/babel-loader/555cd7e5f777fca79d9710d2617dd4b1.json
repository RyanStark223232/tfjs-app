{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { getGlslDifferences } from './glsl_version';\nexport class Im2ColPackedProgram {\n  constructor(outputShape, inputShape, convInfo) {\n    this.variableNames = ['A'];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    this.outputShape = outputShape;\n    const {\n      filterWidth,\n      inChannels,\n      strideWidth,\n      strideHeight,\n      padInfo,\n      outWidth,\n      dilationWidth,\n      dilationHeight,\n      dataFormat\n    } = convInfo;\n    const {\n      left,\n      top\n    } = padInfo;\n    const itemsPerBlockRow = inChannels * filterWidth;\n    const glsl = getGlslDifferences();\n    const isChannelsLast = dataFormat === 'channelsLast';\n    const rowDim = isChannelsLast ? 0 : 1;\n    const colDim = isChannelsLast ? 1 : 2;\n    let unrolled = ``;\n\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        unrolled += `\n          blockIndex = rc.y + ${col};\n          pos = rc.x + ${row};\n\n          if(blockIndex < ${outputShape[1]} && pos < ${outputShape[0]}) {\n            offsetY = int(blockIndex / (${outWidth})) * ${strideHeight} - ${top};\n            d0 = offsetY + ${dilationHeight} * (pos / ${itemsPerBlockRow});\n\n            if(d0 < ${inputShape[rowDim]} && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), ${outWidth}.) * ${strideWidth}. - ${left}.);\n              d1 = offsetX + ${dilationWidth} * (int(mod(float(pos), ${itemsPerBlockRow}.) / ${inChannels}.));\n\n              if(d1 < ${inputShape[colDim]} && d1 >= 0) {\n\n                ch = int(mod(float(pos), ${inChannels}.));\n\n                if (${isChannelsLast}) {\n                  innerDims = vec2(d1, ch);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;\n      }\n    }\n\n    this.userCode = `\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${unrolled}\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n\n}","map":{"version":3,"sources":["../src/im2col_packed_gpu.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAGH,SAAQ,kBAAR,QAAiC,gBAAjC;AAGA,OAAM,MAAO,mBAAP,CAA0B;AAO9B,EAAA,WAAA,CACI,WADJ,EAC2B,UAD3B,EAEI,QAFJ,EAEqC;AARrC,SAAA,aAAA,GAAgB,CAAC,GAAD,CAAhB;AACA,SAAA,YAAA,GAAe,IAAf;AACA,SAAA,YAAA,GAAe,IAAf;AAOE,SAAK,WAAL,GAAmB,WAAnB;AAEA,UAAM;AACJ,MAAA,WADI;AAEJ,MAAA,UAFI;AAGJ,MAAA,WAHI;AAIJ,MAAA,YAJI;AAKJ,MAAA,OALI;AAMJ,MAAA,QANI;AAOJ,MAAA,aAPI;AAQJ,MAAA,cARI;AASJ,MAAA;AATI,QAUF,QAVJ;AAWA,UAAM;AAAC,MAAA,IAAD;AAAO,MAAA;AAAP,QAAc,OAApB;AACA,UAAM,gBAAgB,GAAG,UAAU,GAAG,WAAtC;AACA,UAAM,IAAI,GAAG,kBAAkB,EAA/B;AACA,UAAM,cAAc,GAAG,UAAU,KAAK,cAAtC;AACA,UAAM,MAAM,GAAG,cAAc,GAAG,CAAH,GAAO,CAApC;AACA,UAAM,MAAM,GAAG,cAAc,GAAG,CAAH,GAAO,CAApC;AAEA,QAAI,QAAQ,GAAG,EAAf;;AAEA,SAAK,IAAI,GAAG,GAAG,CAAf,EAAkB,GAAG,IAAI,CAAzB,EAA4B,GAAG,EAA/B,EAAmC;AACjC,WAAK,IAAI,GAAG,GAAG,CAAf,EAAkB,GAAG,IAAI,CAAzB,EAA4B,GAAG,EAA/B,EAAmC;AACjC,QAAA,QAAQ,IAAI;gCACY,GAAG;yBACV,GAAG;;4BAEA,WAAW,CAAC,CAAD,CAAG,aAAa,WAAW,CAAC,CAAD,CAAG;0CAC3B,QAAQ,QAAQ,YAAY,MAC1D,GAAG;6BACc,cAAc,aAAa,gBAAgB;;sBAElD,UAAU,CAAC,MAAD,CAAQ;;qDAEa,QAAQ,QACjD,WAAW,OAAO,IAAI;+BACH,aAAa,2BAChC,gBAAgB,QAAQ,UAAU;;wBAEtB,UAAU,CAAC,MAAD,CAAQ;;2CAEC,UAAU;;sBAE/B,cAAc;;2BAET,GAAG,GAAG,CAAN,GAAU,GAAG;;;;;2BAKb,GAAG,GAAG,CAAN,GAAU,GAAG;;;;;;;AAO/B,SAlCD;AAmCD;AACF;;AAED,SAAK,QAAL,GAAgB;;;;;;;;;UASV,QAAQ;;UAER,IAAI,CAAC,MAAM;;AAEhB,KAbD;AAcD;;AAtF6B","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { getGlslDifferences } from './glsl_version';\r\nexport class Im2ColPackedProgram {\r\n    constructor(outputShape, inputShape, convInfo) {\r\n        this.variableNames = ['A'];\r\n        this.packedInputs = true;\r\n        this.packedOutput = true;\r\n        this.outputShape = outputShape;\r\n        const { filterWidth, inChannels, strideWidth, strideHeight, padInfo, outWidth, dilationWidth, dilationHeight, dataFormat } = convInfo;\r\n        const { left, top } = padInfo;\r\n        const itemsPerBlockRow = inChannels * filterWidth;\r\n        const glsl = getGlslDifferences();\r\n        const isChannelsLast = dataFormat === 'channelsLast';\r\n        const rowDim = isChannelsLast ? 0 : 1;\r\n        const colDim = isChannelsLast ? 1 : 2;\r\n        let unrolled = ``;\r\n        for (let row = 0; row <= 1; row++) {\r\n            for (let col = 0; col <= 1; col++) {\r\n                unrolled += `\r\n          blockIndex = rc.y + ${col};\r\n          pos = rc.x + ${row};\r\n\r\n          if(blockIndex < ${outputShape[1]} && pos < ${outputShape[0]}) {\r\n            offsetY = int(blockIndex / (${outWidth})) * ${strideHeight} - ${top};\r\n            d0 = offsetY + ${dilationHeight} * (pos / ${itemsPerBlockRow});\r\n\r\n            if(d0 < ${inputShape[rowDim]} && d0 >= 0) {\r\n\r\n              offsetX = int(mod(float(blockIndex), ${outWidth}.) * ${strideWidth}. - ${left}.);\r\n              d1 = offsetX + ${dilationWidth} * (int(mod(float(pos), ${itemsPerBlockRow}.) / ${inChannels}.));\r\n\r\n              if(d1 < ${inputShape[colDim]} && d1 >= 0) {\r\n\r\n                ch = int(mod(float(pos), ${inChannels}.));\r\n\r\n                if (${isChannelsLast}) {\r\n                  innerDims = vec2(d1, ch);\r\n                  result[${row * 2 + col}] = getChannel(\r\n                    getA(d0, int(innerDims.x),\r\n                    int(innerDims.y)), innerDims);\r\n                } else {\r\n                  innerDims = vec2(d0, d1);\r\n                  result[${row * 2 + col}] = getChannel(\r\n                    getA(ch, int(innerDims.x),\r\n                    int(innerDims.y)), innerDims);\r\n                }\r\n              }\r\n            }\r\n          }\r\n        `;\r\n            }\r\n        }\r\n        this.userCode = `\r\n      void main() {\r\n        ivec2 rc = getOutputCoords();\r\n\r\n        vec4 result = vec4(0);\r\n\r\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\r\n        vec2 innerDims;\r\n\r\n        ${unrolled}\r\n\r\n        ${glsl.output} = result;\r\n      }\r\n    `;\r\n    }\r\n}\r\n//# sourceMappingURL=im2col_packed_gpu.js.map"]},"metadata":{},"sourceType":"module"}