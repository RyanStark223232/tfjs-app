{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { deprecationWarn } from '../globals';\nimport { AvgPool3D } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { cast } from './cast';\nimport * as conv_util from './conv_util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\r\n * Computes the 3D average pooling.\r\n *\r\n * ```js\r\n * const x = tf.tensor5d([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 2, 2, 1]);\r\n * const result = tf.avgPool3d(x, 2, 1, 'valid');\r\n * result.print();\r\n * ```\r\n *\r\n * @param x The input tensor, of rank 5 or rank 4 of shape\r\n *     `[batch, depth, height, width, inChannels]`.\r\n * @param filterSize The filter size:\r\n *     `[filterDepth, filterHeight, filterWidth]`.\r\n *     If `filterSize` is a single number,\r\n *     then `filterDepth == filterHeight == filterWidth`.\r\n * @param strides The strides of the pooling:\r\n *     `[strideDepth, strideHeight, strideWidth]`.\r\n *     If `strides` is a single number,\r\n *     then `strideDepth == strideHeight == strideWidth`.\r\n * @param pad The type of padding algorithm.\r\n *    - `same` and stride 1: output will be of same size as input,\r\n *       regardless of filter size.\r\n *    - `valid`: output will be smaller than input if filter is larger\r\n *       than 1*1x1.\r\n *    - For more info, see this guide:\r\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\r\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\r\n * @param dimRoundingMode The rounding mode used when computing output\r\n *     dimensions if pad is a number. If none is provided, it will not round\r\n *     and error if the output is of fractional size.\r\n * @param dataFormat An optional string from: \"NDHWC\", \"NCDHW\". Defaults to\r\n *     \"NDHWC\". Specify the data format of the input and output data. With the\r\n *     default format \"NDHWC\", the data is stored in the order of: [batch,\r\n *     depth, height, width, channels]. Only \"NDHWC\" is currently supported.\r\n * @param dilations Deprecated, this field will be gone in v3.0.0.\r\n *     The dilation rates:\r\n *     `[dilationDepth, dilationHeight, dilationWidth]`\r\n *     in which we sample input values across the depth, height and width\r\n *     dimensions in dilated pooling.\r\n *     Defaults to `[1, 1, 1]`. If `dilations` is a single number,\r\n *     then `dilationDepth == dilationHeight == dilationWidth`.\r\n *     If it is greater than 1, then all values of `strides` must be 1.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Convolution'}\r\n */\n\nfunction avgPool3d_(x, filterSize, strides, pad, dimRoundingMode, dataFormat = 'NDHWC', dilations) {\n  if (dilations == null) {\n    dilations = [1, 1, 1];\n  } else {\n    deprecationWarn('dilations is deprecated, this field will be gone in ' + 'v3.0.0.');\n  }\n\n  const $x = convertToTensor(x, 'x', 'avgPool3d', 'float32');\n  let x5D = $x;\n  let reshapedTo5D = false;\n\n  if ($x.rank === 4) {\n    reshapedTo5D = true;\n    x5D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2], $x.shape[3]]);\n  }\n\n  util.assert(x5D.rank === 5, () => `Error in avgPool3d: x must be rank 5 but got rank ${x5D.rank}.`);\n  util.assert(dataFormat === 'NDHWC', () => `Error in avgPool3d: Only NDHWC is currently supported, ` + `but got dataFormat of ${dataFormat}`);\n  util.assert(conv_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in avgPool3d: Either strides or dilations must be 1. ' + `Got strides ${strides} and dilations '${dilations}'`);\n\n  if (dimRoundingMode != null) {\n    util.assert(util.isInt(pad), () => `Error in avgPool3d: pad must be an integer when using, ` + `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n  }\n\n  const forward = (backend, save) => {\n    if (dilations == null) {\n      dilations = [1, 1, 1];\n    }\n\n    const convInfo = conv_util.computePool3DInfo(x5D.shape, filterSize, strides, dilations, pad, dimRoundingMode, dataFormat);\n    save([x5D]);\n    return backend.avgPool3d(x5D, convInfo);\n  };\n\n  const inputs = {\n    x: x5D\n  };\n  const attrs = {\n    filterSize,\n    strides,\n    pad,\n    dimRoundingMode,\n    dataFormat,\n    dilations\n  };\n  let res = ENGINE.runKernelFunc(forward, inputs, null\n  /* grad */\n  , AvgPool3D, attrs);\n  res = cast(res, x5D.dtype);\n\n  if (reshapedTo5D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);\n  }\n\n  return res;\n}\n\nexport const avgPool3d = op({\n  avgPool3d_\n});","map":{"version":3,"sources":["../../src/ops/avg_pool_3d.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { ENGINE } from '../engine';\r\nimport { deprecationWarn } from '../globals';\r\nimport { AvgPool3D } from '../kernel_names';\r\nimport { convertToTensor } from '../tensor_util_env';\r\nimport * as util from '../util';\r\nimport { cast } from './cast';\r\nimport * as conv_util from './conv_util';\r\nimport { op } from './operation';\r\nimport { reshape } from './reshape';\r\n/**\r\n * Computes the 3D average pooling.\r\n *\r\n * ```js\r\n * const x = tf.tensor5d([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 2, 2, 1]);\r\n * const result = tf.avgPool3d(x, 2, 1, 'valid');\r\n * result.print();\r\n * ```\r\n *\r\n * @param x The input tensor, of rank 5 or rank 4 of shape\r\n *     `[batch, depth, height, width, inChannels]`.\r\n * @param filterSize The filter size:\r\n *     `[filterDepth, filterHeight, filterWidth]`.\r\n *     If `filterSize` is a single number,\r\n *     then `filterDepth == filterHeight == filterWidth`.\r\n * @param strides The strides of the pooling:\r\n *     `[strideDepth, strideHeight, strideWidth]`.\r\n *     If `strides` is a single number,\r\n *     then `strideDepth == strideHeight == strideWidth`.\r\n * @param pad The type of padding algorithm.\r\n *    - `same` and stride 1: output will be of same size as input,\r\n *       regardless of filter size.\r\n *    - `valid`: output will be smaller than input if filter is larger\r\n *       than 1*1x1.\r\n *    - For more info, see this guide:\r\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\r\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\r\n * @param dimRoundingMode The rounding mode used when computing output\r\n *     dimensions if pad is a number. If none is provided, it will not round\r\n *     and error if the output is of fractional size.\r\n * @param dataFormat An optional string from: \"NDHWC\", \"NCDHW\". Defaults to\r\n *     \"NDHWC\". Specify the data format of the input and output data. With the\r\n *     default format \"NDHWC\", the data is stored in the order of: [batch,\r\n *     depth, height, width, channels]. Only \"NDHWC\" is currently supported.\r\n * @param dilations Deprecated, this field will be gone in v3.0.0.\r\n *     The dilation rates:\r\n *     `[dilationDepth, dilationHeight, dilationWidth]`\r\n *     in which we sample input values across the depth, height and width\r\n *     dimensions in dilated pooling.\r\n *     Defaults to `[1, 1, 1]`. If `dilations` is a single number,\r\n *     then `dilationDepth == dilationHeight == dilationWidth`.\r\n *     If it is greater than 1, then all values of `strides` must be 1.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Convolution'}\r\n */\r\nfunction avgPool3d_(x, filterSize, strides, pad, dimRoundingMode, dataFormat = 'NDHWC', dilations) {\r\n    if (dilations == null) {\r\n        dilations = [1, 1, 1];\r\n    }\r\n    else {\r\n        deprecationWarn('dilations is deprecated, this field will be gone in ' +\r\n            'v3.0.0.');\r\n    }\r\n    const $x = convertToTensor(x, 'x', 'avgPool3d', 'float32');\r\n    let x5D = $x;\r\n    let reshapedTo5D = false;\r\n    if ($x.rank === 4) {\r\n        reshapedTo5D = true;\r\n        x5D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2], $x.shape[3]]);\r\n    }\r\n    util.assert(x5D.rank === 5, () => `Error in avgPool3d: x must be rank 5 but got rank ${x5D.rank}.`);\r\n    util.assert(dataFormat === 'NDHWC', () => `Error in avgPool3d: Only NDHWC is currently supported, ` +\r\n        `but got dataFormat of ${dataFormat}`);\r\n    util.assert(conv_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in avgPool3d: Either strides or dilations must be 1. ' +\r\n        `Got strides ${strides} and dilations '${dilations}'`);\r\n    if (dimRoundingMode != null) {\r\n        util.assert(util.isInt(pad), () => `Error in avgPool3d: pad must be an integer when using, ` +\r\n            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\r\n    }\r\n    const forward = (backend, save) => {\r\n        if (dilations == null) {\r\n            dilations = [1, 1, 1];\r\n        }\r\n        const convInfo = conv_util.computePool3DInfo(x5D.shape, filterSize, strides, dilations, pad, dimRoundingMode, dataFormat);\r\n        save([x5D]);\r\n        return backend.avgPool3d(x5D, convInfo);\r\n    };\r\n    const inputs = { x: x5D };\r\n    const attrs = { filterSize, strides, pad, dimRoundingMode, dataFormat, dilations };\r\n    let res = ENGINE.runKernelFunc(forward, inputs, null /* grad */, AvgPool3D, attrs);\r\n    res = cast(res, x5D.dtype);\r\n    if (reshapedTo5D) {\r\n        return reshape(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);\r\n    }\r\n    return res;\r\n}\r\nexport const avgPool3d = op({ avgPool3d_ });\r\n//# sourceMappingURL=avg_pool_3d.js.map"]},"metadata":{},"sourceType":"module"}