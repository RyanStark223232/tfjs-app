{"ast":null,"code":"import _classCallCheck from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport var StridedSliceProgram = function StridedSliceProgram(begin, strides, size) {\n  _classCallCheck(this, StridedSliceProgram);\n\n  this.variableNames = ['x'];\n  this.outputShape = size;\n  var rank = size.length;\n  var inputDtype = getCoordsDataType(size.length);\n  var dtype = getCoordsDataType(size.length);\n  var newCoords = '';\n\n  if (rank === 1) {\n    newCoords = 'coords * strides + begin';\n  } else {\n    var outputAxis = 0;\n    newCoords = size.map(function (_, i) {\n      outputAxis++;\n      return size.length === 1 ? \"coords * strides[\".concat(i, \"] + begin[\").concat(i, \"]\") : \"coords[\".concat(outputAxis - 1, \"] * strides[\").concat(i, \"] + begin[\").concat(i, \"]\");\n    }).join(',');\n  }\n\n  this.userCode = \"\\n      \".concat(inputDtype, \" begin = \").concat(inputDtype, \"(\").concat(begin, \");\\n      \").concat(inputDtype, \" strides = \").concat(inputDtype, \"(\").concat(strides, \");\\n\\n      void main() {\\n        \").concat(dtype, \" coords = getOutputCoords();\\n        setOutput(getX(\").concat(newCoords, \"));\\n      }\\n    \");\n};","map":{"version":3,"sources":["../src/strided_slice_gpu.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AAGH,SAAQ,iBAAR,QAAgC,mBAAhC;AAEA,WAAa,mBAAb,GAKE,6BAAY,KAAZ,EAA6B,OAA7B,EAAgD,IAAhD,EAA8D;AAAA;;AAJ9D,OAAA,aAAA,GAAgB,CAAC,GAAD,CAAhB;AAKE,OAAK,WAAL,GAAmB,IAAnB;AACA,MAAM,IAAI,GAAG,IAAI,CAAC,MAAlB;AACA,MAAM,UAAU,GAAG,iBAAiB,CAAC,IAAI,CAAC,MAAN,CAApC;AACA,MAAM,KAAK,GAAG,iBAAiB,CAAC,IAAI,CAAC,MAAN,CAA/B;AAEA,MAAI,SAAS,GAAG,EAAhB;;AACA,MAAI,IAAI,KAAK,CAAb,EAAgB;AACd,IAAA,SAAS,GAAG,0BAAZ;AACD,GAFD,MAEO;AACL,QAAI,UAAU,GAAG,CAAjB;AACA,IAAA,SAAS,GACL,IAAI,CAAC,GAAL,CAAS,UAAC,CAAD,EAAI,CAAJ,EAAS;AACZ,MAAA,UAAU;AACV,aAAO,IAAI,CAAC,MAAL,KAAgB,CAAhB,8BACiB,CADjB,uBAC+B,CAD/B,0BAEO,UAAU,GAAG,CAFpB,yBAEoC,CAFpC,uBAEkD,CAFlD,MAAP;AAGD,KALL,EAMK,IANL,CAMU,GANV,CADJ;AAQD;;AAED,OAAK,QAAL,qBACI,UADJ,sBAC0B,UAD1B,cACwC,KADxC,uBAEI,UAFJ,wBAE4B,UAF5B,cAE0C,OAF1C,gDAKM,KALN,kEAMqB,SANrB;AASD,CAnCH","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2017 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { getCoordsDataType } from './shader_compiler';\r\nexport class StridedSliceProgram {\r\n    constructor(begin, strides, size) {\r\n        this.variableNames = ['x'];\r\n        this.outputShape = size;\r\n        const rank = size.length;\r\n        const inputDtype = getCoordsDataType(size.length);\r\n        const dtype = getCoordsDataType(size.length);\r\n        let newCoords = '';\r\n        if (rank === 1) {\r\n            newCoords = 'coords * strides + begin';\r\n        }\r\n        else {\r\n            let outputAxis = 0;\r\n            newCoords =\r\n                size.map((_, i) => {\r\n                    outputAxis++;\r\n                    return size.length === 1 ?\r\n                        `coords * strides[${i}] + begin[${i}]` :\r\n                        `coords[${outputAxis - 1}] * strides[${i}] + begin[${i}]`;\r\n                })\r\n                    .join(',');\r\n        }\r\n        this.userCode = `\r\n      ${inputDtype} begin = ${inputDtype}(${begin});\r\n      ${inputDtype} strides = ${inputDtype}(${strides});\r\n\r\n      void main() {\r\n        ${dtype} coords = getOutputCoords();\r\n        setOutput(getX(${newCoords}));\r\n      }\r\n    `;\r\n    }\r\n}\r\n//# sourceMappingURL=strided_slice_gpu.js.map"]},"metadata":{},"sourceType":"module"}