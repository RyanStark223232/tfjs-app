{"ast":null,"code":"import { isBigNumber, isCollection, isNumber } from '../../utils/is';\nimport { factory } from '../../utils/factory';\nimport { errorTransform } from './utils/errorTransform';\nimport { createMin } from '../../function/statistics/min';\nvar name = 'min';\nvar dependencies = ['typed', 'config', 'numeric', 'smaller'];\nexport var createMinTransform = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      numeric = _ref.numeric,\n      smaller = _ref.smaller;\n  var min = createMin({\n    typed: typed,\n    config: config,\n    numeric: numeric,\n    smaller: smaller\n  });\n  /**\r\n   * Attach a transform function to math.min\r\n   * Adds a property transform containing the transform function.\r\n   *\r\n   * This transform changed the last `dim` parameter of function min\r\n   * from one-based to zero based\r\n   */\n\n  return typed('min', {\n    '...any': function any(args) {\n      // change last argument dim from one-based to zero-based\n      if (args.length === 2 && isCollection(args[0])) {\n        var dim = args[1];\n\n        if (isNumber(dim)) {\n          args[1] = dim - 1;\n        } else if (isBigNumber(dim)) {\n          args[1] = dim.minus(1);\n        }\n      }\n\n      try {\n        return min.apply(null, args);\n      } catch (err) {\n        throw errorTransform(err);\n      }\n    }\n  });\n}, {\n  isTransformFunction: true\n});","map":{"version":3,"sources":["C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/mathjs/es/expression/transform/min.transform.js"],"names":["isBigNumber","isCollection","isNumber","factory","errorTransform","createMin","name","dependencies","createMinTransform","_ref","typed","config","numeric","smaller","min","any","args","length","dim","minus","apply","err","isTransformFunction"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,YAAtB,EAAoCC,QAApC,QAAoD,gBAApD;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,SAASC,cAAT,QAA+B,wBAA/B;AACA,SAASC,SAAT,QAA0B,+BAA1B;AACA,IAAIC,IAAI,GAAG,KAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,SAApB,EAA+B,SAA/B,CAAnB;AACA,OAAO,IAAIC,kBAAkB,GAAG,eAAeL,OAAO,CAACG,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AACzF,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAAA,MACIC,MAAM,GAAGF,IAAI,CAACE,MADlB;AAAA,MAEIC,OAAO,GAAGH,IAAI,CAACG,OAFnB;AAAA,MAGIC,OAAO,GAAGJ,IAAI,CAACI,OAHnB;AAIA,MAAIC,GAAG,GAAGT,SAAS,CAAC;AAClBK,IAAAA,KAAK,EAAEA,KADW;AAElBC,IAAAA,MAAM,EAAEA,MAFU;AAGlBC,IAAAA,OAAO,EAAEA,OAHS;AAIlBC,IAAAA,OAAO,EAAEA;AAJS,GAAD,CAAnB;AAMA;AACF;AACA;AACA;AACA;AACA;AACA;;AAEE,SAAOH,KAAK,CAAC,KAAD,EAAQ;AAClB,cAAU,SAASK,GAAT,CAAaC,IAAb,EAAmB;AAC3B;AACA,UAAIA,IAAI,CAACC,MAAL,KAAgB,CAAhB,IAAqBhB,YAAY,CAACe,IAAI,CAAC,CAAD,CAAL,CAArC,EAAgD;AAC9C,YAAIE,GAAG,GAAGF,IAAI,CAAC,CAAD,CAAd;;AAEA,YAAId,QAAQ,CAACgB,GAAD,CAAZ,EAAmB;AACjBF,UAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUE,GAAG,GAAG,CAAhB;AACD,SAFD,MAEO,IAAIlB,WAAW,CAACkB,GAAD,CAAf,EAAsB;AAC3BF,UAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUE,GAAG,CAACC,KAAJ,CAAU,CAAV,CAAV;AACD;AACF;;AAED,UAAI;AACF,eAAOL,GAAG,CAACM,KAAJ,CAAU,IAAV,EAAgBJ,IAAhB,CAAP;AACD,OAFD,CAEE,OAAOK,GAAP,EAAY;AACZ,cAAMjB,cAAc,CAACiB,GAAD,CAApB;AACD;AACF;AAlBiB,GAAR,CAAZ;AAoBD,CAvCqD,EAuCnD;AACDC,EAAAA,mBAAmB,EAAE;AADpB,CAvCmD,CAA/C","sourcesContent":["import { isBigNumber, isCollection, isNumber } from '../../utils/is';\r\nimport { factory } from '../../utils/factory';\r\nimport { errorTransform } from './utils/errorTransform';\r\nimport { createMin } from '../../function/statistics/min';\r\nvar name = 'min';\r\nvar dependencies = ['typed', 'config', 'numeric', 'smaller'];\r\nexport var createMinTransform = /* #__PURE__ */factory(name, dependencies, function (_ref) {\r\n  var typed = _ref.typed,\r\n      config = _ref.config,\r\n      numeric = _ref.numeric,\r\n      smaller = _ref.smaller;\r\n  var min = createMin({\r\n    typed: typed,\r\n    config: config,\r\n    numeric: numeric,\r\n    smaller: smaller\r\n  });\r\n  /**\r\n   * Attach a transform function to math.min\r\n   * Adds a property transform containing the transform function.\r\n   *\r\n   * This transform changed the last `dim` parameter of function min\r\n   * from one-based to zero based\r\n   */\r\n\r\n  return typed('min', {\r\n    '...any': function any(args) {\r\n      // change last argument dim from one-based to zero-based\r\n      if (args.length === 2 && isCollection(args[0])) {\r\n        var dim = args[1];\r\n\r\n        if (isNumber(dim)) {\r\n          args[1] = dim - 1;\r\n        } else if (isBigNumber(dim)) {\r\n          args[1] = dim.minus(1);\r\n        }\r\n      }\r\n\r\n      try {\r\n        return min.apply(null, args);\r\n      } catch (err) {\r\n        throw errorTransform(err);\r\n      }\r\n    }\r\n  });\r\n}, {\r\n  isTransformFunction: true\r\n});"]},"metadata":{},"sourceType":"module"}