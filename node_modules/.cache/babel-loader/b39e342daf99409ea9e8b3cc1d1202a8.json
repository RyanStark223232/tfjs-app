{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { GatherV2 } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { parseAxisParam } from '../util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\nimport { collectGatherOpShapeInfo } from './segment_util';\n/**\r\n * Gather slices from tensor `x`'s axis `axis` according to `indices`.\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([1, 2, 3, 4]);\r\n * const indices = tf.tensor1d([1, 3, 3], 'int32');\r\n *\r\n * x.gather(indices).print();\r\n * ```\r\n *\r\n * ```js\r\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\r\n * const indices = tf.tensor1d([1, 1, 0], 'int32');\r\n *\r\n * x.gather(indices).print();\r\n * ```\r\n * @param x The input tensor whose slices to be gathered.\r\n * @param indices The indices of the values to extract.\r\n * @param axis The axis over which to select values. Defaults to 0.\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\r\n */\n\nfunction gather_(x, indices) {\n  var axis = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var $x = convertToTensor(x, 'x', 'gather');\n  var $indices = convertToTensor(indices, 'indices', 'gather', 'int32');\n  var inputs = {\n    x: $x,\n    indices: $indices\n  };\n  var attrs = {\n    axis: axis\n  };\n\n  var forward = function forward(backend, save) {\n    var parsedAxis = parseAxisParam(axis, $x.shape)[0];\n    var shapeInfo = collectGatherOpShapeInfo($x, $indices, parsedAxis);\n    var res = backend.gather($x, reshape($indices, [$indices.size]), parsedAxis);\n    save([$x, $indices]);\n    return reshape(res, shapeInfo.outputShape);\n  };\n\n  return ENGINE.runKernelFunc(forward, inputs, null\n  /* grad */\n  , GatherV2, attrs);\n}\n\nexport var gather = op({\n  gather_: gather_\n});","map":{"version":3,"sources":["../../src/ops/gather.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,MAAR,QAAkC,WAAlC;AACA,SAAQ,QAAR,QAAsD,iBAAtD;AAIA,SAAQ,eAAR,QAA8B,oBAA9B;AAEA,SAAQ,cAAR,QAA6B,SAA7B;AAEA,SAAQ,EAAR,QAAiB,aAAjB;AACA,SAAQ,OAAR,QAAsB,WAAtB;AACA,SAAQ,wBAAR,QAAuC,gBAAvC;AAEA;;;;;;;;;;;;;;;;;;;;;AAqBG;;AACH,SAAS,OAAT,CACI,CADJ,EACqB,OADrB,EACyD;AAAA,MAAR,IAAQ,uEAAD,CAAC;AACvD,MAAM,EAAE,GAAG,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,QAAT,CAA1B;AACA,MAAM,QAAQ,GAAG,eAAe,CAAC,OAAD,EAAU,SAAV,EAAqB,QAArB,EAA+B,OAA/B,CAAhC;AAEA,MAAM,MAAM,GAAmB;AAAC,IAAA,CAAC,EAAE,EAAJ;AAAQ,IAAA,OAAO,EAAE;AAAjB,GAA/B;AACA,MAAM,KAAK,GAAkB;AAAC,IAAA,IAAI,EAAJ;AAAD,GAA7B;;AAEA,MAAM,OAAO,GAAwB,SAA/B,OAA+B,CAAC,OAAD,EAAU,IAAV,EAAkB;AACrD,QAAM,UAAU,GAAG,cAAc,CAAC,IAAD,EAAO,EAAE,CAAC,KAAV,CAAd,CAA+B,CAA/B,CAAnB;AACA,QAAM,SAAS,GAAG,wBAAwB,CAAC,EAAD,EAAK,QAAL,EAAe,UAAf,CAA1C;AAEA,QAAM,GAAG,GACL,OAAO,CAAC,MAAR,CAAe,EAAf,EAAmB,OAAO,CAAC,QAAD,EAAW,CAAC,QAAQ,CAAC,IAAV,CAAX,CAA1B,EAAuD,UAAvD,CADJ;AAEA,IAAA,IAAI,CAAC,CAAC,EAAD,EAAK,QAAL,CAAD,CAAJ;AAEA,WAAO,OAAO,CAAC,GAAD,EAAM,SAAS,CAAC,WAAhB,CAAd;AACD,GATD;;AAWA,SAAO,MAAM,CAAC,aAAP,CACI,OADJ,EACa,MADb,EAC6C;AAAK;AADlD,IAC8D,QAD9D,EAEI,KAFJ,CAAP;AAGD;;AAED,OAAO,IAAM,MAAM,GAAG,EAAE,CAAC;AAAC,EAAA,OAAO,EAAP;AAAD,CAAD,CAAjB","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { ENGINE } from '../engine';\r\nimport { GatherV2 } from '../kernel_names';\r\nimport { convertToTensor } from '../tensor_util_env';\r\nimport { parseAxisParam } from '../util';\r\nimport { op } from './operation';\r\nimport { reshape } from './reshape';\r\nimport { collectGatherOpShapeInfo } from './segment_util';\r\n/**\r\n * Gather slices from tensor `x`'s axis `axis` according to `indices`.\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([1, 2, 3, 4]);\r\n * const indices = tf.tensor1d([1, 3, 3], 'int32');\r\n *\r\n * x.gather(indices).print();\r\n * ```\r\n *\r\n * ```js\r\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\r\n * const indices = tf.tensor1d([1, 1, 0], 'int32');\r\n *\r\n * x.gather(indices).print();\r\n * ```\r\n * @param x The input tensor whose slices to be gathered.\r\n * @param indices The indices of the values to extract.\r\n * @param axis The axis over which to select values. Defaults to 0.\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\r\n */\r\nfunction gather_(x, indices, axis = 0) {\r\n    const $x = convertToTensor(x, 'x', 'gather');\r\n    const $indices = convertToTensor(indices, 'indices', 'gather', 'int32');\r\n    const inputs = { x: $x, indices: $indices };\r\n    const attrs = { axis };\r\n    const forward = (backend, save) => {\r\n        const parsedAxis = parseAxisParam(axis, $x.shape)[0];\r\n        const shapeInfo = collectGatherOpShapeInfo($x, $indices, parsedAxis);\r\n        const res = backend.gather($x, reshape($indices, [$indices.size]), parsedAxis);\r\n        save([$x, $indices]);\r\n        return reshape(res, shapeInfo.outputShape);\r\n    };\r\n    return ENGINE.runKernelFunc(forward, inputs, null /* grad */, GatherV2, attrs);\r\n}\r\nexport const gather = op({ gather_ });\r\n//# sourceMappingURL=gather.js.map"]},"metadata":{},"sourceType":"module"}