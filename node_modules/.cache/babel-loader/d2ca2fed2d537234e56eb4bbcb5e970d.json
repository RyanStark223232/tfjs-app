{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nexport class ComplexAbsProgram {\n  constructor(shape) {\n    this.variableNames = ['real', 'imag'];\n    this.outputShape = shape;\n    this.userCode = `\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    `;\n  }\n\n}","map":{"version":3,"sources":["../src/complex_abs_gpu.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAIH,OAAM,MAAO,iBAAP,CAAwB;AAK5B,EAAA,WAAA,CAAY,KAAZ,EAA2B;AAJ3B,SAAA,aAAA,GAAgB,CAAC,MAAD,EAAS,MAAT,CAAhB;AAKE,SAAK,WAAL,GAAmB,KAAnB;AACA,SAAK,QAAL,GAAgB;;;;;;;;;;;;;AAaf,KAbD;AAcD;;AArB2B","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nexport class ComplexAbsProgram {\r\n    constructor(shape) {\r\n        this.variableNames = ['real', 'imag'];\r\n        this.outputShape = shape;\r\n        this.userCode = `\r\n      void main() {\r\n        float re = abs(getRealAtOutCoords());\r\n        float im = abs(getImagAtOutCoords());\r\n        float mx = max(re, im);\r\n\r\n        // sadly the length function in glsl is not underflow-safe\r\n        // (at least not on Intel GPUs). So the safe solution is\r\n        // to ensure underflow-safety in all cases.\r\n        setOutput(\r\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\r\n        );\r\n      }\r\n    `;\r\n    }\r\n}\r\n//# sourceMappingURL=complex_abs_gpu.js.map"]},"metadata":{},"sourceType":"module"}