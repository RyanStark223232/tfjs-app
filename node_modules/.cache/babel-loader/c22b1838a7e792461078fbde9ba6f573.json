{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { BatchMatMul } from '../kernel_names';\nimport { matMul } from '../ops/mat_mul';\nexport const batchMatMulGradConfig = {\n  kernelName: BatchMatMul,\n  inputsToSave: ['a', 'b'],\n  gradFunc: (dy, saved, attrs) => {\n    const [a, b] = saved;\n    const {\n      transposeA,\n      transposeB\n    } = attrs;\n\n    if (!transposeA && !transposeB) {\n      return {\n        a: () => matMul(dy, b, false, true),\n        b: () => matMul(a, dy, true, false)\n      };\n    } else if (!transposeA && transposeB) {\n      return {\n        a: () => matMul(dy, b, false, false),\n        b: () => matMul(dy, a, true, false)\n      };\n    } else if (transposeA && !transposeB) {\n      return {\n        a: () => matMul(b, dy, false, true),\n        b: () => matMul(a, dy, false, false)\n      };\n    } else {\n      return {\n        a: () => matMul(b, dy, true, true),\n        b: () => matMul(dy, a, true, true)\n      };\n    }\n  }\n};","map":{"version":3,"sources":["../../src/gradients/BatchMatMul_grad.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,WAAR,QAA4C,iBAA5C;AAEA,SAAQ,MAAR,QAAqB,gBAArB;AAGA,OAAO,MAAM,qBAAqB,GAAe;AAC/C,EAAA,UAAU,EAAE,WADmC;AAE/C,EAAA,YAAY,EAAE,CAAC,GAAD,EAAM,GAAN,CAFiC;AAG/C,EAAA,QAAQ,EAAE,CAAC,EAAD,EAAa,KAAb,EAA8B,KAA9B,KAAqD;AAC7D,UAAM,CAAC,CAAD,EAAI,CAAJ,IAAS,KAAf;AAEA,UAAM;AAAC,MAAA,UAAD;AAAa,MAAA;AAAb,QAA2B,KAAjC;;AAEA,QAAI,CAAC,UAAD,IAAe,CAAC,UAApB,EAAgC;AAC9B,aAAO;AACL,QAAA,CAAC,EAAE,MAAM,MAAM,CAAC,EAAD,EAAK,CAAL,EAAQ,KAAR,EAAe,IAAf,CADV;AAEL,QAAA,CAAC,EAAE,MAAM,MAAM,CAAC,CAAD,EAAI,EAAJ,EAAQ,IAAR,EAAc,KAAd;AAFV,OAAP;AAID,KALD,MAKO,IAAI,CAAC,UAAD,IAAe,UAAnB,EAA+B;AACpC,aAAO;AACL,QAAA,CAAC,EAAE,MAAM,MAAM,CAAC,EAAD,EAAK,CAAL,EAAQ,KAAR,EAAe,KAAf,CADV;AAEL,QAAA,CAAC,EAAE,MAAM,MAAM,CAAC,EAAD,EAAK,CAAL,EAAQ,IAAR,EAAc,KAAd;AAFV,OAAP;AAID,KALM,MAKA,IAAI,UAAU,IAAI,CAAC,UAAnB,EAA+B;AACpC,aAAO;AACL,QAAA,CAAC,EAAE,MAAM,MAAM,CAAC,CAAD,EAAI,EAAJ,EAAQ,KAAR,EAAe,IAAf,CADV;AAEL,QAAA,CAAC,EAAE,MAAM,MAAM,CAAC,CAAD,EAAI,EAAJ,EAAQ,KAAR,EAAe,KAAf;AAFV,OAAP;AAID,KALM,MAKA;AACL,aAAO;AACL,QAAA,CAAC,EAAE,MAAM,MAAM,CAAC,CAAD,EAAI,EAAJ,EAAQ,IAAR,EAAc,IAAd,CADV;AAEL,QAAA,CAAC,EAAE,MAAM,MAAM,CAAC,EAAD,EAAK,CAAL,EAAQ,IAAR,EAAc,IAAd;AAFV,OAAP;AAID;AACF;AA7B8C,CAA1C","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { BatchMatMul } from '../kernel_names';\r\nimport { matMul } from '../ops/mat_mul';\r\nexport const batchMatMulGradConfig = {\r\n    kernelName: BatchMatMul,\r\n    inputsToSave: ['a', 'b'],\r\n    gradFunc: (dy, saved, attrs) => {\r\n        const [a, b] = saved;\r\n        const { transposeA, transposeB } = attrs;\r\n        if (!transposeA && !transposeB) {\r\n            return {\r\n                a: () => matMul(dy, b, false, true),\r\n                b: () => matMul(a, dy, true, false)\r\n            };\r\n        }\r\n        else if (!transposeA && transposeB) {\r\n            return {\r\n                a: () => matMul(dy, b, false, false),\r\n                b: () => matMul(dy, a, true, false)\r\n            };\r\n        }\r\n        else if (transposeA && !transposeB) {\r\n            return {\r\n                a: () => matMul(b, dy, false, true),\r\n                b: () => matMul(a, dy, false, false)\r\n            };\r\n        }\r\n        else {\r\n            return {\r\n                a: () => matMul(b, dy, true, true),\r\n                b: () => matMul(dy, a, true, true)\r\n            };\r\n        }\r\n    }\r\n};\r\n//# sourceMappingURL=BatchMatMul_grad.js.map"]},"metadata":{},"sourceType":"module"}