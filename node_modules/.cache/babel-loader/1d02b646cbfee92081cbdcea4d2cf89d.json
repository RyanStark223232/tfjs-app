{"ast":null,"code":"import _classCallCheck from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nexport var AvgPool2DBackpropProgram = function AvgPool2DBackpropProgram(convInfo) {\n  _classCallCheck(this, AvgPool2DBackpropProgram);\n\n  this.variableNames = ['dy'];\n  this.outputShape = convInfo.inShape;\n  var filterHeight = convInfo.filterHeight;\n  var filterWidth = convInfo.filterWidth;\n  var strideHeight = convInfo.strideHeight;\n  var strideWidth = convInfo.strideWidth;\n  var dilationHeight = convInfo.dilationHeight;\n  var dilationWidth = convInfo.dilationWidth;\n  var effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  var effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  var padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  var padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  var avgMultiplier = 1 / (filterHeight * filterWidth);\n  this.userCode = \"\\n      const ivec2 pads = ivec2(\".concat(padTop, \", \").concat(padLeft, \");\\n      const float avgMultiplier = float(\").concat(avgMultiplier, \");\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n\\n        ivec2 dyRCCorner = coords.yz - pads;\\n        int dyRCorner = dyRCCorner.x;\\n        int dyCCorner = dyRCCorner.y;\\n\\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n        for (int wR = 0; wR < \").concat(effectiveFilterHeight, \";\\n            wR += \").concat(dilationHeight, \") {\\n          float dyR = float(dyRCorner + wR) / \").concat(strideHeight, \".0;\\n\\n          if (dyR < 0.0 || dyR >= \").concat(convInfo.outHeight, \".0 || fract(dyR) > 0.0) {\\n            continue;\\n          }\\n          int idyR = int(dyR);\\n\\n          for (int wC = 0; wC < \").concat(effectiveFilterWidth, \";\\n            wC+= \").concat(dilationWidth, \") {\\n            float dyC = float(dyCCorner + wC) / \").concat(strideWidth, \".0;\\n\\n            if (dyC < 0.0 || dyC >= \").concat(convInfo.outWidth, \".0 ||\\n                fract(dyC) > 0.0) {\\n              continue;\\n            }\\n            int idyC = int(dyC);\\n\\n            float dyValue = getDy(b, idyR, idyC, d);\\n\\n            dotProd += dyValue * avgMultiplier;\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \");\n};\nexport var AvgPool3DBackpropProgram = function AvgPool3DBackpropProgram(convInfo) {\n  _classCallCheck(this, AvgPool3DBackpropProgram);\n\n  this.variableNames = ['dy'];\n  this.outputShape = convInfo.inShape;\n  var filterDepth = convInfo.filterDepth;\n  var filterHeight = convInfo.filterHeight;\n  var filterWidth = convInfo.filterWidth;\n  var strideDepth = convInfo.strideDepth;\n  var strideHeight = convInfo.strideHeight;\n  var strideWidth = convInfo.strideWidth;\n  var dilationDepth = convInfo.dilationDepth;\n  var dilationHeight = convInfo.dilationHeight;\n  var dilationWidth = convInfo.dilationWidth;\n  var effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  var effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  var effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  var padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n  var padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  var padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  var avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);\n  this.userCode = \"\\n      const ivec3 pads = ivec3(\".concat(padFront, \", \").concat(padTop, \", \").concat(padLeft, \");\\n      const float avgMultiplier = float(\").concat(avgMultiplier, \");\\n\\n      void main() {\\n        ivec5 coords = getOutputCoords();\\n        int batch = coords.x;\\n        int ch = coords.u;\\n\\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\\n        int dyDCorner = dyCorner.x;\\n        int dyRCorner = dyCorner.y;\\n        int dyCCorner = dyCorner.z;\\n\\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\\n        // dx(xD, xR, xC, ch).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n\\n        for (int wD = 0; wD < \").concat(effectiveFilterDepth, \";\\n            wD += \").concat(dilationDepth, \") {\\n          float dyD = float(dyDCorner + wD) / \").concat(strideDepth, \".0;\\n\\n          if (dyD < 0.0 || dyD >= \").concat(convInfo.outDepth, \".0 || fract(dyD) > 0.0) {\\n            continue;\\n          }\\n          int idyD = int(dyD);\\n\\n          for (int wR = 0; wR < \").concat(effectiveFilterHeight, \";\\n              wR += \").concat(dilationHeight, \") {\\n            float dyR = float(dyRCorner + wR) / \").concat(strideHeight, \".0;\\n\\n            if (dyR < 0.0 || dyR >= \").concat(convInfo.outHeight, \".0 ||\\n                fract(dyR) > 0.0) {\\n              continue;\\n            }\\n            int idyR = int(dyR);\\n\\n            for (int wC = 0; wC < \").concat(effectiveFilterWidth, \";\\n                wC += \").concat(dilationWidth, \") {\\n              float dyC = float(dyCCorner + wC) / \").concat(strideWidth, \".0;\\n\\n              if (dyC < 0.0 || dyC >= \").concat(convInfo.outWidth, \".0 ||\\n                  fract(dyC) > 0.0) {\\n                continue;\\n              }\\n              int idyC = int(dyC);\\n\\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\\n\\n              dotProd += dyValue * avgMultiplier;\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \");\n};","map":{"version":3,"sources":["../src/avg_pool_backprop_gpu.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AAKH,WAAa,wBAAb,GAKE,kCAAY,QAAZ,EAA6C;AAAA;;AAJ7C,OAAA,aAAA,GAAgB,CAAC,IAAD,CAAhB;AAKE,OAAK,WAAL,GAAmB,QAAQ,CAAC,OAA5B;AACA,MAAM,YAAY,GAAG,QAAQ,CAAC,YAA9B;AACA,MAAM,WAAW,GAAG,QAAQ,CAAC,WAA7B;AACA,MAAM,YAAY,GAAG,QAAQ,CAAC,YAA9B;AACA,MAAM,WAAW,GAAG,QAAQ,CAAC,WAA7B;AACA,MAAM,cAAc,GAAG,QAAQ,CAAC,cAAhC;AACA,MAAM,aAAa,GAAG,QAAQ,CAAC,aAA/B;AACA,MAAM,qBAAqB,GAAG,QAAQ,CAAC,qBAAvC;AACA,MAAM,oBAAoB,GAAG,QAAQ,CAAC,oBAAtC;AAEA,MAAM,MAAM,GAAG,qBAAqB,GAAG,CAAxB,GAA4B,QAAQ,CAAC,OAAT,CAAiB,GAA5D;AACA,MAAM,OAAO,GAAG,oBAAoB,GAAG,CAAvB,GAA2B,QAAQ,CAAC,OAAT,CAAiB,IAA5D;AAEA,MAAM,aAAa,GAAG,KAAK,YAAY,GAAG,WAApB,CAAtB;AAEA,OAAK,QAAL,8CAC6B,MAD7B,eACwC,OADxC,yDAEsC,aAFtC,2dAgB4B,qBAhB5B,kCAiBgB,cAjBhB,gEAkB4C,YAlB5C,sDAoBgC,QAAQ,CAAC,SApBzC,8IAyB8B,oBAzB9B,iCA0Be,aA1Bf,kEA2B8C,WA3B9C,wDA6BkC,QAAQ,CAAC,QA7B3C;AA2CD,CAhEH;AAmEA,WAAa,wBAAb,GAKE,kCAAY,QAAZ,EAA6C;AAAA;;AAJ7C,OAAA,aAAA,GAAgB,CAAC,IAAD,CAAhB;AAKE,OAAK,WAAL,GAAmB,QAAQ,CAAC,OAA5B;AACA,MAAM,WAAW,GAAG,QAAQ,CAAC,WAA7B;AACA,MAAM,YAAY,GAAG,QAAQ,CAAC,YAA9B;AACA,MAAM,WAAW,GAAG,QAAQ,CAAC,WAA7B;AACA,MAAM,WAAW,GAAG,QAAQ,CAAC,WAA7B;AACA,MAAM,YAAY,GAAG,QAAQ,CAAC,YAA9B;AACA,MAAM,WAAW,GAAG,QAAQ,CAAC,WAA7B;AACA,MAAM,aAAa,GAAG,QAAQ,CAAC,aAA/B;AACA,MAAM,cAAc,GAAG,QAAQ,CAAC,cAAhC;AACA,MAAM,aAAa,GAAG,QAAQ,CAAC,aAA/B;AACA,MAAM,oBAAoB,GAAG,QAAQ,CAAC,oBAAtC;AACA,MAAM,qBAAqB,GAAG,QAAQ,CAAC,qBAAvC;AACA,MAAM,oBAAoB,GAAG,QAAQ,CAAC,oBAAtC;AAEA,MAAM,QAAQ,GAAG,oBAAoB,GAAG,CAAvB,GAA2B,QAAQ,CAAC,OAAT,CAAiB,KAA7D;AACA,MAAM,MAAM,GAAG,qBAAqB,GAAG,CAAxB,GAA4B,QAAQ,CAAC,OAAT,CAAiB,GAA5D;AACA,MAAM,OAAO,GAAG,oBAAoB,GAAG,CAAvB,GAA2B,QAAQ,CAAC,OAAT,CAAiB,IAA5D;AAEA,MAAM,aAAa,GAAG,KAAK,WAAW,GAAG,YAAd,GAA6B,WAAlC,CAAtB;AAEA,OAAK,QAAL,8CAC6B,QAD7B,eAC0C,MAD1C,eACqD,OADrD,yDAEsC,aAFtC,ijBAmB4B,oBAnB5B,kCAoBgB,aApBhB,gEAqB4C,WArB5C,sDAuBgC,QAAQ,CAAC,QAvBzC,8IA4B8B,qBA5B9B,oCA6BkB,cA7BlB,kEA8B8C,YA9B9C,wDAgCkC,QAAQ,CAAC,SAhC3C,uKAsCgC,oBAtChC,sCAuCoB,aAvCpB,oEAwCgD,WAxChD,0DA0CoC,QAAQ,CAAC,QA1C7C;AAyDD,CAnFH","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2017 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nexport class AvgPool2DBackpropProgram {\r\n    constructor(convInfo) {\r\n        this.variableNames = ['dy'];\r\n        this.outputShape = convInfo.inShape;\r\n        const filterHeight = convInfo.filterHeight;\r\n        const filterWidth = convInfo.filterWidth;\r\n        const strideHeight = convInfo.strideHeight;\r\n        const strideWidth = convInfo.strideWidth;\r\n        const dilationHeight = convInfo.dilationHeight;\r\n        const dilationWidth = convInfo.dilationWidth;\r\n        const effectiveFilterHeight = convInfo.effectiveFilterHeight;\r\n        const effectiveFilterWidth = convInfo.effectiveFilterWidth;\r\n        const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\r\n        const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\r\n        const avgMultiplier = 1 / (filterHeight * filterWidth);\r\n        this.userCode = `\r\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\r\n      const float avgMultiplier = float(${avgMultiplier});\r\n\r\n      void main() {\r\n        ivec4 coords = getOutputCoords();\r\n        int b = coords[0];\r\n        int d = coords[3];\r\n\r\n        ivec2 dyRCCorner = coords.yz - pads;\r\n        int dyRCorner = dyRCCorner.x;\r\n        int dyCCorner = dyRCCorner.y;\r\n\r\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\r\n        // ? = to be determined. : = across all values in that axis.\r\n        float dotProd = 0.0;\r\n        for (int wR = 0; wR < ${effectiveFilterHeight};\r\n            wR += ${dilationHeight}) {\r\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\r\n\r\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\r\n            continue;\r\n          }\r\n          int idyR = int(dyR);\r\n\r\n          for (int wC = 0; wC < ${effectiveFilterWidth};\r\n            wC+= ${dilationWidth}) {\r\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\r\n\r\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\r\n                fract(dyC) > 0.0) {\r\n              continue;\r\n            }\r\n            int idyC = int(dyC);\r\n\r\n            float dyValue = getDy(b, idyR, idyC, d);\r\n\r\n            dotProd += dyValue * avgMultiplier;\r\n          }\r\n        }\r\n        setOutput(dotProd);\r\n      }\r\n    `;\r\n    }\r\n}\r\nexport class AvgPool3DBackpropProgram {\r\n    constructor(convInfo) {\r\n        this.variableNames = ['dy'];\r\n        this.outputShape = convInfo.inShape;\r\n        const filterDepth = convInfo.filterDepth;\r\n        const filterHeight = convInfo.filterHeight;\r\n        const filterWidth = convInfo.filterWidth;\r\n        const strideDepth = convInfo.strideDepth;\r\n        const strideHeight = convInfo.strideHeight;\r\n        const strideWidth = convInfo.strideWidth;\r\n        const dilationDepth = convInfo.dilationDepth;\r\n        const dilationHeight = convInfo.dilationHeight;\r\n        const dilationWidth = convInfo.dilationWidth;\r\n        const effectiveFilterDepth = convInfo.effectiveFilterDepth;\r\n        const effectiveFilterHeight = convInfo.effectiveFilterHeight;\r\n        const effectiveFilterWidth = convInfo.effectiveFilterWidth;\r\n        const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\r\n        const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\r\n        const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\r\n        const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);\r\n        this.userCode = `\r\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\r\n      const float avgMultiplier = float(${avgMultiplier});\r\n\r\n      void main() {\r\n        ivec5 coords = getOutputCoords();\r\n        int batch = coords.x;\r\n        int ch = coords.u;\r\n\r\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\r\n        int dyDCorner = dyCorner.x;\r\n        int dyRCorner = dyCorner.y;\r\n        int dyCCorner = dyCorner.z;\r\n\r\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\r\n        // dx(xD, xR, xC, ch).\r\n        // ? = to be determined. : = across all values in that axis.\r\n        float dotProd = 0.0;\r\n\r\n        for (int wD = 0; wD < ${effectiveFilterDepth};\r\n            wD += ${dilationDepth}) {\r\n          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;\r\n\r\n          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {\r\n            continue;\r\n          }\r\n          int idyD = int(dyD);\r\n\r\n          for (int wR = 0; wR < ${effectiveFilterHeight};\r\n              wR += ${dilationHeight}) {\r\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\r\n\r\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\r\n                fract(dyR) > 0.0) {\r\n              continue;\r\n            }\r\n            int idyR = int(dyR);\r\n\r\n            for (int wC = 0; wC < ${effectiveFilterWidth};\r\n                wC += ${dilationWidth}) {\r\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\r\n\r\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\r\n                  fract(dyC) > 0.0) {\r\n                continue;\r\n              }\r\n              int idyC = int(dyC);\r\n\r\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\r\n\r\n              dotProd += dyValue * avgMultiplier;\r\n            }\r\n          }\r\n        }\r\n        setOutput(dotProd);\r\n      }\r\n    `;\r\n    }\r\n}\r\n//# sourceMappingURL=avg_pool_backprop_gpu.js.map"]},"metadata":{},"sourceType":"module"}