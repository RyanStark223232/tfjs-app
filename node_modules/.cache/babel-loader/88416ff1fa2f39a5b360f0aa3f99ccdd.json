{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { convertToTensor } from '../../tensor_util_env';\nimport { assertShapesMatch } from '../../util';\nimport { add } from '../add';\nimport { log } from '../log';\nimport { Reduction } from '../loss_ops_utils';\nimport { mul } from '../mul';\nimport { neg } from '../neg';\nimport { op } from '../operation';\nimport { scalar } from '../scalar';\nimport { sub } from '../sub';\nimport { computeWeightedLoss } from './compute_weighted_loss';\n/**\r\n * Computes the log loss between two tensors.\r\n *\r\n * @param labels The ground truth output tensor, same dimensions as\r\n *    'predictions'.\r\n * @param predictions The predicted outputs.\r\n * @param weights Tensor whose rank is either 0, or the same rank as\r\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\r\n *    must be either `1`, or the same as the corresponding `losses`\r\n *    dimension).\r\n * @param epsilon A small increment to avoid taking log of zero\r\n * @param reduction Type of reduction to apply to loss. Should be of type\r\n *    `Reduction`\r\n *\r\n * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}\r\n */\n\nfunction logLoss_(labels, predictions, weights) {\n  var epsilon = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1e-7;\n  var reduction = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : Reduction.SUM_BY_NONZERO_WEIGHTS;\n  var $labels = convertToTensor(labels, 'labels', 'logLoss');\n  var $predictions = convertToTensor(predictions, 'predictions', 'logLoss');\n  var $weights = null;\n\n  if (weights != null) {\n    $weights = convertToTensor(weights, 'weights', 'logLoss');\n  }\n\n  assertShapesMatch($labels.shape, $predictions.shape, 'Error in logLoss: ');\n  var one = scalar(1);\n  var epsilonScalar = scalar(epsilon);\n  var l1 = neg(mul($labels, log(add($predictions, epsilonScalar))));\n  var l2 = mul(sub(one, $labels), log(add(sub(one, $predictions), epsilonScalar)));\n  var losses = sub(l1, l2);\n  return computeWeightedLoss(losses, $weights, reduction);\n}\n\nexport var logLoss = op({\n  logLoss_: logLoss_\n});","map":{"version":3,"sources":["../../../src/ops/losses/log_loss.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAGH,SAAQ,eAAR,QAA8B,uBAA9B;AAEA,SAAQ,iBAAR,QAAgC,YAAhC;AACA,SAAQ,GAAR,QAAkB,QAAlB;AACA,SAAQ,GAAR,QAAkB,QAAlB;AACA,SAAQ,SAAR,QAAwB,mBAAxB;AACA,SAAQ,GAAR,QAAkB,QAAlB;AACA,SAAQ,GAAR,QAAkB,QAAlB;AACA,SAAQ,EAAR,QAAiB,cAAjB;AACA,SAAQ,MAAR,QAAqB,WAArB;AACA,SAAQ,GAAR,QAAkB,QAAlB;AAEA,SAAQ,mBAAR,QAAkC,yBAAlC;AAEA;;;;;;;;;;;;;;;AAeG;;AACH,SAAS,QAAT,CACI,MADJ,EAC0B,WAD1B,EAEI,OAFJ,EAGgD;AAAA,MADf,OACe,uEADL,IACK;AAAA,MAA5C,SAA4C,uEAAhC,SAAS,CAAC,sBAAsB;AAC9C,MAAM,OAAO,GAAG,eAAe,CAAC,MAAD,EAAS,QAAT,EAAmB,SAAnB,CAA/B;AACA,MAAM,YAAY,GAAG,eAAe,CAAC,WAAD,EAAc,aAAd,EAA6B,SAA7B,CAApC;AACA,MAAI,QAAQ,GAAW,IAAvB;;AACA,MAAI,OAAO,IAAI,IAAf,EAAqB;AACnB,IAAA,QAAQ,GAAG,eAAe,CAAC,OAAD,EAAU,SAAV,EAAqB,SAArB,CAA1B;AACD;;AACD,EAAA,iBAAiB,CAAC,OAAO,CAAC,KAAT,EAAgB,YAAY,CAAC,KAA7B,EAAoC,oBAApC,CAAjB;AAEA,MAAM,GAAG,GAAG,MAAM,CAAC,CAAD,CAAlB;AACA,MAAM,aAAa,GAAG,MAAM,CAAC,OAAD,CAA5B;AAEA,MAAM,EAAE,GAAG,GAAG,CAAC,GAAG,CAAC,OAAD,EAAU,GAAG,CAAC,GAAG,CAAC,YAAD,EAAe,aAAf,CAAJ,CAAb,CAAJ,CAAd;AACA,MAAM,EAAE,GACJ,GAAG,CAAC,GAAG,CAAC,GAAD,EAAM,OAAN,CAAJ,EAAoB,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAD,EAAM,YAAN,CAAJ,EAAyB,aAAzB,CAAJ,CAAvB,CADP;AAEA,MAAM,MAAM,GAAG,GAAG,CAAC,EAAD,EAAK,EAAL,CAAlB;AACA,SAAO,mBAAmB,CAAC,MAAD,EAAS,QAAT,EAAmB,SAAnB,CAA1B;AACD;;AACD,OAAO,IAAM,OAAO,GAAG,EAAE,CAAC;AAAC,EAAA,QAAQ,EAAR;AAAD,CAAD,CAAlB","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { convertToTensor } from '../../tensor_util_env';\r\nimport { assertShapesMatch } from '../../util';\r\nimport { add } from '../add';\r\nimport { log } from '../log';\r\nimport { Reduction } from '../loss_ops_utils';\r\nimport { mul } from '../mul';\r\nimport { neg } from '../neg';\r\nimport { op } from '../operation';\r\nimport { scalar } from '../scalar';\r\nimport { sub } from '../sub';\r\nimport { computeWeightedLoss } from './compute_weighted_loss';\r\n/**\r\n * Computes the log loss between two tensors.\r\n *\r\n * @param labels The ground truth output tensor, same dimensions as\r\n *    'predictions'.\r\n * @param predictions The predicted outputs.\r\n * @param weights Tensor whose rank is either 0, or the same rank as\r\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\r\n *    must be either `1`, or the same as the corresponding `losses`\r\n *    dimension).\r\n * @param epsilon A small increment to avoid taking log of zero\r\n * @param reduction Type of reduction to apply to loss. Should be of type\r\n *    `Reduction`\r\n *\r\n * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}\r\n */\r\nfunction logLoss_(labels, predictions, weights, epsilon = 1e-7, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {\r\n    const $labels = convertToTensor(labels, 'labels', 'logLoss');\r\n    const $predictions = convertToTensor(predictions, 'predictions', 'logLoss');\r\n    let $weights = null;\r\n    if (weights != null) {\r\n        $weights = convertToTensor(weights, 'weights', 'logLoss');\r\n    }\r\n    assertShapesMatch($labels.shape, $predictions.shape, 'Error in logLoss: ');\r\n    const one = scalar(1);\r\n    const epsilonScalar = scalar(epsilon);\r\n    const l1 = neg(mul($labels, log(add($predictions, epsilonScalar))));\r\n    const l2 = mul(sub(one, $labels), log(add(sub(one, $predictions), epsilonScalar)));\r\n    const losses = sub(l1, l2);\r\n    return computeWeightedLoss(losses, $weights, reduction);\r\n}\r\nexport const logLoss = op({ logLoss_ });\r\n//# sourceMappingURL=log_loss.js.map"]},"metadata":{},"sourceType":"module"}