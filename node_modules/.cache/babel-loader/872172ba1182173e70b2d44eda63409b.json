{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { env } from '../environment';\nimport * as util from '../util';\nimport { decodeWeights } from './io_utils';\nimport { monitorPromisesProgress } from './progress';\nimport { DTYPE_VALUE_SIZE_MAP } from './types';\n/**\r\n * Reads binary weights data from a number of URLs.\r\n *\r\n * @param fetchURLs URLs to send the HTTP requests at, using `fetch` calls.\r\n * @param requestOptions RequestInit (options) for the HTTP requests.\r\n * @param fetchFunc Optional overriding value for the `window.fetch` function.\r\n * @param onProgress Optional, progress callback function, fired periodically\r\n *   before the load is completed.\r\n * @returns A `Promise` of an Array of `ArrayBuffer`. The Array has the same\r\n *   length as `fetchURLs`.\r\n */\n\nexport function loadWeightsAsArrayBuffer(_x, _x2) {\n  return _loadWeightsAsArrayBuffer.apply(this, arguments);\n}\n/**\r\n * Reads a weights manifest JSON configuration, fetches the weights and\r\n * returns them as `Tensor`s.\r\n *\r\n * @param manifest The weights manifest JSON.\r\n * @param filePathPrefix The path prefix for filenames given in the manifest.\r\n *     Defaults to the empty string.\r\n * @param weightNames The names of the weights to be fetched.\r\n */\n\nfunction _loadWeightsAsArrayBuffer() {\n  _loadWeightsAsArrayBuffer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(fetchURLs, loadOptions) {\n    var fetchFunc, requests, fetchStartFraction, fetchEndFraction, responses, bufferPromises, bufferStartFraction, bufferEndFraction, buffers;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (loadOptions == null) {\n              loadOptions = {};\n            }\n\n            fetchFunc = loadOptions.fetchFunc == null ? env().platform.fetch : loadOptions.fetchFunc; // Create the requests for all of the weights in parallel.\n\n            requests = fetchURLs.map(function (fetchURL) {\n              return fetchFunc(fetchURL, loadOptions.requestInit, {\n                isBinary: true\n              });\n            });\n            fetchStartFraction = 0;\n            fetchEndFraction = 0.5;\n\n            if (!(loadOptions.onProgress == null)) {\n              _context2.next = 11;\n              break;\n            }\n\n            _context2.next = 8;\n            return Promise.all(requests);\n\n          case 8:\n            _context2.t0 = _context2.sent;\n            _context2.next = 14;\n            break;\n\n          case 11:\n            _context2.next = 13;\n            return monitorPromisesProgress(requests, loadOptions.onProgress, fetchStartFraction, fetchEndFraction);\n\n          case 13:\n            _context2.t0 = _context2.sent;\n\n          case 14:\n            responses = _context2.t0;\n            bufferPromises = responses.map(function (response) {\n              return response.arrayBuffer();\n            });\n            bufferStartFraction = 0.5;\n            bufferEndFraction = 1;\n\n            if (!(loadOptions.onProgress == null)) {\n              _context2.next = 24;\n              break;\n            }\n\n            _context2.next = 21;\n            return Promise.all(bufferPromises);\n\n          case 21:\n            _context2.t1 = _context2.sent;\n            _context2.next = 27;\n            break;\n\n          case 24:\n            _context2.next = 26;\n            return monitorPromisesProgress(bufferPromises, loadOptions.onProgress, bufferStartFraction, bufferEndFraction);\n\n          case 26:\n            _context2.t1 = _context2.sent;\n\n          case 27:\n            buffers = _context2.t1;\n            return _context2.abrupt(\"return\", buffers);\n\n          case 29:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _loadWeightsAsArrayBuffer.apply(this, arguments);\n}\n\nexport function loadWeights(_x3) {\n  return _loadWeights.apply(this, arguments);\n}\n/**\r\n * Creates a function, which reads a weights manifest JSON configuration,\r\n * fetches the weight files using the specified function and returns them as\r\n * `Tensor`s.\r\n *\r\n * ```js\r\n * // example for creating a nodejs weight loader, which reads the weight files\r\n * // from disk using fs.readFileSync\r\n *\r\n * import * as fs from 'fs'\r\n *\r\n * const fetchWeightsFromDisk = (filePaths: string[]) =>\r\n *   filePaths.map(filePath => fs.readFileSync(filePath).buffer)\r\n *\r\n * const loadWeights = tf.io.weightsLoaderFactory(fetchWeightsFromDisk)\r\n *\r\n * const manifest = JSON.parse(\r\n *   fs.readFileSync('./my_model-weights_manifest').toString()\r\n * )\r\n * const weightMap = await loadWeights(manifest, './')\r\n * ```\r\n * @param fetchWeightsFunction The function used for fetching the weight files.\r\n * @returns Weight loading function.\r\n */\n\nfunction _loadWeights() {\n  _loadWeights = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(manifest) {\n    var filePathPrefix,\n        weightNames,\n        requestInit,\n        fetchWeights,\n        loadWeights,\n        _args3 = arguments;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            filePathPrefix = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : '';\n            weightNames = _args3.length > 2 ? _args3[2] : undefined;\n            requestInit = _args3.length > 3 ? _args3[3] : undefined;\n\n            // TODO(nsthorat): Groups are currently fetched atomically. If you need a\n            // single weight from a group, the whole group will be fetched. At a future\n            // date, we should support fetching only the individual shards within a\n            // group that are needed to reconstruct the requested weight.\n            // TODO(cais): Use `decodeWeights` for implementation.\n            fetchWeights = function fetchWeights(fetchUrls) {\n              return loadWeightsAsArrayBuffer(fetchUrls, {\n                requestInit: requestInit\n              });\n            };\n\n            loadWeights = weightsLoaderFactory(fetchWeights);\n            return _context3.abrupt(\"return\", loadWeights(manifest, filePathPrefix, weightNames));\n\n          case 6:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _loadWeights.apply(this, arguments);\n}\n\nexport function weightsLoaderFactory(fetchWeightsFunction) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(manifest) {\n      var filePathPrefix,\n          weightNames,\n          groupIndicesToFetchMap,\n          groupWeightsToFetch,\n          weightsFound,\n          allManifestWeightNames,\n          weightsNotFound,\n          groupIndicesToFetch,\n          fetchUrls,\n          buffers,\n          weightsTensorMap,\n          bufferIndexOffset,\n          _args = arguments;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              filePathPrefix = _args.length > 1 && _args[1] !== undefined ? _args[1] : '';\n              weightNames = _args.length > 2 ? _args[2] : undefined;\n              // Collect all the groups, weights, and their relative offsets to be\n              // fetched.\n              groupIndicesToFetchMap = manifest.map(function () {\n                return false;\n              });\n              groupWeightsToFetch = {};\n              weightsFound = weightNames != null ? weightNames.map(function () {\n                return false;\n              }) : [];\n              allManifestWeightNames = [];\n              manifest.forEach(function (manifestGroupConfig, groupIndex) {\n                var groupOffset = 0;\n                manifestGroupConfig.weights.forEach(function (weightsEntry) {\n                  var rawDtype = 'quantization' in weightsEntry ? weightsEntry.quantization.dtype : weightsEntry.dtype;\n                  var weightsBytes = DTYPE_VALUE_SIZE_MAP[rawDtype] * util.sizeFromShape(weightsEntry.shape);\n\n                  var enqueueWeightsForFetchingFn = function enqueueWeightsForFetchingFn() {\n                    groupIndicesToFetchMap[groupIndex] = true;\n\n                    if (groupWeightsToFetch[groupIndex] == null) {\n                      groupWeightsToFetch[groupIndex] = [];\n                    }\n\n                    groupWeightsToFetch[groupIndex].push({\n                      manifestEntry: weightsEntry,\n                      groupOffset: groupOffset,\n                      sizeBytes: weightsBytes\n                    });\n                  };\n\n                  if (weightNames != null) {\n                    weightNames.forEach(function (weightName, weightIndex) {\n                      if (weightName === weightsEntry.name) {\n                        enqueueWeightsForFetchingFn();\n                        weightsFound[weightIndex] = true;\n                      }\n                    });\n                  } else {\n                    enqueueWeightsForFetchingFn();\n                  }\n\n                  allManifestWeightNames.push(weightsEntry.name);\n                  groupOffset += weightsBytes;\n                });\n              });\n\n              if (weightsFound.every(function (found) {\n                return found;\n              })) {\n                _context.next = 10;\n                break;\n              }\n\n              weightsNotFound = weightNames.filter(function (_, i) {\n                return !weightsFound[i];\n              });\n              throw new Error(\"Could not find weights in manifest with names: \" + \"\".concat(weightsNotFound.join(', '), \". \\n\") + \"Manifest JSON has weights with names: \" + \"\".concat(allManifestWeightNames.join(', '), \".\"));\n\n            case 10:\n              // Convert the one-hot boolean groupId => shouldFetch map to a list of group\n              // IDs.\n              groupIndicesToFetch = groupIndicesToFetchMap.reduce(function (accumulator, shouldFetch, i) {\n                if (shouldFetch) {\n                  accumulator.push(i);\n                }\n\n                return accumulator;\n              }, []);\n              fetchUrls = [];\n              groupIndicesToFetch.forEach(function (i) {\n                manifest[i].paths.forEach(function (filepath) {\n                  var fetchUrl = filePathPrefix + (!filePathPrefix.endsWith('/') ? '/' : '') + filepath;\n                  fetchUrls.push(fetchUrl);\n                });\n              });\n              _context.next = 15;\n              return fetchWeightsFunction(fetchUrls);\n\n            case 15:\n              buffers = _context.sent;\n              weightsTensorMap = {};\n              bufferIndexOffset = 0;\n              groupIndicesToFetch.forEach(function (i) {\n                var numBuffers = manifest[i].paths.length;\n                var groupBytes = 0;\n\n                for (var _i = 0; _i < numBuffers; _i++) {\n                  groupBytes += buffers[bufferIndexOffset + _i].byteLength;\n                } // Create a buffer for the whole group.\n\n\n                var groupBuffer = new ArrayBuffer(groupBytes);\n                var groupByteBuffer = new Uint8Array(groupBuffer);\n                var groupBufferOffset = 0;\n\n                for (var _i2 = 0; _i2 < numBuffers; _i2++) {\n                  var buffer = new Uint8Array(buffers[bufferIndexOffset + _i2]);\n                  groupByteBuffer.set(buffer, groupBufferOffset);\n                  groupBufferOffset += buffer.byteLength;\n                }\n\n                var weightsEntries = groupWeightsToFetch[i];\n                weightsEntries.forEach(function (weightsEntry) {\n                  var byteBuffer = groupBuffer.slice(weightsEntry.groupOffset, weightsEntry.groupOffset + weightsEntry.sizeBytes);\n                  var nameToTensorMap = decodeWeights(byteBuffer, [weightsEntry.manifestEntry]);\n\n                  for (var name in nameToTensorMap) {\n                    weightsTensorMap[name] = nameToTensorMap[name];\n                  }\n                });\n                bufferIndexOffset += numBuffers;\n              });\n              return _context.abrupt(\"return\", weightsTensorMap);\n\n            case 20:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x4) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n}","map":{"version":3,"sources":["../../src/io/weights_loader.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { env } from '../environment';\r\nimport * as util from '../util';\r\nimport { decodeWeights } from './io_utils';\r\nimport { monitorPromisesProgress } from './progress';\r\nimport { DTYPE_VALUE_SIZE_MAP } from './types';\r\n/**\r\n * Reads binary weights data from a number of URLs.\r\n *\r\n * @param fetchURLs URLs to send the HTTP requests at, using `fetch` calls.\r\n * @param requestOptions RequestInit (options) for the HTTP requests.\r\n * @param fetchFunc Optional overriding value for the `window.fetch` function.\r\n * @param onProgress Optional, progress callback function, fired periodically\r\n *   before the load is completed.\r\n * @returns A `Promise` of an Array of `ArrayBuffer`. The Array has the same\r\n *   length as `fetchURLs`.\r\n */\r\nexport async function loadWeightsAsArrayBuffer(fetchURLs, loadOptions) {\r\n    if (loadOptions == null) {\r\n        loadOptions = {};\r\n    }\r\n    const fetchFunc = loadOptions.fetchFunc == null ? env().platform.fetch :\r\n        loadOptions.fetchFunc;\r\n    // Create the requests for all of the weights in parallel.\r\n    const requests = fetchURLs.map(fetchURL => fetchFunc(fetchURL, loadOptions.requestInit, { isBinary: true }));\r\n    const fetchStartFraction = 0;\r\n    const fetchEndFraction = 0.5;\r\n    const responses = loadOptions.onProgress == null ?\r\n        await Promise.all(requests) :\r\n        await monitorPromisesProgress(requests, loadOptions.onProgress, fetchStartFraction, fetchEndFraction);\r\n    const bufferPromises = responses.map(response => response.arrayBuffer());\r\n    const bufferStartFraction = 0.5;\r\n    const bufferEndFraction = 1;\r\n    const buffers = loadOptions.onProgress == null ?\r\n        await Promise.all(bufferPromises) :\r\n        await monitorPromisesProgress(bufferPromises, loadOptions.onProgress, bufferStartFraction, bufferEndFraction);\r\n    return buffers;\r\n}\r\n/**\r\n * Reads a weights manifest JSON configuration, fetches the weights and\r\n * returns them as `Tensor`s.\r\n *\r\n * @param manifest The weights manifest JSON.\r\n * @param filePathPrefix The path prefix for filenames given in the manifest.\r\n *     Defaults to the empty string.\r\n * @param weightNames The names of the weights to be fetched.\r\n */\r\nexport async function loadWeights(manifest, filePathPrefix = '', weightNames, requestInit) {\r\n    // TODO(nsthorat): Groups are currently fetched atomically. If you need a\r\n    // single weight from a group, the whole group will be fetched. At a future\r\n    // date, we should support fetching only the individual shards within a\r\n    // group that are needed to reconstruct the requested weight.\r\n    // TODO(cais): Use `decodeWeights` for implementation.\r\n    const fetchWeights = (fetchUrls) => loadWeightsAsArrayBuffer(fetchUrls, { requestInit });\r\n    const loadWeights = weightsLoaderFactory(fetchWeights);\r\n    return loadWeights(manifest, filePathPrefix, weightNames);\r\n}\r\n/**\r\n * Creates a function, which reads a weights manifest JSON configuration,\r\n * fetches the weight files using the specified function and returns them as\r\n * `Tensor`s.\r\n *\r\n * ```js\r\n * // example for creating a nodejs weight loader, which reads the weight files\r\n * // from disk using fs.readFileSync\r\n *\r\n * import * as fs from 'fs'\r\n *\r\n * const fetchWeightsFromDisk = (filePaths: string[]) =>\r\n *   filePaths.map(filePath => fs.readFileSync(filePath).buffer)\r\n *\r\n * const loadWeights = tf.io.weightsLoaderFactory(fetchWeightsFromDisk)\r\n *\r\n * const manifest = JSON.parse(\r\n *   fs.readFileSync('./my_model-weights_manifest').toString()\r\n * )\r\n * const weightMap = await loadWeights(manifest, './')\r\n * ```\r\n * @param fetchWeightsFunction The function used for fetching the weight files.\r\n * @returns Weight loading function.\r\n */\r\nexport function weightsLoaderFactory(fetchWeightsFunction) {\r\n    return async (manifest, filePathPrefix = '', weightNames) => {\r\n        // Collect all the groups, weights, and their relative offsets to be\r\n        // fetched.\r\n        const groupIndicesToFetchMap = manifest.map(() => false);\r\n        const groupWeightsToFetch = {};\r\n        const weightsFound = weightNames != null ? weightNames.map(() => false) : [];\r\n        const allManifestWeightNames = [];\r\n        manifest.forEach((manifestGroupConfig, groupIndex) => {\r\n            let groupOffset = 0;\r\n            manifestGroupConfig.weights.forEach(weightsEntry => {\r\n                const rawDtype = ('quantization' in weightsEntry) ?\r\n                    weightsEntry.quantization.dtype :\r\n                    weightsEntry.dtype;\r\n                const weightsBytes = DTYPE_VALUE_SIZE_MAP[rawDtype] *\r\n                    util.sizeFromShape(weightsEntry.shape);\r\n                const enqueueWeightsForFetchingFn = () => {\r\n                    groupIndicesToFetchMap[groupIndex] = true;\r\n                    if (groupWeightsToFetch[groupIndex] == null) {\r\n                        groupWeightsToFetch[groupIndex] = [];\r\n                    }\r\n                    groupWeightsToFetch[groupIndex].push({\r\n                        manifestEntry: weightsEntry,\r\n                        groupOffset,\r\n                        sizeBytes: weightsBytes\r\n                    });\r\n                };\r\n                if (weightNames != null) {\r\n                    weightNames.forEach((weightName, weightIndex) => {\r\n                        if (weightName === weightsEntry.name) {\r\n                            enqueueWeightsForFetchingFn();\r\n                            weightsFound[weightIndex] = true;\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    enqueueWeightsForFetchingFn();\r\n                }\r\n                allManifestWeightNames.push(weightsEntry.name);\r\n                groupOffset += weightsBytes;\r\n            });\r\n        });\r\n        if (!weightsFound.every(found => found)) {\r\n            const weightsNotFound = weightNames.filter((_, i) => !weightsFound[i]);\r\n            throw new Error(`Could not find weights in manifest with names: ` +\r\n                `${weightsNotFound.join(', ')}. \\n` +\r\n                `Manifest JSON has weights with names: ` +\r\n                `${allManifestWeightNames.join(', ')}.`);\r\n        }\r\n        // Convert the one-hot boolean groupId => shouldFetch map to a list of group\r\n        // IDs.\r\n        const groupIndicesToFetch = groupIndicesToFetchMap.reduce((accumulator, shouldFetch, i) => {\r\n            if (shouldFetch) {\r\n                accumulator.push(i);\r\n            }\r\n            return accumulator;\r\n        }, []);\r\n        const fetchUrls = [];\r\n        groupIndicesToFetch.forEach(i => {\r\n            manifest[i].paths.forEach(filepath => {\r\n                const fetchUrl = filePathPrefix +\r\n                    (!filePathPrefix.endsWith('/') ? '/' : '') + filepath;\r\n                fetchUrls.push(fetchUrl);\r\n            });\r\n        });\r\n        const buffers = await fetchWeightsFunction(fetchUrls);\r\n        const weightsTensorMap = {};\r\n        let bufferIndexOffset = 0;\r\n        groupIndicesToFetch.forEach(i => {\r\n            const numBuffers = manifest[i].paths.length;\r\n            let groupBytes = 0;\r\n            for (let i = 0; i < numBuffers; i++) {\r\n                groupBytes += buffers[bufferIndexOffset + i].byteLength;\r\n            }\r\n            // Create a buffer for the whole group.\r\n            const groupBuffer = new ArrayBuffer(groupBytes);\r\n            const groupByteBuffer = new Uint8Array(groupBuffer);\r\n            let groupBufferOffset = 0;\r\n            for (let i = 0; i < numBuffers; i++) {\r\n                const buffer = new Uint8Array(buffers[bufferIndexOffset + i]);\r\n                groupByteBuffer.set(buffer, groupBufferOffset);\r\n                groupBufferOffset += buffer.byteLength;\r\n            }\r\n            const weightsEntries = groupWeightsToFetch[i];\r\n            weightsEntries.forEach(weightsEntry => {\r\n                const byteBuffer = groupBuffer.slice(weightsEntry.groupOffset, weightsEntry.groupOffset + weightsEntry.sizeBytes);\r\n                const nameToTensorMap = decodeWeights(byteBuffer, [weightsEntry.manifestEntry]);\r\n                for (const name in nameToTensorMap) {\r\n                    weightsTensorMap[name] = nameToTensorMap[name];\r\n                }\r\n            });\r\n            bufferIndexOffset += numBuffers;\r\n        });\r\n        return weightsTensorMap;\r\n    };\r\n}\r\n//# sourceMappingURL=weights_loader.js.map"]},"metadata":{},"sourceType":"module"}