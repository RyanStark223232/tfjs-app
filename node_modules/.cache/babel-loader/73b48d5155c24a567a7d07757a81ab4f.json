{"ast":null,"code":"import _slicedToArray from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { Selu } from '../kernel_names';\nimport { cast } from '../ops/cast';\nimport { exp } from '../ops/exp';\nimport { greater } from '../ops/greater';\nimport { mul } from '../ops/mul';\nimport { scalar } from '../ops/scalar';\nimport { SELU_SCALE, SELU_SCALEALPHA } from '../ops/selu_util';\nimport { where } from '../ops/where';\nexport var seluGradConfig = {\n  kernelName: Selu,\n  inputsToSave: ['x'],\n  gradFunc: function gradFunc(dy, saved) {\n    var _saved = _slicedToArray(saved, 1),\n        _x = _saved[0];\n\n    return {\n      x: function x() {\n        var mask = greater(_x, scalar(0));\n        var scaleAlpha = scalar(SELU_SCALEALPHA);\n        var scale = scalar(SELU_SCALE);\n        var greaterThanZeroDer = mul(dy, scale);\n        var lessEqualZeroDer = mul(mul(dy, scaleAlpha), exp(cast(_x, 'float32')));\n        return where(mask, greaterThanZeroDer, lessEqualZeroDer);\n      }\n    };\n  }\n};","map":{"version":3,"sources":["../../src/gradients/Selu_grad.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AACH,SAAQ,IAAR,QAAmB,iBAAnB;AAEA,SAAQ,IAAR,QAAmB,aAAnB;AACA,SAAQ,GAAR,QAAkB,YAAlB;AACA,SAAQ,OAAR,QAAsB,gBAAtB;AACA,SAAQ,GAAR,QAAkB,YAAlB;AACA,SAAQ,MAAR,QAAqB,eAArB;AACA,SAAQ,UAAR,EAAoB,eAApB,QAA0C,kBAA1C;AACA,SAAQ,KAAR,QAAoB,cAApB;AAGA,OAAO,IAAM,cAAc,GAAe;AACxC,EAAA,UAAU,EAAE,IAD4B;AAExC,EAAA,YAAY,EAAE,CAAC,GAAD,CAF0B;AAGxC,EAAA,QAAQ,EAAE,kBAAC,EAAD,EAAa,KAAb,EAAgC;AAAA,gCAC5B,KAD4B;AAAA,QACjC,EADiC;;AAExC,WAAO;AACL,MAAA,CAAC,EAAE,aAAK;AACN,YAAM,IAAI,GAAG,OAAO,CAAC,EAAD,EAAI,MAAM,CAAC,CAAD,CAAV,CAApB;AAEA,YAAM,UAAU,GAAG,MAAM,CAAC,eAAD,CAAzB;AACA,YAAM,KAAK,GAAG,MAAM,CAAC,UAAD,CAApB;AAEA,YAAM,kBAAkB,GAAG,GAAG,CAAC,EAAD,EAAK,KAAL,CAA9B;AACA,YAAM,gBAAgB,GAClB,GAAG,CAAC,GAAG,CAAC,EAAD,EAAK,UAAL,CAAJ,EAAsB,GAAG,CAAC,IAAI,CAAC,EAAD,EAAI,SAAJ,CAAL,CAAzB,CADP;AAGA,eAAO,KAAK,CAAC,IAAD,EAAO,kBAAP,EAA2B,gBAA3B,CAAZ;AACD;AAZI,KAAP;AAcD;AAnBuC,CAAnC","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { Selu } from '../kernel_names';\r\nimport { cast } from '../ops/cast';\r\nimport { exp } from '../ops/exp';\r\nimport { greater } from '../ops/greater';\r\nimport { mul } from '../ops/mul';\r\nimport { scalar } from '../ops/scalar';\r\nimport { SELU_SCALE, SELU_SCALEALPHA } from '../ops/selu_util';\r\nimport { where } from '../ops/where';\r\nexport const seluGradConfig = {\r\n    kernelName: Selu,\r\n    inputsToSave: ['x'],\r\n    gradFunc: (dy, saved) => {\r\n        const [x] = saved;\r\n        return {\r\n            x: () => {\r\n                const mask = greater(x, scalar(0));\r\n                const scaleAlpha = scalar(SELU_SCALEALPHA);\r\n                const scale = scalar(SELU_SCALE);\r\n                const greaterThanZeroDer = mul(dy, scale);\r\n                const lessEqualZeroDer = mul(mul(dy, scaleAlpha), exp(cast(x, 'float32')));\r\n                return where(mask, greaterThanZeroDer, lessEqualZeroDer);\r\n            }\r\n        };\r\n    }\r\n};\r\n//# sourceMappingURL=Selu_grad.js.map"]},"metadata":{},"sourceType":"module"}