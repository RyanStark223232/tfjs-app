{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { DepthToSpace } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\r\n * Rearranges data from depth into blocks of spatial data. More specifically,\r\n * this op outputs a copy of the input tensor where values from the `depth`\r\n * dimension are moved in spatial blocks to the `height` and `width` dimensions.\r\n * The attr `blockSize` indicates the input block size and how the data is\r\n * moved.\r\n *\r\n *  - Chunks of data of size `blockSize * blockSize` from depth are rearranged\r\n * into non-overlapping blocks of size `blockSize x blockSize`\r\n *\r\n *  - The width the output tensor is `inputWidth * blockSize`, whereas the\r\n * height is `inputHeight * blockSize`\r\n *\r\n *  - The Y, X coordinates within each block of the output image are determined\r\n * by the high order component of the input channel index\r\n *\r\n *  - The depth of the input tensor must be divisible by `blockSize *\r\n * blockSize`\r\n *\r\n * The `dataFormat` attr specifies the layout of the input and output tensors\r\n * with the following options: \"NHWC\": [ `batch, height, width, channels` ]\r\n * \"NCHW\": [ `batch, channels, height, width` ]\r\n *\r\n * ```js\r\n * const x = tf.tensor4d([1, 2, 3, 4], [1, 1, 1, 4]);\r\n * const blockSize = 2;\r\n * const dataFormat = \"NHWC\";\r\n *\r\n * tf.depthToSpace(x, blockSize, dataFormat).print();\r\n * ```\r\n *\r\n * @param x The input tensor of rank 4\r\n * @param blockSIze  An `int` that is `>= 2`. The size of the spatial block\r\n * @param dataFormat An optional string from: \"NHWC\", \"NCHW\". Defaults to \"NHWC\"\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\r\n */\n\nfunction depthToSpace_(x, blockSize) {\n  var dataFormat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'NHWC';\n  var $x = convertToTensor(x, 'x', 'depthToSpace');\n  var inputHeight = dataFormat === 'NHWC' ? $x.shape[1] : $x.shape[2];\n  var inputWidth = dataFormat === 'NHWC' ? $x.shape[2] : $x.shape[3];\n  var inputDepth = dataFormat === 'NHWC' ? $x.shape[3] : $x.shape[1];\n  util.assert(inputHeight * blockSize >= 0, function () {\n    return \"Negative dimension size caused by overflow when multiplying\\n    \".concat(inputHeight, \" and \").concat(blockSize, \"  for depthToSpace with input shape\\n    \").concat($x.shape);\n  });\n  util.assert(inputWidth * blockSize >= 0, function () {\n    return \"Negative dimension size caused by overflow when multiplying\\n    \".concat(inputWidth, \" and \").concat(blockSize, \" for depthToSpace with input shape\\n        \").concat($x.shape);\n  });\n  util.assert(inputDepth % (blockSize * blockSize) === 0, function () {\n    return \"Dimension size must be evenly divisible by \".concat(blockSize * blockSize, \" but is \").concat(inputDepth, \" for depthToSpace with input shape \").concat($x.shape);\n  });\n\n  var forward = function forward(backend) {\n    return backend.depthToSpace($x, blockSize, dataFormat);\n  };\n\n  var inputs = {\n    x: $x\n  };\n  var attrs = {\n    blockSize: blockSize,\n    dataFormat: dataFormat\n  };\n  return ENGINE.runKernelFunc(forward, inputs, null\n  /* gradient */\n  , DepthToSpace, attrs);\n}\n\nexport var depthToSpace = op({\n  depthToSpace_: depthToSpace_\n});","map":{"version":3,"sources":["../../src/ops/depth_to_space.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,MAAR,QAAkC,WAAlC;AACA,SAAQ,YAAR,QAAkE,iBAAlE;AAIA,SAAQ,eAAR,QAA8B,oBAA9B;AAEA,OAAO,KAAK,IAAZ,MAAsB,SAAtB;AAEA,SAAQ,EAAR,QAAiB,aAAjB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCG;;AACH,SAAS,aAAT,CACI,CADJ,EAC8B,SAD9B,EAEsC;AAAA,MAAlC,UAAkC,uEAAN,MAAM;AACpC,MAAM,EAAE,GAAG,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,cAAT,CAA1B;AAEA,MAAM,WAAW,GAAI,UAAU,KAAK,MAAhB,GAA0B,EAAE,CAAC,KAAH,CAAS,CAAT,CAA1B,GAAwC,EAAE,CAAC,KAAH,CAAS,CAAT,CAA5D;AACA,MAAM,UAAU,GAAI,UAAU,KAAK,MAAhB,GAA0B,EAAE,CAAC,KAAH,CAAS,CAAT,CAA1B,GAAwC,EAAE,CAAC,KAAH,CAAS,CAAT,CAA3D;AACA,MAAM,UAAU,GAAI,UAAU,KAAK,MAAhB,GAA0B,EAAE,CAAC,KAAH,CAAS,CAAT,CAA1B,GAAwC,EAAE,CAAC,KAAH,CAAS,CAAT,CAA3D;AAEA,EAAA,IAAI,CAAC,MAAL,CACI,WAAW,GAAG,SAAd,IAA2B,CAD/B,EAEI;AAAA,sFACA,WADA,kBACmB,SADnB,sDAEA,EAAE,CAAC,KAFH;AAAA,GAFJ;AAMA,EAAA,IAAI,CAAC,MAAL,CACI,UAAU,GAAG,SAAb,IAA0B,CAD9B,EAEI;AAAA,sFACA,UADA,kBACkB,SADlB,yDAEI,EAAE,CAAC,KAFP;AAAA,GAFJ;AAMA,EAAA,IAAI,CAAC,MAAL,CACK,UAAU,IAAI,SAAS,GAAG,SAAhB,CAAV,KAAyC,CAD9C,EAEI;AAAA,gEACI,SAAS,GAAG,SADhB,qBAEI,UAFJ,gDAEoD,EAAE,CAAC,KAFvD;AAAA,GAFJ;;AAMA,MAAM,OAAO,GAA0B,SAAjC,OAAiC,CAAA,OAAO;AAAA,WAC1C,OAAO,CAAC,YAAR,CAAqB,EAArB,EAAyB,SAAzB,EAAoC,UAApC,CAD0C;AAAA,GAA9C;;AAGA,MAAM,MAAM,GAAuB;AAAC,IAAA,CAAC,EAAE;AAAJ,GAAnC;AACA,MAAM,KAAK,GAAsB;AAAC,IAAA,SAAS,EAAT,SAAD;AAAY,IAAA,UAAU,EAAV;AAAZ,GAAjC;AAEA,SAAO,MAAM,CAAC,aAAP,CACH,OADG,EACM,MADN,EACsC;AAAK;AAD3C,IAEH,YAFG,EAEW,KAFX,CAAP;AAGD;;AAED,OAAO,IAAM,YAAY,GAAG,EAAE,CAAC;AAAC,EAAA,aAAa,EAAb;AAAD,CAAD,CAAvB","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { ENGINE } from '../engine';\r\nimport { DepthToSpace } from '../kernel_names';\r\nimport { convertToTensor } from '../tensor_util_env';\r\nimport * as util from '../util';\r\nimport { op } from './operation';\r\n/**\r\n * Rearranges data from depth into blocks of spatial data. More specifically,\r\n * this op outputs a copy of the input tensor where values from the `depth`\r\n * dimension are moved in spatial blocks to the `height` and `width` dimensions.\r\n * The attr `blockSize` indicates the input block size and how the data is\r\n * moved.\r\n *\r\n *  - Chunks of data of size `blockSize * blockSize` from depth are rearranged\r\n * into non-overlapping blocks of size `blockSize x blockSize`\r\n *\r\n *  - The width the output tensor is `inputWidth * blockSize`, whereas the\r\n * height is `inputHeight * blockSize`\r\n *\r\n *  - The Y, X coordinates within each block of the output image are determined\r\n * by the high order component of the input channel index\r\n *\r\n *  - The depth of the input tensor must be divisible by `blockSize *\r\n * blockSize`\r\n *\r\n * The `dataFormat` attr specifies the layout of the input and output tensors\r\n * with the following options: \"NHWC\": [ `batch, height, width, channels` ]\r\n * \"NCHW\": [ `batch, channels, height, width` ]\r\n *\r\n * ```js\r\n * const x = tf.tensor4d([1, 2, 3, 4], [1, 1, 1, 4]);\r\n * const blockSize = 2;\r\n * const dataFormat = \"NHWC\";\r\n *\r\n * tf.depthToSpace(x, blockSize, dataFormat).print();\r\n * ```\r\n *\r\n * @param x The input tensor of rank 4\r\n * @param blockSIze  An `int` that is `>= 2`. The size of the spatial block\r\n * @param dataFormat An optional string from: \"NHWC\", \"NCHW\". Defaults to \"NHWC\"\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\r\n */\r\nfunction depthToSpace_(x, blockSize, dataFormat = 'NHWC') {\r\n    const $x = convertToTensor(x, 'x', 'depthToSpace');\r\n    const inputHeight = (dataFormat === 'NHWC') ? $x.shape[1] : $x.shape[2];\r\n    const inputWidth = (dataFormat === 'NHWC') ? $x.shape[2] : $x.shape[3];\r\n    const inputDepth = (dataFormat === 'NHWC') ? $x.shape[3] : $x.shape[1];\r\n    util.assert(inputHeight * blockSize >= 0, () => `Negative dimension size caused by overflow when multiplying\r\n    ${inputHeight} and ${blockSize}  for depthToSpace with input shape\r\n    ${$x.shape}`);\r\n    util.assert(inputWidth * blockSize >= 0, () => `Negative dimension size caused by overflow when multiplying\r\n    ${inputWidth} and ${blockSize} for depthToSpace with input shape\r\n        ${$x.shape}`);\r\n    util.assert((inputDepth % (blockSize * blockSize) === 0), () => `Dimension size must be evenly divisible by ${blockSize * blockSize} but is ${inputDepth} for depthToSpace with input shape ${$x.shape}`);\r\n    const forward = backend => backend.depthToSpace($x, blockSize, dataFormat);\r\n    const inputs = { x: $x };\r\n    const attrs = { blockSize, dataFormat };\r\n    return ENGINE.runKernelFunc(forward, inputs, null /* gradient */, DepthToSpace, attrs);\r\n}\r\nexport const depthToSpace = op({ depthToSpace_ });\r\n//# sourceMappingURL=depth_to_space.js.map"]},"metadata":{},"sourceType":"module"}