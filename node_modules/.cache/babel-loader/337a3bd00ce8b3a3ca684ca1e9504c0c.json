{"ast":null,"code":"import { flatten } from '../../utils/array';\nimport { factory } from '../../utils/factory';\nvar name = 'setCartesian';\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];\nexport var createSetCartesian = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      size = _ref.size,\n      subset = _ref.subset,\n      compareNatural = _ref.compareNatural,\n      Index = _ref.Index,\n      DenseMatrix = _ref.DenseMatrix;\n  /**\r\n   * Create the cartesian product of two (multi)sets.\r\n   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.setCartesian(set1, set2)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.setCartesian([1, 2], [3, 4])        // returns [[1, 3], [1, 4], [2, 3], [2, 4]]\r\n   *\r\n   * See also:\r\n   *\r\n   *    setUnion, setIntersect, setDifference, setPowerset\r\n   *\r\n   * @param {Array | Matrix}    a1  A (multi)set\r\n   * @param {Array | Matrix}    a2  A (multi)set\r\n   * @return {Array | Matrix}    The cartesian product of two (multi)sets\r\n   */\n\n  return typed(name, {\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {\n      var result = [];\n\n      if (subset(size(a1), new Index(0)) !== 0 && subset(size(a2), new Index(0)) !== 0) {\n        // if any of them is empty, return empty\n        var b1 = flatten(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural);\n        var b2 = flatten(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural);\n        result = [];\n\n        for (var i = 0; i < b1.length; i++) {\n          for (var j = 0; j < b2.length; j++) {\n            result.push([b1[i], b2[j]]);\n          }\n        }\n      } // return an array, if both inputs were arrays\n\n\n      if (Array.isArray(a1) && Array.isArray(a2)) {\n        return result;\n      } // return a matrix otherwise\n\n\n      return new DenseMatrix(result);\n    }\n  });\n});","map":{"version":3,"sources":["C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/mathjs/es/function/set/setCartesian.js"],"names":["flatten","factory","name","dependencies","createSetCartesian","_ref","typed","size","subset","compareNatural","Index","DenseMatrix","ArrayMatrixArrayMatrix","a1","a2","result","b1","Array","isArray","toArray","sort","b2","i","length","j","push"],"mappings":"AAAA,SAASA,OAAT,QAAwB,mBAAxB;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,IAAIC,IAAI,GAAG,cAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,MAAV,EAAkB,QAAlB,EAA4B,gBAA5B,EAA8C,OAA9C,EAAuD,aAAvD,CAAnB;AACA,OAAO,IAAIC,kBAAkB,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AACzF,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAAA,MACIC,IAAI,GAAGF,IAAI,CAACE,IADhB;AAAA,MAEIC,MAAM,GAAGH,IAAI,CAACG,MAFlB;AAAA,MAGIC,cAAc,GAAGJ,IAAI,CAACI,cAH1B;AAAA,MAIIC,KAAK,GAAGL,IAAI,CAACK,KAJjB;AAAA,MAKIC,WAAW,GAAGN,IAAI,CAACM,WALvB;AAOA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOL,KAAK,CAACJ,IAAD,EAAO;AACjB,sCAAkC,SAASU,sBAAT,CAAgCC,EAAhC,EAAoCC,EAApC,EAAwC;AACxE,UAAIC,MAAM,GAAG,EAAb;;AAEA,UAAIP,MAAM,CAACD,IAAI,CAACM,EAAD,CAAL,EAAW,IAAIH,KAAJ,CAAU,CAAV,CAAX,CAAN,KAAmC,CAAnC,IAAwCF,MAAM,CAACD,IAAI,CAACO,EAAD,CAAL,EAAW,IAAIJ,KAAJ,CAAU,CAAV,CAAX,CAAN,KAAmC,CAA/E,EAAkF;AAChF;AACA,YAAIM,EAAE,GAAGhB,OAAO,CAACiB,KAAK,CAACC,OAAN,CAAcL,EAAd,IAAoBA,EAApB,GAAyBA,EAAE,CAACM,OAAH,EAA1B,CAAP,CAA+CC,IAA/C,CAAoDX,cAApD,CAAT;AACA,YAAIY,EAAE,GAAGrB,OAAO,CAACiB,KAAK,CAACC,OAAN,CAAcJ,EAAd,IAAoBA,EAApB,GAAyBA,EAAE,CAACK,OAAH,EAA1B,CAAP,CAA+CC,IAA/C,CAAoDX,cAApD,CAAT;AACAM,QAAAA,MAAM,GAAG,EAAT;;AAEA,aAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,EAAE,CAACO,MAAvB,EAA+BD,CAAC,EAAhC,EAAoC;AAClC,eAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,EAAE,CAACE,MAAvB,EAA+BC,CAAC,EAAhC,EAAoC;AAClCT,YAAAA,MAAM,CAACU,IAAP,CAAY,CAACT,EAAE,CAACM,CAAD,CAAH,EAAQD,EAAE,CAACG,CAAD,CAAV,CAAZ;AACD;AACF;AACF,OAduE,CActE;;;AAGF,UAAIP,KAAK,CAACC,OAAN,CAAcL,EAAd,KAAqBI,KAAK,CAACC,OAAN,CAAcJ,EAAd,CAAzB,EAA4C;AAC1C,eAAOC,MAAP;AACD,OAnBuE,CAmBtE;;;AAGF,aAAO,IAAIJ,WAAJ,CAAgBI,MAAhB,CAAP;AACD;AAxBgB,GAAP,CAAZ;AA0BD,CAtDqD,CAA/C","sourcesContent":["import { flatten } from '../../utils/array';\r\nimport { factory } from '../../utils/factory';\r\nvar name = 'setCartesian';\r\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];\r\nexport var createSetCartesian = /* #__PURE__ */factory(name, dependencies, function (_ref) {\r\n  var typed = _ref.typed,\r\n      size = _ref.size,\r\n      subset = _ref.subset,\r\n      compareNatural = _ref.compareNatural,\r\n      Index = _ref.Index,\r\n      DenseMatrix = _ref.DenseMatrix;\r\n\r\n  /**\r\n   * Create the cartesian product of two (multi)sets.\r\n   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.setCartesian(set1, set2)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.setCartesian([1, 2], [3, 4])        // returns [[1, 3], [1, 4], [2, 3], [2, 4]]\r\n   *\r\n   * See also:\r\n   *\r\n   *    setUnion, setIntersect, setDifference, setPowerset\r\n   *\r\n   * @param {Array | Matrix}    a1  A (multi)set\r\n   * @param {Array | Matrix}    a2  A (multi)set\r\n   * @return {Array | Matrix}    The cartesian product of two (multi)sets\r\n   */\r\n  return typed(name, {\r\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {\r\n      var result = [];\r\n\r\n      if (subset(size(a1), new Index(0)) !== 0 && subset(size(a2), new Index(0)) !== 0) {\r\n        // if any of them is empty, return empty\r\n        var b1 = flatten(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural);\r\n        var b2 = flatten(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural);\r\n        result = [];\r\n\r\n        for (var i = 0; i < b1.length; i++) {\r\n          for (var j = 0; j < b2.length; j++) {\r\n            result.push([b1[i], b2[j]]);\r\n          }\r\n        }\r\n      } // return an array, if both inputs were arrays\r\n\r\n\r\n      if (Array.isArray(a1) && Array.isArray(a2)) {\r\n        return result;\r\n      } // return a matrix otherwise\r\n\r\n\r\n      return new DenseMatrix(result);\r\n    }\r\n  });\r\n});"]},"metadata":{},"sourceType":"module"}