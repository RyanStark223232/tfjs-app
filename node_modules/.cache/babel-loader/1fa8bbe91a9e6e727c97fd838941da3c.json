{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\n\n/**\r\n * This differs from util.assertShapesMatch in that it allows values of\r\n * negative one, an undefined size of a dimensinon, in a shape to match\r\n * anything.\r\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function assertShapesMatchAllowUndefinedSize(shapeA, shapeB) {\n  var errorMessagePrefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  util.assert(shapesEqualAllowUndefinedSize(shapeA, shapeB), function () {\n    return errorMessagePrefix + \" Shapes \".concat(shapeA, \" and \").concat(shapeB, \" must match\");\n  });\n}\nexport function shapesEqualAllowUndefinedSize(n1, n2) {\n  if (n1.length !== n2.length) {\n    return false;\n  }\n\n  for (var i = 0; i < n1.length; i++) {\n    if (n1[i] !== -1 && n2[i] !== -1 && n1[i] !== n2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"sources":["../../src/executor/tensor_utils.ts"],"names":[],"mappings":"AACA;;;;;;;;;;;;;;;AAeG;;AACH;;;;AAIG;AAEH,SAAQ,IAAR,QAAmB,uBAAnB;AAEA,OAAM,SAAU,mCAAV,CACF,MADE,EACgB,MADhB,EACyD;AAAA,MAAvB,kBAAuB,uEAAF,EAAE;AAC7D,EAAA,IAAI,CAAC,MAAL,CACI,6BAA6B,CAAC,MAAD,EAAS,MAAT,CADjC,EAEI;AAAA,WAAM,kBAAkB,qBAAc,MAAd,kBAA4B,MAA5B,gBAAxB;AAAA,GAFJ;AAGD;AAED,OAAM,SAAU,6BAAV,CAAwC,EAAxC,EAAsD,EAAtD,EAAkE;AACtE,MAAI,EAAE,CAAC,MAAH,KAAc,EAAE,CAAC,MAArB,EAA6B;AAC3B,WAAO,KAAP;AACD;;AACD,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,EAAE,CAAC,MAAvB,EAA+B,CAAC,EAAhC,EAAoC;AAClC,QAAI,EAAE,CAAC,CAAD,CAAF,KAAU,CAAC,CAAX,IAAgB,EAAE,CAAC,CAAD,CAAF,KAAU,CAAC,CAA3B,IAAgC,EAAE,CAAC,CAAD,CAAF,KAAU,EAAE,CAAC,CAAD,CAAhD,EAAqD;AACnD,aAAO,KAAP;AACD;AACF;;AACD,SAAO,IAAP;AACD","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\n/**\r\n * This differs from util.assertShapesMatch in that it allows values of\r\n * negative one, an undefined size of a dimensinon, in a shape to match\r\n * anything.\r\n */\r\nimport { util } from '@tensorflow/tfjs-core';\r\nexport function assertShapesMatchAllowUndefinedSize(shapeA, shapeB, errorMessagePrefix = '') {\r\n    util.assert(shapesEqualAllowUndefinedSize(shapeA, shapeB), () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\r\n}\r\nexport function shapesEqualAllowUndefinedSize(n1, n2) {\r\n    if (n1.length !== n2.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < n1.length; i++) {\r\n        if (n1[i] !== -1 && n2[i] !== -1 && n1[i] !== n2[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n//# sourceMappingURL=tensor_utils.js.map"]},"metadata":{},"sourceType":"module"}