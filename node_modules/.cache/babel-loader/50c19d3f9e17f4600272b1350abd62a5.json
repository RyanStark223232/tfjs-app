{"ast":null,"code":"import { factory } from '../utils/factory';\nimport { deepMap } from '../utils/collection';\nvar name = 'number';\nvar dependencies = ['typed'];\nexport var createNumber = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n  /**\r\n   * Create a number or convert a string, boolean, or unit to a number.\r\n   * When value is a matrix, all elements will be converted to number.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.number(value)\r\n   *    math.number(unit, valuelessUnit)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.number(2)                         // returns number 2\r\n   *    math.number('7.2')                     // returns number 7.2\r\n   *    math.number(true)                      // returns number 1\r\n   *    math.number([true, false, true, true]) // returns [1, 0, 1, 1]\r\n   *    math.number(math.unit('52cm'), 'm')    // returns 0.52\r\n   *\r\n   * See also:\r\n   *\r\n   *    bignumber, boolean, complex, index, matrix, string, unit\r\n   *\r\n   * @param {string | number | BigNumber | Fraction | boolean | Array | Matrix | Unit | null} [value]  Value to be converted\r\n   * @param {Unit | string} [valuelessUnit] A valueless unit, used to convert a unit to a number\r\n   * @return {number | Array | Matrix} The created number\r\n   */\n\n  var number = typed('number', {\n    '': function _() {\n      return 0;\n    },\n    number: function number(x) {\n      return x;\n    },\n    string: function string(x) {\n      if (x === 'NaN') return NaN;\n      var num = Number(x);\n\n      if (isNaN(num)) {\n        throw new SyntaxError('String \"' + x + '\" is no valid number');\n      }\n\n      if (['0b', '0o', '0x'].includes(x.substring(0, 2))) {\n        if (num > Math.pow(2, 32) - 1) {\n          throw new SyntaxError(\"String \\\"\".concat(x, \"\\\" is out of range\"));\n        }\n\n        if (num & 0x80000000) {\n          num = -1 * ~(num - 1);\n        }\n      }\n\n      return num;\n    },\n    BigNumber: function BigNumber(x) {\n      return x.toNumber();\n    },\n    Fraction: function Fraction(x) {\n      return x.valueOf();\n    },\n    Unit: function Unit(x) {\n      throw new Error('Second argument with valueless unit expected');\n    },\n    \"null\": function _null(x) {\n      return 0;\n    },\n    'Unit, string | Unit': function UnitStringUnit(unit, valuelessUnit) {\n      return unit.toNumber(valuelessUnit);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, this);\n    }\n  }); // reviver function to parse a JSON object like:\n  //\n  //     {\"mathjs\":\"number\",\"value\":\"2.3\"}\n  //\n  // into a number 2.3\n\n  number.fromJSON = function (json) {\n    return parseFloat(json.value);\n  };\n\n  return number;\n});","map":{"version":3,"sources":["C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/mathjs/es/type/number.js"],"names":["factory","deepMap","name","dependencies","createNumber","_ref","typed","number","_","x","string","NaN","num","Number","isNaN","SyntaxError","includes","substring","Math","pow","concat","BigNumber","toNumber","Fraction","valueOf","Unit","Error","_null","UnitStringUnit","unit","valuelessUnit","ArrayMatrix","fromJSON","json","parseFloat","value"],"mappings":"AAAA,SAASA,OAAT,QAAwB,kBAAxB;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,IAAIC,IAAI,GAAG,QAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,CAAnB;AACA,OAAO,IAAIC,YAAY,GAAG,eAAeJ,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AACnF,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,MAAIC,MAAM,GAAGD,KAAK,CAAC,QAAD,EAAW;AAC3B,QAAI,SAASE,CAAT,GAAa;AACf,aAAO,CAAP;AACD,KAH0B;AAI3BD,IAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBE,CAAhB,EAAmB;AACzB,aAAOA,CAAP;AACD,KAN0B;AAO3BC,IAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBD,CAAhB,EAAmB;AACzB,UAAIA,CAAC,KAAK,KAAV,EAAiB,OAAOE,GAAP;AACjB,UAAIC,GAAG,GAAGC,MAAM,CAACJ,CAAD,CAAhB;;AAEA,UAAIK,KAAK,CAACF,GAAD,CAAT,EAAgB;AACd,cAAM,IAAIG,WAAJ,CAAgB,aAAaN,CAAb,GAAiB,sBAAjC,CAAN;AACD;;AAED,UAAI,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmBO,QAAnB,CAA4BP,CAAC,CAACQ,SAAF,CAAY,CAAZ,EAAe,CAAf,CAA5B,CAAJ,EAAoD;AAClD,YAAIL,GAAG,GAAGM,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY,EAAZ,IAAkB,CAA5B,EAA+B;AAC7B,gBAAM,IAAIJ,WAAJ,CAAgB,YAAYK,MAAZ,CAAmBX,CAAnB,EAAsB,oBAAtB,CAAhB,CAAN;AACD;;AAED,YAAIG,GAAG,GAAG,UAAV,EAAsB;AACpBA,UAAAA,GAAG,GAAG,CAAC,CAAD,GAAK,EAAEA,GAAG,GAAG,CAAR,CAAX;AACD;AACF;;AAED,aAAOA,GAAP;AACD,KA1B0B;AA2B3BS,IAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBZ,CAAnB,EAAsB;AAC/B,aAAOA,CAAC,CAACa,QAAF,EAAP;AACD,KA7B0B;AA8B3BC,IAAAA,QAAQ,EAAE,SAASA,QAAT,CAAkBd,CAAlB,EAAqB;AAC7B,aAAOA,CAAC,CAACe,OAAF,EAAP;AACD,KAhC0B;AAiC3BC,IAAAA,IAAI,EAAE,SAASA,IAAT,CAAchB,CAAd,EAAiB;AACrB,YAAM,IAAIiB,KAAJ,CAAU,8CAAV,CAAN;AACD,KAnC0B;AAoC3B,YAAQ,SAASC,KAAT,CAAelB,CAAf,EAAkB;AACxB,aAAO,CAAP;AACD,KAtC0B;AAuC3B,2BAAuB,SAASmB,cAAT,CAAwBC,IAAxB,EAA8BC,aAA9B,EAA6C;AAClE,aAAOD,IAAI,CAACP,QAAL,CAAcQ,aAAd,CAAP;AACD,KAzC0B;AA0C3B,sBAAkB,SAASC,WAAT,CAAqBtB,CAArB,EAAwB;AACxC,aAAOR,OAAO,CAACQ,CAAD,EAAI,IAAJ,CAAd;AACD;AA5C0B,GAAX,CAAlB,CA5BmF,CAyE/E;AACJ;AACA;AACA;AACA;;AAEAF,EAAAA,MAAM,CAACyB,QAAP,GAAkB,UAAUC,IAAV,EAAgB;AAChC,WAAOC,UAAU,CAACD,IAAI,CAACE,KAAN,CAAjB;AACD,GAFD;;AAIA,SAAO5B,MAAP;AACD,CApF+C,CAAzC","sourcesContent":["import { factory } from '../utils/factory';\r\nimport { deepMap } from '../utils/collection';\r\nvar name = 'number';\r\nvar dependencies = ['typed'];\r\nexport var createNumber = /* #__PURE__ */factory(name, dependencies, function (_ref) {\r\n  var typed = _ref.typed;\r\n\r\n  /**\r\n   * Create a number or convert a string, boolean, or unit to a number.\r\n   * When value is a matrix, all elements will be converted to number.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.number(value)\r\n   *    math.number(unit, valuelessUnit)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.number(2)                         // returns number 2\r\n   *    math.number('7.2')                     // returns number 7.2\r\n   *    math.number(true)                      // returns number 1\r\n   *    math.number([true, false, true, true]) // returns [1, 0, 1, 1]\r\n   *    math.number(math.unit('52cm'), 'm')    // returns 0.52\r\n   *\r\n   * See also:\r\n   *\r\n   *    bignumber, boolean, complex, index, matrix, string, unit\r\n   *\r\n   * @param {string | number | BigNumber | Fraction | boolean | Array | Matrix | Unit | null} [value]  Value to be converted\r\n   * @param {Unit | string} [valuelessUnit] A valueless unit, used to convert a unit to a number\r\n   * @return {number | Array | Matrix} The created number\r\n   */\r\n  var number = typed('number', {\r\n    '': function _() {\r\n      return 0;\r\n    },\r\n    number: function number(x) {\r\n      return x;\r\n    },\r\n    string: function string(x) {\r\n      if (x === 'NaN') return NaN;\r\n      var num = Number(x);\r\n\r\n      if (isNaN(num)) {\r\n        throw new SyntaxError('String \"' + x + '\" is no valid number');\r\n      }\r\n\r\n      if (['0b', '0o', '0x'].includes(x.substring(0, 2))) {\r\n        if (num > Math.pow(2, 32) - 1) {\r\n          throw new SyntaxError(\"String \\\"\".concat(x, \"\\\" is out of range\"));\r\n        }\r\n\r\n        if (num & 0x80000000) {\r\n          num = -1 * ~(num - 1);\r\n        }\r\n      }\r\n\r\n      return num;\r\n    },\r\n    BigNumber: function BigNumber(x) {\r\n      return x.toNumber();\r\n    },\r\n    Fraction: function Fraction(x) {\r\n      return x.valueOf();\r\n    },\r\n    Unit: function Unit(x) {\r\n      throw new Error('Second argument with valueless unit expected');\r\n    },\r\n    \"null\": function _null(x) {\r\n      return 0;\r\n    },\r\n    'Unit, string | Unit': function UnitStringUnit(unit, valuelessUnit) {\r\n      return unit.toNumber(valuelessUnit);\r\n    },\r\n    'Array | Matrix': function ArrayMatrix(x) {\r\n      return deepMap(x, this);\r\n    }\r\n  }); // reviver function to parse a JSON object like:\r\n  //\r\n  //     {\"mathjs\":\"number\",\"value\":\"2.3\"}\r\n  //\r\n  // into a number 2.3\r\n\r\n  number.fromJSON = function (json) {\r\n    return parseFloat(json.value);\r\n  };\r\n\r\n  return number;\r\n});"]},"metadata":{},"sourceType":"module"}