{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tf = require(\"@tensorflow/tfjs\");\n\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\n\nvar util_1 = require(\"util\");\n\nvar int64_tensors_1 = require(\"./int64_tensors\");\n\nvar NodeJSKernelBackend =\n/** @class */\nfunction (_super) {\n  __extends(NodeJSKernelBackend, _super);\n\n  function NodeJSKernelBackend(binding, packageName) {\n    var _this = _super.call(this) || this;\n\n    _this.binding = binding;\n    _this.isGPUPackage = packageName === '@tensorflow/tfjs-node-gpu';\n    _this.isUsingGpuDevice = _this.binding.isUsingGpuDevice();\n    _this.tensorMap = new tf.DataStorage(_this, tf.engine());\n    return _this;\n  }\n\n  NodeJSKernelBackend.prototype.getDTypeInteger = function (dtype) {\n    switch (dtype) {\n      case 'float32':\n        return this.binding.TF_FLOAT;\n\n      case 'int32':\n        return this.binding.TF_INT32;\n\n      case 'bool':\n        return this.binding.TF_BOOL;\n\n      case 'complex64':\n        return this.binding.TF_COMPLEX64;\n\n      case 'string':\n        return this.binding.TF_STRING;\n\n      default:\n        throw new Error(\"Unsupported DType: \" + dtype);\n    }\n  };\n\n  NodeJSKernelBackend.prototype.typeAttributeFromTensor = function (value) {\n    return this.getDTypeInteger(value.dtype);\n  }; // Creates a new Tensor and maps the dataId to the passed in ID.\n\n\n  NodeJSKernelBackend.prototype.createOutputTensor = function (metadata) {\n    var newId = {};\n    this.tensorMap.set(newId, {\n      shape: metadata.shape,\n      dtype: metadata.dtype,\n      id: metadata.id,\n      values: null\n    });\n    var dtype;\n\n    switch (metadata.dtype) {\n      case this.binding.TF_FLOAT:\n        dtype = 'float32';\n        break;\n\n      case this.binding.TF_INT32:\n        dtype = 'int32';\n        break;\n\n      case this.binding.TF_BOOL:\n        dtype = 'bool';\n        break;\n\n      case this.binding.TF_COMPLEX64:\n        dtype = 'complex64';\n        break;\n\n      case this.binding.TF_STRING:\n        dtype = 'string';\n        break;\n\n      case this.binding.TF_RESOURCE:\n        // NOTE(cais): We currently represent resource-type Tensors\n        // as string of ubytes.\n        dtype = 'string';\n        break;\n\n      case this.binding.TF_UINT8:\n        // TensorFlow uses UINT8 as dtype for image tensor. UINT8 is not\n        // supported in TFJS yet, cast it to int32.\n        dtype = 'int32';\n        break;\n\n      default:\n        throw new Error(\"Unknown dtype enum \" + metadata.dtype);\n    }\n\n    return tf.engine().makeTensorFromDataId(newId, metadata.shape, dtype);\n  }; // Prepares Tensor instances for Op execution.\n\n\n  NodeJSKernelBackend.prototype.getInputTensorIds = function (tensors) {\n    var ids = [];\n\n    for (var i = 0; i < tensors.length; i++) {\n      if (tensors[i] instanceof int64_tensors_1.Int64Scalar) {\n        // Then `tensors[i]` is a Int64Scalar, which we currently represent\n        // using an `Int32Array`.\n        var value = tensors[i].valueArray;\n        var id = this.binding.createTensor([], this.binding.TF_INT64, value);\n        ids.push(id);\n      } else {\n        var info = this.tensorMap.get(tensors[i].dataId); // TODO - what about ID in this case? Handle in write()??\n\n        if (info.values != null) {\n          // Values were delayed to write into the TensorHandle. Do that before\n          // Op execution and clear stored values.\n          info.id = this.binding.createTensor(info.shape, info.dtype, info.values);\n          info.values = null;\n        }\n\n        ids.push(info.id);\n      }\n    }\n\n    return ids;\n  };\n\n  NodeJSKernelBackend.prototype.createReductionOpAttrs = function (tensor, keepDims) {\n    if (keepDims === void 0) {\n      keepDims = false;\n    }\n\n    return [{\n      name: 'keep_dims',\n      type: this.binding.TF_ATTR_BOOL,\n      value: keepDims\n    }, createTensorsTypeOpAttr('T', tensor.dtype), createTensorsTypeOpAttr('Tidx', 'int32')];\n  };\n\n  NodeJSKernelBackend.prototype.floatPrecision = function () {\n    return 32;\n  };\n\n  NodeJSKernelBackend.prototype.epsilon = function () {\n    return _super.prototype.epsilon.call(this);\n  };\n  /**\n   * Executes an op that has a single input and output.\n   *\n   * Helper function to wrap executeSingleOutput in a particular case.\n   * @param name The name of the Op to execute.\n   * @param input The input Tensor for the Op.\n   */\n\n\n  NodeJSKernelBackend.prototype.executeSingleInput = function (name, input) {\n    var opAttrs = [createTensorsTypeOpAttr('T', input.dtype)];\n    return this.executeSingleOutput(name, opAttrs, [input]);\n  };\n  /**\n   * Executes a TensorFlow Eager Op that provides one output Tensor.\n   * @param name The name of the Op to execute.\n   * @param opAttrs The list of Op attributes required to execute.\n   * @param inputs The list of input Tensors for the Op.\n   * @return A resulting Tensor from Op execution.\n   */\n\n\n  NodeJSKernelBackend.prototype.executeSingleOutput = function (name, opAttrs, inputs) {\n    var outputMetadata = this.binding.executeOp(name, opAttrs, this.getInputTensorIds(inputs), 1);\n    return this.createOutputTensor(outputMetadata[0]);\n  };\n  /**\n   * Executes a TensorFlow Eager Op that provides multiple output Tensors.\n   * @param name The name of the Op to execute.\n   * @param opAttrs The list of Op attributes required to execute.\n   * @param inputs The list of input Tensors for the Op.\n   * @param numOutputs The number of output Tensors for Op execution.\n   * @return A resulting Tensor array from Op execution.\n   */\n\n\n  NodeJSKernelBackend.prototype.executeMultipleOutputs = function (name, opAttrs, inputs, numOutputs) {\n    var _this = this;\n\n    var outputMetadata = this.binding.executeOp(name, opAttrs, this.getInputTensorIds(inputs), numOutputs);\n    return outputMetadata.map(function (m) {\n      return _this.createOutputTensor(m);\n    });\n  };\n\n  NodeJSKernelBackend.prototype.numDataIds = function () {\n    return this.tensorMap.numDataIds();\n  };\n\n  NodeJSKernelBackend.prototype.dispose = function () {};\n\n  NodeJSKernelBackend.prototype.read = function (dataId) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.readSync(dataId)];\n      });\n    });\n  };\n\n  NodeJSKernelBackend.prototype.readSync = function (dataId) {\n    if (!this.tensorMap.has(dataId)) {\n      throw new Error(\"Tensor \" + dataId + \" was not registered!\");\n    }\n\n    var info = this.tensorMap.get(dataId);\n\n    if (info.values != null) {\n      return info.values;\n    } else {\n      return this.binding.tensorDataSync(info.id);\n    }\n  };\n\n  NodeJSKernelBackend.prototype.disposeData = function (dataId) {\n    // No-op if already disposed.\n    if (!this.tensorMap.has(dataId)) {\n      return;\n    }\n\n    var id = this.tensorMap.get(dataId).id;\n\n    if (id != null && id >= 0) {\n      this.binding.deleteTensor(id);\n    }\n\n    this.tensorMap.delete(dataId);\n  };\n\n  NodeJSKernelBackend.prototype.move = function (dataId, values, shape, dtype) {\n    this.tensorMap.set(dataId, {\n      shape: shape,\n      dtype: getTFDType(dtype),\n      values: values,\n      id: -1\n    });\n  };\n\n  NodeJSKernelBackend.prototype.write = function (values, shape, dtype) {\n    var dataId = {};\n    this.move(dataId, values, shape, dtype);\n    return dataId;\n  };\n\n  NodeJSKernelBackend.prototype.fill = function (shape, value, dtype) {\n    // TODO(cais, nkreeger): Investigate whether this can be made into\n    // a dtype helper method. The underlying op kernel doesn't accept undefined\n    // or null dtype.\n    if (dtype == null) {\n      if (typeof value === 'number') {\n        dtype = 'float32';\n      } else {\n        dtype = 'string';\n      }\n    }\n\n    var shapeTensor = tfjs_1.tensor1d(shape, 'int32');\n    var valueTensor = tfjs_1.scalar(value, dtype);\n    var opAttrs = [{\n      name: 'T',\n      type: this.binding.TF_ATTR_TYPE,\n      value: this.getDTypeInteger(dtype)\n    }, {\n      name: 'index_type',\n      type: this.binding.TF_ATTR_TYPE,\n      value: this.binding.TF_INT32\n    }];\n    return this.executeSingleOutput('Fill', opAttrs, [shapeTensor, valueTensor]);\n  };\n\n  NodeJSKernelBackend.prototype.onesLike = function (x) {\n    var opAttrs = [{\n      name: 'T',\n      type: this.binding.TF_ATTR_TYPE,\n      value: this.getDTypeInteger(x.dtype)\n    }];\n    return this.executeSingleOutput('OnesLike', opAttrs, [x]);\n  };\n\n  NodeJSKernelBackend.prototype.zerosLike = function (x) {\n    var opAttrs = [{\n      name: 'T',\n      type: this.binding.TF_ATTR_TYPE,\n      value: this.getDTypeInteger(x.dtype)\n    }];\n    return this.executeSingleOutput('ZerosLike', opAttrs, [x]);\n  };\n\n  NodeJSKernelBackend.prototype.stridedSlice = function (x, begin, end, strides) {\n    var beginTensor = tfjs_1.tensor1d(begin, 'int32');\n\n    for (var axis = 0; axis < end.length; axis++) {\n      // Unlike Numpy, when the strides are negative, TF C uses -n-1 instead of\n      // -1 as the \"end\" in order to include the first element.\n      if (strides[axis] < 0 && end[axis] === -1) {\n        end[axis] -= x.shape[axis];\n      }\n    }\n\n    var endTensor = tfjs_1.tensor1d(end, 'int32');\n    var stridesTensor = tfjs_1.tensor1d(strides, 'int32'); // All of the masks have already been accounted for in the high level op,\n    // so the backend does NOT need to deal with masks.\n\n    var opAttrs = [createTensorsTypeOpAttr('T', x.dtype), createTensorsTypeOpAttr('Index', 'int32'), {\n      name: 'begin_mask',\n      type: this.binding.TF_ATTR_INT,\n      value: 0\n    }, {\n      name: 'end_mask',\n      type: this.binding.TF_ATTR_INT,\n      value: 0\n    }, {\n      name: 'ellipsis_mask',\n      type: this.binding.TF_ATTR_INT,\n      value: 0\n    }, {\n      name: 'new_axis_mask',\n      type: this.binding.TF_ATTR_INT,\n      value: 0\n    }, {\n      name: 'shrink_axis_mask',\n      type: this.binding.TF_ATTR_INT,\n      value: 0\n    }];\n    return this.executeSingleOutput('StridedSlice', opAttrs, [x, beginTensor, endTensor, stridesTensor]);\n  };\n\n  NodeJSKernelBackend.prototype.unstack = function (x, axis) {\n    if (axis >= x.shape.length) {\n      throw new Error(\"Invalid axis supplied: \" + axis + \" shape length: \" + x.shape.length);\n    }\n\n    var num = x.shape[axis];\n    var opAttrs = [{\n      name: 'num',\n      type: this.binding.TF_ATTR_INT,\n      value: num\n    }, createTensorsTypeOpAttr('T', x.dtype), {\n      name: 'axis',\n      type: this.binding.TF_ATTR_INT,\n      value: axis\n    }];\n    return this.executeMultipleOutputs('Unpack', opAttrs, [x], num);\n  };\n\n  NodeJSKernelBackend.prototype.batchMatMul = function (a, b, transposeA, transposeB) {\n    var opAttrs = [createTensorsTypeOpAttr('T', a.dtype), {\n      name: 'adj_x',\n      type: this.binding.TF_ATTR_BOOL,\n      value: transposeA\n    }, {\n      name: 'adj_y',\n      type: this.binding.TF_ATTR_BOOL,\n      value: transposeB\n    }];\n    return this.executeSingleOutput('BatchMatMul', opAttrs, [a, b]);\n  };\n\n  NodeJSKernelBackend.prototype.applyActivation = function (input, activation, preluActivationWeights) {\n    var result = input;\n\n    if (activation != null) {\n      if (activation === 'linear') {// No-op\n      } else if (activation === 'relu') {\n        result = this.relu(result);\n      } else if (activation === 'prelu') {\n        result = this.prelu(result, preluActivationWeights);\n      } else if (activation === 'elu') {\n        result = this.elu(result);\n      } else if (activation === 'relu6') {\n        result = this.relu6(result);\n      } else {\n        throw new Error(\"Activation: \" + activation + \" has not been implemented for the Node.js backend\");\n      }\n    }\n\n    return result;\n  };\n\n  NodeJSKernelBackend.prototype.fusedConv2d = function (_a) {\n    var input = _a.input,\n        filter = _a.filter,\n        convInfo = _a.convInfo,\n        bias = _a.bias,\n        activation = _a.activation,\n        preluActivationWeights = _a.preluActivationWeights;\n    var result = this.conv2d(input, filter, convInfo);\n\n    if (bias != null) {\n      result = tf.add(result, bias);\n    }\n\n    result = this.applyActivation(result, activation, preluActivationWeights);\n    return result;\n  };\n\n  NodeJSKernelBackend.prototype.fusedBatchMatMul = function (_a) {\n    var a = _a.a,\n        b = _a.b,\n        transposeA = _a.transposeA,\n        transposeB = _a.transposeB,\n        bias = _a.bias,\n        activation = _a.activation,\n        preluActivationWeights = _a.preluActivationWeights; // Core TensorFlow does not have a fused BatchMatMul op. Combine calls to\n    // achieve the same results:\n\n    var result = this.batchMatMul(a, b, transposeA, transposeB);\n\n    if (bias != null) {\n      result = tf.add(result, bias);\n    }\n\n    result = this.applyActivation(result, activation, preluActivationWeights);\n    return result;\n  };\n\n  NodeJSKernelBackend.prototype.slice = function (x, begin, size) {\n    var opAttrs = [createTensorsTypeOpAttr('T', x.dtype), createTensorsTypeOpAttr('Index', 'int32')]; // Bind tensor values\n\n    var beginTensor = tfjs_1.tensor1d(begin, 'int32');\n    var sizeTensor = tfjs_1.tensor1d(size, 'int32');\n    return this.executeSingleOutput('Slice', opAttrs, [x, beginTensor, sizeTensor]);\n  };\n\n  NodeJSKernelBackend.prototype.reverse = function (a, axis) {\n    var opAttrs = [createTensorsTypeOpAttr('Tidx', 'int32'), createTensorsTypeOpAttr('T', a.dtype)];\n    var axisTensor = tfjs_1.tensor1d(axis, 'int32');\n    return this.executeSingleOutput('ReverseV2', opAttrs, [a, axisTensor]);\n  };\n\n  NodeJSKernelBackend.prototype.concat = function (tensors, axis) {\n    var opAttrs = [{\n      name: 'N',\n      type: this.binding.TF_ATTR_INT,\n      value: tensors.length\n    }, {\n      name: 'Tidx',\n      type: this.binding.TF_ATTR_TYPE,\n      value: this.binding.TF_INT32\n    }, createTensorsTypeOpAttr('T', tensors)];\n    var inputs = Array.from(tensors);\n    inputs.push(tfjs_1.scalar(axis, 'int32'));\n    return this.executeSingleOutput('ConcatV2', opAttrs, inputs);\n  };\n\n  NodeJSKernelBackend.prototype.neg = function (a) {\n    return this.executeSingleInput('Neg', a);\n  };\n\n  NodeJSKernelBackend.prototype.select = function (condition, a, b) {\n    var opAttrs = [createTensorsTypeOpAttr('T', tfjs_1.backend_util.upcastType(a.dtype, b.dtype))];\n    return this.executeSingleOutput('Select', opAttrs, [condition, a, b]);\n  };\n\n  NodeJSKernelBackend.prototype.subtract = function (a, b) {\n    var opAttrs = [createTensorsTypeOpAttr('T', tfjs_1.backend_util.upcastType(a.dtype, b.dtype))];\n    return this.executeSingleOutput('Sub', opAttrs, [a, b]);\n  };\n\n  NodeJSKernelBackend.prototype.realDivide = function (a, b) {\n    var opAttrs = [createTensorsTypeOpAttr('T', tfjs_1.backend_util.upcastType(a.dtype, b.dtype))];\n    return this.executeSingleOutput('RealDiv', opAttrs, [a, b]);\n  };\n\n  NodeJSKernelBackend.prototype.divide = function (a, b) {\n    var opAttrs = [createTensorsTypeOpAttr('T', tfjs_1.backend_util.upcastType(a.dtype, b.dtype))];\n    return this.executeSingleOutput('Div', opAttrs, [a, b]);\n  };\n\n  NodeJSKernelBackend.prototype.divNoNan = function (a, b) {\n    var opAttrs = [createTensorsTypeOpAttr('T', tfjs_1.backend_util.upcastType(a.dtype, b.dtype))];\n    return this.executeSingleOutput('DivNoNan', opAttrs, [a, b]);\n  };\n\n  NodeJSKernelBackend.prototype.where = function (condition) {\n    return this.executeSingleOutput('Where', [], [condition]);\n  };\n\n  NodeJSKernelBackend.prototype.topKValues = function (x, k) {\n    throw new Error('Method not implemented.');\n  };\n\n  NodeJSKernelBackend.prototype.topKIndices = function (x, k) {\n    throw new Error('Method not implemented.');\n  };\n\n  NodeJSKernelBackend.prototype.topk = function (x, k, sorted) {\n    var kCount = util_1.isNullOrUndefined(k) ? 1 : k;\n    var isSorted = util_1.isNullOrUndefined(sorted) ? true : sorted;\n    var opAttrs = [{\n      name: 'sorted',\n      type: this.binding.TF_ATTR_BOOL,\n      value: isSorted\n    }, createTensorsTypeOpAttr('T', x.dtype)];\n    var kTensor = tfjs_1.scalar(kCount, 'int32'); // 'TopKV2' has two-hard coded output attributes:\n\n    return this.executeMultipleOutputs('TopKV2', opAttrs, [x, kTensor], 2);\n  };\n\n  NodeJSKernelBackend.prototype.all = function (x, axes) {\n    var opAttrs = [{\n      name: 'keep_dims',\n      type: this.binding.TF_ATTR_BOOL,\n      value: false\n    }, createTensorsTypeOpAttr('Tidx', 'int32')];\n    var axesTensor = tfjs_1.tensor1d(axes, 'int32');\n    return this.executeSingleOutput('All', opAttrs, [x, axesTensor]);\n  };\n\n  NodeJSKernelBackend.prototype.any = function (x, axes) {\n    var opAttrs = [{\n      name: 'keep_dims',\n      type: this.binding.TF_ATTR_BOOL,\n      value: false\n    }, createTensorsTypeOpAttr('Tidx', 'int32')];\n    var axesTensor = tfjs_1.tensor1d(axes, 'int32');\n    return this.executeSingleOutput('Any', opAttrs, [x, axesTensor]);\n  };\n\n  NodeJSKernelBackend.prototype.ceil = function (x) {\n    return this.executeSingleInput('Ceil', x);\n  };\n\n  NodeJSKernelBackend.prototype.floor = function (x) {\n    return this.executeSingleInput('Floor', x);\n  };\n\n  NodeJSKernelBackend.prototype.pow = function (a, b) {\n    var dtype = tfjs_1.backend_util.upcastType(a.dtype, b.dtype);\n    var opAttrs = [createTensorsTypeOpAttr('T', dtype)];\n    return this.executeSingleOutput('Pow', opAttrs, [a.cast(dtype), b.cast(dtype)]);\n  };\n\n  NodeJSKernelBackend.prototype.exp = function (x) {\n    var xTensor = x.dtype === 'int32' ? x.toFloat() : x;\n    return this.executeSingleInput('Exp', xTensor);\n  };\n\n  NodeJSKernelBackend.prototype.log = function (x) {\n    return this.executeSingleInput('Log', x);\n  };\n\n  NodeJSKernelBackend.prototype.log1p = function (x) {\n    return this.executeSingleInput('Log1p', x);\n  };\n\n  NodeJSKernelBackend.prototype.sqrt = function (x) {\n    return this.executeSingleInput('Sqrt', x);\n  };\n\n  NodeJSKernelBackend.prototype.square = function (x) {\n    return this.executeSingleInput('Square', x);\n  };\n\n  NodeJSKernelBackend.prototype.relu = function (x) {\n    return this.executeSingleInput('Relu', x);\n  };\n\n  NodeJSKernelBackend.prototype.relu6 = function (x) {\n    return this.executeSingleInput('Relu6', x);\n  };\n\n  NodeJSKernelBackend.prototype.prelu = function (x, a) {\n    var pos = this.relu(x);\n    var neg = a.mul(x.sub(this.abs(x))).mul(0.5);\n    return pos.add(neg);\n  };\n\n  NodeJSKernelBackend.prototype.elu = function (x) {\n    return this.executeSingleInput('Elu', x);\n  };\n\n  NodeJSKernelBackend.prototype.eluDer = function (dy, y) {\n    var opAttrs = [createTensorsTypeOpAttr('T', y.dtype)];\n    return this.executeSingleOutput('EluGrad', opAttrs, [dy, y]);\n  };\n\n  NodeJSKernelBackend.prototype.selu = function (x) {\n    return this.executeSingleInput('Selu', x);\n  };\n\n  NodeJSKernelBackend.prototype.int = function (x) {\n    throw new Error('Method not implemented.');\n  };\n\n  NodeJSKernelBackend.prototype.clip = function (x, min, max) {\n    var xMin = tf.minimum(x, tfjs_1.scalar(max, x.dtype));\n    return tf.maximum(xMin, tfjs_1.scalar(min, x.dtype));\n  };\n\n  NodeJSKernelBackend.prototype.abs = function (x) {\n    return this.executeSingleInput('Abs', x);\n  };\n\n  NodeJSKernelBackend.prototype.complexAbs = function (x) {\n    var opAttrs = [createTensorsTypeOpAttr('T', x.dtype), createTensorsTypeOpAttr('Tout', 'float32')];\n    return this.executeSingleOutput('ComplexAbs', opAttrs, [x]);\n  };\n\n  NodeJSKernelBackend.prototype.sigmoid = function (x) {\n    return this.executeSingleInput('Sigmoid', x);\n  };\n\n  NodeJSKernelBackend.prototype.sin = function (x) {\n    return this.executeSingleInput('Sin', x);\n  };\n\n  NodeJSKernelBackend.prototype.cos = function (x) {\n    return this.executeSingleInput('Cos', x);\n  };\n\n  NodeJSKernelBackend.prototype.tan = function (x) {\n    return this.executeSingleInput('Tan', x);\n  };\n\n  NodeJSKernelBackend.prototype.asin = function (x) {\n    return this.executeSingleInput('Asin', x);\n  };\n\n  NodeJSKernelBackend.prototype.acos = function (x) {\n    return this.executeSingleInput('Acos', x);\n  };\n\n  NodeJSKernelBackend.prototype.atan = function (x) {\n    return this.executeSingleInput('Atan', x);\n  };\n\n  NodeJSKernelBackend.prototype.sinh = function (x) {\n    return this.executeSingleInput('Sinh', x);\n  };\n\n  NodeJSKernelBackend.prototype.cosh = function (x) {\n    return this.executeSingleInput('Cosh', x);\n  };\n\n  NodeJSKernelBackend.prototype.tanh = function (x) {\n    return this.executeSingleInput('Tanh', x);\n  };\n\n  NodeJSKernelBackend.prototype.mod = function (a, b) {\n    var opAttrs = [createTensorsTypeOpAttr('T', a.dtype)];\n    return this.executeSingleOutput('FloorMod', opAttrs, [a, b]);\n  };\n\n  NodeJSKernelBackend.prototype.round = function (x) {\n    return this.executeSingleInput('Round', x);\n  };\n\n  NodeJSKernelBackend.prototype.sign = function (x) {\n    return this.executeSingleInput('Sign', x);\n  };\n\n  NodeJSKernelBackend.prototype.isNaN = function (x) {\n    return this.executeSingleInput('IsNan', x);\n  };\n\n  NodeJSKernelBackend.prototype.isInf = function (x) {\n    return this.executeSingleInput('IsInf', x);\n  };\n\n  NodeJSKernelBackend.prototype.isFinite = function (x) {\n    return this.executeSingleInput('IsFinite', x);\n  };\n\n  NodeJSKernelBackend.prototype.rsqrt = function (x) {\n    return this.executeSingleInput('Rsqrt', x);\n  };\n\n  NodeJSKernelBackend.prototype.reciprocal = function (x) {\n    return this.executeSingleInput('Reciprocal', x);\n  };\n\n  NodeJSKernelBackend.prototype.asinh = function (x) {\n    return this.executeSingleInput('Asinh', x);\n  };\n\n  NodeJSKernelBackend.prototype.acosh = function (x) {\n    return this.executeSingleInput('Acosh', x);\n  };\n\n  NodeJSKernelBackend.prototype.atanh = function (x) {\n    return this.executeSingleInput('Atanh', x);\n  };\n\n  NodeJSKernelBackend.prototype.erf = function (x) {\n    return this.executeSingleInput('Erf', x);\n  };\n\n  NodeJSKernelBackend.prototype.squaredDifference = function (a, b) {\n    var opAttrs = [createTensorsTypeOpAttr('T', a.dtype)];\n    return this.executeSingleOutput('SquaredDifference', opAttrs, [a, b]);\n  };\n\n  NodeJSKernelBackend.prototype.expm1 = function (x) {\n    return this.executeSingleInput('Expm1', x);\n  };\n\n  NodeJSKernelBackend.prototype.softplus = function (x) {\n    return this.executeSingleInput('Softplus', x);\n  };\n\n  NodeJSKernelBackend.prototype.atan2 = function (a, b) {\n    var opAttrs = [createTensorsTypeOpAttr('T', a.dtype)];\n    return this.executeSingleOutput('Atan2', opAttrs, [a, b]);\n  };\n\n  NodeJSKernelBackend.prototype.step = function (x, alpha) {\n    var dtype = x.dtype;\n    var nans = this.isNaN(x);\n    var stepNoNans = this.select(tf.greater(x, tfjs_1.scalar(0, dtype)), tfjs_1.ones(x.shape), tfjs_1.fill(x.shape, alpha, dtype));\n    return this.select(nans, x, stepNoNans);\n  };\n\n  NodeJSKernelBackend.prototype.conv2d = function (x, filter, convInfo) {\n    if (convInfo.padInfo.type !== 'VALID' && convInfo.padInfo.type !== 'SAME' && convInfo.padInfo.type !== 'EXPLICIT') {\n      throw new Error(\"TF Backend supports only 'valid' and 'same' padding \" + (\"while padding was \" + convInfo.padInfo.type));\n    }\n\n    var strides = [1, convInfo.strideHeight, convInfo.strideWidth, 1];\n    var padding = convInfo.padInfo.type;\n    var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NHWC' : 'NCHW';\n    var dilations = [1, convInfo.dilationHeight, convInfo.dilationWidth, 1];\n    var opAttrs = [createTensorsTypeOpAttr('T', x.dtype), {\n      name: 'strides',\n      type: this.binding.TF_ATTR_INT,\n      value: strides\n    }, {\n      name: 'padding',\n      type: this.binding.TF_ATTR_STRING,\n      value: padding\n    }, {\n      name: 'data_format',\n      type: this.binding.TF_ATTR_STRING,\n      value: dataFormat\n    }, {\n      name: 'use_cudnn_on_gpu',\n      type: this.binding.TF_ATTR_BOOL,\n      value: true\n    }, {\n      name: 'dilations',\n      type: this.binding.TF_ATTR_INT,\n      value: dilations\n    }];\n\n    if (padding === 'EXPLICIT') {\n      var padValue = [convInfo.padInfo.top, convInfo.padInfo.bottom, convInfo.padInfo.left, convInfo.padInfo.right];\n      opAttrs.push({\n        name: 'explicit_paddings',\n        type: this.binding.TF_ATTR_INT,\n        value: dataFormat === 'NHWC' ? [0, 0].concat(padValue, [0, 0]) : [0, 0, 0, 0].concat(padValue)\n      });\n    }\n\n    return this.executeSingleOutput('Conv2D', opAttrs, [x, filter]);\n  };\n\n  NodeJSKernelBackend.prototype.conv2dDerInput = function (dy, filter, convInfo) {\n    if (convInfo.padInfo.type !== 'VALID' && convInfo.padInfo.type !== 'SAME') {\n      throw new Error(\"TF Backend supports only 'valid' and 'same' padding \" + (\"while padding was \" + convInfo.padInfo.type));\n    }\n\n    var strides = [1, convInfo.strideHeight, convInfo.strideWidth, 1];\n    var padding = convInfo.padInfo.type;\n    var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NHWC' : 'NCHW';\n    var dilations = [1, convInfo.dilationHeight, convInfo.dilationWidth, 1];\n    var opAttrs = [createTensorsTypeOpAttr('T', 'float32'), {\n      name: 'strides',\n      type: this.binding.TF_ATTR_INT,\n      value: strides\n    }, {\n      name: 'padding',\n      type: this.binding.TF_ATTR_STRING,\n      value: padding\n    }, {\n      name: 'data_format',\n      type: this.binding.TF_ATTR_STRING,\n      value: dataFormat\n    }, {\n      name: 'use_cudnn_on_gpu',\n      type: this.binding.TF_ATTR_BOOL,\n      value: true\n    }, {\n      name: 'dilations',\n      type: this.binding.TF_ATTR_INT,\n      value: dilations\n    }];\n    var inputSizes = tfjs_1.tensor1d(convInfo.inShape, 'int32');\n    return this.executeSingleOutput('Conv2DBackpropInput', opAttrs, [inputSizes, filter, dy]);\n  };\n\n  NodeJSKernelBackend.prototype.conv2dDerFilter = function (x, dy, convInfo) {\n    if (convInfo.padInfo.type !== 'VALID' && convInfo.padInfo.type !== 'SAME') {\n      throw new Error(\"TF Backend supports only 'valid' and 'same' padding \" + (\"while padding was \" + convInfo.padInfo.type));\n    }\n\n    var strides = [1, convInfo.strideHeight, convInfo.strideWidth, 1];\n    var padding = convInfo.padInfo.type;\n    var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NHWC' : 'NCHW';\n    var dilations = [1, convInfo.dilationHeight, convInfo.dilationWidth, 1];\n    var opAttrs = [createTensorsTypeOpAttr('T', 'float32'), {\n      name: 'strides',\n      type: this.binding.TF_ATTR_INT,\n      value: strides\n    }, {\n      name: 'padding',\n      type: this.binding.TF_ATTR_STRING,\n      value: padding\n    }, {\n      name: 'data_format',\n      type: this.binding.TF_ATTR_STRING,\n      value: dataFormat\n    }, {\n      name: 'use_cudnn_on_gpu',\n      type: this.binding.TF_ATTR_BOOL,\n      value: true\n    }, {\n      name: 'dilations',\n      type: this.binding.TF_ATTR_INT,\n      value: dilations\n    }];\n    var filterSizes = tfjs_1.tensor1d(convInfo.filterShape, 'int32');\n    return this.executeSingleOutput('Conv2DBackpropFilter', opAttrs, [x, filterSizes, dy]);\n  };\n\n  NodeJSKernelBackend.prototype.depthwiseConv2DDerInput = function (dy, filter, convInfo) {\n    var strides = [1, convInfo.strideHeight, convInfo.strideWidth, 1];\n    var padding = convInfo.padInfo.type;\n    var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NHWC' : 'NCHW';\n    var dilations = [1, convInfo.dilationHeight, convInfo.dilationWidth, 1];\n    var opAttrs = [createTensorsTypeOpAttr('T', 'float32'), {\n      name: 'strides',\n      type: this.binding.TF_ATTR_INT,\n      value: strides\n    }, {\n      name: 'padding',\n      type: this.binding.TF_ATTR_STRING,\n      value: padding\n    }, {\n      name: 'data_format',\n      type: this.binding.TF_ATTR_STRING,\n      value: dataFormat\n    }, {\n      name: 'dilations',\n      type: this.binding.TF_ATTR_INT,\n      value: dilations\n    }];\n    var inputSizes = tfjs_1.tensor1d(convInfo.inShape, 'int32');\n    return this.executeSingleOutput('DepthwiseConv2dNativeBackpropInput', opAttrs, [inputSizes, filter, dy]);\n  };\n\n  NodeJSKernelBackend.prototype.depthwiseConv2DDerFilter = function (x, dY, convInfo) {\n    var strides = [1, convInfo.strideHeight, convInfo.strideWidth, 1];\n    var padding = convInfo.padInfo.type;\n    var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NHWC' : 'NCHW';\n    var dilations = [1, convInfo.dilationHeight, convInfo.dilationWidth, 1];\n    var opAttrs = [createTensorsTypeOpAttr('T', 'float32'), {\n      name: 'strides',\n      type: this.binding.TF_ATTR_INT,\n      value: strides\n    }, {\n      name: 'padding',\n      type: this.binding.TF_ATTR_STRING,\n      value: padding\n    }, {\n      name: 'data_format',\n      type: this.binding.TF_ATTR_STRING,\n      value: dataFormat\n    }, {\n      name: 'dilations',\n      type: this.binding.TF_ATTR_INT,\n      value: dilations\n    }];\n    var filterSizes = tfjs_1.tensor1d(convInfo.filterShape, 'int32');\n    return this.executeSingleOutput('DepthwiseConv2dNativeBackpropFilter', opAttrs, [x, filterSizes, dY]);\n  };\n\n  NodeJSKernelBackend.prototype.fusedDepthwiseConv2D = function (_a) {\n    var input = _a.input,\n        filter = _a.filter,\n        convInfo = _a.convInfo,\n        bias = _a.bias,\n        activation = _a.activation,\n        preluActivationWeights = _a.preluActivationWeights;\n    var result = this.depthwiseConv2D(input, filter, convInfo);\n\n    if (bias != null) {\n      result = tf.add(result, bias);\n    }\n\n    result = this.applyActivation(result, activation, preluActivationWeights);\n    return result;\n  };\n\n  NodeJSKernelBackend.prototype.depthwiseConv2D = function (input, filter, convInfo) {\n    if (convInfo.padInfo.type !== 'VALID' && convInfo.padInfo.type !== 'SAME') {\n      throw new Error(\"TF Backend supports only 'valid' and 'same' padding \" + (\"while padding was \" + convInfo.padInfo.type));\n    }\n\n    var strides = [1, convInfo.strideHeight, convInfo.strideWidth, 1];\n    var padding = convInfo.padInfo.type;\n    var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NHWC' : 'NCHW';\n    var dilations = [1, convInfo.dilationHeight, convInfo.dilationWidth, 1];\n    var opAttrs = [createTensorsTypeOpAttr('T', input.dtype), {\n      name: 'strides',\n      type: this.binding.TF_ATTR_INT,\n      value: strides\n    }, {\n      name: 'padding',\n      type: this.binding.TF_ATTR_STRING,\n      value: padding\n    }, {\n      name: 'data_format',\n      type: this.binding.TF_ATTR_STRING,\n      value: dataFormat\n    }, {\n      name: 'dilations',\n      type: this.binding.TF_ATTR_INT,\n      value: dilations\n    }];\n    return this.executeSingleOutput('DepthwiseConv2dNative', opAttrs, [input, filter]);\n  };\n\n  NodeJSKernelBackend.prototype.conv3d = function (x, filter, convInfo) {\n    var strides = [1, convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth, 1];\n    var padding = convInfo.padInfo.type;\n    var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NDHWC' : 'NCDHW';\n\n    if (!this.isGPUPackage && convInfo.dilationDepth > 1) {\n      throw new Error('CPU Dilation depth must be 1');\n    }\n\n    var dilations = [1, convInfo.dilationDepth, convInfo.dilationHeight, convInfo.dilationWidth, 1];\n    var opAttrs = [createTensorsTypeOpAttr('T', x.dtype), {\n      name: 'strides',\n      type: this.binding.TF_ATTR_INT,\n      value: strides\n    }, {\n      name: 'padding',\n      type: this.binding.TF_ATTR_STRING,\n      value: padding\n    }, {\n      name: 'data_format',\n      type: this.binding.TF_ATTR_STRING,\n      value: dataFormat\n    }, {\n      name: 'dilations',\n      type: this.binding.TF_ATTR_INT,\n      value: dilations\n    }];\n    return this.executeSingleOutput('Conv3D', opAttrs, [x, filter]);\n  };\n\n  NodeJSKernelBackend.prototype.conv3dDerInput = function (dy, filter, convInfo) {\n    var strides = [1, convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth, 1];\n    var padding = convInfo.padInfo.type;\n    var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NDHWC' : 'NCDHW';\n\n    if (!this.isGPUPackage && convInfo.dilationDepth > 1) {\n      throw new Error('CPU Dilation depth must be 1');\n    }\n\n    var dilations = [1, convInfo.dilationDepth, convInfo.dilationHeight, convInfo.dilationWidth, 1];\n    var opAttrs = [createTensorsTypeOpAttr('T', dy.dtype), {\n      name: 'strides',\n      type: this.binding.TF_ATTR_INT,\n      value: strides\n    }, {\n      name: 'padding',\n      type: this.binding.TF_ATTR_STRING,\n      value: padding\n    }, {\n      name: 'data_format',\n      type: this.binding.TF_ATTR_STRING,\n      value: dataFormat\n    }, {\n      name: 'dilations',\n      type: this.binding.TF_ATTR_INT,\n      value: dilations\n    }, createTensorsTypeOpAttr('Tshape', 'int32')];\n    var inputSizes = tfjs_1.tensor1d(convInfo.inShape, 'int32');\n    return this.executeSingleOutput('Conv3DBackpropInputV2', opAttrs, [inputSizes, filter, dy]);\n  };\n\n  NodeJSKernelBackend.prototype.conv3dDerFilter = function (x, dY, convInfo) {\n    var strides = [1, convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth, 1];\n    var padding = convInfo.padInfo.type;\n    var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NDHWC' : 'NCDHW';\n\n    if (!this.isGPUPackage && convInfo.dilationDepth > 1) {\n      throw new Error('CPU Dilation depth must be 1');\n    }\n\n    var dilations = [1, convInfo.dilationDepth, convInfo.dilationHeight, convInfo.dilationWidth, 1];\n    var opAttrs = [createTensorsTypeOpAttr('T', x.dtype), {\n      name: 'strides',\n      type: this.binding.TF_ATTR_INT,\n      value: strides\n    }, {\n      name: 'padding',\n      type: this.binding.TF_ATTR_STRING,\n      value: padding\n    }, {\n      name: 'data_format',\n      type: this.binding.TF_ATTR_STRING,\n      value: dataFormat\n    }, {\n      name: 'dilations',\n      type: this.binding.TF_ATTR_INT,\n      value: dilations\n    }];\n    var filterSizes = tfjs_1.tensor1d(convInfo.filterShape, 'int32');\n    return this.executeSingleOutput('Conv3DBackpropFilterV2', opAttrs, [x, filterSizes, dY]);\n  };\n\n  NodeJSKernelBackend.prototype.maxPool = function (x, convInfo) {\n    if (convInfo.padInfo.type !== 'VALID' && convInfo.padInfo.type !== 'SAME') {\n      throw new Error(\"TF Backend supports only 'valid' and 'same' padding \" + (\"while padding was \" + convInfo.padInfo.type));\n    }\n\n    var ksize = [1, convInfo.filterHeight, convInfo.filterWidth, 1];\n    var strides = [1, convInfo.strideHeight, convInfo.strideWidth, 1];\n    var padding = convInfo.padInfo.type;\n    var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NHWC' : 'NCHW';\n    var opAttrs = [createTensorsTypeOpAttr('T', x.dtype), {\n      name: 'ksize',\n      type: this.binding.TF_ATTR_INT,\n      value: ksize\n    }, {\n      name: 'strides',\n      type: this.binding.TF_ATTR_INT,\n      value: strides\n    }, {\n      name: 'padding',\n      type: this.binding.TF_ATTR_STRING,\n      value: padding\n    }, {\n      name: 'data_format',\n      type: this.binding.TF_ATTR_STRING,\n      value: dataFormat\n    }];\n    return this.executeSingleOutput('MaxPool', opAttrs, [x]);\n  };\n\n  NodeJSKernelBackend.prototype.maxPoolBackprop = function (dy, x, y, convInfo) {\n    if (convInfo.padInfo.type !== 'VALID' && convInfo.padInfo.type !== 'SAME') {\n      throw new Error(\"TF Backend supports only 'valid' and 'same' padding \" + (\"while padding type was \" + convInfo.padInfo.type));\n    }\n\n    var ksize = [1, convInfo.filterHeight, convInfo.filterWidth, 1];\n    var strides = [1, convInfo.strideHeight, convInfo.strideWidth, 1];\n    var padding = convInfo.padInfo.type;\n    var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NHWC' : 'NCHW';\n    var opAttrs = [createTensorsTypeOpAttr('T', x.dtype), {\n      name: 'ksize',\n      type: this.binding.TF_ATTR_INT,\n      value: ksize\n    }, {\n      name: 'strides',\n      type: this.binding.TF_ATTR_INT,\n      value: strides\n    }, {\n      name: 'padding',\n      type: this.binding.TF_ATTR_STRING,\n      value: padding\n    }, {\n      name: 'data_format',\n      type: this.binding.TF_ATTR_STRING,\n      value: dataFormat\n    }];\n    return this.executeSingleOutput('MaxPoolGrad', opAttrs, [x, y, dy]);\n  };\n\n  NodeJSKernelBackend.prototype.avgPool = function (x, convInfo) {\n    if (convInfo.padInfo.type !== 'VALID' && convInfo.padInfo.type !== 'SAME') {\n      throw new Error(\"TF Backend supports only 'valid' and 'same' padding \" + (\"while padding was \" + convInfo.padInfo.type));\n    }\n\n    var ksize = [1, convInfo.filterHeight, convInfo.filterWidth, 1];\n    var strides = [1, convInfo.strideHeight, convInfo.strideWidth, 1];\n    var padding = convInfo.padInfo.type;\n    var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NHWC' : 'NCHW';\n    var opAttrs = [createTensorsTypeOpAttr('T', x.dtype), {\n      name: 'ksize',\n      type: this.binding.TF_ATTR_INT,\n      value: ksize\n    }, {\n      name: 'strides',\n      type: this.binding.TF_ATTR_INT,\n      value: strides\n    }, {\n      name: 'padding',\n      type: this.binding.TF_ATTR_STRING,\n      value: padding\n    }, {\n      name: 'data_format',\n      type: this.binding.TF_ATTR_STRING,\n      value: dataFormat\n    }];\n    return this.executeSingleOutput('AvgPool', opAttrs, [x]);\n  };\n\n  NodeJSKernelBackend.prototype.avgPoolBackprop = function (dy, x, convInfo) {\n    if (convInfo.padInfo.type !== 'VALID' && convInfo.padInfo.type !== 'SAME') {\n      throw new Error(\"TF Backend supports only 'valid' and 'same' padding \" + (\"while padding type was \" + convInfo.padInfo.type));\n    }\n\n    var ksize = [1, convInfo.filterHeight, convInfo.filterWidth, 1];\n    var strides = [1, convInfo.strideHeight, convInfo.strideWidth, 1];\n    var padding = convInfo.padInfo.type;\n    var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NHWC' : 'NCHW';\n    var opAttrs = [createTensorsTypeOpAttr('T', x.dtype), {\n      name: 'ksize',\n      type: this.binding.TF_ATTR_INT,\n      value: ksize\n    }, {\n      name: 'strides',\n      type: this.binding.TF_ATTR_INT,\n      value: strides\n    }, {\n      name: 'padding',\n      type: this.binding.TF_ATTR_STRING,\n      value: padding\n    }, {\n      name: 'data_format',\n      type: this.binding.TF_ATTR_STRING,\n      value: dataFormat\n    }];\n    var origInputShape = tfjs_1.tensor1d(x.shape, 'int32');\n    return this.executeSingleOutput('AvgPoolGrad', opAttrs, [origInputShape, dy]);\n  };\n\n  NodeJSKernelBackend.prototype.avgPool3d = function (x, convInfo) {\n    if (convInfo.padInfo.type !== 'VALID' && convInfo.padInfo.type !== 'SAME') {\n      throw new Error(\"TF Backend supports only 'valid' and 'same' padding \" + (\"while padding was \" + convInfo.padInfo.type));\n    }\n\n    var ksize = [1, convInfo.filterDepth, convInfo.filterHeight, convInfo.filterWidth, 1];\n    var strides = [1, convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth, 1];\n    var padding = convInfo.padInfo.type;\n    var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NDHWC' : 'NCDHW';\n    var opAttrs = [createTensorsTypeOpAttr('T', x.dtype), {\n      name: 'ksize',\n      type: this.binding.TF_ATTR_INT,\n      value: ksize\n    }, {\n      name: 'strides',\n      type: this.binding.TF_ATTR_INT,\n      value: strides\n    }, {\n      name: 'padding',\n      type: this.binding.TF_ATTR_STRING,\n      value: padding\n    }, {\n      name: 'data_format',\n      type: this.binding.TF_ATTR_STRING,\n      value: dataFormat\n    }];\n    return this.executeSingleOutput('AvgPool3D', opAttrs, [x]);\n  };\n\n  NodeJSKernelBackend.prototype.avgPool3dBackprop = function (dy, x, convInfo) {\n    if (convInfo.padInfo.type !== 'VALID' && convInfo.padInfo.type !== 'SAME') {\n      throw new Error(\"TF Backend supports only 'valid' and 'same' padding \" + (\"while padding type was \" + convInfo.padInfo.type));\n    }\n\n    var ksize = [1, convInfo.filterDepth, convInfo.filterHeight, convInfo.filterWidth, 1];\n    var strides = [1, convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth, 1];\n    var padding = convInfo.padInfo.type;\n    var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NDHWC' : 'NCDHW';\n    var opAttrs = [createTensorsTypeOpAttr('T', x.dtype), {\n      name: 'ksize',\n      type: this.binding.TF_ATTR_INT,\n      value: ksize\n    }, {\n      name: 'strides',\n      type: this.binding.TF_ATTR_INT,\n      value: strides\n    }, {\n      name: 'padding',\n      type: this.binding.TF_ATTR_STRING,\n      value: padding\n    }, {\n      name: 'data_format',\n      type: this.binding.TF_ATTR_STRING,\n      value: dataFormat\n    }];\n    var origInputShape = tfjs_1.tensor1d(x.shape, 'int32');\n    return this.executeSingleOutput('AvgPool3DGrad', opAttrs, [origInputShape, dy]);\n  };\n\n  NodeJSKernelBackend.prototype.maxPool3d = function (x, convInfo) {\n    if (convInfo.padInfo.type !== 'VALID' && convInfo.padInfo.type !== 'SAME') {\n      throw new Error(\"TF Backend supports only 'valid' and 'same' padding \" + (\"while padding was \" + convInfo.padInfo.type));\n    }\n\n    var ksize = [1, convInfo.filterDepth, convInfo.filterHeight, convInfo.filterWidth, 1];\n    var strides = [1, convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth, 1];\n    var padding = convInfo.padInfo.type;\n    var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NDHWC' : 'NCDHW';\n    var opAttrs = [createTensorsTypeOpAttr('T', x.dtype), {\n      name: 'ksize',\n      type: this.binding.TF_ATTR_INT,\n      value: ksize\n    }, {\n      name: 'strides',\n      type: this.binding.TF_ATTR_INT,\n      value: strides\n    }, {\n      name: 'padding',\n      type: this.binding.TF_ATTR_STRING,\n      value: padding\n    }, {\n      name: 'data_format',\n      type: this.binding.TF_ATTR_STRING,\n      value: dataFormat\n    }];\n    return this.executeSingleOutput('MaxPool3D', opAttrs, [x]);\n  };\n\n  NodeJSKernelBackend.prototype.maxPool3dBackprop = function (dy, x, y, convInfo) {\n    if (convInfo.padInfo.type !== 'VALID' && convInfo.padInfo.type !== 'SAME') {\n      throw new Error(\"TF Backend supports only 'valid' and 'same' padding \" + (\"while padding type was \" + convInfo.padInfo.type));\n    }\n\n    var ksize = [1, convInfo.filterDepth, convInfo.filterHeight, convInfo.filterWidth, 1];\n    var strides = [1, convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth, 1];\n    var padding = convInfo.padInfo.type;\n    var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NDHWC' : 'NCDHW';\n    var opAttrs = [createTensorsTypeOpAttr('T', x.dtype), {\n      name: 'ksize',\n      type: this.binding.TF_ATTR_INT,\n      value: ksize\n    }, {\n      name: 'strides',\n      type: this.binding.TF_ATTR_INT,\n      value: strides\n    }, {\n      name: 'padding',\n      type: this.binding.TF_ATTR_STRING,\n      value: padding\n    }, {\n      name: 'data_format',\n      type: this.binding.TF_ATTR_STRING,\n      value: dataFormat\n    }];\n    return this.executeSingleOutput('MaxPool3DGrad', opAttrs, [x, y, dy]);\n  };\n\n  NodeJSKernelBackend.prototype.reshape = function (x, shape) {\n    var shapeTensor = tfjs_1.tensor1d(shape, 'int32');\n    var opAttrs = [createTensorsTypeOpAttr('T', x.dtype), createTensorsTypeOpAttr('Tshape', shapeTensor.dtype)];\n    return this.executeSingleOutput('Reshape', opAttrs, [x, shapeTensor]);\n  };\n\n  NodeJSKernelBackend.prototype.cast = function (x, dtype) {\n    var opAttrs = [createTensorsTypeOpAttr('SrcT', x.dtype), createTensorsTypeOpAttr('DstT', dtype), {\n      name: 'Truncate',\n      type: this.binding.TF_ATTR_BOOL,\n      value: false\n    }];\n    return this.executeSingleOutput('Cast', opAttrs, [x]);\n  };\n\n  NodeJSKernelBackend.prototype.tile = function (x, reps) {\n    var opAttrs = [createTensorsTypeOpAttr('T', x.dtype), createTensorsTypeOpAttr('Tmultiples', 'int32')];\n    var multiples = tfjs_1.tensor1d(reps, 'int32');\n    return this.executeSingleOutput('Tile', opAttrs, [x, multiples]);\n  };\n\n  NodeJSKernelBackend.prototype.pad = function (x, paddings, constantValue) {\n    // Bind tensor values\n    var paddingsTensor = tfjs_1.tensor2d(paddings, [paddings.length, 2], 'int32');\n    var constantTensor = tfjs_1.scalar(constantValue, x.dtype);\n    var opAttrs = [createTensorsTypeOpAttr('T', x.dtype), createTensorsTypeOpAttr('Tpaddings', paddingsTensor.dtype)];\n    return this.executeSingleOutput('PadV2', opAttrs, [x, paddingsTensor, constantTensor]);\n  };\n\n  NodeJSKernelBackend.prototype.transpose = function (x, perm) {\n    var permTensor = tfjs_1.tensor1d(perm, 'int32');\n    var opAttrs = [createTensorsTypeOpAttr('T', x.dtype), createTensorsTypeOpAttr('Tperm', 'int32')];\n    return this.executeSingleOutput('Transpose', opAttrs, [x, permTensor]);\n  };\n\n  NodeJSKernelBackend.prototype.gather = function (x, indices, axis) {\n    var axisTensor = tfjs_1.scalar(axis, 'int32');\n    var opAttrs = [createTensorsTypeOpAttr('Tparams', x.dtype), createTensorsTypeOpAttr('Tindices', indices.dtype), createTensorsTypeOpAttr('Taxis', 'int32')];\n    return this.executeSingleOutput('GatherV2', opAttrs, [x, indices, axisTensor]);\n  };\n\n  NodeJSKernelBackend.prototype.gatherND = function (x, indices) {\n    var opAttrs = [createTensorsTypeOpAttr('Tparams', x.dtype), createTensorsTypeOpAttr('Tindices', 'int32')];\n    return this.executeSingleOutput('GatherNd', opAttrs, [x, indices]);\n  };\n\n  NodeJSKernelBackend.prototype.scatterND = function (indices, updates, shape) {\n    var opAttrs = [createTensorsTypeOpAttr('T', updates.dtype), createTensorsTypeOpAttr('Tindices', 'int32')];\n    var shapeTensor = tfjs_1.tensor1d(shape, 'int32');\n    return this.executeSingleOutput('ScatterNd', opAttrs, [indices, updates, shapeTensor]);\n  };\n\n  NodeJSKernelBackend.prototype.batchToSpaceND = function (x, blockShape, crops) {\n    var blockShapeTensor = tfjs_1.tensor1d(blockShape, 'int32');\n    var cropsTensor = tfjs_1.tensor2d(crops, [crops.length, crops[0].length], 'int32');\n    var opAttrs = [createTensorsTypeOpAttr('T', x.dtype), createTensorsTypeOpAttr('Tblock_shape', 'int32'), createTensorsTypeOpAttr('Tcrops', cropsTensor.dtype)];\n    return this.executeSingleOutput('BatchToSpaceND', opAttrs, [x, blockShapeTensor, cropsTensor]);\n  };\n\n  NodeJSKernelBackend.prototype.spaceToBatchND = function (x, blockShape, paddings) {\n    var blockShapeTensor = tfjs_1.tensor1d(blockShape, 'int32');\n    var paddingsTensor = tfjs_1.tensor2d(paddings, [paddings.length, paddings[0].length], 'int32');\n    var opAttrs = [createTensorsTypeOpAttr('T', x.dtype), createTensorsTypeOpAttr('Tblock_shape', 'int32'), createTensorsTypeOpAttr('Tpaddings', paddingsTensor.dtype)];\n    return this.executeSingleOutput('SpaceToBatchND', opAttrs, [x, blockShapeTensor, paddingsTensor]);\n  };\n\n  NodeJSKernelBackend.prototype.resizeBilinear = function (x, newHeight, newWidth, alignCorners) {\n    var opAttrs = [createTensorsTypeOpAttr('T', x.dtype), {\n      name: 'align_corners',\n      type: this.binding.TF_ATTR_BOOL,\n      value: alignCorners\n    }];\n    var size = tfjs_1.tensor1d([newHeight, newWidth], 'int32');\n    return this.executeSingleOutput('ResizeBilinear', opAttrs, [x, size]);\n  };\n\n  NodeJSKernelBackend.prototype.resizeBilinearBackprop = function (dy, x, alignCorners) {\n    var opAttrs = [createTensorsTypeOpAttr('T', x.dtype), {\n      name: 'align_corners',\n      type: this.binding.TF_ATTR_BOOL,\n      value: alignCorners\n    }];\n    return this.executeSingleOutput('ResizeBilinearGrad', opAttrs, [dy, x]);\n  };\n\n  NodeJSKernelBackend.prototype.resizeNearestNeighbor = function (x, newHeight, newWidth, alignCorners) {\n    var opAttrs = [createTensorsTypeOpAttr('T', x.dtype), {\n      name: 'align_corners',\n      type: this.binding.TF_ATTR_BOOL,\n      value: alignCorners\n    }];\n    var size = tfjs_1.tensor1d([newHeight, newWidth], 'int32');\n    return this.executeSingleOutput('ResizeNearestNeighbor', opAttrs, [x, size]);\n  };\n\n  NodeJSKernelBackend.prototype.resizeNearestNeighborBackprop = function (dy, x, alignCorners) {\n    var opAttrs = [createTensorsTypeOpAttr('T', x.dtype), {\n      name: 'align_corners',\n      type: this.binding.TF_ATTR_BOOL,\n      value: alignCorners\n    }];\n    var _a = x.shape,\n        origHeight = _a[1],\n        origWidth = _a[2];\n    var size = tfjs_1.tensor1d([origHeight, origWidth], 'int32');\n    return this.executeSingleOutput('ResizeNearestNeighborGrad', opAttrs, [dy, size]);\n  };\n\n  NodeJSKernelBackend.prototype.batchNorm = function (x, mean, variance, offset, scale, varianceEpsilon) {\n    if (mean.rank > 1) {\n      // Fused batch norm doesn't work with high-dim mean/var/scale/offset.\n      var inv = tfjs_1.rsqrt(variance.add(tfjs_1.scalar(varianceEpsilon)));\n\n      if (scale != null) {\n        inv = inv.mul(scale);\n      }\n\n      var xNorm = x.sub(mean).mul(inv);\n      return offset != null ? xNorm.add(offset) : xNorm;\n    }\n\n    var dataFormat = 'NHWC';\n    var depth = x.shape[3];\n    var opAttrs = [createTensorsTypeOpAttr('T', x.dtype), {\n      name: 'epsilon',\n      type: this.binding.TF_ATTR_FLOAT,\n      value: varianceEpsilon\n    }, {\n      name: 'data_format',\n      type: this.binding.TF_ATTR_STRING,\n      value: dataFormat\n    }, {\n      name: 'is_training',\n      type: this.binding.TF_ATTR_BOOL,\n      value: false\n    }];\n    var numOutputs = 5;\n\n    if (scale == null) {\n      scale = tfjs_1.fill([depth], 1);\n    }\n\n    if (offset == null) {\n      offset = tfjs_1.fill([depth], 0);\n    }\n\n    return this.executeMultipleOutputs('FusedBatchNorm', opAttrs, [x, scale, offset, mean, variance], numOutputs)[0];\n  };\n\n  NodeJSKernelBackend.prototype.localResponseNormalization4D = function (x, radius, bias, alpha, beta) {\n    var opAttrs = [createTensorsTypeOpAttr('T', x.dtype), {\n      name: 'depth_radius',\n      type: this.binding.TF_ATTR_INT,\n      value: radius\n    }, {\n      name: 'bias',\n      type: this.binding.TF_ATTR_FLOAT,\n      value: bias\n    }, {\n      name: 'alpha',\n      type: this.binding.TF_ATTR_FLOAT,\n      value: alpha\n    }, {\n      name: 'beta',\n      type: this.binding.TF_ATTR_FLOAT,\n      value: beta\n    }];\n    return this.executeSingleOutput('LRN', opAttrs, [x]);\n  };\n\n  NodeJSKernelBackend.prototype.LRNGrad = function (dy, inputImage, outputImage, radius, bias, alpha, beta) {\n    var opAttrs = [createTensorsTypeOpAttr('T', dy.dtype), {\n      name: 'depth_radius',\n      type: this.binding.TF_ATTR_INT,\n      value: radius\n    }, {\n      name: 'bias',\n      type: this.binding.TF_ATTR_FLOAT,\n      value: bias\n    }, {\n      name: 'alpha',\n      type: this.binding.TF_ATTR_FLOAT,\n      value: alpha\n    }, {\n      name: 'beta',\n      type: this.binding.TF_ATTR_FLOAT,\n      value: beta\n    }];\n    return this.executeSingleOutput('LRNGrad', opAttrs, [dy, inputImage, outputImage]);\n  };\n\n  NodeJSKernelBackend.prototype.multinomial = function (logits, normalized, numSamples, seed) {\n    if (normalized) {\n      throw new Error('TF Node backend does not support normalized logits ' + 'passed to multinomial');\n    }\n\n    var opAttrs = [createTensorsTypeOpAttr('T', logits.dtype), createTensorsTypeOpAttr('output_dtype', 'int32'), {\n      name: 'seed',\n      type: this.binding.TF_ATTR_INT,\n      value: seed\n    }, {\n      name: 'seed2',\n      type: this.binding.TF_ATTR_INT,\n      value: seed * seed\n    }];\n    return this.executeSingleOutput('Multinomial', opAttrs, [logits, tfjs_1.scalar(numSamples, 'int32')]);\n  };\n\n  NodeJSKernelBackend.prototype.oneHot = function (indices, depth, onValue, offValue) {\n    var depthTensor = tfjs_1.scalar(depth, 'int32');\n    var onValueTensor = tfjs_1.scalar(onValue, 'int32');\n    var offValueTensor = tfjs_1.scalar(offValue, 'int32');\n    var opAttrs = [{\n      name: 'axis',\n      type: this.binding.TF_ATTR_INT,\n      value: -1\n    }, createTensorsTypeOpAttr('T', indices.dtype), createTensorsTypeOpAttr('TI', indices.dtype)];\n    return this.executeSingleOutput('OneHot', opAttrs, [indices, depthTensor, onValueTensor, offValueTensor]);\n  };\n\n  NodeJSKernelBackend.prototype.cumsum = function (x, axis, exclusive, reverse) {\n    var axisTensor = tfjs_1.scalar(axis, 'int32');\n    var opAttrs = [{\n      name: 'exclusive',\n      type: this.binding.TF_ATTR_BOOL,\n      value: exclusive\n    }, {\n      name: 'reverse',\n      type: this.binding.TF_ATTR_BOOL,\n      value: reverse\n    }, createTensorsTypeOpAttr('T', x.dtype), createTensorsTypeOpAttr('Tidx', 'int32')];\n    return this.executeSingleOutput('Cumsum', opAttrs, [x, axisTensor]);\n  };\n\n  NodeJSKernelBackend.prototype.nonMaxSuppression = function (boxes, scores, maxOutputSize, iouThreshold, scoreThreshold) {\n    var opAttrs = [createTensorsTypeOpAttr('T', boxes.dtype)];\n    var maxOutputSizeTensor = tfjs_1.scalar(maxOutputSize, 'int32');\n    var iouThresholdTensor = tfjs_1.scalar(iouThreshold);\n    var scoreThresholdTensor = tfjs_1.scalar(scoreThreshold);\n    return this.executeSingleOutput('NonMaxSuppressionV3', opAttrs, [boxes, scores, maxOutputSizeTensor, iouThresholdTensor, scoreThresholdTensor]);\n  };\n\n  NodeJSKernelBackend.prototype.fft = function (x) {\n    var opAttrs = [createTensorsTypeOpAttr('Tcomplex', x.dtype)];\n    return this.executeSingleOutput('FFT', opAttrs, [x]);\n  };\n\n  NodeJSKernelBackend.prototype.ifft = function (x) {\n    var opAttrs = [createTensorsTypeOpAttr('Tcomplex', x.dtype)];\n    return this.executeSingleOutput('IFFT', opAttrs, [x]);\n  };\n\n  NodeJSKernelBackend.prototype.complex = function (real, imag) {\n    var opAttrs = [createTensorsTypeOpAttr('T', real), {\n      name: 'Tout',\n      type: this.binding.TF_ATTR_TYPE,\n      value: this.binding.TF_COMPLEX64\n    }];\n    var inputs = [real, imag];\n    return this.executeSingleOutput('Complex', opAttrs, inputs);\n  };\n\n  NodeJSKernelBackend.prototype.real = function (input) {\n    var opAttrs = [createTensorsTypeOpAttr('T', input), {\n      name: 'Tout',\n      type: this.binding.TF_ATTR_TYPE,\n      value: this.binding.TF_FLOAT\n    }];\n    var inputs = [input];\n    return this.executeSingleOutput('Real', opAttrs, inputs);\n  };\n\n  NodeJSKernelBackend.prototype.imag = function (input) {\n    var opAttrs = [{\n      name: 'T',\n      type: this.binding.TF_ATTR_TYPE,\n      value: this.binding.TF_COMPLEX64\n    }, {\n      name: 'Tout',\n      type: this.binding.TF_ATTR_TYPE,\n      value: this.binding.TF_FLOAT\n    }];\n    var inputs = [input];\n    return this.executeSingleOutput('Imag', opAttrs, inputs);\n  };\n\n  NodeJSKernelBackend.prototype.cropAndResize = function (image, boxes, boxIndex, cropSize, method, extrapolationValue) {\n    var opAttrs = [createTensorsTypeOpAttr('T', image.dtype), {\n      name: 'method',\n      type: this.binding.TF_ATTR_STRING,\n      value: method\n    }, {\n      name: 'extrapolation_value',\n      type: this.binding.TF_ATTR_FLOAT,\n      value: extrapolationValue\n    }];\n    var cropSizeTensor = tfjs_1.tensor1d(cropSize, 'int32');\n    return this.executeSingleOutput('CropAndResize', opAttrs, [image, boxes, boxIndex, cropSizeTensor]);\n  };\n\n  NodeJSKernelBackend.prototype.depthToSpace = function (x, blockSize, dataFormat) {\n    var opAttrs = [createTensorsTypeOpAttr('T', x), {\n      name: 'block_size',\n      type: this.binding.TF_ATTR_INT,\n      value: blockSize < 2 ? 2 : blockSize\n    }, {\n      name: 'data_format',\n      type: this.binding.TF_ATTR_STRING,\n      value: dataFormat\n    }];\n    var inputs = [x];\n    return this.executeSingleOutput('DepthToSpace', opAttrs, inputs);\n  };\n\n  NodeJSKernelBackend.prototype.split = function (value, sizeSplits, axis) {\n    var opAttrs = [{\n      name: 'num_split',\n      type: this.binding.TF_ATTR_INT,\n      value: sizeSplits.length\n    }, createTensorsTypeOpAttr('T', value), {\n      name: 'Tlen',\n      type: this.binding.TF_ATTR_TYPE,\n      value: this.binding.TF_INT32\n    }];\n    var inputs = [value];\n    inputs.push(tfjs_1.tensor1d(sizeSplits, 'int32'));\n    inputs.push(tfjs_1.scalar(axis, 'int32'));\n    return this.executeMultipleOutputs('SplitV', opAttrs, inputs, sizeSplits.length);\n  };\n\n  NodeJSKernelBackend.prototype.sparseToDense = function (sparseIndices, sparseValues, outputShape, defaultValue) {\n    var opAttrs = [{\n      name: 'validate_indices',\n      type: this.binding.TF_ATTR_BOOL,\n      value: true\n    }, createTensorsTypeOpAttr('T', sparseValues.dtype), createTensorsTypeOpAttr('Tindices', sparseIndices.dtype)];\n    var outputShapeTensor = tfjs_1.tensor1d(outputShape, 'int32');\n    return this.executeSingleOutput('SparseToDense', opAttrs, [sparseIndices, outputShapeTensor, sparseValues, defaultValue]);\n  };\n\n  NodeJSKernelBackend.prototype.linspace = function (start, stop, num) {\n    var opAttrs = [createTensorsTypeOpAttr('T', 'float32'), createTensorsTypeOpAttr('Tidx', 'int32')];\n    var inputs = [tfjs_1.scalar(start, 'float32'), tfjs_1.scalar(stop, 'float32'), tfjs_1.scalar(num, 'int32')];\n    return this.executeSingleOutput('LinSpace', opAttrs, inputs);\n  };\n\n  NodeJSKernelBackend.prototype.decodeJpeg = function (contents, channels, ratio, fancyUpscaling, tryRecoverTruncated, acceptableFraction, dctMethod) {\n    var opAttrs = [{\n      name: 'channels',\n      type: this.binding.TF_ATTR_INT,\n      value: channels\n    }, {\n      name: 'ratio',\n      type: this.binding.TF_ATTR_INT,\n      value: ratio\n    }, {\n      name: 'fancy_upscaling',\n      type: this.binding.TF_ATTR_BOOL,\n      value: fancyUpscaling\n    }, {\n      name: 'try_recover_truncated',\n      type: this.binding.TF_ATTR_BOOL,\n      value: tryRecoverTruncated\n    }, {\n      name: 'acceptable_fraction',\n      type: this.binding.TF_ATTR_FLOAT,\n      value: acceptableFraction\n    }, {\n      name: 'dct_method',\n      type: this.binding.TF_ATTR_STRING,\n      value: dctMethod\n    }];\n    var inputArgs = [tfjs_1.scalar(contents, 'string')];\n    return this.executeSingleOutput('DecodeJpeg', opAttrs, inputArgs);\n  };\n\n  NodeJSKernelBackend.prototype.decodePng = function (contents, channels) {\n    var opAttrs = [{\n      name: 'channels',\n      type: this.binding.TF_ATTR_INT,\n      value: channels\n    }];\n    var inputArgs = [tfjs_1.scalar(contents, 'string')];\n    return this.executeSingleOutput('DecodePng', opAttrs, inputArgs);\n  };\n\n  NodeJSKernelBackend.prototype.decodeBmp = function (contents, channels) {\n    var opAttrs = [{\n      name: 'channels',\n      type: this.binding.TF_ATTR_INT,\n      value: channels\n    }];\n    var inputArgs = [tfjs_1.scalar(contents, 'string')];\n    return this.executeSingleOutput('DecodeBmp', opAttrs, inputArgs);\n  };\n\n  NodeJSKernelBackend.prototype.decodeGif = function (contents) {\n    var inputArgs = [tfjs_1.scalar(contents, 'string')];\n    return this.executeSingleOutput('DecodeGif', [], inputArgs);\n  };\n\n  NodeJSKernelBackend.prototype.executeEncodeImageOp = function (name, opAttrs, imageData, imageShape) {\n    var inputTensorId = this.binding.createTensor(imageShape, this.binding.TF_UINT8, imageData);\n    var outputMetadata = this.binding.executeOp(name, opAttrs, [inputTensorId], 1);\n    var outputTensorInfo = outputMetadata[0]; // prevent the tensor data from being converted to a UTF8 string, since\n    // the encoded data is not valid UTF8\n\n    outputTensorInfo.dtype = this.binding.TF_UINT8;\n    return this.createOutputTensor(outputTensorInfo);\n  };\n\n  NodeJSKernelBackend.prototype.encodeJpeg = function (imageData, imageShape, format, quality, progressive, optimizeSize, chromaDownsampling, densityUnit, xDensity, yDensity, xmpMetadata) {\n    var opAttrs = [{\n      name: 'format',\n      type: this.binding.TF_ATTR_STRING,\n      value: format\n    }, {\n      name: 'quality',\n      type: this.binding.TF_ATTR_INT,\n      value: quality\n    }, {\n      name: 'progressive',\n      type: this.binding.TF_ATTR_BOOL,\n      value: progressive\n    }, {\n      name: 'optimize_size',\n      type: this.binding.TF_ATTR_BOOL,\n      value: optimizeSize\n    }, {\n      name: 'chroma_downsampling',\n      type: this.binding.TF_ATTR_BOOL,\n      value: chromaDownsampling\n    }, {\n      name: 'density_unit',\n      type: this.binding.TF_ATTR_STRING,\n      value: densityUnit\n    }, {\n      name: 'x_density',\n      type: this.binding.TF_ATTR_INT,\n      value: xDensity\n    }, {\n      name: 'y_density',\n      type: this.binding.TF_ATTR_INT,\n      value: yDensity\n    }, {\n      name: 'xmp_metadata',\n      type: this.binding.TF_ATTR_STRING,\n      value: xmpMetadata\n    }];\n    return this.executeEncodeImageOp('EncodeJpeg', opAttrs, imageData, imageShape);\n  };\n\n  NodeJSKernelBackend.prototype.encodePng = function (imageData, imageShape, compression) {\n    var opAttrs = [{\n      name: 'compression',\n      type: this.binding.TF_ATTR_INT,\n      value: compression\n    }];\n    return this.executeEncodeImageOp('EncodePng', opAttrs, imageData, imageShape);\n  };\n\n  NodeJSKernelBackend.prototype.deleteSavedModel = function (id) {\n    this.binding.deleteSavedModel(id);\n  };\n\n  NodeJSKernelBackend.prototype.loadSavedModelMetaGraph = function (path, tags) {\n    return this.binding.loadSavedModel(path, tags);\n  };\n\n  NodeJSKernelBackend.prototype.getMappedInputTensorIds = function (inputs, inputTensorInfos) {\n    var tensorIds = this.getInputTensorIds(inputs);\n\n    for (var i = 0; i < inputs.length; i++) {\n      if (inputTensorInfos[i] != null) {\n        if (inputTensorInfos[i].tfDtype === 'DT_UINT8') {\n          var data = Uint8Array.from(inputs[i].dataSync());\n          var inputTensorId = this.binding.createTensor(inputs[i].shape, this.binding.TF_UINT8, data);\n          tensorIds[i] = inputTensorId;\n        } else if (inputTensorInfos[i].tfDtype === 'DT_INT64') {\n          var data = int64_tensors_1.encodeInt32ArrayAsInt64(inputs[i].dataSync());\n          var inputTensorId = this.binding.createTensor(inputs[i].shape, this.binding.TF_INT64, data);\n          tensorIds[i] = inputTensorId;\n        }\n      }\n    }\n\n    return tensorIds;\n  };\n\n  NodeJSKernelBackend.prototype.runSavedModel = function (id, inputs, inputTensorInfos, outputOpNames) {\n    var _this = this;\n\n    var outputMetadata = this.binding.runSavedModel(id, this.getMappedInputTensorIds(inputs, inputTensorInfos), inputTensorInfos.map(function (info) {\n      return info.name;\n    }).join(','), outputOpNames.join(','));\n    return outputMetadata.map(function (m) {\n      return _this.createOutputTensor(m);\n    });\n  }; // ------------------------------------------------------------\n  // TensorBoard-related (tfjs-node-specific) backend kernels.\n\n\n  NodeJSKernelBackend.prototype.summaryWriter = function (logdir) {\n    var opAttrs = [{\n      name: 'shared_name',\n      type: this.binding.TF_ATTR_STRING,\n      value: \"logdir:\" + logdir\n    }, {\n      name: 'container',\n      type: this.binding.TF_ATTR_STRING,\n      value: ''\n    }];\n    var writerResource = this.executeSingleOutput('SummaryWriter', opAttrs, []);\n    return writerResource;\n  };\n\n  NodeJSKernelBackend.prototype.createSummaryFileWriter = function (resourceHandle, logdir, maxQueue, flushMillis, filenameSuffix) {\n    var inputArgs = [resourceHandle, tfjs_1.scalar(logdir), tfjs_1.scalar(maxQueue == null ? 10 : maxQueue, 'int32'), tfjs_1.scalar(flushMillis == null ? 2 * 60 * 1000 : flushMillis, 'int32'), tfjs_1.scalar(filenameSuffix == null ? '.v2' : filenameSuffix)];\n    this.executeMultipleOutputs('CreateSummaryFileWriter', [], inputArgs, 0);\n  };\n\n  NodeJSKernelBackend.prototype.writeScalarSummary = function (resourceHandle, step, name, value) {\n    var _this = this;\n\n    tfjs_1.tidy(function () {\n      tfjs_1.util.assert(Number.isInteger(step), function () {\n        return \"step is expected to be an integer, but is instead \" + step;\n      });\n      var inputArgs = [resourceHandle, new int64_tensors_1.Int64Scalar(step), tfjs_1.scalar(name, 'string')];\n      var typeAttr;\n\n      if (typeof value === 'number') {\n        inputArgs.push(tfjs_1.scalar(value));\n        typeAttr = _this.binding.TF_FLOAT;\n      } else {\n        // `value` is a Scalar.\n        tfjs_1.util.assert(value.rank === 0, function () {\n          return \"A non-scalar tensor (rank \" + value.rank + \") is passed to \" + \"writeScalarSummary()\";\n        });\n        inputArgs.push(value);\n        typeAttr = _this.typeAttributeFromTensor(value);\n      }\n\n      var opAttrs = [{\n        name: 'T',\n        type: _this.binding.TF_ATTR_TYPE,\n        value: typeAttr\n      }];\n\n      _this.binding.executeOp('WriteScalarSummary', opAttrs, _this.getInputTensorIds(inputArgs), 0);\n    });\n  };\n\n  NodeJSKernelBackend.prototype.flushSummaryWriter = function (resourceHandle) {\n    var inputArgs = [resourceHandle];\n    this.executeMultipleOutputs('FlushSummaryWriter', [], inputArgs, 0);\n  }; // ~ TensorBoard-related (tfjs-node-specific) backend kernels.\n  // ------------------------------------------------------------\n\n\n  NodeJSKernelBackend.prototype.memory = function () {\n    // Due to automatic garbage collection, the numbers are unreliable.\n    // TODO(kreeger): Since there is finalization in C, count the true\n    // number of undisposed tensors.\n    return {\n      unreliable: true\n    };\n  };\n\n  NodeJSKernelBackend.prototype.time = function (f) {\n    return __awaiter(this, void 0, void 0, function () {\n      var start, elapsed;\n      return __generator(this, function (_a) {\n        start = process.hrtime();\n        f();\n        elapsed = process.hrtime(start);\n        return [2\n        /*return*/\n        , {\n          kernelMs: elapsed[0] * 1000 + elapsed[1] / 1000000\n        }];\n      });\n    });\n  };\n\n  NodeJSKernelBackend.prototype.getNumOfSavedModels = function () {\n    return this.binding.getNumOfSavedModels();\n  };\n\n  return NodeJSKernelBackend;\n}(tfjs_1.KernelBackend);\n\nexports.NodeJSKernelBackend = NodeJSKernelBackend;\n/** Returns an instance of the Node.js backend. */\n\nfunction nodeBackend() {\n  return tf.findBackend('tensorflow');\n}\n\nexports.nodeBackend = nodeBackend;\n/** Returns the TF dtype for a given DataType. */\n\nfunction getTFDType(dataType) {\n  var binding = nodeBackend().binding;\n\n  switch (dataType) {\n    case 'float32':\n      return binding.TF_FLOAT;\n\n    case 'int32':\n      return binding.TF_INT32;\n\n    case 'bool':\n      return binding.TF_BOOL;\n\n    case 'complex64':\n      return binding.TF_COMPLEX64;\n\n    case 'string':\n      return binding.TF_STRING;\n    // tslint:disable-next-line:no-any\n\n    case 'int64':\n      // int64 is not a generally supported dtype in TensorFlow.js\n      // (tfjs-core). However, it needs to be included here for the purpose of\n      // writing the `step` value to TensorBoard via WriteScalarSummary and\n      // other op kernels.\n      return binding.TF_INT64;\n\n    default:\n      var errorMessage = \"Unknown dtype: \" + dataType;\n      throw new Error(errorMessage);\n  }\n}\n\nexports.getTFDType = getTFDType;\n/**\n * Creates a TFEOpAttr for a 'type' OpDef attribute from a Tensor or list of\n * Tensors.\n */\n\nfunction createTensorsTypeOpAttr(attrName, tensorsOrDtype) {\n  if (util_1.isNullOrUndefined(tensorsOrDtype)) {\n    throw new Error('Invalid input tensors value.');\n  }\n\n  return {\n    name: attrName,\n    type: nodeBackend().binding.TF_ATTR_TYPE,\n    value: tensorsOrDtype instanceof tf.Tensor || Array.isArray(tensorsOrDtype) ? getTFDTypeForInputs(tensorsOrDtype) : getTFDType(tensorsOrDtype)\n  };\n}\n\nexports.createTensorsTypeOpAttr = createTensorsTypeOpAttr; // TODO(yassogba) remove? who uses this?\n\nfunction createOpAttr(attrName, tensorsOrDtype, value) {\n  if (util_1.isNullOrUndefined(tensorsOrDtype)) {\n    throw new Error('Invalid input tensors value.');\n  }\n\n  return {\n    name: attrName,\n    type: nodeBackend().binding.TF_BOOL,\n    value: value\n  };\n}\n\nexports.createOpAttr = createOpAttr;\n/** Returns the dtype number for a single or list of input Tensors. */\n\nfunction getTFDTypeForInputs(tensors) {\n  if (util_1.isNullOrUndefined(tensors)) {\n    throw new Error('Invalid input tensors value.');\n  }\n\n  if (util_1.isArray(tensors)) {\n    for (var i = 0; i < tensors.length; i++) {\n      return getTFDType(tensors[i].dtype);\n    }\n\n    return -1;\n  } else {\n    return getTFDType(tensors.dtype);\n  }\n}\n\nfunction ensureTensorflowBackend() {\n  tf.util.assert(tf.getBackend() === 'tensorflow', function () {\n    return \"Expect the current backend to be \\\"tensorflow\\\", but got \\\"\" + tf.getBackend() + \"\\\"\";\n  });\n}\n\nexports.ensureTensorflowBackend = ensureTensorflowBackend;","map":{"version":3,"sources":["C:/Users/wongh/finger/node_modules/@tensorflow/tfjs-node/dist/nodejs_kernel_backend.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","__generator","body","_","label","sent","t","trys","ops","f","y","g","verb","Symbol","iterator","n","v","op","TypeError","call","pop","length","push","defineProperty","exports","tf","require","tfjs_1","util_1","int64_tensors_1","NodeJSKernelBackend","_super","binding","packageName","_this","isGPUPackage","isUsingGpuDevice","tensorMap","DataStorage","engine","getDTypeInteger","dtype","TF_FLOAT","TF_INT32","TF_BOOL","TF_COMPLEX64","TF_STRING","Error","typeAttributeFromTensor","createOutputTensor","metadata","newId","set","shape","id","values","TF_RESOURCE","TF_UINT8","makeTensorFromDataId","getInputTensorIds","tensors","ids","i","Int64Scalar","valueArray","createTensor","TF_INT64","info","get","dataId","createReductionOpAttrs","tensor","keepDims","name","type","TF_ATTR_BOOL","createTensorsTypeOpAttr","floatPrecision","epsilon","executeSingleInput","input","opAttrs","executeSingleOutput","inputs","outputMetadata","executeOp","executeMultipleOutputs","numOutputs","map","m","numDataIds","dispose","read","_a","readSync","has","tensorDataSync","disposeData","deleteTensor","delete","move","getTFDType","write","fill","shapeTensor","tensor1d","valueTensor","scalar","TF_ATTR_TYPE","onesLike","x","zerosLike","stridedSlice","begin","end","strides","beginTensor","axis","endTensor","stridesTensor","TF_ATTR_INT","unstack","num","batchMatMul","a","transposeA","transposeB","applyActivation","activation","preluActivationWeights","relu","prelu","elu","relu6","fusedConv2d","filter","convInfo","bias","conv2d","add","fusedBatchMatMul","slice","size","sizeTensor","reverse","axisTensor","concat","from","neg","select","condition","backend_util","upcastType","subtract","realDivide","divide","divNoNan","where","topKValues","k","topKIndices","topk","sorted","kCount","isNullOrUndefined","isSorted","kTensor","all","axes","axesTensor","any","ceil","floor","pow","cast","exp","xTensor","toFloat","log","log1p","sqrt","square","pos","mul","sub","abs","eluDer","dy","selu","int","clip","min","max","xMin","minimum","maximum","complexAbs","sigmoid","sin","cos","tan","asin","acos","atan","sinh","cosh","tanh","mod","round","sign","isNaN","isInf","isFinite","rsqrt","reciprocal","asinh","acosh","atanh","erf","squaredDifference","expm1","softplus","atan2","alpha","nans","stepNoNans","greater","ones","padInfo","strideHeight","strideWidth","padding","dataFormat","dilations","dilationHeight","dilationWidth","TF_ATTR_STRING","padValue","top","bottom","left","right","conv2dDerInput","inputSizes","inShape","conv2dDerFilter","filterSizes","filterShape","depthwiseConv2DDerInput","depthwiseConv2DDerFilter","dY","fusedDepthwiseConv2D","depthwiseConv2D","conv3d","strideDepth","dilationDepth","conv3dDerInput","conv3dDerFilter","maxPool","ksize","filterHeight","filterWidth","maxPoolBackprop","avgPool","avgPoolBackprop","origInputShape","avgPool3d","filterDepth","avgPool3dBackprop","maxPool3d","maxPool3dBackprop","reshape","tile","reps","multiples","pad","paddings","constantValue","paddingsTensor","tensor2d","constantTensor","transpose","perm","permTensor","gather","indices","gatherND","scatterND","updates","batchToSpaceND","blockShape","crops","blockShapeTensor","cropsTensor","spaceToBatchND","resizeBilinear","newHeight","newWidth","alignCorners","resizeBilinearBackprop","resizeNearestNeighbor","resizeNearestNeighborBackprop","origHeight","origWidth","batchNorm","mean","variance","offset","scale","varianceEpsilon","rank","inv","xNorm","depth","TF_ATTR_FLOAT","localResponseNormalization4D","radius","beta","LRNGrad","inputImage","outputImage","multinomial","logits","normalized","numSamples","seed","oneHot","onValue","offValue","depthTensor","onValueTensor","offValueTensor","cumsum","exclusive","nonMaxSuppression","boxes","scores","maxOutputSize","iouThreshold","scoreThreshold","maxOutputSizeTensor","iouThresholdTensor","scoreThresholdTensor","fft","ifft","complex","real","imag","cropAndResize","image","boxIndex","cropSize","method","extrapolationValue","cropSizeTensor","depthToSpace","blockSize","split","sizeSplits","sparseToDense","sparseIndices","sparseValues","outputShape","defaultValue","outputShapeTensor","linspace","start","stop","decodeJpeg","contents","channels","ratio","fancyUpscaling","tryRecoverTruncated","acceptableFraction","dctMethod","inputArgs","decodePng","decodeBmp","decodeGif","executeEncodeImageOp","imageData","imageShape","inputTensorId","outputTensorInfo","encodeJpeg","format","quality","progressive","optimizeSize","chromaDownsampling","densityUnit","xDensity","yDensity","xmpMetadata","encodePng","compression","deleteSavedModel","loadSavedModelMetaGraph","path","tags","loadSavedModel","getMappedInputTensorIds","inputTensorInfos","tensorIds","tfDtype","data","Uint8Array","dataSync","encodeInt32ArrayAsInt64","runSavedModel","outputOpNames","join","summaryWriter","logdir","writerResource","createSummaryFileWriter","resourceHandle","maxQueue","flushMillis","filenameSuffix","writeScalarSummary","tidy","util","assert","Number","isInteger","typeAttr","flushSummaryWriter","memory","unreliable","time","elapsed","process","hrtime","kernelMs","getNumOfSavedModels","KernelBackend","nodeBackend","findBackend","dataType","errorMessage","attrName","tensorsOrDtype","Tensor","isArray","getTFDTypeForInputs","createOpAttr","ensureTensorflowBackend","getBackend"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tf = require(\"@tensorflow/tfjs\");\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar util_1 = require(\"util\");\nvar int64_tensors_1 = require(\"./int64_tensors\");\nvar NodeJSKernelBackend = /** @class */ (function (_super) {\n    __extends(NodeJSKernelBackend, _super);\n    function NodeJSKernelBackend(binding, packageName) {\n        var _this = _super.call(this) || this;\n        _this.binding = binding;\n        _this.isGPUPackage = packageName === '@tensorflow/tfjs-node-gpu';\n        _this.isUsingGpuDevice = _this.binding.isUsingGpuDevice();\n        _this.tensorMap = new tf.DataStorage(_this, tf.engine());\n        return _this;\n    }\n    NodeJSKernelBackend.prototype.getDTypeInteger = function (dtype) {\n        switch (dtype) {\n            case 'float32':\n                return this.binding.TF_FLOAT;\n            case 'int32':\n                return this.binding.TF_INT32;\n            case 'bool':\n                return this.binding.TF_BOOL;\n            case 'complex64':\n                return this.binding.TF_COMPLEX64;\n            case 'string':\n                return this.binding.TF_STRING;\n            default:\n                throw new Error(\"Unsupported DType: \" + dtype);\n        }\n    };\n    NodeJSKernelBackend.prototype.typeAttributeFromTensor = function (value) {\n        return this.getDTypeInteger(value.dtype);\n    };\n    // Creates a new Tensor and maps the dataId to the passed in ID.\n    NodeJSKernelBackend.prototype.createOutputTensor = function (metadata) {\n        var newId = {};\n        this.tensorMap.set(newId, {\n            shape: metadata.shape,\n            dtype: metadata.dtype,\n            id: metadata.id,\n            values: null\n        });\n        var dtype;\n        switch (metadata.dtype) {\n            case this.binding.TF_FLOAT:\n                dtype = 'float32';\n                break;\n            case this.binding.TF_INT32:\n                dtype = 'int32';\n                break;\n            case this.binding.TF_BOOL:\n                dtype = 'bool';\n                break;\n            case this.binding.TF_COMPLEX64:\n                dtype = 'complex64';\n                break;\n            case this.binding.TF_STRING:\n                dtype = 'string';\n                break;\n            case this.binding.TF_RESOURCE:\n                // NOTE(cais): We currently represent resource-type Tensors\n                // as string of ubytes.\n                dtype = 'string';\n                break;\n            case this.binding.TF_UINT8:\n                // TensorFlow uses UINT8 as dtype for image tensor. UINT8 is not\n                // supported in TFJS yet, cast it to int32.\n                dtype = 'int32';\n                break;\n            default:\n                throw new Error(\"Unknown dtype enum \" + metadata.dtype);\n        }\n        return tf.engine().makeTensorFromDataId(newId, metadata.shape, dtype);\n    };\n    // Prepares Tensor instances for Op execution.\n    NodeJSKernelBackend.prototype.getInputTensorIds = function (tensors) {\n        var ids = [];\n        for (var i = 0; i < tensors.length; i++) {\n            if (tensors[i] instanceof int64_tensors_1.Int64Scalar) {\n                // Then `tensors[i]` is a Int64Scalar, which we currently represent\n                // using an `Int32Array`.\n                var value = tensors[i].valueArray;\n                var id = this.binding.createTensor([], this.binding.TF_INT64, value);\n                ids.push(id);\n            }\n            else {\n                var info = this.tensorMap.get(tensors[i].dataId);\n                // TODO - what about ID in this case? Handle in write()??\n                if (info.values != null) {\n                    // Values were delayed to write into the TensorHandle. Do that before\n                    // Op execution and clear stored values.\n                    info.id =\n                        this.binding.createTensor(info.shape, info.dtype, info.values);\n                    info.values = null;\n                }\n                ids.push(info.id);\n            }\n        }\n        return ids;\n    };\n    NodeJSKernelBackend.prototype.createReductionOpAttrs = function (tensor, keepDims) {\n        if (keepDims === void 0) { keepDims = false; }\n        return [\n            { name: 'keep_dims', type: this.binding.TF_ATTR_BOOL, value: keepDims },\n            createTensorsTypeOpAttr('T', tensor.dtype),\n            createTensorsTypeOpAttr('Tidx', 'int32')\n        ];\n    };\n    NodeJSKernelBackend.prototype.floatPrecision = function () {\n        return 32;\n    };\n    NodeJSKernelBackend.prototype.epsilon = function () {\n        return _super.prototype.epsilon.call(this);\n    };\n    /**\n     * Executes an op that has a single input and output.\n     *\n     * Helper function to wrap executeSingleOutput in a particular case.\n     * @param name The name of the Op to execute.\n     * @param input The input Tensor for the Op.\n     */\n    NodeJSKernelBackend.prototype.executeSingleInput = function (name, input) {\n        var opAttrs = [createTensorsTypeOpAttr('T', input.dtype)];\n        return this.executeSingleOutput(name, opAttrs, [input]);\n    };\n    /**\n     * Executes a TensorFlow Eager Op that provides one output Tensor.\n     * @param name The name of the Op to execute.\n     * @param opAttrs The list of Op attributes required to execute.\n     * @param inputs The list of input Tensors for the Op.\n     * @return A resulting Tensor from Op execution.\n     */\n    NodeJSKernelBackend.prototype.executeSingleOutput = function (name, opAttrs, inputs) {\n        var outputMetadata = this.binding.executeOp(name, opAttrs, this.getInputTensorIds(inputs), 1);\n        return this.createOutputTensor(outputMetadata[0]);\n    };\n    /**\n     * Executes a TensorFlow Eager Op that provides multiple output Tensors.\n     * @param name The name of the Op to execute.\n     * @param opAttrs The list of Op attributes required to execute.\n     * @param inputs The list of input Tensors for the Op.\n     * @param numOutputs The number of output Tensors for Op execution.\n     * @return A resulting Tensor array from Op execution.\n     */\n    NodeJSKernelBackend.prototype.executeMultipleOutputs = function (name, opAttrs, inputs, numOutputs) {\n        var _this = this;\n        var outputMetadata = this.binding.executeOp(name, opAttrs, this.getInputTensorIds(inputs), numOutputs);\n        return outputMetadata.map(function (m) { return _this.createOutputTensor(m); });\n    };\n    NodeJSKernelBackend.prototype.numDataIds = function () {\n        return this.tensorMap.numDataIds();\n    };\n    NodeJSKernelBackend.prototype.dispose = function () { };\n    NodeJSKernelBackend.prototype.read = function (dataId) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.readSync(dataId)];\n            });\n        });\n    };\n    NodeJSKernelBackend.prototype.readSync = function (dataId) {\n        if (!this.tensorMap.has(dataId)) {\n            throw new Error(\"Tensor \" + dataId + \" was not registered!\");\n        }\n        var info = this.tensorMap.get(dataId);\n        if (info.values != null) {\n            return info.values;\n        }\n        else {\n            return this.binding.tensorDataSync(info.id);\n        }\n    };\n    NodeJSKernelBackend.prototype.disposeData = function (dataId) {\n        // No-op if already disposed.\n        if (!this.tensorMap.has(dataId)) {\n            return;\n        }\n        var id = this.tensorMap.get(dataId).id;\n        if (id != null && id >= 0) {\n            this.binding.deleteTensor(id);\n        }\n        this.tensorMap.delete(dataId);\n    };\n    NodeJSKernelBackend.prototype.move = function (dataId, values, shape, dtype) {\n        this.tensorMap.set(dataId, { shape: shape, dtype: getTFDType(dtype), values: values, id: -1 });\n    };\n    NodeJSKernelBackend.prototype.write = function (values, shape, dtype) {\n        var dataId = {};\n        this.move(dataId, values, shape, dtype);\n        return dataId;\n    };\n    NodeJSKernelBackend.prototype.fill = function (shape, value, dtype) {\n        // TODO(cais, nkreeger): Investigate whether this can be made into\n        // a dtype helper method. The underlying op kernel doesn't accept undefined\n        // or null dtype.\n        if (dtype == null) {\n            if (typeof value === 'number') {\n                dtype = 'float32';\n            }\n            else {\n                dtype = 'string';\n            }\n        }\n        var shapeTensor = tfjs_1.tensor1d(shape, 'int32');\n        var valueTensor = tfjs_1.scalar(value, dtype);\n        var opAttrs = [\n            {\n                name: 'T',\n                type: this.binding.TF_ATTR_TYPE,\n                value: this.getDTypeInteger(dtype)\n            },\n            {\n                name: 'index_type',\n                type: this.binding.TF_ATTR_TYPE,\n                value: this.binding.TF_INT32\n            }\n        ];\n        return this.executeSingleOutput('Fill', opAttrs, [shapeTensor, valueTensor]);\n    };\n    NodeJSKernelBackend.prototype.onesLike = function (x) {\n        var opAttrs = [{\n                name: 'T',\n                type: this.binding.TF_ATTR_TYPE,\n                value: this.getDTypeInteger(x.dtype)\n            }];\n        return this.executeSingleOutput('OnesLike', opAttrs, [x]);\n    };\n    NodeJSKernelBackend.prototype.zerosLike = function (x) {\n        var opAttrs = [{\n                name: 'T',\n                type: this.binding.TF_ATTR_TYPE,\n                value: this.getDTypeInteger(x.dtype)\n            }];\n        return this.executeSingleOutput('ZerosLike', opAttrs, [x]);\n    };\n    NodeJSKernelBackend.prototype.stridedSlice = function (x, begin, end, strides) {\n        var beginTensor = tfjs_1.tensor1d(begin, 'int32');\n        for (var axis = 0; axis < end.length; axis++) {\n            // Unlike Numpy, when the strides are negative, TF C uses -n-1 instead of\n            // -1 as the \"end\" in order to include the first element.\n            if (strides[axis] < 0 && end[axis] === -1) {\n                end[axis] -= x.shape[axis];\n            }\n        }\n        var endTensor = tfjs_1.tensor1d(end, 'int32');\n        var stridesTensor = tfjs_1.tensor1d(strides, 'int32');\n        // All of the masks have already been accounted for in the high level op,\n        // so the backend does NOT need to deal with masks.\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', x.dtype),\n            createTensorsTypeOpAttr('Index', 'int32'),\n            { name: 'begin_mask', type: this.binding.TF_ATTR_INT, value: 0 },\n            { name: 'end_mask', type: this.binding.TF_ATTR_INT, value: 0 },\n            { name: 'ellipsis_mask', type: this.binding.TF_ATTR_INT, value: 0 },\n            { name: 'new_axis_mask', type: this.binding.TF_ATTR_INT, value: 0 },\n            { name: 'shrink_axis_mask', type: this.binding.TF_ATTR_INT, value: 0 }\n        ];\n        return this.executeSingleOutput('StridedSlice', opAttrs, [x, beginTensor, endTensor, stridesTensor]);\n    };\n    NodeJSKernelBackend.prototype.unstack = function (x, axis) {\n        if (axis >= x.shape.length) {\n            throw new Error(\"Invalid axis supplied: \" + axis + \" shape length: \" + x.shape.length);\n        }\n        var num = x.shape[axis];\n        var opAttrs = [\n            { name: 'num', type: this.binding.TF_ATTR_INT, value: num },\n            createTensorsTypeOpAttr('T', x.dtype),\n            { name: 'axis', type: this.binding.TF_ATTR_INT, value: axis }\n        ];\n        return this.executeMultipleOutputs('Unpack', opAttrs, [x], num);\n    };\n    NodeJSKernelBackend.prototype.batchMatMul = function (a, b, transposeA, transposeB) {\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', a.dtype),\n            { name: 'adj_x', type: this.binding.TF_ATTR_BOOL, value: transposeA },\n            { name: 'adj_y', type: this.binding.TF_ATTR_BOOL, value: transposeB }\n        ];\n        return this.executeSingleOutput('BatchMatMul', opAttrs, [a, b]);\n    };\n    NodeJSKernelBackend.prototype.applyActivation = function (input, activation, preluActivationWeights) {\n        var result = input;\n        if (activation != null) {\n            if (activation === 'linear') {\n                // No-op\n            }\n            else if (activation === 'relu') {\n                result = this.relu(result);\n            }\n            else if (activation === 'prelu') {\n                result = this.prelu(result, preluActivationWeights);\n            }\n            else if (activation === 'elu') {\n                result = this.elu(result);\n            }\n            else if (activation === 'relu6') {\n                result = this.relu6(result);\n            }\n            else {\n                throw new Error(\"Activation: \" + activation + \" has not been implemented for the Node.js backend\");\n            }\n        }\n        return result;\n    };\n    NodeJSKernelBackend.prototype.fusedConv2d = function (_a) {\n        var input = _a.input, filter = _a.filter, convInfo = _a.convInfo, bias = _a.bias, activation = _a.activation, preluActivationWeights = _a.preluActivationWeights;\n        var result = this.conv2d(input, filter, convInfo);\n        if (bias != null) {\n            result = tf.add(result, bias);\n        }\n        result = this.applyActivation(result, activation, preluActivationWeights);\n        return result;\n    };\n    NodeJSKernelBackend.prototype.fusedBatchMatMul = function (_a) {\n        var a = _a.a, b = _a.b, transposeA = _a.transposeA, transposeB = _a.transposeB, bias = _a.bias, activation = _a.activation, preluActivationWeights = _a.preluActivationWeights;\n        // Core TensorFlow does not have a fused BatchMatMul op. Combine calls to\n        // achieve the same results:\n        var result = this.batchMatMul(a, b, transposeA, transposeB);\n        if (bias != null) {\n            result = tf.add(result, bias);\n        }\n        result = this.applyActivation(result, activation, preluActivationWeights);\n        return result;\n    };\n    NodeJSKernelBackend.prototype.slice = function (x, begin, size) {\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', x.dtype),\n            createTensorsTypeOpAttr('Index', 'int32')\n        ];\n        // Bind tensor values\n        var beginTensor = tfjs_1.tensor1d(begin, 'int32');\n        var sizeTensor = tfjs_1.tensor1d(size, 'int32');\n        return this.executeSingleOutput('Slice', opAttrs, [x, beginTensor, sizeTensor]);\n    };\n    NodeJSKernelBackend.prototype.reverse = function (a, axis) {\n        var opAttrs = [\n            createTensorsTypeOpAttr('Tidx', 'int32'),\n            createTensorsTypeOpAttr('T', a.dtype)\n        ];\n        var axisTensor = tfjs_1.tensor1d(axis, 'int32');\n        return this.executeSingleOutput('ReverseV2', opAttrs, [a, axisTensor]);\n    };\n    NodeJSKernelBackend.prototype.concat = function (tensors, axis) {\n        var opAttrs = [\n            { name: 'N', type: this.binding.TF_ATTR_INT, value: tensors.length }, {\n                name: 'Tidx',\n                type: this.binding.TF_ATTR_TYPE,\n                value: this.binding.TF_INT32\n            },\n            createTensorsTypeOpAttr('T', tensors)\n        ];\n        var inputs = Array.from(tensors);\n        inputs.push(tfjs_1.scalar(axis, 'int32'));\n        return this.executeSingleOutput('ConcatV2', opAttrs, inputs);\n    };\n    NodeJSKernelBackend.prototype.neg = function (a) {\n        return this.executeSingleInput('Neg', a);\n    };\n    NodeJSKernelBackend.prototype.select = function (condition, a, b) {\n        var opAttrs = [createTensorsTypeOpAttr('T', tfjs_1.backend_util.upcastType(a.dtype, b.dtype))];\n        return this.executeSingleOutput('Select', opAttrs, [condition, a, b]);\n    };\n    NodeJSKernelBackend.prototype.subtract = function (a, b) {\n        var opAttrs = [createTensorsTypeOpAttr('T', tfjs_1.backend_util.upcastType(a.dtype, b.dtype))];\n        return this.executeSingleOutput('Sub', opAttrs, [a, b]);\n    };\n    NodeJSKernelBackend.prototype.realDivide = function (a, b) {\n        var opAttrs = [createTensorsTypeOpAttr('T', tfjs_1.backend_util.upcastType(a.dtype, b.dtype))];\n        return this.executeSingleOutput('RealDiv', opAttrs, [a, b]);\n    };\n    NodeJSKernelBackend.prototype.divide = function (a, b) {\n        var opAttrs = [createTensorsTypeOpAttr('T', tfjs_1.backend_util.upcastType(a.dtype, b.dtype))];\n        return this.executeSingleOutput('Div', opAttrs, [a, b]);\n    };\n    NodeJSKernelBackend.prototype.divNoNan = function (a, b) {\n        var opAttrs = [createTensorsTypeOpAttr('T', tfjs_1.backend_util.upcastType(a.dtype, b.dtype))];\n        return this.executeSingleOutput('DivNoNan', opAttrs, [a, b]);\n    };\n    NodeJSKernelBackend.prototype.where = function (condition) {\n        return this.executeSingleOutput('Where', [], [condition]);\n    };\n    NodeJSKernelBackend.prototype.topKValues = function (x, k) {\n        throw new Error('Method not implemented.');\n    };\n    NodeJSKernelBackend.prototype.topKIndices = function (x, k) {\n        throw new Error('Method not implemented.');\n    };\n    NodeJSKernelBackend.prototype.topk = function (x, k, sorted) {\n        var kCount = util_1.isNullOrUndefined(k) ? 1 : k;\n        var isSorted = util_1.isNullOrUndefined(sorted) ? true : sorted;\n        var opAttrs = [\n            { name: 'sorted', type: this.binding.TF_ATTR_BOOL, value: isSorted },\n            createTensorsTypeOpAttr('T', x.dtype),\n        ];\n        var kTensor = tfjs_1.scalar(kCount, 'int32');\n        // 'TopKV2' has two-hard coded output attributes:\n        return this.executeMultipleOutputs('TopKV2', opAttrs, [x, kTensor], 2);\n    };\n    NodeJSKernelBackend.prototype.all = function (x, axes) {\n        var opAttrs = [\n            { name: 'keep_dims', type: this.binding.TF_ATTR_BOOL, value: false },\n            createTensorsTypeOpAttr('Tidx', 'int32')\n        ];\n        var axesTensor = tfjs_1.tensor1d(axes, 'int32');\n        return this.executeSingleOutput('All', opAttrs, [x, axesTensor]);\n    };\n    NodeJSKernelBackend.prototype.any = function (x, axes) {\n        var opAttrs = [\n            { name: 'keep_dims', type: this.binding.TF_ATTR_BOOL, value: false },\n            createTensorsTypeOpAttr('Tidx', 'int32')\n        ];\n        var axesTensor = tfjs_1.tensor1d(axes, 'int32');\n        return this.executeSingleOutput('Any', opAttrs, [x, axesTensor]);\n    };\n    NodeJSKernelBackend.prototype.ceil = function (x) {\n        return this.executeSingleInput('Ceil', x);\n    };\n    NodeJSKernelBackend.prototype.floor = function (x) {\n        return this.executeSingleInput('Floor', x);\n    };\n    NodeJSKernelBackend.prototype.pow = function (a, b) {\n        var dtype = tfjs_1.backend_util.upcastType(a.dtype, b.dtype);\n        var opAttrs = [createTensorsTypeOpAttr('T', dtype)];\n        return this.executeSingleOutput('Pow', opAttrs, [a.cast(dtype), b.cast(dtype)]);\n    };\n    NodeJSKernelBackend.prototype.exp = function (x) {\n        var xTensor = x.dtype === 'int32' ? x.toFloat() : x;\n        return this.executeSingleInput('Exp', xTensor);\n    };\n    NodeJSKernelBackend.prototype.log = function (x) {\n        return this.executeSingleInput('Log', x);\n    };\n    NodeJSKernelBackend.prototype.log1p = function (x) {\n        return this.executeSingleInput('Log1p', x);\n    };\n    NodeJSKernelBackend.prototype.sqrt = function (x) {\n        return this.executeSingleInput('Sqrt', x);\n    };\n    NodeJSKernelBackend.prototype.square = function (x) {\n        return this.executeSingleInput('Square', x);\n    };\n    NodeJSKernelBackend.prototype.relu = function (x) {\n        return this.executeSingleInput('Relu', x);\n    };\n    NodeJSKernelBackend.prototype.relu6 = function (x) {\n        return this.executeSingleInput('Relu6', x);\n    };\n    NodeJSKernelBackend.prototype.prelu = function (x, a) {\n        var pos = this.relu(x);\n        var neg = a.mul(x.sub(this.abs(x))).mul(0.5);\n        return pos.add(neg);\n    };\n    NodeJSKernelBackend.prototype.elu = function (x) {\n        return this.executeSingleInput('Elu', x);\n    };\n    NodeJSKernelBackend.prototype.eluDer = function (dy, y) {\n        var opAttrs = [createTensorsTypeOpAttr('T', y.dtype)];\n        return this.executeSingleOutput('EluGrad', opAttrs, [dy, y]);\n    };\n    NodeJSKernelBackend.prototype.selu = function (x) {\n        return this.executeSingleInput('Selu', x);\n    };\n    NodeJSKernelBackend.prototype.int = function (x) {\n        throw new Error('Method not implemented.');\n    };\n    NodeJSKernelBackend.prototype.clip = function (x, min, max) {\n        var xMin = tf.minimum(x, tfjs_1.scalar(max, x.dtype));\n        return tf.maximum(xMin, tfjs_1.scalar(min, x.dtype));\n    };\n    NodeJSKernelBackend.prototype.abs = function (x) {\n        return this.executeSingleInput('Abs', x);\n    };\n    NodeJSKernelBackend.prototype.complexAbs = function (x) {\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', x.dtype),\n            createTensorsTypeOpAttr('Tout', 'float32')\n        ];\n        return this.executeSingleOutput('ComplexAbs', opAttrs, [x]);\n    };\n    NodeJSKernelBackend.prototype.sigmoid = function (x) {\n        return this.executeSingleInput('Sigmoid', x);\n    };\n    NodeJSKernelBackend.prototype.sin = function (x) {\n        return this.executeSingleInput('Sin', x);\n    };\n    NodeJSKernelBackend.prototype.cos = function (x) {\n        return this.executeSingleInput('Cos', x);\n    };\n    NodeJSKernelBackend.prototype.tan = function (x) {\n        return this.executeSingleInput('Tan', x);\n    };\n    NodeJSKernelBackend.prototype.asin = function (x) {\n        return this.executeSingleInput('Asin', x);\n    };\n    NodeJSKernelBackend.prototype.acos = function (x) {\n        return this.executeSingleInput('Acos', x);\n    };\n    NodeJSKernelBackend.prototype.atan = function (x) {\n        return this.executeSingleInput('Atan', x);\n    };\n    NodeJSKernelBackend.prototype.sinh = function (x) {\n        return this.executeSingleInput('Sinh', x);\n    };\n    NodeJSKernelBackend.prototype.cosh = function (x) {\n        return this.executeSingleInput('Cosh', x);\n    };\n    NodeJSKernelBackend.prototype.tanh = function (x) {\n        return this.executeSingleInput('Tanh', x);\n    };\n    NodeJSKernelBackend.prototype.mod = function (a, b) {\n        var opAttrs = [createTensorsTypeOpAttr('T', a.dtype)];\n        return this.executeSingleOutput('FloorMod', opAttrs, [a, b]);\n    };\n    NodeJSKernelBackend.prototype.round = function (x) {\n        return this.executeSingleInput('Round', x);\n    };\n    NodeJSKernelBackend.prototype.sign = function (x) {\n        return this.executeSingleInput('Sign', x);\n    };\n    NodeJSKernelBackend.prototype.isNaN = function (x) {\n        return this.executeSingleInput('IsNan', x);\n    };\n    NodeJSKernelBackend.prototype.isInf = function (x) {\n        return this.executeSingleInput('IsInf', x);\n    };\n    NodeJSKernelBackend.prototype.isFinite = function (x) {\n        return this.executeSingleInput('IsFinite', x);\n    };\n    NodeJSKernelBackend.prototype.rsqrt = function (x) {\n        return this.executeSingleInput('Rsqrt', x);\n    };\n    NodeJSKernelBackend.prototype.reciprocal = function (x) {\n        return this.executeSingleInput('Reciprocal', x);\n    };\n    NodeJSKernelBackend.prototype.asinh = function (x) {\n        return this.executeSingleInput('Asinh', x);\n    };\n    NodeJSKernelBackend.prototype.acosh = function (x) {\n        return this.executeSingleInput('Acosh', x);\n    };\n    NodeJSKernelBackend.prototype.atanh = function (x) {\n        return this.executeSingleInput('Atanh', x);\n    };\n    NodeJSKernelBackend.prototype.erf = function (x) {\n        return this.executeSingleInput('Erf', x);\n    };\n    NodeJSKernelBackend.prototype.squaredDifference = function (a, b) {\n        var opAttrs = [createTensorsTypeOpAttr('T', a.dtype)];\n        return this.executeSingleOutput('SquaredDifference', opAttrs, [a, b]);\n    };\n    NodeJSKernelBackend.prototype.expm1 = function (x) {\n        return this.executeSingleInput('Expm1', x);\n    };\n    NodeJSKernelBackend.prototype.softplus = function (x) {\n        return this.executeSingleInput('Softplus', x);\n    };\n    NodeJSKernelBackend.prototype.atan2 = function (a, b) {\n        var opAttrs = [createTensorsTypeOpAttr('T', a.dtype)];\n        return this.executeSingleOutput('Atan2', opAttrs, [a, b]);\n    };\n    NodeJSKernelBackend.prototype.step = function (x, alpha) {\n        var dtype = x.dtype;\n        var nans = this.isNaN(x);\n        var stepNoNans = this.select(tf.greater(x, tfjs_1.scalar(0, dtype)), tfjs_1.ones(x.shape), tfjs_1.fill(x.shape, alpha, dtype));\n        return this.select(nans, x, stepNoNans);\n    };\n    NodeJSKernelBackend.prototype.conv2d = function (x, filter, convInfo) {\n        if (convInfo.padInfo.type !== 'VALID' && convInfo.padInfo.type !== 'SAME' &&\n            convInfo.padInfo.type !== 'EXPLICIT') {\n            throw new Error(\"TF Backend supports only 'valid' and 'same' padding \" +\n                (\"while padding was \" + convInfo.padInfo.type));\n        }\n        var strides = [1, convInfo.strideHeight, convInfo.strideWidth, 1];\n        var padding = convInfo.padInfo.type;\n        var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NHWC' : 'NCHW';\n        var dilations = [1, convInfo.dilationHeight, convInfo.dilationWidth, 1];\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', x.dtype),\n            { name: 'strides', type: this.binding.TF_ATTR_INT, value: strides },\n            { name: 'padding', type: this.binding.TF_ATTR_STRING, value: padding },\n            {\n                name: 'data_format',\n                type: this.binding.TF_ATTR_STRING,\n                value: dataFormat\n            },\n            { name: 'use_cudnn_on_gpu', type: this.binding.TF_ATTR_BOOL, value: true },\n            { name: 'dilations', type: this.binding.TF_ATTR_INT, value: dilations },\n        ];\n        if (padding === 'EXPLICIT') {\n            var padValue = [\n                convInfo.padInfo.top, convInfo.padInfo.bottom, convInfo.padInfo.left,\n                convInfo.padInfo.right\n            ];\n            opAttrs.push({\n                name: 'explicit_paddings',\n                type: this.binding.TF_ATTR_INT,\n                value: dataFormat === 'NHWC' ? [0, 0].concat(padValue, [0, 0]) : [0, 0, 0, 0].concat(padValue)\n            });\n        }\n        return this.executeSingleOutput('Conv2D', opAttrs, [x, filter]);\n    };\n    NodeJSKernelBackend.prototype.conv2dDerInput = function (dy, filter, convInfo) {\n        if (convInfo.padInfo.type !== 'VALID' && convInfo.padInfo.type !== 'SAME') {\n            throw new Error(\"TF Backend supports only 'valid' and 'same' padding \" +\n                (\"while padding was \" + convInfo.padInfo.type));\n        }\n        var strides = [1, convInfo.strideHeight, convInfo.strideWidth, 1];\n        var padding = convInfo.padInfo.type;\n        var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NHWC' : 'NCHW';\n        var dilations = [1, convInfo.dilationHeight, convInfo.dilationWidth, 1];\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', 'float32'),\n            { name: 'strides', type: this.binding.TF_ATTR_INT, value: strides },\n            { name: 'padding', type: this.binding.TF_ATTR_STRING, value: padding }, {\n                name: 'data_format',\n                type: this.binding.TF_ATTR_STRING,\n                value: dataFormat\n            },\n            { name: 'use_cudnn_on_gpu', type: this.binding.TF_ATTR_BOOL, value: true },\n            { name: 'dilations', type: this.binding.TF_ATTR_INT, value: dilations }\n        ];\n        var inputSizes = tfjs_1.tensor1d(convInfo.inShape, 'int32');\n        return this.executeSingleOutput('Conv2DBackpropInput', opAttrs, [inputSizes, filter, dy]);\n    };\n    NodeJSKernelBackend.prototype.conv2dDerFilter = function (x, dy, convInfo) {\n        if (convInfo.padInfo.type !== 'VALID' && convInfo.padInfo.type !== 'SAME') {\n            throw new Error(\"TF Backend supports only 'valid' and 'same' padding \" +\n                (\"while padding was \" + convInfo.padInfo.type));\n        }\n        var strides = [1, convInfo.strideHeight, convInfo.strideWidth, 1];\n        var padding = convInfo.padInfo.type;\n        var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NHWC' : 'NCHW';\n        var dilations = [1, convInfo.dilationHeight, convInfo.dilationWidth, 1];\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', 'float32'),\n            { name: 'strides', type: this.binding.TF_ATTR_INT, value: strides },\n            { name: 'padding', type: this.binding.TF_ATTR_STRING, value: padding }, {\n                name: 'data_format',\n                type: this.binding.TF_ATTR_STRING,\n                value: dataFormat\n            },\n            { name: 'use_cudnn_on_gpu', type: this.binding.TF_ATTR_BOOL, value: true },\n            { name: 'dilations', type: this.binding.TF_ATTR_INT, value: dilations }\n        ];\n        var filterSizes = tfjs_1.tensor1d(convInfo.filterShape, 'int32');\n        return this.executeSingleOutput('Conv2DBackpropFilter', opAttrs, [x, filterSizes, dy]);\n    };\n    NodeJSKernelBackend.prototype.depthwiseConv2DDerInput = function (dy, filter, convInfo) {\n        var strides = [1, convInfo.strideHeight, convInfo.strideWidth, 1];\n        var padding = convInfo.padInfo.type;\n        var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NHWC' : 'NCHW';\n        var dilations = [1, convInfo.dilationHeight, convInfo.dilationWidth, 1];\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', 'float32'),\n            { name: 'strides', type: this.binding.TF_ATTR_INT, value: strides },\n            { name: 'padding', type: this.binding.TF_ATTR_STRING, value: padding }, {\n                name: 'data_format',\n                type: this.binding.TF_ATTR_STRING,\n                value: dataFormat\n            },\n            { name: 'dilations', type: this.binding.TF_ATTR_INT, value: dilations }\n        ];\n        var inputSizes = tfjs_1.tensor1d(convInfo.inShape, 'int32');\n        return this.executeSingleOutput('DepthwiseConv2dNativeBackpropInput', opAttrs, [inputSizes, filter, dy]);\n    };\n    NodeJSKernelBackend.prototype.depthwiseConv2DDerFilter = function (x, dY, convInfo) {\n        var strides = [1, convInfo.strideHeight, convInfo.strideWidth, 1];\n        var padding = convInfo.padInfo.type;\n        var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NHWC' : 'NCHW';\n        var dilations = [1, convInfo.dilationHeight, convInfo.dilationWidth, 1];\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', 'float32'),\n            { name: 'strides', type: this.binding.TF_ATTR_INT, value: strides },\n            { name: 'padding', type: this.binding.TF_ATTR_STRING, value: padding }, {\n                name: 'data_format',\n                type: this.binding.TF_ATTR_STRING,\n                value: dataFormat\n            },\n            { name: 'dilations', type: this.binding.TF_ATTR_INT, value: dilations }\n        ];\n        var filterSizes = tfjs_1.tensor1d(convInfo.filterShape, 'int32');\n        return this.executeSingleOutput('DepthwiseConv2dNativeBackpropFilter', opAttrs, [x, filterSizes, dY]);\n    };\n    NodeJSKernelBackend.prototype.fusedDepthwiseConv2D = function (_a) {\n        var input = _a.input, filter = _a.filter, convInfo = _a.convInfo, bias = _a.bias, activation = _a.activation, preluActivationWeights = _a.preluActivationWeights;\n        var result = this.depthwiseConv2D(input, filter, convInfo);\n        if (bias != null) {\n            result = tf.add(result, bias);\n        }\n        result = this.applyActivation(result, activation, preluActivationWeights);\n        return result;\n    };\n    NodeJSKernelBackend.prototype.depthwiseConv2D = function (input, filter, convInfo) {\n        if (convInfo.padInfo.type !== 'VALID' && convInfo.padInfo.type !== 'SAME') {\n            throw new Error(\"TF Backend supports only 'valid' and 'same' padding \" +\n                (\"while padding was \" + convInfo.padInfo.type));\n        }\n        var strides = [1, convInfo.strideHeight, convInfo.strideWidth, 1];\n        var padding = convInfo.padInfo.type;\n        var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NHWC' : 'NCHW';\n        var dilations = [1, convInfo.dilationHeight, convInfo.dilationWidth, 1];\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', input.dtype),\n            { name: 'strides', type: this.binding.TF_ATTR_INT, value: strides },\n            { name: 'padding', type: this.binding.TF_ATTR_STRING, value: padding }, {\n                name: 'data_format',\n                type: this.binding.TF_ATTR_STRING,\n                value: dataFormat\n            },\n            { name: 'dilations', type: this.binding.TF_ATTR_INT, value: dilations }\n        ];\n        return this.executeSingleOutput('DepthwiseConv2dNative', opAttrs, [input, filter]);\n    };\n    NodeJSKernelBackend.prototype.conv3d = function (x, filter, convInfo) {\n        var strides = [\n            1, convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth, 1\n        ];\n        var padding = convInfo.padInfo.type;\n        var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NDHWC' : 'NCDHW';\n        if (!this.isGPUPackage && convInfo.dilationDepth > 1) {\n            throw new Error('CPU Dilation depth must be 1');\n        }\n        var dilations = [\n            1, convInfo.dilationDepth, convInfo.dilationHeight,\n            convInfo.dilationWidth, 1\n        ];\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', x.dtype),\n            { name: 'strides', type: this.binding.TF_ATTR_INT, value: strides },\n            { name: 'padding', type: this.binding.TF_ATTR_STRING, value: padding }, {\n                name: 'data_format',\n                type: this.binding.TF_ATTR_STRING,\n                value: dataFormat\n            },\n            { name: 'dilations', type: this.binding.TF_ATTR_INT, value: dilations }\n        ];\n        return this.executeSingleOutput('Conv3D', opAttrs, [x, filter]);\n    };\n    NodeJSKernelBackend.prototype.conv3dDerInput = function (dy, filter, convInfo) {\n        var strides = [\n            1, convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth, 1\n        ];\n        var padding = convInfo.padInfo.type;\n        var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NDHWC' : 'NCDHW';\n        if (!this.isGPUPackage && convInfo.dilationDepth > 1) {\n            throw new Error('CPU Dilation depth must be 1');\n        }\n        var dilations = [\n            1, convInfo.dilationDepth, convInfo.dilationHeight,\n            convInfo.dilationWidth, 1\n        ];\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', dy.dtype),\n            { name: 'strides', type: this.binding.TF_ATTR_INT, value: strides },\n            { name: 'padding', type: this.binding.TF_ATTR_STRING, value: padding }, {\n                name: 'data_format',\n                type: this.binding.TF_ATTR_STRING,\n                value: dataFormat\n            },\n            { name: 'dilations', type: this.binding.TF_ATTR_INT, value: dilations },\n            createTensorsTypeOpAttr('Tshape', 'int32')\n        ];\n        var inputSizes = tfjs_1.tensor1d(convInfo.inShape, 'int32');\n        return this.executeSingleOutput('Conv3DBackpropInputV2', opAttrs, [inputSizes, filter, dy]);\n    };\n    NodeJSKernelBackend.prototype.conv3dDerFilter = function (x, dY, convInfo) {\n        var strides = [\n            1, convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth, 1\n        ];\n        var padding = convInfo.padInfo.type;\n        var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NDHWC' : 'NCDHW';\n        if (!this.isGPUPackage && convInfo.dilationDepth > 1) {\n            throw new Error('CPU Dilation depth must be 1');\n        }\n        var dilations = [\n            1, convInfo.dilationDepth, convInfo.dilationHeight,\n            convInfo.dilationWidth, 1\n        ];\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', x.dtype),\n            { name: 'strides', type: this.binding.TF_ATTR_INT, value: strides },\n            { name: 'padding', type: this.binding.TF_ATTR_STRING, value: padding }, {\n                name: 'data_format',\n                type: this.binding.TF_ATTR_STRING,\n                value: dataFormat\n            },\n            { name: 'dilations', type: this.binding.TF_ATTR_INT, value: dilations }\n        ];\n        var filterSizes = tfjs_1.tensor1d(convInfo.filterShape, 'int32');\n        return this.executeSingleOutput('Conv3DBackpropFilterV2', opAttrs, [x, filterSizes, dY]);\n    };\n    NodeJSKernelBackend.prototype.maxPool = function (x, convInfo) {\n        if (convInfo.padInfo.type !== 'VALID' && convInfo.padInfo.type !== 'SAME') {\n            throw new Error(\"TF Backend supports only 'valid' and 'same' padding \" +\n                (\"while padding was \" + convInfo.padInfo.type));\n        }\n        var ksize = [1, convInfo.filterHeight, convInfo.filterWidth, 1];\n        var strides = [1, convInfo.strideHeight, convInfo.strideWidth, 1];\n        var padding = convInfo.padInfo.type;\n        var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NHWC' : 'NCHW';\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', x.dtype),\n            { name: 'ksize', type: this.binding.TF_ATTR_INT, value: ksize },\n            { name: 'strides', type: this.binding.TF_ATTR_INT, value: strides },\n            { name: 'padding', type: this.binding.TF_ATTR_STRING, value: padding }, {\n                name: 'data_format',\n                type: this.binding.TF_ATTR_STRING,\n                value: dataFormat\n            }\n        ];\n        return this.executeSingleOutput('MaxPool', opAttrs, [x]);\n    };\n    NodeJSKernelBackend.prototype.maxPoolBackprop = function (dy, x, y, convInfo) {\n        if (convInfo.padInfo.type !== 'VALID' && convInfo.padInfo.type !== 'SAME') {\n            throw new Error(\"TF Backend supports only 'valid' and 'same' padding \" +\n                (\"while padding type was \" + convInfo.padInfo.type));\n        }\n        var ksize = [1, convInfo.filterHeight, convInfo.filterWidth, 1];\n        var strides = [1, convInfo.strideHeight, convInfo.strideWidth, 1];\n        var padding = convInfo.padInfo.type;\n        var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NHWC' : 'NCHW';\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', x.dtype),\n            { name: 'ksize', type: this.binding.TF_ATTR_INT, value: ksize },\n            { name: 'strides', type: this.binding.TF_ATTR_INT, value: strides },\n            { name: 'padding', type: this.binding.TF_ATTR_STRING, value: padding },\n            {\n                name: 'data_format',\n                type: this.binding.TF_ATTR_STRING,\n                value: dataFormat\n            },\n        ];\n        return this.executeSingleOutput('MaxPoolGrad', opAttrs, [x, y, dy]);\n    };\n    NodeJSKernelBackend.prototype.avgPool = function (x, convInfo) {\n        if (convInfo.padInfo.type !== 'VALID' && convInfo.padInfo.type !== 'SAME') {\n            throw new Error(\"TF Backend supports only 'valid' and 'same' padding \" +\n                (\"while padding was \" + convInfo.padInfo.type));\n        }\n        var ksize = [1, convInfo.filterHeight, convInfo.filterWidth, 1];\n        var strides = [1, convInfo.strideHeight, convInfo.strideWidth, 1];\n        var padding = convInfo.padInfo.type;\n        var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NHWC' : 'NCHW';\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', x.dtype),\n            { name: 'ksize', type: this.binding.TF_ATTR_INT, value: ksize },\n            { name: 'strides', type: this.binding.TF_ATTR_INT, value: strides },\n            { name: 'padding', type: this.binding.TF_ATTR_STRING, value: padding },\n            {\n                name: 'data_format',\n                type: this.binding.TF_ATTR_STRING,\n                value: dataFormat\n            },\n        ];\n        return this.executeSingleOutput('AvgPool', opAttrs, [x]);\n    };\n    NodeJSKernelBackend.prototype.avgPoolBackprop = function (dy, x, convInfo) {\n        if (convInfo.padInfo.type !== 'VALID' && convInfo.padInfo.type !== 'SAME') {\n            throw new Error(\"TF Backend supports only 'valid' and 'same' padding \" +\n                (\"while padding type was \" + convInfo.padInfo.type));\n        }\n        var ksize = [1, convInfo.filterHeight, convInfo.filterWidth, 1];\n        var strides = [1, convInfo.strideHeight, convInfo.strideWidth, 1];\n        var padding = convInfo.padInfo.type;\n        var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NHWC' : 'NCHW';\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', x.dtype),\n            { name: 'ksize', type: this.binding.TF_ATTR_INT, value: ksize },\n            { name: 'strides', type: this.binding.TF_ATTR_INT, value: strides },\n            { name: 'padding', type: this.binding.TF_ATTR_STRING, value: padding },\n            {\n                name: 'data_format',\n                type: this.binding.TF_ATTR_STRING,\n                value: dataFormat\n            },\n        ];\n        var origInputShape = tfjs_1.tensor1d(x.shape, 'int32');\n        return this.executeSingleOutput('AvgPoolGrad', opAttrs, [origInputShape, dy]);\n    };\n    NodeJSKernelBackend.prototype.avgPool3d = function (x, convInfo) {\n        if (convInfo.padInfo.type !== 'VALID' && convInfo.padInfo.type !== 'SAME') {\n            throw new Error(\"TF Backend supports only 'valid' and 'same' padding \" +\n                (\"while padding was \" + convInfo.padInfo.type));\n        }\n        var ksize = [\n            1, convInfo.filterDepth, convInfo.filterHeight, convInfo.filterWidth, 1\n        ];\n        var strides = [\n            1, convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth, 1\n        ];\n        var padding = convInfo.padInfo.type;\n        var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NDHWC' : 'NCDHW';\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', x.dtype),\n            { name: 'ksize', type: this.binding.TF_ATTR_INT, value: ksize },\n            { name: 'strides', type: this.binding.TF_ATTR_INT, value: strides },\n            { name: 'padding', type: this.binding.TF_ATTR_STRING, value: padding },\n            {\n                name: 'data_format',\n                type: this.binding.TF_ATTR_STRING,\n                value: dataFormat\n            },\n        ];\n        return this.executeSingleOutput('AvgPool3D', opAttrs, [x]);\n    };\n    NodeJSKernelBackend.prototype.avgPool3dBackprop = function (dy, x, convInfo) {\n        if (convInfo.padInfo.type !== 'VALID' && convInfo.padInfo.type !== 'SAME') {\n            throw new Error(\"TF Backend supports only 'valid' and 'same' padding \" +\n                (\"while padding type was \" + convInfo.padInfo.type));\n        }\n        var ksize = [\n            1, convInfo.filterDepth, convInfo.filterHeight, convInfo.filterWidth, 1\n        ];\n        var strides = [\n            1, convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth, 1\n        ];\n        var padding = convInfo.padInfo.type;\n        var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NDHWC' : 'NCDHW';\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', x.dtype),\n            { name: 'ksize', type: this.binding.TF_ATTR_INT, value: ksize },\n            { name: 'strides', type: this.binding.TF_ATTR_INT, value: strides },\n            { name: 'padding', type: this.binding.TF_ATTR_STRING, value: padding },\n            {\n                name: 'data_format',\n                type: this.binding.TF_ATTR_STRING,\n                value: dataFormat\n            },\n        ];\n        var origInputShape = tfjs_1.tensor1d(x.shape, 'int32');\n        return this.executeSingleOutput('AvgPool3DGrad', opAttrs, [origInputShape, dy]);\n    };\n    NodeJSKernelBackend.prototype.maxPool3d = function (x, convInfo) {\n        if (convInfo.padInfo.type !== 'VALID' && convInfo.padInfo.type !== 'SAME') {\n            throw new Error(\"TF Backend supports only 'valid' and 'same' padding \" +\n                (\"while padding was \" + convInfo.padInfo.type));\n        }\n        var ksize = [\n            1, convInfo.filterDepth, convInfo.filterHeight, convInfo.filterWidth, 1\n        ];\n        var strides = [\n            1, convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth, 1\n        ];\n        var padding = convInfo.padInfo.type;\n        var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NDHWC' : 'NCDHW';\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', x.dtype),\n            { name: 'ksize', type: this.binding.TF_ATTR_INT, value: ksize },\n            { name: 'strides', type: this.binding.TF_ATTR_INT, value: strides },\n            { name: 'padding', type: this.binding.TF_ATTR_STRING, value: padding }, {\n                name: 'data_format',\n                type: this.binding.TF_ATTR_STRING,\n                value: dataFormat\n            }\n        ];\n        return this.executeSingleOutput('MaxPool3D', opAttrs, [x]);\n    };\n    NodeJSKernelBackend.prototype.maxPool3dBackprop = function (dy, x, y, convInfo) {\n        if (convInfo.padInfo.type !== 'VALID' && convInfo.padInfo.type !== 'SAME') {\n            throw new Error(\"TF Backend supports only 'valid' and 'same' padding \" +\n                (\"while padding type was \" + convInfo.padInfo.type));\n        }\n        var ksize = [\n            1, convInfo.filterDepth, convInfo.filterHeight, convInfo.filterWidth, 1\n        ];\n        var strides = [\n            1, convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth, 1\n        ];\n        var padding = convInfo.padInfo.type;\n        var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NDHWC' : 'NCDHW';\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', x.dtype),\n            { name: 'ksize', type: this.binding.TF_ATTR_INT, value: ksize },\n            { name: 'strides', type: this.binding.TF_ATTR_INT, value: strides },\n            { name: 'padding', type: this.binding.TF_ATTR_STRING, value: padding },\n            {\n                name: 'data_format',\n                type: this.binding.TF_ATTR_STRING,\n                value: dataFormat\n            },\n        ];\n        return this.executeSingleOutput('MaxPool3DGrad', opAttrs, [x, y, dy]);\n    };\n    NodeJSKernelBackend.prototype.reshape = function (x, shape) {\n        var shapeTensor = tfjs_1.tensor1d(shape, 'int32');\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', x.dtype),\n            createTensorsTypeOpAttr('Tshape', shapeTensor.dtype)\n        ];\n        return this.executeSingleOutput('Reshape', opAttrs, [x, shapeTensor]);\n    };\n    NodeJSKernelBackend.prototype.cast = function (x, dtype) {\n        var opAttrs = [\n            createTensorsTypeOpAttr('SrcT', x.dtype),\n            createTensorsTypeOpAttr('DstT', dtype),\n            { name: 'Truncate', type: this.binding.TF_ATTR_BOOL, value: false }\n        ];\n        return this.executeSingleOutput('Cast', opAttrs, [x]);\n    };\n    NodeJSKernelBackend.prototype.tile = function (x, reps) {\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', x.dtype),\n            createTensorsTypeOpAttr('Tmultiples', 'int32')\n        ];\n        var multiples = tfjs_1.tensor1d(reps, 'int32');\n        return this.executeSingleOutput('Tile', opAttrs, [x, multiples]);\n    };\n    NodeJSKernelBackend.prototype.pad = function (x, paddings, constantValue) {\n        // Bind tensor values\n        var paddingsTensor = tfjs_1.tensor2d(paddings, [paddings.length, 2], 'int32');\n        var constantTensor = tfjs_1.scalar(constantValue, x.dtype);\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', x.dtype),\n            createTensorsTypeOpAttr('Tpaddings', paddingsTensor.dtype)\n        ];\n        return this.executeSingleOutput('PadV2', opAttrs, [x, paddingsTensor, constantTensor]);\n    };\n    NodeJSKernelBackend.prototype.transpose = function (x, perm) {\n        var permTensor = tfjs_1.tensor1d(perm, 'int32');\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', x.dtype),\n            createTensorsTypeOpAttr('Tperm', 'int32')\n        ];\n        return this.executeSingleOutput('Transpose', opAttrs, [x, permTensor]);\n    };\n    NodeJSKernelBackend.prototype.gather = function (x, indices, axis) {\n        var axisTensor = tfjs_1.scalar(axis, 'int32');\n        var opAttrs = [\n            createTensorsTypeOpAttr('Tparams', x.dtype),\n            createTensorsTypeOpAttr('Tindices', indices.dtype),\n            createTensorsTypeOpAttr('Taxis', 'int32')\n        ];\n        return this.executeSingleOutput('GatherV2', opAttrs, [x, indices, axisTensor]);\n    };\n    NodeJSKernelBackend.prototype.gatherND = function (x, indices) {\n        var opAttrs = [\n            createTensorsTypeOpAttr('Tparams', x.dtype),\n            createTensorsTypeOpAttr('Tindices', 'int32')\n        ];\n        return this.executeSingleOutput('GatherNd', opAttrs, [x, indices]);\n    };\n    NodeJSKernelBackend.prototype.scatterND = function (indices, updates, shape) {\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', updates.dtype),\n            createTensorsTypeOpAttr('Tindices', 'int32')\n        ];\n        var shapeTensor = tfjs_1.tensor1d(shape, 'int32');\n        return this.executeSingleOutput('ScatterNd', opAttrs, [indices, updates, shapeTensor]);\n    };\n    NodeJSKernelBackend.prototype.batchToSpaceND = function (x, blockShape, crops) {\n        var blockShapeTensor = tfjs_1.tensor1d(blockShape, 'int32');\n        var cropsTensor = tfjs_1.tensor2d(crops, [crops.length, crops[0].length], 'int32');\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', x.dtype),\n            createTensorsTypeOpAttr('Tblock_shape', 'int32'),\n            createTensorsTypeOpAttr('Tcrops', cropsTensor.dtype)\n        ];\n        return this.executeSingleOutput('BatchToSpaceND', opAttrs, [x, blockShapeTensor, cropsTensor]);\n    };\n    NodeJSKernelBackend.prototype.spaceToBatchND = function (x, blockShape, paddings) {\n        var blockShapeTensor = tfjs_1.tensor1d(blockShape, 'int32');\n        var paddingsTensor = tfjs_1.tensor2d(paddings, [paddings.length, paddings[0].length], 'int32');\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', x.dtype),\n            createTensorsTypeOpAttr('Tblock_shape', 'int32'),\n            createTensorsTypeOpAttr('Tpaddings', paddingsTensor.dtype)\n        ];\n        return this.executeSingleOutput('SpaceToBatchND', opAttrs, [x, blockShapeTensor, paddingsTensor]);\n    };\n    NodeJSKernelBackend.prototype.resizeBilinear = function (x, newHeight, newWidth, alignCorners) {\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', x.dtype),\n            {\n                name: 'align_corners',\n                type: this.binding.TF_ATTR_BOOL,\n                value: alignCorners\n            },\n        ];\n        var size = tfjs_1.tensor1d([newHeight, newWidth], 'int32');\n        return this.executeSingleOutput('ResizeBilinear', opAttrs, [x, size]);\n    };\n    NodeJSKernelBackend.prototype.resizeBilinearBackprop = function (dy, x, alignCorners) {\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', x.dtype), {\n                name: 'align_corners',\n                type: this.binding.TF_ATTR_BOOL,\n                value: alignCorners\n            }\n        ];\n        return this.executeSingleOutput('ResizeBilinearGrad', opAttrs, [dy, x]);\n    };\n    NodeJSKernelBackend.prototype.resizeNearestNeighbor = function (x, newHeight, newWidth, alignCorners) {\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', x.dtype),\n            {\n                name: 'align_corners',\n                type: this.binding.TF_ATTR_BOOL,\n                value: alignCorners\n            },\n        ];\n        var size = tfjs_1.tensor1d([newHeight, newWidth], 'int32');\n        return this.executeSingleOutput('ResizeNearestNeighbor', opAttrs, [x, size]);\n    };\n    NodeJSKernelBackend.prototype.resizeNearestNeighborBackprop = function (dy, x, alignCorners) {\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', x.dtype), {\n                name: 'align_corners',\n                type: this.binding.TF_ATTR_BOOL,\n                value: alignCorners\n            }\n        ];\n        var _a = x.shape, origHeight = _a[1], origWidth = _a[2];\n        var size = tfjs_1.tensor1d([origHeight, origWidth], 'int32');\n        return this.executeSingleOutput('ResizeNearestNeighborGrad', opAttrs, [dy, size]);\n    };\n    NodeJSKernelBackend.prototype.batchNorm = function (x, mean, variance, offset, scale, varianceEpsilon) {\n        if (mean.rank > 1) {\n            // Fused batch norm doesn't work with high-dim mean/var/scale/offset.\n            var inv = tfjs_1.rsqrt(variance.add(tfjs_1.scalar(varianceEpsilon)));\n            if (scale != null) {\n                inv = inv.mul(scale);\n            }\n            var xNorm = x.sub(mean).mul(inv);\n            return offset != null ? xNorm.add(offset) : xNorm;\n        }\n        var dataFormat = 'NHWC';\n        var depth = x.shape[3];\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', x.dtype),\n            {\n                name: 'epsilon',\n                type: this.binding.TF_ATTR_FLOAT,\n                value: varianceEpsilon\n            },\n            {\n                name: 'data_format',\n                type: this.binding.TF_ATTR_STRING,\n                value: dataFormat\n            },\n            { name: 'is_training', type: this.binding.TF_ATTR_BOOL, value: false },\n        ];\n        var numOutputs = 5;\n        if (scale == null) {\n            scale = tfjs_1.fill([depth], 1);\n        }\n        if (offset == null) {\n            offset = tfjs_1.fill([depth], 0);\n        }\n        return this.executeMultipleOutputs('FusedBatchNorm', opAttrs, [x, scale, offset, mean, variance], numOutputs)[0];\n    };\n    NodeJSKernelBackend.prototype.localResponseNormalization4D = function (x, radius, bias, alpha, beta) {\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', x.dtype),\n            { name: 'depth_radius', type: this.binding.TF_ATTR_INT, value: radius },\n            { name: 'bias', type: this.binding.TF_ATTR_FLOAT, value: bias },\n            { name: 'alpha', type: this.binding.TF_ATTR_FLOAT, value: alpha },\n            { name: 'beta', type: this.binding.TF_ATTR_FLOAT, value: beta },\n        ];\n        return this.executeSingleOutput('LRN', opAttrs, [x]);\n    };\n    NodeJSKernelBackend.prototype.LRNGrad = function (dy, inputImage, outputImage, radius, bias, alpha, beta) {\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', dy.dtype),\n            { name: 'depth_radius', type: this.binding.TF_ATTR_INT, value: radius },\n            { name: 'bias', type: this.binding.TF_ATTR_FLOAT, value: bias },\n            { name: 'alpha', type: this.binding.TF_ATTR_FLOAT, value: alpha },\n            { name: 'beta', type: this.binding.TF_ATTR_FLOAT, value: beta },\n        ];\n        return this.executeSingleOutput('LRNGrad', opAttrs, [dy, inputImage, outputImage]);\n    };\n    NodeJSKernelBackend.prototype.multinomial = function (logits, normalized, numSamples, seed) {\n        if (normalized) {\n            throw new Error('TF Node backend does not support normalized logits ' +\n                'passed to multinomial');\n        }\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', logits.dtype),\n            createTensorsTypeOpAttr('output_dtype', 'int32'),\n            { name: 'seed', type: this.binding.TF_ATTR_INT, value: seed },\n            { name: 'seed2', type: this.binding.TF_ATTR_INT, value: seed * seed },\n        ];\n        return this.executeSingleOutput('Multinomial', opAttrs, [logits, tfjs_1.scalar(numSamples, 'int32')]);\n    };\n    NodeJSKernelBackend.prototype.oneHot = function (indices, depth, onValue, offValue) {\n        var depthTensor = tfjs_1.scalar(depth, 'int32');\n        var onValueTensor = tfjs_1.scalar(onValue, 'int32');\n        var offValueTensor = tfjs_1.scalar(offValue, 'int32');\n        var opAttrs = [\n            { name: 'axis', type: this.binding.TF_ATTR_INT, value: -1 },\n            createTensorsTypeOpAttr('T', indices.dtype),\n            createTensorsTypeOpAttr('TI', indices.dtype)\n        ];\n        return this.executeSingleOutput('OneHot', opAttrs, [\n            indices, depthTensor, onValueTensor, offValueTensor\n        ]);\n    };\n    NodeJSKernelBackend.prototype.cumsum = function (x, axis, exclusive, reverse) {\n        var axisTensor = tfjs_1.scalar(axis, 'int32');\n        var opAttrs = [\n            { name: 'exclusive', type: this.binding.TF_ATTR_BOOL, value: exclusive },\n            { name: 'reverse', type: this.binding.TF_ATTR_BOOL, value: reverse },\n            createTensorsTypeOpAttr('T', x.dtype),\n            createTensorsTypeOpAttr('Tidx', 'int32')\n        ];\n        return this.executeSingleOutput('Cumsum', opAttrs, [x, axisTensor]);\n    };\n    NodeJSKernelBackend.prototype.nonMaxSuppression = function (boxes, scores, maxOutputSize, iouThreshold, scoreThreshold) {\n        var opAttrs = [createTensorsTypeOpAttr('T', boxes.dtype)];\n        var maxOutputSizeTensor = tfjs_1.scalar(maxOutputSize, 'int32');\n        var iouThresholdTensor = tfjs_1.scalar(iouThreshold);\n        var scoreThresholdTensor = tfjs_1.scalar(scoreThreshold);\n        return this.executeSingleOutput('NonMaxSuppressionV3', opAttrs, [\n            boxes, scores, maxOutputSizeTensor, iouThresholdTensor,\n            scoreThresholdTensor\n        ]);\n    };\n    NodeJSKernelBackend.prototype.fft = function (x) {\n        var opAttrs = [createTensorsTypeOpAttr('Tcomplex', x.dtype)];\n        return this.executeSingleOutput('FFT', opAttrs, [x]);\n    };\n    NodeJSKernelBackend.prototype.ifft = function (x) {\n        var opAttrs = [createTensorsTypeOpAttr('Tcomplex', x.dtype)];\n        return this.executeSingleOutput('IFFT', opAttrs, [x]);\n    };\n    NodeJSKernelBackend.prototype.complex = function (real, imag) {\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', real),\n            {\n                name: 'Tout',\n                type: this.binding.TF_ATTR_TYPE,\n                value: this.binding.TF_COMPLEX64\n            },\n        ];\n        var inputs = [real, imag];\n        return this.executeSingleOutput('Complex', opAttrs, inputs);\n    };\n    NodeJSKernelBackend.prototype.real = function (input) {\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', input), {\n                name: 'Tout',\n                type: this.binding.TF_ATTR_TYPE,\n                value: this.binding.TF_FLOAT\n            }\n        ];\n        var inputs = [input];\n        return this.executeSingleOutput('Real', opAttrs, inputs);\n    };\n    NodeJSKernelBackend.prototype.imag = function (input) {\n        var opAttrs = [\n            {\n                name: 'T',\n                type: this.binding.TF_ATTR_TYPE,\n                value: this.binding.TF_COMPLEX64\n            },\n            {\n                name: 'Tout',\n                type: this.binding.TF_ATTR_TYPE,\n                value: this.binding.TF_FLOAT\n            }\n        ];\n        var inputs = [input];\n        return this.executeSingleOutput('Imag', opAttrs, inputs);\n    };\n    NodeJSKernelBackend.prototype.cropAndResize = function (image, boxes, boxIndex, cropSize, method, extrapolationValue) {\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', image.dtype),\n            { name: 'method', type: this.binding.TF_ATTR_STRING, value: method }, {\n                name: 'extrapolation_value',\n                type: this.binding.TF_ATTR_FLOAT,\n                value: extrapolationValue\n            }\n        ];\n        var cropSizeTensor = tfjs_1.tensor1d(cropSize, 'int32');\n        return this.executeSingleOutput('CropAndResize', opAttrs, [image, boxes, boxIndex, cropSizeTensor]);\n    };\n    NodeJSKernelBackend.prototype.depthToSpace = function (x, blockSize, dataFormat) {\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', x), {\n                name: 'block_size',\n                type: this.binding.TF_ATTR_INT,\n                value: blockSize < 2 ? 2 : blockSize\n            },\n            {\n                name: 'data_format',\n                type: this.binding.TF_ATTR_STRING,\n                value: dataFormat\n            }\n        ];\n        var inputs = [x];\n        return this.executeSingleOutput('DepthToSpace', opAttrs, inputs);\n    };\n    NodeJSKernelBackend.prototype.split = function (value, sizeSplits, axis) {\n        var opAttrs = [\n            {\n                name: 'num_split',\n                type: this.binding.TF_ATTR_INT,\n                value: sizeSplits.length\n            },\n            createTensorsTypeOpAttr('T', value), {\n                name: 'Tlen',\n                type: this.binding.TF_ATTR_TYPE,\n                value: this.binding.TF_INT32\n            }\n        ];\n        var inputs = [value];\n        inputs.push(tfjs_1.tensor1d(sizeSplits, 'int32'));\n        inputs.push(tfjs_1.scalar(axis, 'int32'));\n        return this.executeMultipleOutputs('SplitV', opAttrs, inputs, sizeSplits.length);\n    };\n    NodeJSKernelBackend.prototype.sparseToDense = function (sparseIndices, sparseValues, outputShape, defaultValue) {\n        var opAttrs = [\n            { name: 'validate_indices', type: this.binding.TF_ATTR_BOOL, value: true },\n            createTensorsTypeOpAttr('T', sparseValues.dtype),\n            createTensorsTypeOpAttr('Tindices', sparseIndices.dtype)\n        ];\n        var outputShapeTensor = tfjs_1.tensor1d(outputShape, 'int32');\n        return this.executeSingleOutput('SparseToDense', opAttrs, [\n            sparseIndices, outputShapeTensor, sparseValues, defaultValue\n        ]);\n    };\n    NodeJSKernelBackend.prototype.linspace = function (start, stop, num) {\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', 'float32'),\n            createTensorsTypeOpAttr('Tidx', 'int32')\n        ];\n        var inputs = [\n            tfjs_1.scalar(start, 'float32'), tfjs_1.scalar(stop, 'float32'), tfjs_1.scalar(num, 'int32')\n        ];\n        return this.executeSingleOutput('LinSpace', opAttrs, inputs);\n    };\n    NodeJSKernelBackend.prototype.decodeJpeg = function (contents, channels, ratio, fancyUpscaling, tryRecoverTruncated, acceptableFraction, dctMethod) {\n        var opAttrs = [\n            { name: 'channels', type: this.binding.TF_ATTR_INT, value: channels },\n            { name: 'ratio', type: this.binding.TF_ATTR_INT, value: ratio }, {\n                name: 'fancy_upscaling',\n                type: this.binding.TF_ATTR_BOOL,\n                value: fancyUpscaling\n            },\n            {\n                name: 'try_recover_truncated',\n                type: this.binding.TF_ATTR_BOOL,\n                value: tryRecoverTruncated\n            },\n            {\n                name: 'acceptable_fraction',\n                type: this.binding.TF_ATTR_FLOAT,\n                value: acceptableFraction\n            },\n            { name: 'dct_method', type: this.binding.TF_ATTR_STRING, value: dctMethod }\n        ];\n        var inputArgs = [tfjs_1.scalar(contents, 'string')];\n        return this.executeSingleOutput('DecodeJpeg', opAttrs, inputArgs);\n    };\n    NodeJSKernelBackend.prototype.decodePng = function (contents, channels) {\n        var opAttrs = [{ name: 'channels', type: this.binding.TF_ATTR_INT, value: channels }];\n        var inputArgs = [tfjs_1.scalar(contents, 'string')];\n        return this.executeSingleOutput('DecodePng', opAttrs, inputArgs);\n    };\n    NodeJSKernelBackend.prototype.decodeBmp = function (contents, channels) {\n        var opAttrs = [{ name: 'channels', type: this.binding.TF_ATTR_INT, value: channels }];\n        var inputArgs = [tfjs_1.scalar(contents, 'string')];\n        return this.executeSingleOutput('DecodeBmp', opAttrs, inputArgs);\n    };\n    NodeJSKernelBackend.prototype.decodeGif = function (contents) {\n        var inputArgs = [tfjs_1.scalar(contents, 'string')];\n        return this.executeSingleOutput('DecodeGif', [], inputArgs);\n    };\n    NodeJSKernelBackend.prototype.executeEncodeImageOp = function (name, opAttrs, imageData, imageShape) {\n        var inputTensorId = this.binding.createTensor(imageShape, this.binding.TF_UINT8, imageData);\n        var outputMetadata = this.binding.executeOp(name, opAttrs, [inputTensorId], 1);\n        var outputTensorInfo = outputMetadata[0];\n        // prevent the tensor data from being converted to a UTF8 string, since\n        // the encoded data is not valid UTF8\n        outputTensorInfo.dtype = this.binding.TF_UINT8;\n        return this.createOutputTensor(outputTensorInfo);\n    };\n    NodeJSKernelBackend.prototype.encodeJpeg = function (imageData, imageShape, format, quality, progressive, optimizeSize, chromaDownsampling, densityUnit, xDensity, yDensity, xmpMetadata) {\n        var opAttrs = [\n            { name: 'format', type: this.binding.TF_ATTR_STRING, value: format },\n            { name: 'quality', type: this.binding.TF_ATTR_INT, value: quality }, {\n                name: 'progressive',\n                type: this.binding.TF_ATTR_BOOL,\n                value: progressive\n            },\n            {\n                name: 'optimize_size',\n                type: this.binding.TF_ATTR_BOOL,\n                value: optimizeSize\n            },\n            {\n                name: 'chroma_downsampling',\n                type: this.binding.TF_ATTR_BOOL,\n                value: chromaDownsampling\n            },\n            {\n                name: 'density_unit',\n                type: this.binding.TF_ATTR_STRING,\n                value: densityUnit\n            },\n            { name: 'x_density', type: this.binding.TF_ATTR_INT, value: xDensity },\n            { name: 'y_density', type: this.binding.TF_ATTR_INT, value: yDensity }, {\n                name: 'xmp_metadata',\n                type: this.binding.TF_ATTR_STRING,\n                value: xmpMetadata\n            }\n        ];\n        return this.executeEncodeImageOp('EncodeJpeg', opAttrs, imageData, imageShape);\n    };\n    NodeJSKernelBackend.prototype.encodePng = function (imageData, imageShape, compression) {\n        var opAttrs = [\n            { name: 'compression', type: this.binding.TF_ATTR_INT, value: compression }\n        ];\n        return this.executeEncodeImageOp('EncodePng', opAttrs, imageData, imageShape);\n    };\n    NodeJSKernelBackend.prototype.deleteSavedModel = function (id) {\n        this.binding.deleteSavedModel(id);\n    };\n    NodeJSKernelBackend.prototype.loadSavedModelMetaGraph = function (path, tags) {\n        return this.binding.loadSavedModel(path, tags);\n    };\n    NodeJSKernelBackend.prototype.getMappedInputTensorIds = function (inputs, inputTensorInfos) {\n        var tensorIds = this.getInputTensorIds(inputs);\n        for (var i = 0; i < inputs.length; i++) {\n            if (inputTensorInfos[i] != null) {\n                if (inputTensorInfos[i].tfDtype === 'DT_UINT8') {\n                    var data = Uint8Array.from(inputs[i].dataSync());\n                    var inputTensorId = this.binding.createTensor(inputs[i].shape, this.binding.TF_UINT8, data);\n                    tensorIds[i] = inputTensorId;\n                }\n                else if (inputTensorInfos[i].tfDtype === 'DT_INT64') {\n                    var data = int64_tensors_1.encodeInt32ArrayAsInt64(inputs[i].dataSync());\n                    var inputTensorId = this.binding.createTensor(inputs[i].shape, this.binding.TF_INT64, data);\n                    tensorIds[i] = inputTensorId;\n                }\n            }\n        }\n        return tensorIds;\n    };\n    NodeJSKernelBackend.prototype.runSavedModel = function (id, inputs, inputTensorInfos, outputOpNames) {\n        var _this = this;\n        var outputMetadata = this.binding.runSavedModel(id, this.getMappedInputTensorIds(inputs, inputTensorInfos), inputTensorInfos.map(function (info) { return info.name; }).join(','), outputOpNames.join(','));\n        return outputMetadata.map(function (m) { return _this.createOutputTensor(m); });\n    };\n    // ------------------------------------------------------------\n    // TensorBoard-related (tfjs-node-specific) backend kernels.\n    NodeJSKernelBackend.prototype.summaryWriter = function (logdir) {\n        var opAttrs = [\n            {\n                name: 'shared_name',\n                type: this.binding.TF_ATTR_STRING,\n                value: \"logdir:\" + logdir\n            },\n            { name: 'container', type: this.binding.TF_ATTR_STRING, value: '' }\n        ];\n        var writerResource = this.executeSingleOutput('SummaryWriter', opAttrs, []);\n        return writerResource;\n    };\n    NodeJSKernelBackend.prototype.createSummaryFileWriter = function (resourceHandle, logdir, maxQueue, flushMillis, filenameSuffix) {\n        var inputArgs = [\n            resourceHandle, tfjs_1.scalar(logdir),\n            tfjs_1.scalar(maxQueue == null ? 10 : maxQueue, 'int32'),\n            tfjs_1.scalar(flushMillis == null ? 2 * 60 * 1000 : flushMillis, 'int32'),\n            tfjs_1.scalar(filenameSuffix == null ? '.v2' : filenameSuffix)\n        ];\n        this.executeMultipleOutputs('CreateSummaryFileWriter', [], inputArgs, 0);\n    };\n    NodeJSKernelBackend.prototype.writeScalarSummary = function (resourceHandle, step, name, value) {\n        var _this = this;\n        tfjs_1.tidy(function () {\n            tfjs_1.util.assert(Number.isInteger(step), function () { return \"step is expected to be an integer, but is instead \" + step; });\n            var inputArgs = [resourceHandle, new int64_tensors_1.Int64Scalar(step), tfjs_1.scalar(name, 'string')];\n            var typeAttr;\n            if (typeof value === 'number') {\n                inputArgs.push(tfjs_1.scalar(value));\n                typeAttr = _this.binding.TF_FLOAT;\n            }\n            else {\n                // `value` is a Scalar.\n                tfjs_1.util.assert(value.rank === 0, function () { return \"A non-scalar tensor (rank \" + value.rank + \") is passed to \" +\n                    \"writeScalarSummary()\"; });\n                inputArgs.push(value);\n                typeAttr = _this.typeAttributeFromTensor(value);\n            }\n            var opAttrs = [{ name: 'T', type: _this.binding.TF_ATTR_TYPE, value: typeAttr }];\n            _this.binding.executeOp('WriteScalarSummary', opAttrs, _this.getInputTensorIds(inputArgs), 0);\n        });\n    };\n    NodeJSKernelBackend.prototype.flushSummaryWriter = function (resourceHandle) {\n        var inputArgs = [resourceHandle];\n        this.executeMultipleOutputs('FlushSummaryWriter', [], inputArgs, 0);\n    };\n    // ~ TensorBoard-related (tfjs-node-specific) backend kernels.\n    // ------------------------------------------------------------\n    NodeJSKernelBackend.prototype.memory = function () {\n        // Due to automatic garbage collection, the numbers are unreliable.\n        // TODO(kreeger): Since there is finalization in C, count the true\n        // number of undisposed tensors.\n        return { unreliable: true };\n    };\n    NodeJSKernelBackend.prototype.time = function (f) {\n        return __awaiter(this, void 0, void 0, function () {\n            var start, elapsed;\n            return __generator(this, function (_a) {\n                start = process.hrtime();\n                f();\n                elapsed = process.hrtime(start);\n                return [2 /*return*/, { kernelMs: elapsed[0] * 1000 + elapsed[1] / 1000000 }];\n            });\n        });\n    };\n    NodeJSKernelBackend.prototype.getNumOfSavedModels = function () {\n        return this.binding.getNumOfSavedModels();\n    };\n    return NodeJSKernelBackend;\n}(tfjs_1.KernelBackend));\nexports.NodeJSKernelBackend = NodeJSKernelBackend;\n/** Returns an instance of the Node.js backend. */\nfunction nodeBackend() {\n    return tf.findBackend('tensorflow');\n}\nexports.nodeBackend = nodeBackend;\n/** Returns the TF dtype for a given DataType. */\nfunction getTFDType(dataType) {\n    var binding = nodeBackend().binding;\n    switch (dataType) {\n        case 'float32':\n            return binding.TF_FLOAT;\n        case 'int32':\n            return binding.TF_INT32;\n        case 'bool':\n            return binding.TF_BOOL;\n        case 'complex64':\n            return binding.TF_COMPLEX64;\n        case 'string':\n            return binding.TF_STRING;\n        // tslint:disable-next-line:no-any\n        case 'int64':\n            // int64 is not a generally supported dtype in TensorFlow.js\n            // (tfjs-core). However, it needs to be included here for the purpose of\n            // writing the `step` value to TensorBoard via WriteScalarSummary and\n            // other op kernels.\n            return binding.TF_INT64;\n        default:\n            var errorMessage = \"Unknown dtype: \" + dataType;\n            throw new Error(errorMessage);\n    }\n}\nexports.getTFDType = getTFDType;\n/**\n * Creates a TFEOpAttr for a 'type' OpDef attribute from a Tensor or list of\n * Tensors.\n */\nfunction createTensorsTypeOpAttr(attrName, tensorsOrDtype) {\n    if (util_1.isNullOrUndefined(tensorsOrDtype)) {\n        throw new Error('Invalid input tensors value.');\n    }\n    return {\n        name: attrName,\n        type: nodeBackend().binding.TF_ATTR_TYPE,\n        value: (tensorsOrDtype instanceof tf.Tensor || Array.isArray(tensorsOrDtype)) ?\n            getTFDTypeForInputs(tensorsOrDtype) :\n            getTFDType(tensorsOrDtype)\n    };\n}\nexports.createTensorsTypeOpAttr = createTensorsTypeOpAttr;\n// TODO(yassogba) remove? who uses this?\nfunction createOpAttr(attrName, tensorsOrDtype, value) {\n    if (util_1.isNullOrUndefined(tensorsOrDtype)) {\n        throw new Error('Invalid input tensors value.');\n    }\n    return { name: attrName, type: nodeBackend().binding.TF_BOOL, value: value };\n}\nexports.createOpAttr = createOpAttr;\n/** Returns the dtype number for a single or list of input Tensors. */\nfunction getTFDTypeForInputs(tensors) {\n    if (util_1.isNullOrUndefined(tensors)) {\n        throw new Error('Invalid input tensors value.');\n    }\n    if (util_1.isArray(tensors)) {\n        for (var i = 0; i < tensors.length; i++) {\n            return getTFDType(tensors[i].dtype);\n        }\n        return -1;\n    }\n    else {\n        return getTFDType(tensors.dtype);\n    }\n}\nfunction ensureTensorflowBackend() {\n    tf.util.assert(tf.getBackend() === 'tensorflow', function () { return \"Expect the current backend to be \\\"tensorflow\\\", but got \\\"\" + tf.getBackend() + \"\\\"\"; });\n}\nexports.ensureTensorflowBackend = ensureTensorflowBackend;\n"]},"metadata":{},"sourceType":"script"}