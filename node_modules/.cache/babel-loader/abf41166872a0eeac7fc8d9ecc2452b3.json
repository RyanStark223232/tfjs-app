{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { Slice, slice_util, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function sliceImpl(vals, begin, size, shape, dtype) {\n  const isContinous = slice_util.isSliceContinous(shape, begin, size);\n  const length = util.sizeFromShape(size);\n  const xStrides = util.computeStrides(shape);\n\n  if (isContinous) {\n    const flatOffset = slice_util.computeFlatOffset(begin, xStrides);\n    return vals.subarray(flatOffset, flatOffset + length);\n  }\n\n  const outVals = util.getTypedArrayFromDType(dtype, length);\n\n  for (let i = 0; i < length; ++i) {\n    const rank = size.length;\n    const strides = util.computeStrides(size);\n    const loc = util.indexToLoc(i, rank, strides);\n    const xLoc = loc.map((idx, j) => idx + begin[j]);\n    const xIndex = util.locToIndex(xLoc, shape.length, xStrides);\n    outVals[i] = vals[xIndex];\n  }\n\n  return outVals;\n}\nexport function slice(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    begin,\n    size\n  } = attrs;\n  assertNotComplex(x, 'slice');\n  const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n  slice_util.assertParamsValid(x, $begin, $size);\n  const vals = backend.data.get(x.dataId).values;\n  const outVals = sliceImpl(vals, $begin, $size, x.shape, x.dtype);\n  return backend.makeTensorInfo($size, x.dtype, outVals);\n}\nexport const sliceConfig = {\n  kernelName: Slice,\n  backendName: 'cpu',\n  kernelFunc: slice\n};","map":{"version":3,"sources":["../../src/kernels/Slice.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAA6D,KAA7D,EAAoE,UAApE,EAAiI,IAAjI,QAA4I,uBAA5I;AAGA,SAAQ,gBAAR,QAA+B,aAA/B;AAEA,OAAM,SAAU,SAAV,CACF,IADE,EACgB,KADhB,EACiC,IADjC,EACiD,KADjD,EAEF,KAFE,EAEa;AACjB,QAAM,WAAW,GAAG,UAAU,CAAC,gBAAX,CAA4B,KAA5B,EAAmC,KAAnC,EAA0C,IAA1C,CAApB;AACA,QAAM,MAAM,GAAG,IAAI,CAAC,aAAL,CAAmB,IAAnB,CAAf;AACA,QAAM,QAAQ,GAAG,IAAI,CAAC,cAAL,CAAoB,KAApB,CAAjB;;AAEA,MAAI,WAAJ,EAAiB;AACf,UAAM,UAAU,GAAG,UAAU,CAAC,iBAAX,CAA6B,KAA7B,EAAoC,QAApC,CAAnB;AACA,WAAO,IAAI,CAAC,QAAL,CAAc,UAAd,EAA0B,UAAU,GAAG,MAAvC,CAAP;AACD;;AAED,QAAM,OAAO,GAAG,IAAI,CAAC,sBAAL,CAA4B,KAA5B,EAAsD,MAAtD,CAAhB;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAApB,EAA4B,EAAE,CAA9B,EAAiC;AAC/B,UAAM,IAAI,GAAG,IAAI,CAAC,MAAlB;AACA,UAAM,OAAO,GAAG,IAAI,CAAC,cAAL,CAAoB,IAApB,CAAhB;AACA,UAAM,GAAG,GAAG,IAAI,CAAC,UAAL,CAAgB,CAAhB,EAAmB,IAAnB,EAAyB,OAAzB,CAAZ;AACA,UAAM,IAAI,GAAG,GAAG,CAAC,GAAJ,CAAQ,CAAC,GAAD,EAAc,CAAd,KAAoB,GAAG,GAAG,KAAK,CAAC,CAAD,CAAvC,CAAb;AACA,UAAM,MAAM,GAAG,IAAI,CAAC,UAAL,CAAgB,IAAhB,EAAsB,KAAK,CAAC,MAA5B,EAAoC,QAApC,CAAf;AACA,IAAA,OAAO,CAAC,CAAD,CAAP,GAAa,IAAI,CAAC,MAAD,CAAjB;AACD;;AACD,SAAO,OAAP;AACD;AAED,OAAM,SAAU,KAAV,CACF,IADE,EACqE;AAEzE,QAAM;AAAC,IAAA,MAAD;AAAS,IAAA,OAAT;AAAkB,IAAA;AAAlB,MAA2B,IAAjC;AACA,QAAM;AAAC,IAAA;AAAD,MAAM,MAAZ;AACA,QAAM;AAAC,IAAA,KAAD;AAAQ,IAAA;AAAR,MAAgB,KAAtB;AAEA,EAAA,gBAAgB,CAAC,CAAD,EAAI,OAAJ,CAAhB;AAEA,QAAM,CAAC,MAAD,EAAS,KAAT,IAAkB,UAAU,CAAC,gBAAX,CAA4B,CAA5B,EAA+B,KAA/B,EAAsC,IAAtC,CAAxB;AACA,EAAA,UAAU,CAAC,iBAAX,CAA6B,CAA7B,EAAgC,MAAhC,EAAwC,KAAxC;AAEA,QAAM,IAAI,GAAG,OAAO,CAAC,IAAR,CAAa,GAAb,CAAiB,CAAC,CAAC,MAAnB,EAA2B,MAAxC;AACA,QAAM,OAAO,GAAG,SAAS,CAAC,IAAD,EAAO,MAAP,EAAe,KAAf,EAAsB,CAAC,CAAC,KAAxB,EAA+B,CAAC,CAAC,KAAjC,CAAzB;AACA,SAAO,OAAO,CAAC,cAAR,CAAuB,KAAvB,EAA8B,CAAC,CAAC,KAAhC,EAAuC,OAAvC,CAAP;AACD;AAED,OAAO,MAAM,WAAW,GAAiB;AACvC,EAAA,UAAU,EAAE,KAD2B;AAEvC,EAAA,WAAW,EAAE,KAF0B;AAGvC,EAAA,UAAU,EAAE;AAH2B,CAAlC","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { Slice, slice_util, util } from '@tensorflow/tfjs-core';\r\nimport { assertNotComplex } from '../cpu_util';\r\nexport function sliceImpl(vals, begin, size, shape, dtype) {\r\n    const isContinous = slice_util.isSliceContinous(shape, begin, size);\r\n    const length = util.sizeFromShape(size);\r\n    const xStrides = util.computeStrides(shape);\r\n    if (isContinous) {\r\n        const flatOffset = slice_util.computeFlatOffset(begin, xStrides);\r\n        return vals.subarray(flatOffset, flatOffset + length);\r\n    }\r\n    const outVals = util.getTypedArrayFromDType(dtype, length);\r\n    for (let i = 0; i < length; ++i) {\r\n        const rank = size.length;\r\n        const strides = util.computeStrides(size);\r\n        const loc = util.indexToLoc(i, rank, strides);\r\n        const xLoc = loc.map((idx, j) => idx + begin[j]);\r\n        const xIndex = util.locToIndex(xLoc, shape.length, xStrides);\r\n        outVals[i] = vals[xIndex];\r\n    }\r\n    return outVals;\r\n}\r\nexport function slice(args) {\r\n    const { inputs, backend, attrs } = args;\r\n    const { x } = inputs;\r\n    const { begin, size } = attrs;\r\n    assertNotComplex(x, 'slice');\r\n    const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\r\n    slice_util.assertParamsValid(x, $begin, $size);\r\n    const vals = backend.data.get(x.dataId).values;\r\n    const outVals = sliceImpl(vals, $begin, $size, x.shape, x.dtype);\r\n    return backend.makeTensorInfo($size, x.dtype, outVals);\r\n}\r\nexport const sliceConfig = {\r\n    kernelName: Slice,\r\n    backendName: 'cpu',\r\n    kernelFunc: slice\r\n};\r\n//# sourceMappingURL=Slice.js.map"]},"metadata":{},"sourceType":"module"}