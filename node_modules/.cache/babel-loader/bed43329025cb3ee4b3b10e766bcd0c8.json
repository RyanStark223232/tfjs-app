{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { PadV2 } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\r\n * Pads a `tf.Tensor` with a given value and paddings.\r\n *\r\n * This operation implements `CONSTANT` mode. For `REFLECT` and `SYMMETRIC`,\r\n * refer to `tf.mirrorPad`\r\n *\r\n * Also available are stricter rank-specific methods with the same signature\r\n * as this method that assert that `paddings` is of given length.\r\n *   - `tf.pad1d`\r\n *   - `tf.pad2d`\r\n *   - `tf.pad3d`\r\n *   - `tf.pad4d`\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([1, 2, 3, 4]);\r\n * x.pad([[1, 2]]).print();\r\n * ```\r\n * @param x The tensor to pad.\r\n * @param paddings An array of length `R` (the rank of the tensor), where\r\n * each element is a length-2 tuple of ints `[padBefore, padAfter]`,\r\n * specifying how much to pad along each dimension of the tensor.\r\n * @param constantValue The pad value to use. Defaults to 0.\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\r\n */\n\nfunction pad_(x, paddings) {\n  var constantValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var $x = convertToTensor(x, 'x', 'pad');\n\n  if ($x.rank === 0) {\n    throw new Error('pad(scalar) is not defined. Pass non-scalar to pad');\n  }\n\n  var forward = function forward(backend, save) {\n    save([$x]);\n    return backend.pad($x, paddings, constantValue);\n  };\n\n  var attrs = {\n    paddings: paddings,\n    constantValue: constantValue\n  };\n  var inputs = {\n    x: $x\n  };\n  return ENGINE.runKernelFunc(forward, inputs, null\n  /* grad */\n  , PadV2, attrs);\n}\n\nexport var pad = op({\n  pad_: pad_\n});","map":{"version":3,"sources":["../../src/ops/pad.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,MAAR,QAAkC,WAAlC;AACA,SAAQ,KAAR,QAA6C,iBAA7C;AAIA,SAAQ,eAAR,QAA8B,oBAA9B;AAGA,SAAQ,EAAR,QAAiB,aAAjB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AAwBG;;AACH,SAAS,IAAT,CACI,CADJ,EACqB,QADrB,EACyE;AAAA,MAAjB,aAAiB,uEAAD,CAAC;AACvE,MAAM,EAAE,GAAG,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,KAAT,CAA1B;;AACA,MAAI,EAAE,CAAC,IAAH,KAAY,CAAhB,EAAmB;AACjB,UAAM,IAAI,KAAJ,CAAU,oDAAV,CAAN;AACD;;AACD,MAAM,OAAO,GAAmB,SAA1B,OAA0B,CAAC,OAAD,EAAU,IAAV,EAAkB;AAChD,IAAA,IAAI,CAAC,CAAC,EAAD,CAAD,CAAJ;AACA,WAAO,OAAO,CAAC,GAAR,CAAY,EAAZ,EAAgB,QAAhB,EAA0B,aAA1B,CAAP;AACD,GAHD;;AAKA,MAAM,KAAK,GAAe;AAAC,IAAA,QAAQ,EAAR,QAAD;AAAW,IAAA,aAAa,EAAb;AAAX,GAA1B;AACA,MAAM,MAAM,GAAgB;AAAC,IAAA,CAAC,EAAE;AAAJ,GAA5B;AACA,SAAO,MAAM,CAAC,aAAP,CACH,OADG,EACM,MADN,EAC2C;AAAK;AADhD,IAC4D,KAD5D,EAEH,KAFG,CAAP;AAGD;;AAED,OAAO,IAAM,GAAG,GAAG,EAAE,CAAC;AAAC,EAAA,IAAI,EAAJ;AAAD,CAAD,CAAd","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { ENGINE } from '../engine';\r\nimport { PadV2 } from '../kernel_names';\r\nimport { convertToTensor } from '../tensor_util_env';\r\nimport { op } from './operation';\r\n/**\r\n * Pads a `tf.Tensor` with a given value and paddings.\r\n *\r\n * This operation implements `CONSTANT` mode. For `REFLECT` and `SYMMETRIC`,\r\n * refer to `tf.mirrorPad`\r\n *\r\n * Also available are stricter rank-specific methods with the same signature\r\n * as this method that assert that `paddings` is of given length.\r\n *   - `tf.pad1d`\r\n *   - `tf.pad2d`\r\n *   - `tf.pad3d`\r\n *   - `tf.pad4d`\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([1, 2, 3, 4]);\r\n * x.pad([[1, 2]]).print();\r\n * ```\r\n * @param x The tensor to pad.\r\n * @param paddings An array of length `R` (the rank of the tensor), where\r\n * each element is a length-2 tuple of ints `[padBefore, padAfter]`,\r\n * specifying how much to pad along each dimension of the tensor.\r\n * @param constantValue The pad value to use. Defaults to 0.\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\r\n */\r\nfunction pad_(x, paddings, constantValue = 0) {\r\n    const $x = convertToTensor(x, 'x', 'pad');\r\n    if ($x.rank === 0) {\r\n        throw new Error('pad(scalar) is not defined. Pass non-scalar to pad');\r\n    }\r\n    const forward = (backend, save) => {\r\n        save([$x]);\r\n        return backend.pad($x, paddings, constantValue);\r\n    };\r\n    const attrs = { paddings, constantValue };\r\n    const inputs = { x: $x };\r\n    return ENGINE.runKernelFunc(forward, inputs, null /* grad */, PadV2, attrs);\r\n}\r\nexport const pad = op({ pad_ });\r\n//# sourceMappingURL=pad.js.map"]},"metadata":{},"sourceType":"module"}