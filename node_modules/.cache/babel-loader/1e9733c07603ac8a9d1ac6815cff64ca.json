{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { DepthwiseConv2dNative } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport * as conv_util from './conv_util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\r\n * Depthwise 2D convolution.\r\n *\r\n * Given a 4D `input` array and a `filter` array of shape\r\n * `[filterHeight, filterWidth, inChannels, channelMultiplier]` containing\r\n * `inChannels` convolutional filters of depth 1, this op applies a\r\n * different filter to each input channel (expanding from 1 channel to\r\n * `channelMultiplier` channels for each), then concatenates the results\r\n * together. The output has `inChannels * channelMultiplier` channels.\r\n *\r\n * See\r\n * [https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d](\r\n *     https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d)\r\n * for more details.\r\n *\r\n * @param x The input tensor, of rank 4 or rank 3, of shape\r\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is\r\n * assumed.\r\n * @param filter The filter tensor, rank 4, of shape\r\n *     `[filterHeight, filterWidth, inChannels, channelMultiplier]`.\r\n * @param strides The strides of the convolution: `[strideHeight,\r\n * strideWidth]`. If strides is a single number, then `strideHeight ==\r\n * strideWidth`.\r\n * @param pad The type of padding algorithm.\r\n *   - `same` and stride 1: output will be of same size as input,\r\n *       regardless of filter size.\r\n *   - `valid`: output will be smaller than input if filter is larger\r\n *       than 1x1.\r\n *   - For more info, see this guide:\r\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\r\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\r\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\r\n *     in which we sample input values across the height and width dimensions\r\n *     in atrous convolution. Defaults to `[1, 1]`. If `rate` is a single\r\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\r\n *     1, then all values of `strides` must be 1.\r\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\r\n *     \"NHWC\". Specify the data format of the input and output data. With the\r\n *     default format \"NHWC\", the data is stored in the order of: [batch,\r\n *     height, width, channels]. Only \"NHWC\" is currently supported.\r\n * @param dimRoundingMode The rounding mode used when computing output\r\n *     dimensions if pad is a number. If none is provided, it will not round\r\n *     and error if the output is of fractional size.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Convolution'}\r\n */\n\nfunction depthwiseConv2d_(x, filter, strides, pad) {\n  var dataFormat = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'NHWC';\n  var dilations = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [1, 1];\n  var dimRoundingMode = arguments.length > 6 ? arguments[6] : undefined;\n  var $x = convertToTensor(x, 'x', 'depthwiseConv2d');\n  var $filter = convertToTensor(filter, 'filter', 'depthwiseConv2d');\n  var x4D = $x;\n  var reshapedTo4D = false;\n\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n  }\n\n  util.assert(x4D.rank === 4, function () {\n    return \"Error in depthwiseConv2d: input must be rank 4, but got \" + \"rank \".concat(x4D.rank, \".\");\n  });\n  util.assert($filter.rank === 4, function () {\n    return \"Error in depthwiseConv2d: filter must be rank 4, but got rank \" + \"\".concat($filter.rank, \".\");\n  });\n  util.assert(x4D.shape[3] === $filter.shape[2], function () {\n    return \"Error in depthwiseConv2d: number of input channels \" + \"(\".concat(x4D.shape[3], \") must match the inChannels dimension in \") + \"filter \".concat($filter.shape[2], \".\");\n  });\n\n  if (dimRoundingMode != null) {\n    util.assert(util.isInt(pad), function () {\n      return \"Error in depthwiseConv2d: pad must be an integer when using, \" + \"dimRoundingMode \".concat(dimRoundingMode, \" but got pad \").concat(pad, \".\");\n    });\n  }\n\n  var forward = function forward(backend, save) {\n    if (dilations == null) {\n      dilations = [1, 1];\n    }\n\n    util.assert(conv_util.eitherStridesOrDilationsAreOne(strides, dilations), function () {\n      return 'Error in depthwiseConv2d: Either strides or dilations must be ' + \"1. Got strides \".concat(strides, \" and dilations '\").concat(dilations, \"'\");\n    });\n    var convInfo = conv_util.computeConv2DInfo(x4D.shape, $filter.shape, strides, dilations, pad, dimRoundingMode, true\n    /* depthwise */\n    );\n    var res = backend.depthwiseConv2D(x4D, $filter, convInfo);\n    save([x4D, $filter]);\n    return res;\n  };\n\n  var inputs = {\n    x: x4D,\n    filter: $filter\n  };\n  var attrs = {\n    strides: strides,\n    pad: pad,\n    dataFormat: dataFormat,\n    dilations: dilations,\n    dimRoundingMode: dimRoundingMode\n  };\n  var res = ENGINE.runKernelFunc(forward, inputs, null\n  /* grad */\n  , DepthwiseConv2dNative, attrs);\n\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n  }\n\n  return res;\n}\n\nexport var depthwiseConv2d = op({\n  depthwiseConv2d_: depthwiseConv2d_\n});","map":{"version":3,"sources":["../../src/ops/depthwise_conv2d.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { ENGINE } from '../engine';\r\nimport { DepthwiseConv2dNative } from '../kernel_names';\r\nimport { convertToTensor } from '../tensor_util_env';\r\nimport * as util from '../util';\r\nimport * as conv_util from './conv_util';\r\nimport { op } from './operation';\r\nimport { reshape } from './reshape';\r\n/**\r\n * Depthwise 2D convolution.\r\n *\r\n * Given a 4D `input` array and a `filter` array of shape\r\n * `[filterHeight, filterWidth, inChannels, channelMultiplier]` containing\r\n * `inChannels` convolutional filters of depth 1, this op applies a\r\n * different filter to each input channel (expanding from 1 channel to\r\n * `channelMultiplier` channels for each), then concatenates the results\r\n * together. The output has `inChannels * channelMultiplier` channels.\r\n *\r\n * See\r\n * [https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d](\r\n *     https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d)\r\n * for more details.\r\n *\r\n * @param x The input tensor, of rank 4 or rank 3, of shape\r\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is\r\n * assumed.\r\n * @param filter The filter tensor, rank 4, of shape\r\n *     `[filterHeight, filterWidth, inChannels, channelMultiplier]`.\r\n * @param strides The strides of the convolution: `[strideHeight,\r\n * strideWidth]`. If strides is a single number, then `strideHeight ==\r\n * strideWidth`.\r\n * @param pad The type of padding algorithm.\r\n *   - `same` and stride 1: output will be of same size as input,\r\n *       regardless of filter size.\r\n *   - `valid`: output will be smaller than input if filter is larger\r\n *       than 1x1.\r\n *   - For more info, see this guide:\r\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\r\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\r\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\r\n *     in which we sample input values across the height and width dimensions\r\n *     in atrous convolution. Defaults to `[1, 1]`. If `rate` is a single\r\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\r\n *     1, then all values of `strides` must be 1.\r\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\r\n *     \"NHWC\". Specify the data format of the input and output data. With the\r\n *     default format \"NHWC\", the data is stored in the order of: [batch,\r\n *     height, width, channels]. Only \"NHWC\" is currently supported.\r\n * @param dimRoundingMode The rounding mode used when computing output\r\n *     dimensions if pad is a number. If none is provided, it will not round\r\n *     and error if the output is of fractional size.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Convolution'}\r\n */\r\nfunction depthwiseConv2d_(x, filter, strides, pad, dataFormat = 'NHWC', dilations = [1, 1], dimRoundingMode) {\r\n    const $x = convertToTensor(x, 'x', 'depthwiseConv2d');\r\n    const $filter = convertToTensor(filter, 'filter', 'depthwiseConv2d');\r\n    let x4D = $x;\r\n    let reshapedTo4D = false;\r\n    if ($x.rank === 3) {\r\n        reshapedTo4D = true;\r\n        x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\r\n    }\r\n    util.assert(x4D.rank === 4, () => `Error in depthwiseConv2d: input must be rank 4, but got ` +\r\n        `rank ${x4D.rank}.`);\r\n    util.assert($filter.rank === 4, () => `Error in depthwiseConv2d: filter must be rank 4, but got rank ` +\r\n        `${$filter.rank}.`);\r\n    util.assert(x4D.shape[3] === $filter.shape[2], () => `Error in depthwiseConv2d: number of input channels ` +\r\n        `(${x4D.shape[3]}) must match the inChannels dimension in ` +\r\n        `filter ${$filter.shape[2]}.`);\r\n    if (dimRoundingMode != null) {\r\n        util.assert(util.isInt(pad), () => `Error in depthwiseConv2d: pad must be an integer when using, ` +\r\n            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\r\n    }\r\n    const forward = (backend, save) => {\r\n        if (dilations == null) {\r\n            dilations = [1, 1];\r\n        }\r\n        util.assert(conv_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\r\n            `1. Got strides ${strides} and dilations '${dilations}'`);\r\n        const convInfo = conv_util.computeConv2DInfo(x4D.shape, $filter.shape, strides, dilations, pad, dimRoundingMode, true /* depthwise */);\r\n        const res = backend.depthwiseConv2D(x4D, $filter, convInfo);\r\n        save([x4D, $filter]);\r\n        return res;\r\n    };\r\n    const inputs = { x: x4D, filter: $filter };\r\n    const attrs = { strides, pad, dataFormat, dilations, dimRoundingMode };\r\n    const res = ENGINE.runKernelFunc(forward, inputs, null /* grad */, DepthwiseConv2dNative, attrs);\r\n    if (reshapedTo4D) {\r\n        return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\r\n    }\r\n    return res;\r\n}\r\nexport const depthwiseConv2d = op({ depthwiseConv2d_ });\r\n//# sourceMappingURL=depthwise_conv2d.js.map"]},"metadata":{},"sourceType":"module"}