{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { Step } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\r\n * Computes step of the input `tf.Tensor` element-wise: `x > 0 ? 1 : alpha * x`\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([0, 2, -1, -3]);\r\n *\r\n * x.step(.5).print();  // or tf.step(x, .5)\r\n * ```\r\n * @param x The input tensor.\r\n * @param alpha The gradient when input is negative.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Basic math'}\r\n */\n\nfunction step_(x, alpha = 0.0) {\n  const $x = convertToTensor(x, 'x', 'step');\n  const inputs = {\n    x: $x\n  };\n  const attrs = {\n    alpha\n  };\n  return ENGINE.runKernelFunc(backend => backend.step($x, alpha), inputs, null\n  /* grad */\n  , Step, attrs);\n}\n\nexport const step = op({\n  step_\n});","map":{"version":3,"sources":["../../src/ops/step.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,MAAR,QAAqB,WAArB;AACA,SAAQ,IAAR,QAA0C,iBAA1C;AAIA,SAAQ,eAAR,QAA8B,oBAA9B;AAGA,SAAQ,EAAR,QAAiB,aAAjB;AAEA;;;;;;;;;;;;AAYG;;AACH,SAAS,KAAT,CAAiC,CAAjC,EAAkD,KAAK,GAAG,GAA1D,EAA6D;AAC3D,QAAM,EAAE,GAAG,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,MAAT,CAA1B;AAEA,QAAM,MAAM,GAAe;AAAC,IAAA,CAAC,EAAE;AAAJ,GAA3B;AACA,QAAM,KAAK,GAAc;AAAC,IAAA;AAAD,GAAzB;AAEA,SAAO,MAAM,CAAC,aAAP,CACH,OAAO,IAAI,OAAO,CAAC,IAAR,CAAa,EAAb,EAAiB,KAAjB,CADR,EACiC,MADjC,EAEH;AAAK;AAFF,IAEc,IAFd,EAEoB,KAFpB,CAAP;AAGD;;AACD,OAAO,MAAM,IAAI,GAAG,EAAE,CAAC;AAAC,EAAA;AAAD,CAAD,CAAf","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { ENGINE } from '../engine';\r\nimport { Step } from '../kernel_names';\r\nimport { convertToTensor } from '../tensor_util_env';\r\nimport { op } from './operation';\r\n/**\r\n * Computes step of the input `tf.Tensor` element-wise: `x > 0 ? 1 : alpha * x`\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([0, 2, -1, -3]);\r\n *\r\n * x.step(.5).print();  // or tf.step(x, .5)\r\n * ```\r\n * @param x The input tensor.\r\n * @param alpha The gradient when input is negative.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Basic math'}\r\n */\r\nfunction step_(x, alpha = 0.0) {\r\n    const $x = convertToTensor(x, 'x', 'step');\r\n    const inputs = { x: $x };\r\n    const attrs = { alpha };\r\n    return ENGINE.runKernelFunc(backend => backend.step($x, alpha), inputs, null /* grad */, Step, attrs);\r\n}\r\nexport const step = op({ step_ });\r\n//# sourceMappingURL=step.js.map"]},"metadata":{},"sourceType":"module"}