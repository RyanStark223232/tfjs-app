{"ast":null,"code":"import { convertToTensor } from '../../tensor_util_env';\nimport { assertShapesMatch } from '../../util';\nimport { Reduction } from '../loss_ops_utils';\nimport { mul } from '../mul';\nimport { op } from '../operation';\nimport { scalar } from '../scalar';\nimport { sub } from '../sub';\nimport { sum } from '../sum';\nimport { computeWeightedLoss } from './compute_weighted_loss';\n/**\r\n * Computes the cosine distance loss between two tensors.\r\n *\r\n * @param labels The ground truth output tensor, same dimensions as\r\n *    'predictions'.\r\n * @param predictions The predicted outputs.\r\n * @param axis The dimension along which the cosine distance is computed.\r\n * @param weights Tensor whose rank is either 0, or the same rank as\r\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\r\n *    must be either `1`, or the same as the corresponding `losses`\r\n *    dimension).\r\n * @param reduction Type of reduction to apply to loss. Should be of type\r\n *    `Reduction`\r\n *\r\n * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}\r\n */\n\nfunction cosineDistance_(labels, predictions, axis, weights) {\n  var reduction = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : Reduction.SUM_BY_NONZERO_WEIGHTS;\n  var $labels = convertToTensor(labels, 'labels', 'cosineDistance');\n  var $predictions = convertToTensor(predictions, 'predictions', 'cosineDistance');\n  var $weights = null;\n\n  if (weights != null) {\n    $weights = convertToTensor(weights, 'weights', 'cosineDistance');\n  }\n\n  assertShapesMatch($labels.shape, $predictions.shape, 'Error in cosineDistance: ');\n  var one = scalar(1);\n  var losses = sub(one, sum(mul($labels, $predictions), axis, true));\n  return computeWeightedLoss(losses, $weights, reduction);\n}\n\nexport var cosineDistance = op({\n  cosineDistance_: cosineDistance_\n});","map":{"version":3,"sources":["../../../src/ops/losses/cosine_distance.ts"],"names":[],"mappings":"AAiBA,SAAQ,eAAR,QAA8B,uBAA9B;AAEA,SAAQ,iBAAR,QAAgC,YAAhC;AACA,SAAQ,SAAR,QAAwB,mBAAxB;AACA,SAAQ,GAAR,QAAkB,QAAlB;AACA,SAAQ,EAAR,QAAiB,cAAjB;AACA,SAAQ,MAAR,QAAqB,WAArB;AACA,SAAQ,GAAR,QAAkB,QAAlB;AACA,SAAQ,GAAR,QAAkB,QAAlB;AAEA,SAAQ,mBAAR,QAAkC,yBAAlC;AAEA;;;;;;;;;;;;;;;AAeG;;AACH,SAAS,eAAT,CACI,MADJ,EAC0B,WAD1B,EACqD,IADrD,EAEI,OAFJ,EAGgD;AAAA,MAA5C,SAA4C,uEAAhC,SAAS,CAAC,sBAAsB;AAC9C,MAAM,OAAO,GAAG,eAAe,CAAC,MAAD,EAAS,QAAT,EAAmB,gBAAnB,CAA/B;AACA,MAAM,YAAY,GACd,eAAe,CAAC,WAAD,EAAc,aAAd,EAA6B,gBAA7B,CADnB;AAEA,MAAI,QAAQ,GAAW,IAAvB;;AACA,MAAI,OAAO,IAAI,IAAf,EAAqB;AACnB,IAAA,QAAQ,GAAG,eAAe,CAAC,OAAD,EAAU,SAAV,EAAqB,gBAArB,CAA1B;AACD;;AACD,EAAA,iBAAiB,CACb,OAAO,CAAC,KADK,EACE,YAAY,CAAC,KADf,EACsB,2BADtB,CAAjB;AAGA,MAAM,GAAG,GAAG,MAAM,CAAC,CAAD,CAAlB;AACA,MAAM,MAAM,GAAG,GAAG,CAAC,GAAD,EAAM,GAAG,CAAC,GAAG,CAAC,OAAD,EAAU,YAAV,CAAJ,EAA6B,IAA7B,EAAmC,IAAnC,CAAT,CAAlB;AACA,SAAO,mBAAmB,CAAC,MAAD,EAAS,QAAT,EAAmB,SAAnB,CAA1B;AACD;;AACD,OAAO,IAAM,cAAc,GAAG,EAAE,CAAC;AAAC,EAAA,eAAe,EAAf;AAAD,CAAD,CAAzB","sourceRoot":"","sourcesContent":["import { convertToTensor } from '../../tensor_util_env';\r\nimport { assertShapesMatch } from '../../util';\r\nimport { Reduction } from '../loss_ops_utils';\r\nimport { mul } from '../mul';\r\nimport { op } from '../operation';\r\nimport { scalar } from '../scalar';\r\nimport { sub } from '../sub';\r\nimport { sum } from '../sum';\r\nimport { computeWeightedLoss } from './compute_weighted_loss';\r\n/**\r\n * Computes the cosine distance loss between two tensors.\r\n *\r\n * @param labels The ground truth output tensor, same dimensions as\r\n *    'predictions'.\r\n * @param predictions The predicted outputs.\r\n * @param axis The dimension along which the cosine distance is computed.\r\n * @param weights Tensor whose rank is either 0, or the same rank as\r\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\r\n *    must be either `1`, or the same as the corresponding `losses`\r\n *    dimension).\r\n * @param reduction Type of reduction to apply to loss. Should be of type\r\n *    `Reduction`\r\n *\r\n * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}\r\n */\r\nfunction cosineDistance_(labels, predictions, axis, weights, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {\r\n    const $labels = convertToTensor(labels, 'labels', 'cosineDistance');\r\n    const $predictions = convertToTensor(predictions, 'predictions', 'cosineDistance');\r\n    let $weights = null;\r\n    if (weights != null) {\r\n        $weights = convertToTensor(weights, 'weights', 'cosineDistance');\r\n    }\r\n    assertShapesMatch($labels.shape, $predictions.shape, 'Error in cosineDistance: ');\r\n    const one = scalar(1);\r\n    const losses = sub(one, sum(mul($labels, $predictions), axis, true));\r\n    return computeWeightedLoss(losses, $weights, reduction);\r\n}\r\nexport const cosineDistance = op({ cosineDistance_ });\r\n//# sourceMappingURL=cosine_distance.js.map"]},"metadata":{},"sourceType":"module"}