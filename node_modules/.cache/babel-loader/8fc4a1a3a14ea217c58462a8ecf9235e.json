{"ast":null,"code":"import _classCallCheck from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport var PadProgram = function PadProgram(xShape, paddings, constantValue) {\n  _classCallCheck(this, PadProgram);\n\n  this.variableNames = ['x'];\n  this.outputShape = paddings.map(function (p, i) {\n    return p[0]\n    /* beforePad */\n    + xShape[i] + p[1];\n  }\n  /* afterPad */\n  );\n  var rank = xShape.length;\n  var type = getCoordsDataType(rank);\n  var start = paddings.map(function (p) {\n    return p[0];\n  }).join(',');\n  var end = paddings.map(function (p, i) {\n    return p[0] + xShape[i];\n  }).join(',');\n  var unpackedCoords = ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);\n\n  if (rank === 1) {\n    this.userCode = \"\\n        int start = \".concat(start, \";\\n        int end = \").concat(end, \";\\n\\n        void main() {\\n          int outC = getOutputCoords();\\n          if (outC < start || outC >= end) {\\n            setOutput(float(\").concat(constantValue, \"));\\n          } else {\\n            setOutput(getX(outC - start));\\n          }\\n        }\\n      \");\n    return;\n  }\n\n  this.userCode = \"\\n      \".concat(type, \" start = \").concat(type, \"(\").concat(start, \");\\n      \").concat(type, \" end = \").concat(type, \"(\").concat(end, \");\\n\\n      void main() {\\n        \").concat(type, \" outC = getOutputCoords();\\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\\n          setOutput(float(\").concat(constantValue, \"));\\n        } else {\\n          \").concat(type, \" coords = outC - start;\\n          setOutput(getX(\").concat(unpackedCoords, \"));\\n        }\\n      }\\n    \");\n};","map":{"version":3,"sources":["../src/pad_gpu.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AAGH,SAAQ,iBAAR,QAAgC,mBAAhC;AAEA,WAAa,UAAb,GAKE,oBACI,MADJ,EACsB,QADtB,EAEI,aAFJ,EAEyB;AAAA;;AANzB,OAAA,aAAA,GAAgB,CAAC,GAAD,CAAhB;AAOE,OAAK,WAAL,GAAmB,QAAQ,CAAC,GAAT,CACf,UAAC,CAAD,EAAI,CAAJ;AAAA,WAAU,CAAC,CAAC,CAAD;AAAI;AAAL,MAAuB,MAAM,CAAC,CAAD,CAA7B,GAAmC,CAAC,CAAC,CAAD,CAA9C;AAAA;AAAkD;AADnC,GAAnB;AAEA,MAAM,IAAI,GAAG,MAAM,CAAC,MAApB;AACA,MAAM,IAAI,GAAG,iBAAiB,CAAC,IAAD,CAA9B;AAEA,MAAM,KAAK,GAAG,QAAQ,CAAC,GAAT,CAAa,UAAA,CAAC;AAAA,WAAI,CAAC,CAAC,CAAD,CAAL;AAAA,GAAd,EAAwB,IAAxB,CAA6B,GAA7B,CAAd;AACA,MAAM,GAAG,GAAG,QAAQ,CAAC,GAAT,CAAa,UAAC,CAAD,EAAI,CAAJ;AAAA,WAAU,CAAC,CAAC,CAAD,CAAD,GAAO,MAAM,CAAC,CAAD,CAAvB;AAAA,GAAb,EAAyC,IAAzC,CAA8C,GAA9C,CAAZ;AACA,MAAM,cAAc,GAChB,CAAC,WAAD,EAAc,WAAd,EAA2B,WAA3B,EAAwC,WAAxC,EAAqD,KAArD,CAA2D,CAA3D,EAA8D,IAA9D,CADJ;;AAGA,MAAI,IAAI,KAAK,CAAb,EAAgB;AACd,SAAK,QAAL,mCACgB,KADhB,kCAEc,GAFd,4JAOwB,aAPxB;AAaA;AACD;;AACD,OAAK,QAAL,qBACI,IADJ,sBACoB,IADpB,cAC4B,KAD5B,uBAEI,IAFJ,oBAEkB,IAFlB,cAE0B,GAF1B,gDAKM,IALN,kJAOwB,aAPxB,8CASQ,IATR,+DAUuB,cAVvB;AAcD,CAhDH","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2017 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { getCoordsDataType } from './shader_compiler';\r\nexport class PadProgram {\r\n    constructor(xShape, paddings, constantValue) {\r\n        this.variableNames = ['x'];\r\n        this.outputShape = paddings.map((p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\r\n        const rank = xShape.length;\r\n        const type = getCoordsDataType(rank);\r\n        const start = paddings.map(p => p[0]).join(',');\r\n        const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\r\n        const unpackedCoords = ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);\r\n        if (rank === 1) {\r\n            this.userCode = `\r\n        int start = ${start};\r\n        int end = ${end};\r\n\r\n        void main() {\r\n          int outC = getOutputCoords();\r\n          if (outC < start || outC >= end) {\r\n            setOutput(float(${constantValue}));\r\n          } else {\r\n            setOutput(getX(outC - start));\r\n          }\r\n        }\r\n      `;\r\n            return;\r\n        }\r\n        this.userCode = `\r\n      ${type} start = ${type}(${start});\r\n      ${type} end = ${type}(${end});\r\n\r\n      void main() {\r\n        ${type} outC = getOutputCoords();\r\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\r\n          setOutput(float(${constantValue}));\r\n        } else {\r\n          ${type} coords = outC - start;\r\n          setOutput(getX(${unpackedCoords}));\r\n        }\r\n      }\r\n    `;\r\n    }\r\n}\r\n//# sourceMappingURL=pad_gpu.js.map"]},"metadata":{},"sourceType":"module"}