{"ast":null,"code":"import _classCallCheck from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nexport var LRNProgram = function LRNProgram(xShape, radius, bias, alpha, beta) {\n  _classCallCheck(this, LRNProgram);\n\n  this.variableNames = ['x'];\n  this.outputShape = [];\n  var rad = radius;\n  var maxD = xShape[3] - 1;\n  this.outputShape = xShape; // optimize pow(bias + alpha * sum, -beta)\n  // src: https://github.com/tensorflow/tensorflow/..\n  // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..\n  // tensorflow/core/kernels/mkl_lrn_op.cc#L320\n\n  var powOperator;\n  var basis = \"float(\".concat(bias, \") + float(\").concat(alpha, \") * sum\");\n\n  if (beta === 0.5) {\n    powOperator = \"inversesqrt(\".concat(basis, \")\");\n  } else if (beta === 1.0) {\n    powOperator = \"1.0/(\".concat(basis, \")\");\n  } else {\n    powOperator = \"exp(log(\".concat(basis, \") * float(-\").concat(beta, \"));\");\n  }\n\n  this.userCode = \"\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int r = coords[1];\\n        int c = coords[2];\\n        int d = coords[3];\\n        float x = getX(b, r, c, d);\\n        float sum = 0.0;\\n        for (int j = -\".concat(rad, \"; j <= \").concat(rad, \"; j++) {\\n          int idx = d + j;\\n          if (idx >= 0 && idx <=  \").concat(maxD, \") {\\n            float z = getX(b, r, c, idx);\\n            sum += z * z;\\n          }\\n        }\\n        float val = x * \").concat(powOperator, \";\\n        setOutput(val);\\n      }\\n    \");\n};","map":{"version":3,"sources":["../src/lrn_gpu.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AAIH,WAAa,UAAb,GAKE,oBACI,MADJ,EACsB,MADtB,EACsC,IADtC,EACoD,KADpD,EAEI,IAFJ,EAEgB;AAAA;;AANhB,OAAA,aAAA,GAAgB,CAAC,GAAD,CAAhB;AACA,OAAA,WAAA,GAAwB,EAAxB;AAME,MAAM,GAAG,GAAG,MAAZ;AACA,MAAM,IAAI,GAAG,MAAM,CAAC,CAAD,CAAN,GAAY,CAAzB;AACA,OAAK,WAAL,GAAmB,MAAnB,CAHc,CAKd;AACA;AACA;AACA;;AACA,MAAI,WAAJ;AACA,MAAM,KAAK,mBAAY,IAAZ,uBAA6B,KAA7B,YAAX;;AACA,MAAI,IAAI,KAAK,GAAb,EAAkB;AAChB,IAAA,WAAW,yBAAkB,KAAlB,MAAX;AACD,GAFD,MAEO,IAAI,IAAI,KAAK,GAAb,EAAkB;AACvB,IAAA,WAAW,kBAAW,KAAX,MAAX;AACD,GAFM,MAEA;AACL,IAAA,WAAW,qBAAc,KAAd,wBAAiC,IAAjC,QAAX;AACD;;AAED,OAAK,QAAL,oRASoB,GATpB,oBASiC,GATjC,qFAWgC,IAXhC,wIAgBsB,WAhBtB;AAoBD,CA9CH","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2017 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nexport class LRNProgram {\r\n    constructor(xShape, radius, bias, alpha, beta) {\r\n        this.variableNames = ['x'];\r\n        this.outputShape = [];\r\n        const rad = radius;\r\n        const maxD = xShape[3] - 1;\r\n        this.outputShape = xShape;\r\n        // optimize pow(bias + alpha * sum, -beta)\r\n        // src: https://github.com/tensorflow/tensorflow/..\r\n        // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..\r\n        // tensorflow/core/kernels/mkl_lrn_op.cc#L320\r\n        let powOperator;\r\n        const basis = `float(${bias}) + float(${alpha}) * sum`;\r\n        if (beta === 0.5) {\r\n            powOperator = `inversesqrt(${basis})`;\r\n        }\r\n        else if (beta === 1.0) {\r\n            powOperator = `1.0/(${basis})`;\r\n        }\r\n        else {\r\n            powOperator = `exp(log(${basis}) * float(-${beta}));`;\r\n        }\r\n        this.userCode = `\r\n      void main() {\r\n        ivec4 coords = getOutputCoords();\r\n        int b = coords[0];\r\n        int r = coords[1];\r\n        int c = coords[2];\r\n        int d = coords[3];\r\n        float x = getX(b, r, c, d);\r\n        float sum = 0.0;\r\n        for (int j = -${rad}; j <= ${rad}; j++) {\r\n          int idx = d + j;\r\n          if (idx >= 0 && idx <=  ${maxD}) {\r\n            float z = getX(b, r, c, idx);\r\n            sum += z * z;\r\n          }\r\n        }\r\n        float val = x * ${powOperator};\r\n        setOutput(val);\r\n      }\r\n    `;\r\n    }\r\n}\r\n//# sourceMappingURL=lrn_gpu.js.map"]},"metadata":{},"sourceType":"module"}