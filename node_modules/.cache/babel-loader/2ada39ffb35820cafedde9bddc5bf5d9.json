{"ast":null,"code":"// Points for fingers\n\n/*\r\nconst fingerJoints = {\r\n    thumb: [0, 1, 2, 3, 4],\r\n    indexFinger: [0, 5, 6, 7, 8],\r\n    middleFinger: [0, 9, 10, 11, 12],\r\n    ringFinger: [0, 13, 14, 15, 16],\r\n    pinky: [0, 17, 18, 19, 20],\r\n  };*/\nimport * as posenet from \"@tensorflow-models/posenet\";\nimport * as tf from \"@tensorflow/tfjs\";\nconst color = \"aqua\";\nconst lineWidth = 2;\nconst style = {\n  0: {\n    color: \"gold\",\n    size: 15\n  },\n  1: {\n    color: \"gold\",\n    size: 6\n  },\n  2: {\n    color: \"gold\",\n    size: 10\n  },\n  3: {\n    color: \"gold\",\n    size: 6\n  },\n  4: {\n    color: \"red\",\n    size: 6\n  },\n  5: {\n    color: \"gold\",\n    size: 10\n  },\n  6: {\n    color: \"gold\",\n    size: 6\n  },\n  7: {\n    color: \"gold\",\n    size: 6\n  },\n  8: {\n    color: \"red\",\n    size: 6\n  },\n  9: {\n    color: \"gold\",\n    size: 10\n  },\n  10: {\n    color: \"gold\",\n    size: 6\n  },\n  11: {\n    color: \"gold\",\n    size: 6\n  },\n  12: {\n    color: \"gold\",\n    size: 6\n  },\n  13: {\n    color: \"gold\",\n    size: 10\n  },\n  14: {\n    color: \"gold\",\n    size: 6\n  },\n  15: {\n    color: \"gold\",\n    size: 6\n  },\n  16: {\n    color: \"gold\",\n    size: 6\n  },\n  17: {\n    color: \"gold\",\n    size: 10\n  },\n  18: {\n    color: \"gold\",\n    size: 6\n  },\n  19: {\n    color: \"gold\",\n    size: 6\n  },\n  20: {\n    color: \"gold\",\n    size: 6\n  }\n}; // Drawing function\n\nexport const writeText = (ctx, info, style = {}) => {\n  const {\n    text,\n    x,\n    y\n  } = info;\n  const {\n    fontSize = 50,\n    fontFamily = 'Arial',\n    color = 'red',\n    textAlign = 'center',\n    textBaseline = 'center'\n  } = style;\n  ctx.beginPath();\n  ctx.font = fontSize + 'px ' + fontFamily;\n  ctx.textAlign = textAlign;\n  ctx.textBaseline = textBaseline;\n  ctx.fillStyle = color;\n  ctx.fillText(text, x, y);\n  ctx.stroke();\n};\nexport const drawHand = (predictions, ctx) => {\n  // Check if we have predictions\n  if (predictions.length > 0) {\n    // Loop through each prediction\n    predictions.forEach(prediction => {\n      // Grab landmarks\n      const landmarks = prediction.landmarks;\n      ctx.beginPath();\n      ctx.moveTo(landmarks[8][0], landmarks[8][1]);\n      ctx.lineTo(landmarks[4][0], landmarks[4][1]);\n      ctx.strokeStyle = \"plum\";\n      ctx.lineWidth = 4;\n      ctx.stroke(); // Loop through landmarks and draw em\n\n      for (let i = 0; i < landmarks.length; i++) {\n        // Get x point\n        const x = landmarks[i][0]; // Get y point\n\n        const y = landmarks[i][1]; // Start drawing\n\n        ctx.beginPath();\n        ctx.arc(x, y, style[i][\"size\"], 0, 3 * Math.PI); // Set line color\n\n        ctx.fillStyle = style[i][\"color\"];\n        ctx.fill();\n      }\n    });\n  }\n};\n\nfunction toTuple({\n  y,\n  x\n}) {\n  return [y, x];\n}\n\nexport function drawPoint(ctx, y, x, r, color) {\n  ctx.beginPath();\n  ctx.arc(x, y, r, 0, 2 * Math.PI);\n  ctx.fillStyle = color;\n  ctx.fill();\n}\n/**\r\n * Draws a line on a canvas, i.e. a joint\r\n */\n\nexport function drawSegment([ay, ax], [by, bx], color, scale, ctx) {\n  ctx.beginPath();\n  ctx.moveTo(ax * scale, ay * scale);\n  ctx.lineTo(bx * scale, by * scale);\n  ctx.lineWidth = lineWidth;\n  ctx.strokeStyle = color;\n  ctx.stroke();\n}\n/**\r\n * Draws a pose skeleton by looking up all adjacent keypoints/joints\r\n */\n\nexport function drawSkeleton(keypoints, minConfidence, ctx, scale = 1) {\n  const adjacentKeyPoints = posenet.getAdjacentKeyPoints(keypoints, minConfidence);\n  adjacentKeyPoints.forEach(keypoints => {\n    drawSegment(toTuple(keypoints[0].position), toTuple(keypoints[1].position), color, scale, ctx);\n  });\n}\n/**\r\n * Draw pose keypoints onto a canvas\r\n */\n\nexport function drawKeypoints(keypoints, minConfidence, ctx, scale = 1) {\n  for (let i = 0; i < keypoints.length; i++) {\n    const keypoint = keypoints[i];\n\n    if (keypoint.score < minConfidence) {\n      continue;\n    }\n\n    const {\n      y,\n      x\n    } = keypoint.position;\n    drawPoint(ctx, y * scale, x * scale, 3, color);\n  }\n}","map":{"version":3,"sources":["C:/Users/wongh/finger/src/utilities.js"],"names":["posenet","tf","color","lineWidth","style","size","writeText","ctx","info","text","x","y","fontSize","fontFamily","textAlign","textBaseline","beginPath","font","fillStyle","fillText","stroke","drawHand","predictions","length","forEach","prediction","landmarks","moveTo","lineTo","strokeStyle","i","arc","Math","PI","fill","toTuple","drawPoint","r","drawSegment","ay","ax","by","bx","scale","drawSkeleton","keypoints","minConfidence","adjacentKeyPoints","getAdjacentKeyPoints","position","drawKeypoints","keypoint","score"],"mappings":"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","sourcesContent":["// Points for fingers\r\n/*\r\nconst fingerJoints = {\r\n    thumb: [0, 1, 2, 3, 4],\r\n    indexFinger: [0, 5, 6, 7, 8],\r\n    middleFinger: [0, 9, 10, 11, 12],\r\n    ringFinger: [0, 13, 14, 15, 16],\r\n    pinky: [0, 17, 18, 19, 20],\r\n  };*/\r\n\r\n  import * as posenet from \"@tensorflow-models/posenet\";\r\n  import * as tf from \"@tensorflow/tfjs\";\r\n\r\n  const color = \"aqua\";\r\n  const lineWidth = 2;\r\n  \r\n  const style = {\r\n    0: { color: \"gold\", size: 15 },\r\n    1: { color: \"gold\", size: 6 },\r\n    2: { color: \"gold\", size: 10 },\r\n    3: { color: \"gold\", size: 6 },\r\n    4: { color: \"red\", size: 6 },\r\n    5: { color: \"gold\", size: 10 },\r\n    6: { color: \"gold\", size: 6 },\r\n    7: { color: \"gold\", size: 6 },\r\n    8: { color: \"red\", size: 6 },\r\n    9: { color: \"gold\", size: 10 },\r\n    10: { color: \"gold\", size: 6 },\r\n    11: { color: \"gold\", size: 6 },\r\n    12: { color: \"gold\", size: 6 },\r\n    13: { color: \"gold\", size: 10 },\r\n    14: { color: \"gold\", size: 6 },\r\n    15: { color: \"gold\", size: 6 },\r\n    16: { color: \"gold\", size: 6 },\r\n    17: { color: \"gold\", size: 10 },\r\n    18: { color: \"gold\", size: 6 },\r\n    19: { color: \"gold\", size: 6 },\r\n    20: { color: \"gold\", size: 6 },\r\n  };\r\n  \r\n  // Drawing function\r\n  export const writeText = (ctx, info, style = {}) => {\r\n    const { text, x, y } = info;\r\n    const { fontSize = 50, fontFamily = 'Arial', color = 'red', textAlign = 'center', textBaseline = 'center' } = style;\r\n   \r\n    ctx.beginPath();\r\n    ctx.font = fontSize + 'px ' + fontFamily;\r\n    ctx.textAlign = textAlign;\r\n    ctx.textBaseline = textBaseline;\r\n    ctx.fillStyle = color;\r\n    ctx.fillText(text, x, y);\r\n    ctx.stroke();\r\n  }\r\n\r\n  export const drawHand = (predictions, ctx) => {\r\n    // Check if we have predictions\r\n    if (predictions.length > 0) {\r\n      // Loop through each prediction\r\n      predictions.forEach((prediction) => {\r\n        // Grab landmarks\r\n        const landmarks = prediction.landmarks;\r\n        ctx.beginPath();\r\n        ctx.moveTo(landmarks[8][0], landmarks[8][1]);\r\n        ctx.lineTo(landmarks[4][0], landmarks[4][1]);\r\n        \r\n        ctx.strokeStyle = \"plum\";\r\n        ctx.lineWidth = 4;\r\n        ctx.stroke();\r\n\r\n        // Loop through landmarks and draw em\r\n        for (let i = 0; i < landmarks.length; i++) {\r\n          // Get x point\r\n          const x = landmarks[i][0];\r\n          // Get y point\r\n          const y = landmarks[i][1];\r\n          // Start drawing\r\n          ctx.beginPath();\r\n          ctx.arc(x, y, style[i][\"size\"], 0, 3 * Math.PI);\r\n  \r\n          // Set line color\r\n          ctx.fillStyle = style[i][\"color\"];\r\n          ctx.fill();\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  function toTuple({ y, x }) {\r\n    return [y, x];\r\n  }\r\n  \r\n  export function drawPoint(ctx, y, x, r, color) {\r\n    ctx.beginPath();\r\n    ctx.arc(x, y, r, 0, 2 * Math.PI);\r\n    ctx.fillStyle = color;\r\n    ctx.fill();\r\n  }\r\n  \r\n  /**\r\n   * Draws a line on a canvas, i.e. a joint\r\n   */\r\n  export function drawSegment([ay, ax], [by, bx], color, scale, ctx) {\r\n    ctx.beginPath();\r\n    ctx.moveTo(ax * scale, ay * scale);\r\n    ctx.lineTo(bx * scale, by * scale);\r\n    ctx.lineWidth = lineWidth;\r\n    ctx.strokeStyle = color;\r\n    ctx.stroke();\r\n  }\r\n  \r\n  /**\r\n   * Draws a pose skeleton by looking up all adjacent keypoints/joints\r\n   */\r\n  export function drawSkeleton(keypoints, minConfidence, ctx, scale = 1) {\r\n    const adjacentKeyPoints = posenet.getAdjacentKeyPoints(\r\n      keypoints,\r\n      minConfidence\r\n    );\r\n  \r\n    adjacentKeyPoints.forEach((keypoints) => {\r\n      drawSegment(\r\n        toTuple(keypoints[0].position),\r\n        toTuple(keypoints[1].position),\r\n        color,\r\n        scale,\r\n        ctx\r\n      );\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * Draw pose keypoints onto a canvas\r\n   */\r\n  export function drawKeypoints(keypoints, minConfidence, ctx, scale = 1) {\r\n    for (let i = 0; i < keypoints.length; i++) {\r\n      const keypoint = keypoints[i];\r\n  \r\n      if (keypoint.score < minConfidence) {\r\n        continue;\r\n      }\r\n  \r\n      const { y, x } = keypoint.position;\r\n      drawPoint(ctx, y * scale, x * scale, 3, color);\r\n    }\r\n  }"]},"metadata":{},"sourceType":"module"}