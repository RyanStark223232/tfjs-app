{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { Conv3DBackpropInputV2 } from '../kernel_names';\nimport * as util from '../util';\nimport * as conv_util from './conv_util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\r\n * Computes the derivative of the input of a 3D convolution.\r\n *\r\n * @param xShape The shape of the input: [batch, depth, height, width,\r\n * in_channels]. If length of 4, batch of 1 is assumed.\r\n * @param dy The derivative of the output, of rank 5 or rank 4 of shape\r\n *   `[batch, outDepth, outHeight, outWidth, in_channels]`.\r\n * If rank 4, batch of 1 is assumed.\r\n * @param filter The filter, rank 5, of shape\r\n *     `[filterDepth, filterHeight, filterWidth, inDepth, outDepth]`.\r\n * @param strides The strides of the convolution: `[strideDepth, strideHeight,\r\n * strideWidth]`.\r\n * @param pad The type of padding algorithm used:\r\n *    - `same` and stride 1: output will be of same size as input,\r\n *       regardless of filter size.\r\n *    - `valid`: output will be smaller than input if filter is larger\r\n *       than 1x1.\r\n */\n\nfunction conv3DBackpropInput_(xShape, dy, filter, strides, pad) {\n  util.assert(xShape.length === dy.rank, function () {\n    return \"Length of inShape \" + \"(\".concat(xShape.length, \") and rank of dy (\").concat(dy.rank, \") must match\");\n  });\n  var xShape5D = xShape;\n  var dy5D = dy;\n  var reshapedTo5D = false;\n\n  if (dy.rank === 4) {\n    reshapedTo5D = true;\n    dy5D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2], dy.shape[3]]);\n    xShape5D = [1, xShape[0], xShape[1], xShape[2], xShape[3]];\n  }\n\n  var inDepth = xShape5D[4];\n  var outDepth = dy5D.shape[4];\n  util.assert(xShape5D.length === 5, function () {\n    return \"Error in conv3dDerInput: inShape must be length 5, but got length \" + \"\".concat(xShape5D.length, \".\");\n  });\n  util.assert(dy5D.rank === 5, function () {\n    return \"Error in conv3dDerInput: dy must be rank 5, but got \" + \"rank \".concat(dy5D.rank);\n  });\n  util.assert(filter.rank === 5, function () {\n    return \"Error in conv3dDerInput: filter must be rank 5, but got \" + \"rank \".concat(filter.rank);\n  });\n  util.assert(inDepth === filter.shape[3], function () {\n    return \"Error in conv3dDerInput: depth of input (\".concat(inDepth, \") must \") + \"match input depth for filter \".concat(filter.shape[3], \".\");\n  });\n  util.assert(outDepth === filter.shape[4], function () {\n    return \"Error in conv3dDerInput: depth of output (\".concat(outDepth, \") must \") + \"match output depth for filter \".concat(filter.shape[4], \".\");\n  });\n\n  var forward = function forward(backend) {\n    var dilations = 1;\n    var convInfo = conv_util.computeConv3DInfo(xShape5D, filter.shape, strides, dilations, pad);\n    return backend.conv3dDerInput(dy5D, filter, convInfo);\n  };\n\n  var inputs = {\n    dy: dy5D,\n    filter: filter\n  };\n  var attrs = {\n    pad: pad,\n    strides: strides,\n    inputShape: xShape5D\n  };\n  var res = ENGINE.runKernelFunc(forward, inputs, null, Conv3DBackpropInputV2, attrs);\n\n  if (reshapedTo5D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);\n  }\n\n  return res;\n}\n\nexport var conv3DBackpropInput = op({\n  conv3DBackpropInput_: conv3DBackpropInput_\n});","map":{"version":3,"sources":["../../src/ops/conv3d_backprop_input.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { ENGINE } from '../engine';\r\nimport { Conv3DBackpropInputV2 } from '../kernel_names';\r\nimport * as util from '../util';\r\nimport * as conv_util from './conv_util';\r\nimport { op } from './operation';\r\nimport { reshape } from './reshape';\r\n/**\r\n * Computes the derivative of the input of a 3D convolution.\r\n *\r\n * @param xShape The shape of the input: [batch, depth, height, width,\r\n * in_channels]. If length of 4, batch of 1 is assumed.\r\n * @param dy The derivative of the output, of rank 5 or rank 4 of shape\r\n *   `[batch, outDepth, outHeight, outWidth, in_channels]`.\r\n * If rank 4, batch of 1 is assumed.\r\n * @param filter The filter, rank 5, of shape\r\n *     `[filterDepth, filterHeight, filterWidth, inDepth, outDepth]`.\r\n * @param strides The strides of the convolution: `[strideDepth, strideHeight,\r\n * strideWidth]`.\r\n * @param pad The type of padding algorithm used:\r\n *    - `same` and stride 1: output will be of same size as input,\r\n *       regardless of filter size.\r\n *    - `valid`: output will be smaller than input if filter is larger\r\n *       than 1x1.\r\n */\r\nfunction conv3DBackpropInput_(xShape, dy, filter, strides, pad) {\r\n    util.assert(xShape.length === dy.rank, () => `Length of inShape ` +\r\n        `(${xShape.length}) and rank of dy (${dy.rank}) must match`);\r\n    let xShape5D = xShape;\r\n    let dy5D = dy;\r\n    let reshapedTo5D = false;\r\n    if (dy.rank === 4) {\r\n        reshapedTo5D = true;\r\n        dy5D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2], dy.shape[3]]);\r\n        xShape5D = [1, xShape[0], xShape[1], xShape[2], xShape[3]];\r\n    }\r\n    const inDepth = xShape5D[4];\r\n    const outDepth = dy5D.shape[4];\r\n    util.assert(xShape5D.length === 5, () => `Error in conv3dDerInput: inShape must be length 5, but got length ` +\r\n        `${xShape5D.length}.`);\r\n    util.assert(dy5D.rank === 5, () => `Error in conv3dDerInput: dy must be rank 5, but got ` +\r\n        `rank ${dy5D.rank}`);\r\n    util.assert(filter.rank === 5, () => `Error in conv3dDerInput: filter must be rank 5, but got ` +\r\n        `rank ${filter.rank}`);\r\n    util.assert(inDepth === filter.shape[3], () => `Error in conv3dDerInput: depth of input (${inDepth}) must ` +\r\n        `match input depth for filter ${filter.shape[3]}.`);\r\n    util.assert(outDepth === filter.shape[4], () => `Error in conv3dDerInput: depth of output (${outDepth}) must ` +\r\n        `match output depth for filter ${filter.shape[4]}.`);\r\n    const forward = backend => {\r\n        const dilations = 1;\r\n        const convInfo = conv_util.computeConv3DInfo(xShape5D, filter.shape, strides, dilations, pad);\r\n        return backend.conv3dDerInput(dy5D, filter, convInfo);\r\n    };\r\n    const inputs = { dy: dy5D, filter };\r\n    const attrs = { pad, strides, inputShape: xShape5D };\r\n    const res = ENGINE.runKernelFunc(forward, inputs, null, Conv3DBackpropInputV2, attrs);\r\n    if (reshapedTo5D) {\r\n        return reshape(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);\r\n    }\r\n    return res;\r\n}\r\nexport const conv3DBackpropInput = op({ conv3DBackpropInput_ });\r\n//# sourceMappingURL=conv3d_backprop_input.js.map"]},"metadata":{},"sourceType":"module"}