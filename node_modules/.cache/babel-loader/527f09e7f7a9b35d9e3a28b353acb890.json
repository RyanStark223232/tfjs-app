{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nexport class AddNPackedProgram {\n  constructor(outputShape, shapes) {\n    this.outputShape = [];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    this.outputShape = outputShape;\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n    const snippets = []; // Get target elements from every input tensor.\n\n    this.variableNames.forEach(variable => {\n      snippets.push(`vec4 v${variable} = get${variable}AtOutCoords();`);\n    }); // Calculate the sum of all elements.\n\n    const operation = this.variableNames.map(variable => {\n      return `v${variable}`;\n    }).join(' + ');\n    this.userCode = `\n      void main() {\n        ${snippets.join('\\n        ')}\n\n        vec4 result = ${operation};\n        setOutput(result);\n      }\n    `;\n  }\n\n}","map":{"version":3,"sources":["../src/addn_packed_gpu.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAIH,OAAM,MAAO,iBAAP,CAAwB;AAO5B,EAAA,WAAA,CAAY,WAAZ,EAAmC,MAAnC,EAAqD;AALrD,SAAA,WAAA,GAAwB,EAAxB;AAEA,SAAA,YAAA,GAAe,IAAf;AACA,SAAA,YAAA,GAAe,IAAf;AAGE,SAAK,WAAL,GAAmB,WAAnB;AACA,SAAK,aAAL,GAAqB,MAAM,CAAC,GAAP,CAAW,CAAC,CAAD,EAAI,CAAJ,KAAU,IAAI,CAAC,EAA1B,CAArB;AAEA,UAAM,QAAQ,GAAa,EAA3B,CAJmD,CAKnD;;AACA,SAAK,aAAL,CAAmB,OAAnB,CAA2B,QAAQ,IAAG;AACpC,MAAA,QAAQ,CAAC,IAAT,CAAc,SAAS,QAAQ,SAAS,QAAQ,gBAAhD;AACD,KAFD,EANmD,CAUnD;;AACA,UAAM,SAAS,GAAG,KAAK,aAAL,CACK,GADL,CACS,QAAQ,IAAG;AACd,aAAO,IAAI,QAAQ,EAAnB;AACD,KAHL,EAIK,IAJL,CAIU,KAJV,CAAlB;AAMA,SAAK,QAAL,GAAgB;;UAEV,QAAQ,CAAC,IAAT,CAAc,YAAd,CAA2B;;wBAEb,SAAS;;;AAG5B,KAPD;AAQD;;AAhC2B","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nexport class AddNPackedProgram {\r\n    constructor(outputShape, shapes) {\r\n        this.outputShape = [];\r\n        this.packedInputs = true;\r\n        this.packedOutput = true;\r\n        this.outputShape = outputShape;\r\n        this.variableNames = shapes.map((_, i) => `T${i}`);\r\n        const snippets = [];\r\n        // Get target elements from every input tensor.\r\n        this.variableNames.forEach(variable => {\r\n            snippets.push(`vec4 v${variable} = get${variable}AtOutCoords();`);\r\n        });\r\n        // Calculate the sum of all elements.\r\n        const operation = this.variableNames\r\n            .map(variable => {\r\n            return `v${variable}`;\r\n        })\r\n            .join(' + ');\r\n        this.userCode = `\r\n      void main() {\r\n        ${snippets.join('\\n        ')}\r\n\r\n        vec4 result = ${operation};\r\n        setOutput(result);\r\n      }\r\n    `;\r\n    }\r\n}\r\n//# sourceMappingURL=addn_packed_gpu.js.map"]},"metadata":{},"sourceType":"module"}