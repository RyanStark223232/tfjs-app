{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2017 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nexport class DepthwiseConv2DProgram {\n  constructor(convInfo, addBias = false, activation = null, hasPreluActivation = false) {\n    this.variableNames = ['x', 'W'];\n    this.outputShape = convInfo.outShape;\n    const xNumRows = convInfo.inHeight;\n    const xNumCols = convInfo.inWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n    let activationSnippet = '',\n        applyActivationSnippet = '';\n\n    if (activation) {\n      if (hasPreluActivation) {\n        activationSnippet = `float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `\n          float activation(float x) {\n            ${activation}\n          }\n        `;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${channelMul};\n        int q = d2 - d1 * ${channelMul};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          int xR = xRCorner + wR * ${dilationHeight};\n\n          if (xR < 0 || xR >= ${xNumRows}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            if (xC < 0 || xC >= ${xNumCols}) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n\n}","map":{"version":3,"sources":["../src/conv_gpu_depthwise.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAKH,OAAM,MAAO,sBAAP,CAA6B;AAKjC,EAAA,WAAA,CACI,QADJ,EACuC,OAAO,GAAG,KADjD,EAEI,UAAA,GAAqB,IAFzB,EAE+B,kBAAkB,GAAG,KAFpD,EAEyD;AANzD,SAAA,aAAA,GAAgB,CAAC,GAAD,EAAM,GAAN,CAAhB;AAOE,SAAK,WAAL,GAAmB,QAAQ,CAAC,QAA5B;AAEA,UAAM,QAAQ,GAAG,QAAQ,CAAC,QAA1B;AACA,UAAM,QAAQ,GAAG,QAAQ,CAAC,OAA1B;AACA,UAAM,MAAM,GAAG,QAAQ,CAAC,OAAT,CAAiB,GAAhC;AACA,UAAM,OAAO,GAAG,QAAQ,CAAC,OAAT,CAAiB,IAAjC;AACA,UAAM,YAAY,GAAG,QAAQ,CAAC,YAA9B;AACA,UAAM,WAAW,GAAG,QAAQ,CAAC,WAA7B;AACA,UAAM,cAAc,GAAG,QAAQ,CAAC,cAAhC;AACA,UAAM,aAAa,GAAG,QAAQ,CAAC,aAA/B;AACA,UAAM,YAAY,GAAG,QAAQ,CAAC,YAA9B;AACA,UAAM,WAAW,GAAG,QAAQ,CAAC,WAA7B;AACA,UAAM,UAAU,GAAG,QAAQ,CAAC,WAAT,GAAuB,QAAQ,CAAC,UAAnD;AAEA,QAAI,iBAAiB,GAAG,EAAxB;AAAA,QAA4B,sBAAsB,GAAG,EAArD;;AACA,QAAI,UAAJ,EAAgB;AACd,UAAI,kBAAJ,EAAwB;AACtB,QAAA,iBAAiB,GAAG;;YAEhB,UAAU;AACZ,UAHF;AAID,OALD,MAKO;AACL,QAAA,iBAAiB,GAAG;;cAEd,UAAU;;AAEf,SAJD;AAKD;;AAED,MAAA,sBAAsB,GAAG,8BAAzB;AACD;;AAED,UAAM,cAAc,GAAG,OAAO,GAAG,iCAAH,GAAuC,EAArE;;AACA,QAAI,OAAJ,EAAa;AACX,WAAK,aAAL,CAAmB,IAAnB,CAAwB,MAAxB;AACD;;AAED,QAAI,kBAAJ,EAAwB;AACtB,WAAK,aAAL,CAAmB,IAAnB,CAAwB,wBAAxB;AACD;;AAED,SAAK,QAAL,GAAgB;QACZ,iBAAiB;;oCAEW,YAAY,KAAK,WAAW;iCAC/B,MAAM,KAAK,OAAO;;;;;;;wBAO3B,UAAU;4BACN,UAAU;;;;;;;;;gCASN,YAAY;qCACP,cAAc;;gCAEnB,QAAQ;;;;kCAIN,WAAW;uCACN,aAAa;;kCAElB,QAAQ;;;;;;;;;;;UAWhC,cAAc;UACd,sBAAsB;;;AAG3B,KA9CD;AA+CD;;AAhGgC","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2017 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nexport class DepthwiseConv2DProgram {\r\n    constructor(convInfo, addBias = false, activation = null, hasPreluActivation = false) {\r\n        this.variableNames = ['x', 'W'];\r\n        this.outputShape = convInfo.outShape;\r\n        const xNumRows = convInfo.inHeight;\r\n        const xNumCols = convInfo.inWidth;\r\n        const padTop = convInfo.padInfo.top;\r\n        const padLeft = convInfo.padInfo.left;\r\n        const strideHeight = convInfo.strideHeight;\r\n        const strideWidth = convInfo.strideWidth;\r\n        const dilationHeight = convInfo.dilationHeight;\r\n        const dilationWidth = convInfo.dilationWidth;\r\n        const filterHeight = convInfo.filterHeight;\r\n        const filterWidth = convInfo.filterWidth;\r\n        const channelMul = convInfo.outChannels / convInfo.inChannels;\r\n        let activationSnippet = '', applyActivationSnippet = '';\r\n        if (activation) {\r\n            if (hasPreluActivation) {\r\n                activationSnippet = `float activation(float a) {\r\n          float b = getPreluActivationWeightsAtOutCoords();\r\n          ${activation}\r\n        }`;\r\n            }\r\n            else {\r\n                activationSnippet = `\r\n          float activation(float x) {\r\n            ${activation}\r\n          }\r\n        `;\r\n            }\r\n            applyActivationSnippet = `result = activation(result);`;\r\n        }\r\n        const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\r\n        if (addBias) {\r\n            this.variableNames.push('bias');\r\n        }\r\n        if (hasPreluActivation) {\r\n            this.variableNames.push('preluActivationWeights');\r\n        }\r\n        this.userCode = `\r\n      ${activationSnippet}\r\n\r\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\r\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\r\n\r\n      void main() {\r\n        ivec4 coords = getOutputCoords();\r\n        int batch = coords.x;\r\n        ivec2 xRCCorner = coords.yz * strides - pads;\r\n        int d2 = coords.w;\r\n        int d1 = d2 / ${channelMul};\r\n        int q = d2 - d1 * ${channelMul};\r\n\r\n        int xRCorner = xRCCorner.x;\r\n        int xCCorner = xRCCorner.y;\r\n\r\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\r\n        // ? = to be determined. : = across all values in that axis.\r\n        float dotProd = 0.0;\r\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\r\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\r\n          int xR = xRCorner + wR * ${dilationHeight};\r\n\r\n          if (xR < 0 || xR >= ${xNumRows}) {\r\n            continue;\r\n          }\r\n\r\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\r\n            int xC = xCCorner + wC * ${dilationWidth};\r\n\r\n            if (xC < 0 || xC >= ${xNumCols}) {\r\n              continue;\r\n            }\r\n\r\n            float xVal = getX(batch, xR, xC, d1);\r\n            float wVal = getW(wR, wC, d1, q);\r\n            dotProd += xVal * wVal;\r\n          }\r\n        }\r\n\r\n        float result = dotProd;\r\n        ${addBiasSnippet}\r\n        ${applyActivationSnippet}\r\n        setOutput(result);\r\n      }\r\n    `;\r\n    }\r\n}\r\n//# sourceMappingURL=conv_gpu_depthwise.js.map"]},"metadata":{},"sourceType":"module"}