{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../../engine';\nimport { IFFT } from '../../kernel_names';\nimport { assert } from '../../util';\nimport { op } from '../operation';\nimport { reshape } from '../reshape';\n/**\r\n * Inverse fast Fourier transform.\r\n *\r\n * Computes the inverse 1-dimensional discrete Fourier transform over the\r\n * inner-most dimension of input.\r\n *\r\n * ```js\r\n * const real = tf.tensor1d([1, 2, 3]);\r\n * const imag = tf.tensor1d([1, 2, 3]);\r\n * const x = tf.complex(real, imag);\r\n *\r\n * x.ifft().print();  // tf.spectral.ifft(x).print();\r\n * ```\r\n * @param input The complex input to compute an ifft over.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}\r\n */\n\nfunction ifft_(input) {\n  assert(input.dtype === 'complex64', () => `The dtype for tf.spectral.ifft() must be complex64 ` + `but got ${input.dtype}.`);\n  const inputs = {\n    input\n  };\n  return ENGINE.runKernelFunc(backend => {\n    // Collapse all outer dimensions to a single batch dimension.\n    const innerDimensionSize = input.shape[input.shape.length - 1];\n    const batch = input.size / innerDimensionSize;\n    const input2D = reshape(input, [batch, innerDimensionSize]);\n    const result = backend.ifft(input2D);\n    return reshape(result, input.shape);\n  }, inputs, null\n  /* gradient */\n  , IFFT);\n}\n\nexport const ifft = op({\n  ifft_\n});","map":{"version":3,"sources":["../../../src/ops/spectral/ifft.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,MAAR,QAAqB,cAArB;AACA,SAAQ,IAAR,QAA+B,oBAA/B;AAGA,SAAQ,MAAR,QAAqB,YAArB;AACA,SAAQ,EAAR,QAAiB,cAAjB;AACA,SAAQ,OAAR,QAAsB,YAAtB;AAEA;;;;;;;;;;;;;;;;AAgBG;;AACH,SAAS,KAAT,CAAe,KAAf,EAA4B;AAC1B,EAAA,MAAM,CACF,KAAK,CAAC,KAAN,KAAgB,WADd,EAEF,MAAM,qDAAA,GACF,WAAW,KAAK,CAAC,KAAK,GAHxB,CAAN;AAKA,QAAM,MAAM,GAAe;AAAC,IAAA;AAAD,GAA3B;AAEA,SAAO,MAAM,CAAC,aAAP,CAAqB,OAAO,IAAG;AACpC;AACA,UAAM,kBAAkB,GAAG,KAAK,CAAC,KAAN,CAAY,KAAK,CAAC,KAAN,CAAY,MAAZ,GAAqB,CAAjC,CAA3B;AACA,UAAM,KAAK,GAAG,KAAK,CAAC,IAAN,GAAa,kBAA3B;AAEA,UAAM,OAAO,GAAa,OAAO,CAAC,KAAD,EAAQ,CAAC,KAAD,EAAQ,kBAAR,CAAR,CAAjC;AACA,UAAM,MAAM,GAAG,OAAO,CAAC,IAAR,CAAa,OAAb,CAAf;AACA,WAAO,OAAO,CAAC,MAAD,EAAS,KAAK,CAAC,KAAf,CAAd;AACD,GARM,EAQJ,MARI,EAQ4B;AAAK;AARjC,IAQiD,IARjD,CAAP;AASD;;AAED,OAAO,MAAM,IAAI,GAAG,EAAE,CAAC;AAAC,EAAA;AAAD,CAAD,CAAf","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { ENGINE } from '../../engine';\r\nimport { IFFT } from '../../kernel_names';\r\nimport { assert } from '../../util';\r\nimport { op } from '../operation';\r\nimport { reshape } from '../reshape';\r\n/**\r\n * Inverse fast Fourier transform.\r\n *\r\n * Computes the inverse 1-dimensional discrete Fourier transform over the\r\n * inner-most dimension of input.\r\n *\r\n * ```js\r\n * const real = tf.tensor1d([1, 2, 3]);\r\n * const imag = tf.tensor1d([1, 2, 3]);\r\n * const x = tf.complex(real, imag);\r\n *\r\n * x.ifft().print();  // tf.spectral.ifft(x).print();\r\n * ```\r\n * @param input The complex input to compute an ifft over.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}\r\n */\r\nfunction ifft_(input) {\r\n    assert(input.dtype === 'complex64', () => `The dtype for tf.spectral.ifft() must be complex64 ` +\r\n        `but got ${input.dtype}.`);\r\n    const inputs = { input };\r\n    return ENGINE.runKernelFunc(backend => {\r\n        // Collapse all outer dimensions to a single batch dimension.\r\n        const innerDimensionSize = input.shape[input.shape.length - 1];\r\n        const batch = input.size / innerDimensionSize;\r\n        const input2D = reshape(input, [batch, innerDimensionSize]);\r\n        const result = backend.ifft(input2D);\r\n        return reshape(result, input.shape);\r\n    }, inputs, null /* gradient */, IFFT);\r\n}\r\nexport const ifft = op({ ifft_ });\r\n//# sourceMappingURL=ifft.js.map"]},"metadata":{},"sourceType":"module"}