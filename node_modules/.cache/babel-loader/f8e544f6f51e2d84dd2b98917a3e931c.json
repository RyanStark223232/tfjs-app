{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport '../flags';\nimport { env } from '../environment';\nimport { assert } from '../util';\nimport { arrayBufferToBase64String, base64StringToArrayBuffer, getModelArtifactsInfoForJSON } from './io_utils';\nimport { IORouterRegistry } from './router_registry';\nvar PATH_SEPARATOR = '/';\nvar PATH_PREFIX = 'tensorflowjs_models';\nvar INFO_SUFFIX = 'info';\nvar MODEL_TOPOLOGY_SUFFIX = 'model_topology';\nvar WEIGHT_SPECS_SUFFIX = 'weight_specs';\nvar WEIGHT_DATA_SUFFIX = 'weight_data';\nvar MODEL_METADATA_SUFFIX = 'model_metadata';\n/**\r\n * Purge all tensorflow.js-saved model artifacts from local storage.\r\n *\r\n * @returns Paths of the models purged.\r\n */\n\nexport function purgeLocalStorageArtifacts() {\n  if (!env().getBool('IS_BROWSER') || typeof window === 'undefined' || typeof window.localStorage === 'undefined') {\n    throw new Error('purgeLocalStorageModels() cannot proceed because local storage is ' + 'unavailable in the current environment.');\n  }\n\n  var LS = window.localStorage;\n  var purgedModelPaths = [];\n\n  for (var i = 0; i < LS.length; ++i) {\n    var key = LS.key(i);\n    var prefix = PATH_PREFIX + PATH_SEPARATOR;\n\n    if (key.startsWith(prefix) && key.length > prefix.length) {\n      LS.removeItem(key);\n      var modelName = getModelPathFromKey(key);\n\n      if (purgedModelPaths.indexOf(modelName) === -1) {\n        purgedModelPaths.push(modelName);\n      }\n    }\n  }\n\n  return purgedModelPaths;\n}\n\nfunction getModelKeys(path) {\n  return {\n    info: [PATH_PREFIX, path, INFO_SUFFIX].join(PATH_SEPARATOR),\n    topology: [PATH_PREFIX, path, MODEL_TOPOLOGY_SUFFIX].join(PATH_SEPARATOR),\n    weightSpecs: [PATH_PREFIX, path, WEIGHT_SPECS_SUFFIX].join(PATH_SEPARATOR),\n    weightData: [PATH_PREFIX, path, WEIGHT_DATA_SUFFIX].join(PATH_SEPARATOR),\n    modelMetadata: [PATH_PREFIX, path, MODEL_METADATA_SUFFIX].join(PATH_SEPARATOR)\n  };\n}\n/**\r\n * Get model path from a local-storage key.\r\n *\r\n * E.g., 'tensorflowjs_models/my/model/1/info' --> 'my/model/1'\r\n *\r\n * @param key\r\n */\n\n\nfunction getModelPathFromKey(key) {\n  var items = key.split(PATH_SEPARATOR);\n\n  if (items.length < 3) {\n    throw new Error(\"Invalid key format: \".concat(key));\n  }\n\n  return items.slice(1, items.length - 1).join(PATH_SEPARATOR);\n}\n\nfunction maybeStripScheme(key) {\n  return key.startsWith(BrowserLocalStorage.URL_SCHEME) ? key.slice(BrowserLocalStorage.URL_SCHEME.length) : key;\n}\n/**\r\n * IOHandler subclass: Browser Local Storage.\r\n *\r\n * See the doc string to `browserLocalStorage` for more details.\r\n */\n\n\nexport var BrowserLocalStorage = /*#__PURE__*/function () {\n  function BrowserLocalStorage(modelPath) {\n    _classCallCheck(this, BrowserLocalStorage);\n\n    if (!env().getBool('IS_BROWSER') || typeof window === 'undefined' || typeof window.localStorage === 'undefined') {\n      // TODO(cais): Add more info about what IOHandler subtypes are\n      // available.\n      //   Maybe point to a doc page on the web and/or automatically determine\n      //   the available IOHandlers and print them in the error message.\n      throw new Error('The current environment does not support local storage.');\n    }\n\n    this.LS = window.localStorage;\n\n    if (modelPath == null || !modelPath) {\n      throw new Error('For local storage, modelPath must not be null, undefined or empty.');\n    }\n\n    this.modelPath = modelPath;\n    this.keys = getModelKeys(this.modelPath);\n  }\n  /**\r\n   * Save model artifacts to browser local storage.\r\n   *\r\n   * See the documentation to `browserLocalStorage` for details on the saved\r\n   * artifacts.\r\n   *\r\n   * @param modelArtifacts The model artifacts to be stored.\r\n   * @returns An instance of SaveResult.\r\n   */\n\n\n  _createClass(BrowserLocalStorage, [{\n    key: \"save\",\n    value: function () {\n      var _save = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(modelArtifacts) {\n        var topology, weightSpecs, modelArtifactsInfo;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(modelArtifacts.modelTopology instanceof ArrayBuffer)) {\n                  _context.next = 4;\n                  break;\n                }\n\n                throw new Error('BrowserLocalStorage.save() does not support saving model topology ' + 'in binary formats yet.');\n\n              case 4:\n                topology = JSON.stringify(modelArtifacts.modelTopology);\n                weightSpecs = JSON.stringify(modelArtifacts.weightSpecs);\n                modelArtifactsInfo = getModelArtifactsInfoForJSON(modelArtifacts);\n                _context.prev = 7;\n                this.LS.setItem(this.keys.info, JSON.stringify(modelArtifactsInfo));\n                this.LS.setItem(this.keys.topology, topology);\n                this.LS.setItem(this.keys.weightSpecs, weightSpecs);\n                this.LS.setItem(this.keys.weightData, arrayBufferToBase64String(modelArtifacts.weightData));\n                this.LS.setItem(this.keys.modelMetadata, JSON.stringify({\n                  format: modelArtifacts.format,\n                  generatedBy: modelArtifacts.generatedBy,\n                  convertedBy: modelArtifacts.convertedBy,\n                  userDefinedMetadata: modelArtifacts.userDefinedMetadata\n                }));\n                return _context.abrupt(\"return\", {\n                  modelArtifactsInfo: modelArtifactsInfo\n                });\n\n              case 16:\n                _context.prev = 16;\n                _context.t0 = _context[\"catch\"](7);\n                // If saving failed, clean up all items saved so far.\n                this.LS.removeItem(this.keys.info);\n                this.LS.removeItem(this.keys.topology);\n                this.LS.removeItem(this.keys.weightSpecs);\n                this.LS.removeItem(this.keys.weightData);\n                this.LS.removeItem(this.keys.modelMetadata);\n                throw new Error(\"Failed to save model '\".concat(this.modelPath, \"' to local storage: \") + \"size quota being exceeded is a possible cause of this failure: \" + \"modelTopologyBytes=\".concat(modelArtifactsInfo.modelTopologyBytes, \", \") + \"weightSpecsBytes=\".concat(modelArtifactsInfo.weightSpecsBytes, \", \") + \"weightDataBytes=\".concat(modelArtifactsInfo.weightDataBytes, \".\"));\n\n              case 24:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[7, 16]]);\n      }));\n\n      function save(_x) {\n        return _save.apply(this, arguments);\n      }\n\n      return save;\n    }()\n    /**\r\n     * Load a model from local storage.\r\n     *\r\n     * See the documentation to `browserLocalStorage` for details on the saved\r\n     * artifacts.\r\n     *\r\n     * @returns The loaded model (if loading succeeds).\r\n     */\n\n  }, {\n    key: \"load\",\n    value: function () {\n      var _load = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var info, out, topology, weightSpecs, metadataString, metadata, weightDataBase64;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                info = JSON.parse(this.LS.getItem(this.keys.info));\n\n                if (!(info == null)) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                throw new Error(\"In local storage, there is no model with name '\".concat(this.modelPath, \"'\"));\n\n              case 3:\n                if (!(info.modelTopologyType !== 'JSON')) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                throw new Error('BrowserLocalStorage does not support loading non-JSON model ' + 'topology yet.');\n\n              case 5:\n                out = {}; // Load topology.\n\n                topology = JSON.parse(this.LS.getItem(this.keys.topology));\n\n                if (!(topology == null)) {\n                  _context2.next = 9;\n                  break;\n                }\n\n                throw new Error(\"In local storage, the topology of model '\".concat(this.modelPath, \"' \") + \"is missing.\");\n\n              case 9:\n                out.modelTopology = topology; // Load weight specs.\n\n                weightSpecs = JSON.parse(this.LS.getItem(this.keys.weightSpecs));\n\n                if (!(weightSpecs == null)) {\n                  _context2.next = 13;\n                  break;\n                }\n\n                throw new Error(\"In local storage, the weight specs of model '\".concat(this.modelPath, \"' \") + \"are missing.\");\n\n              case 13:\n                out.weightSpecs = weightSpecs; // Load meta-data fields.\n\n                metadataString = this.LS.getItem(this.keys.modelMetadata);\n\n                if (metadataString != null) {\n                  metadata = JSON.parse(metadataString);\n                  out.format = metadata['format'];\n                  out.generatedBy = metadata['generatedBy'];\n                  out.convertedBy = metadata['convertedBy'];\n                  out.userDefinedMetadata = metadata['userDefinedMetadata'];\n                } // Load weight data.\n\n\n                weightDataBase64 = this.LS.getItem(this.keys.weightData);\n\n                if (!(weightDataBase64 == null)) {\n                  _context2.next = 19;\n                  break;\n                }\n\n                throw new Error(\"In local storage, the binary weight values of model \" + \"'\".concat(this.modelPath, \"' are missing.\"));\n\n              case 19:\n                out.weightData = base64StringToArrayBuffer(weightDataBase64);\n                return _context2.abrupt(\"return\", out);\n\n              case 21:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function load() {\n        return _load.apply(this, arguments);\n      }\n\n      return load;\n    }()\n  }]);\n\n  return BrowserLocalStorage;\n}();\nBrowserLocalStorage.URL_SCHEME = 'localstorage://';\nexport var localStorageRouter = function localStorageRouter(url) {\n  if (!env().getBool('IS_BROWSER')) {\n    return null;\n  } else {\n    if (!Array.isArray(url) && url.startsWith(BrowserLocalStorage.URL_SCHEME)) {\n      return browserLocalStorage(url.slice(BrowserLocalStorage.URL_SCHEME.length));\n    } else {\n      return null;\n    }\n  }\n};\nIORouterRegistry.registerSaveRouter(localStorageRouter);\nIORouterRegistry.registerLoadRouter(localStorageRouter);\n/**\r\n * Factory function for local storage IOHandler.\r\n *\r\n * This `IOHandler` supports both `save` and `load`.\r\n *\r\n * For each model's saved artifacts, four items are saved to local storage.\r\n *   - `${PATH_SEPARATOR}/${modelPath}/info`: Contains meta-info about the\r\n *     model, such as date saved, type of the topology, size in bytes, etc.\r\n *   - `${PATH_SEPARATOR}/${modelPath}/topology`: Model topology. For Keras-\r\n *     style models, this is a stringized JSON.\r\n *   - `${PATH_SEPARATOR}/${modelPath}/weight_specs`: Weight specs of the\r\n *     model, can be used to decode the saved binary weight values (see\r\n *     item below).\r\n *   - `${PATH_SEPARATOR}/${modelPath}/weight_data`: Concatenated binary\r\n *     weight values, stored as a base64-encoded string.\r\n *\r\n * Saving may throw an `Error` if the total size of the artifacts exceed the\r\n * browser-specific quota.\r\n *\r\n * @param modelPath A unique identifier for the model to be saved. Must be a\r\n *   non-empty string.\r\n * @returns An instance of `IOHandler`, which can be used with, e.g.,\r\n *   `tf.Model.save`.\r\n */\n\nexport function browserLocalStorage(modelPath) {\n  return new BrowserLocalStorage(modelPath);\n}\nexport var BrowserLocalStorageManager = /*#__PURE__*/function () {\n  function BrowserLocalStorageManager() {\n    _classCallCheck(this, BrowserLocalStorageManager);\n\n    assert(env().getBool('IS_BROWSER'), function () {\n      return 'Current environment is not a web browser';\n    });\n    assert(typeof window === 'undefined' || typeof window.localStorage !== 'undefined', function () {\n      return 'Current browser does not appear to support localStorage';\n    });\n    this.LS = window.localStorage;\n  }\n\n  _createClass(BrowserLocalStorageManager, [{\n    key: \"listModels\",\n    value: function () {\n      var _listModels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var out, prefix, suffix, i, key, modelPath;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                out = {};\n                prefix = PATH_PREFIX + PATH_SEPARATOR;\n                suffix = PATH_SEPARATOR + INFO_SUFFIX;\n\n                for (i = 0; i < this.LS.length; ++i) {\n                  key = this.LS.key(i);\n\n                  if (key.startsWith(prefix) && key.endsWith(suffix)) {\n                    modelPath = getModelPathFromKey(key);\n                    out[modelPath] = JSON.parse(this.LS.getItem(key));\n                  }\n                }\n\n                return _context3.abrupt(\"return\", out);\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function listModels() {\n        return _listModels.apply(this, arguments);\n      }\n\n      return listModels;\n    }()\n  }, {\n    key: \"removeModel\",\n    value: function () {\n      var _removeModel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(path) {\n        var keys, info;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                path = maybeStripScheme(path);\n                keys = getModelKeys(path);\n\n                if (!(this.LS.getItem(keys.info) == null)) {\n                  _context4.next = 4;\n                  break;\n                }\n\n                throw new Error(\"Cannot find model at path '\".concat(path, \"'\"));\n\n              case 4:\n                info = JSON.parse(this.LS.getItem(keys.info));\n                this.LS.removeItem(keys.info);\n                this.LS.removeItem(keys.topology);\n                this.LS.removeItem(keys.weightSpecs);\n                this.LS.removeItem(keys.weightData);\n                return _context4.abrupt(\"return\", info);\n\n              case 10:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function removeModel(_x2) {\n        return _removeModel.apply(this, arguments);\n      }\n\n      return removeModel;\n    }()\n  }]);\n\n  return BrowserLocalStorageManager;\n}();","map":{"version":3,"sources":["../../src/io/local_storage.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport '../flags';\r\nimport { env } from '../environment';\r\nimport { assert } from '../util';\r\nimport { arrayBufferToBase64String, base64StringToArrayBuffer, getModelArtifactsInfoForJSON } from './io_utils';\r\nimport { IORouterRegistry } from './router_registry';\r\nconst PATH_SEPARATOR = '/';\r\nconst PATH_PREFIX = 'tensorflowjs_models';\r\nconst INFO_SUFFIX = 'info';\r\nconst MODEL_TOPOLOGY_SUFFIX = 'model_topology';\r\nconst WEIGHT_SPECS_SUFFIX = 'weight_specs';\r\nconst WEIGHT_DATA_SUFFIX = 'weight_data';\r\nconst MODEL_METADATA_SUFFIX = 'model_metadata';\r\n/**\r\n * Purge all tensorflow.js-saved model artifacts from local storage.\r\n *\r\n * @returns Paths of the models purged.\r\n */\r\nexport function purgeLocalStorageArtifacts() {\r\n    if (!env().getBool('IS_BROWSER') || typeof window === 'undefined' ||\r\n        typeof window.localStorage === 'undefined') {\r\n        throw new Error('purgeLocalStorageModels() cannot proceed because local storage is ' +\r\n            'unavailable in the current environment.');\r\n    }\r\n    const LS = window.localStorage;\r\n    const purgedModelPaths = [];\r\n    for (let i = 0; i < LS.length; ++i) {\r\n        const key = LS.key(i);\r\n        const prefix = PATH_PREFIX + PATH_SEPARATOR;\r\n        if (key.startsWith(prefix) && key.length > prefix.length) {\r\n            LS.removeItem(key);\r\n            const modelName = getModelPathFromKey(key);\r\n            if (purgedModelPaths.indexOf(modelName) === -1) {\r\n                purgedModelPaths.push(modelName);\r\n            }\r\n        }\r\n    }\r\n    return purgedModelPaths;\r\n}\r\nfunction getModelKeys(path) {\r\n    return {\r\n        info: [PATH_PREFIX, path, INFO_SUFFIX].join(PATH_SEPARATOR),\r\n        topology: [PATH_PREFIX, path, MODEL_TOPOLOGY_SUFFIX].join(PATH_SEPARATOR),\r\n        weightSpecs: [PATH_PREFIX, path, WEIGHT_SPECS_SUFFIX].join(PATH_SEPARATOR),\r\n        weightData: [PATH_PREFIX, path, WEIGHT_DATA_SUFFIX].join(PATH_SEPARATOR),\r\n        modelMetadata: [PATH_PREFIX, path, MODEL_METADATA_SUFFIX].join(PATH_SEPARATOR)\r\n    };\r\n}\r\n/**\r\n * Get model path from a local-storage key.\r\n *\r\n * E.g., 'tensorflowjs_models/my/model/1/info' --> 'my/model/1'\r\n *\r\n * @param key\r\n */\r\nfunction getModelPathFromKey(key) {\r\n    const items = key.split(PATH_SEPARATOR);\r\n    if (items.length < 3) {\r\n        throw new Error(`Invalid key format: ${key}`);\r\n    }\r\n    return items.slice(1, items.length - 1).join(PATH_SEPARATOR);\r\n}\r\nfunction maybeStripScheme(key) {\r\n    return key.startsWith(BrowserLocalStorage.URL_SCHEME) ?\r\n        key.slice(BrowserLocalStorage.URL_SCHEME.length) :\r\n        key;\r\n}\r\n/**\r\n * IOHandler subclass: Browser Local Storage.\r\n *\r\n * See the doc string to `browserLocalStorage` for more details.\r\n */\r\nexport class BrowserLocalStorage {\r\n    constructor(modelPath) {\r\n        if (!env().getBool('IS_BROWSER') || typeof window === 'undefined' ||\r\n            typeof window.localStorage === 'undefined') {\r\n            // TODO(cais): Add more info about what IOHandler subtypes are\r\n            // available.\r\n            //   Maybe point to a doc page on the web and/or automatically determine\r\n            //   the available IOHandlers and print them in the error message.\r\n            throw new Error('The current environment does not support local storage.');\r\n        }\r\n        this.LS = window.localStorage;\r\n        if (modelPath == null || !modelPath) {\r\n            throw new Error('For local storage, modelPath must not be null, undefined or empty.');\r\n        }\r\n        this.modelPath = modelPath;\r\n        this.keys = getModelKeys(this.modelPath);\r\n    }\r\n    /**\r\n     * Save model artifacts to browser local storage.\r\n     *\r\n     * See the documentation to `browserLocalStorage` for details on the saved\r\n     * artifacts.\r\n     *\r\n     * @param modelArtifacts The model artifacts to be stored.\r\n     * @returns An instance of SaveResult.\r\n     */\r\n    async save(modelArtifacts) {\r\n        if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\r\n            throw new Error('BrowserLocalStorage.save() does not support saving model topology ' +\r\n                'in binary formats yet.');\r\n        }\r\n        else {\r\n            const topology = JSON.stringify(modelArtifacts.modelTopology);\r\n            const weightSpecs = JSON.stringify(modelArtifacts.weightSpecs);\r\n            const modelArtifactsInfo = getModelArtifactsInfoForJSON(modelArtifacts);\r\n            try {\r\n                this.LS.setItem(this.keys.info, JSON.stringify(modelArtifactsInfo));\r\n                this.LS.setItem(this.keys.topology, topology);\r\n                this.LS.setItem(this.keys.weightSpecs, weightSpecs);\r\n                this.LS.setItem(this.keys.weightData, arrayBufferToBase64String(modelArtifacts.weightData));\r\n                this.LS.setItem(this.keys.modelMetadata, JSON.stringify({\r\n                    format: modelArtifacts.format,\r\n                    generatedBy: modelArtifacts.generatedBy,\r\n                    convertedBy: modelArtifacts.convertedBy,\r\n                    userDefinedMetadata: modelArtifacts.userDefinedMetadata\r\n                }));\r\n                return { modelArtifactsInfo };\r\n            }\r\n            catch (err) {\r\n                // If saving failed, clean up all items saved so far.\r\n                this.LS.removeItem(this.keys.info);\r\n                this.LS.removeItem(this.keys.topology);\r\n                this.LS.removeItem(this.keys.weightSpecs);\r\n                this.LS.removeItem(this.keys.weightData);\r\n                this.LS.removeItem(this.keys.modelMetadata);\r\n                throw new Error(`Failed to save model '${this.modelPath}' to local storage: ` +\r\n                    `size quota being exceeded is a possible cause of this failure: ` +\r\n                    `modelTopologyBytes=${modelArtifactsInfo.modelTopologyBytes}, ` +\r\n                    `weightSpecsBytes=${modelArtifactsInfo.weightSpecsBytes}, ` +\r\n                    `weightDataBytes=${modelArtifactsInfo.weightDataBytes}.`);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Load a model from local storage.\r\n     *\r\n     * See the documentation to `browserLocalStorage` for details on the saved\r\n     * artifacts.\r\n     *\r\n     * @returns The loaded model (if loading succeeds).\r\n     */\r\n    async load() {\r\n        const info = JSON.parse(this.LS.getItem(this.keys.info));\r\n        if (info == null) {\r\n            throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);\r\n        }\r\n        if (info.modelTopologyType !== 'JSON') {\r\n            throw new Error('BrowserLocalStorage does not support loading non-JSON model ' +\r\n                'topology yet.');\r\n        }\r\n        const out = {};\r\n        // Load topology.\r\n        const topology = JSON.parse(this.LS.getItem(this.keys.topology));\r\n        if (topology == null) {\r\n            throw new Error(`In local storage, the topology of model '${this.modelPath}' ` +\r\n                `is missing.`);\r\n        }\r\n        out.modelTopology = topology;\r\n        // Load weight specs.\r\n        const weightSpecs = JSON.parse(this.LS.getItem(this.keys.weightSpecs));\r\n        if (weightSpecs == null) {\r\n            throw new Error(`In local storage, the weight specs of model '${this.modelPath}' ` +\r\n                `are missing.`);\r\n        }\r\n        out.weightSpecs = weightSpecs;\r\n        // Load meta-data fields.\r\n        const metadataString = this.LS.getItem(this.keys.modelMetadata);\r\n        if (metadataString != null) {\r\n            const metadata = JSON.parse(metadataString);\r\n            out.format = metadata['format'];\r\n            out.generatedBy = metadata['generatedBy'];\r\n            out.convertedBy = metadata['convertedBy'];\r\n            out.userDefinedMetadata = metadata['userDefinedMetadata'];\r\n        }\r\n        // Load weight data.\r\n        const weightDataBase64 = this.LS.getItem(this.keys.weightData);\r\n        if (weightDataBase64 == null) {\r\n            throw new Error(`In local storage, the binary weight values of model ` +\r\n                `'${this.modelPath}' are missing.`);\r\n        }\r\n        out.weightData = base64StringToArrayBuffer(weightDataBase64);\r\n        return out;\r\n    }\r\n}\r\nBrowserLocalStorage.URL_SCHEME = 'localstorage://';\r\nexport const localStorageRouter = (url) => {\r\n    if (!env().getBool('IS_BROWSER')) {\r\n        return null;\r\n    }\r\n    else {\r\n        if (!Array.isArray(url) && url.startsWith(BrowserLocalStorage.URL_SCHEME)) {\r\n            return browserLocalStorage(url.slice(BrowserLocalStorage.URL_SCHEME.length));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n};\r\nIORouterRegistry.registerSaveRouter(localStorageRouter);\r\nIORouterRegistry.registerLoadRouter(localStorageRouter);\r\n/**\r\n * Factory function for local storage IOHandler.\r\n *\r\n * This `IOHandler` supports both `save` and `load`.\r\n *\r\n * For each model's saved artifacts, four items are saved to local storage.\r\n *   - `${PATH_SEPARATOR}/${modelPath}/info`: Contains meta-info about the\r\n *     model, such as date saved, type of the topology, size in bytes, etc.\r\n *   - `${PATH_SEPARATOR}/${modelPath}/topology`: Model topology. For Keras-\r\n *     style models, this is a stringized JSON.\r\n *   - `${PATH_SEPARATOR}/${modelPath}/weight_specs`: Weight specs of the\r\n *     model, can be used to decode the saved binary weight values (see\r\n *     item below).\r\n *   - `${PATH_SEPARATOR}/${modelPath}/weight_data`: Concatenated binary\r\n *     weight values, stored as a base64-encoded string.\r\n *\r\n * Saving may throw an `Error` if the total size of the artifacts exceed the\r\n * browser-specific quota.\r\n *\r\n * @param modelPath A unique identifier for the model to be saved. Must be a\r\n *   non-empty string.\r\n * @returns An instance of `IOHandler`, which can be used with, e.g.,\r\n *   `tf.Model.save`.\r\n */\r\nexport function browserLocalStorage(modelPath) {\r\n    return new BrowserLocalStorage(modelPath);\r\n}\r\nexport class BrowserLocalStorageManager {\r\n    constructor() {\r\n        assert(env().getBool('IS_BROWSER'), () => 'Current environment is not a web browser');\r\n        assert(typeof window === 'undefined' ||\r\n            typeof window.localStorage !== 'undefined', () => 'Current browser does not appear to support localStorage');\r\n        this.LS = window.localStorage;\r\n    }\r\n    async listModels() {\r\n        const out = {};\r\n        const prefix = PATH_PREFIX + PATH_SEPARATOR;\r\n        const suffix = PATH_SEPARATOR + INFO_SUFFIX;\r\n        for (let i = 0; i < this.LS.length; ++i) {\r\n            const key = this.LS.key(i);\r\n            if (key.startsWith(prefix) && key.endsWith(suffix)) {\r\n                const modelPath = getModelPathFromKey(key);\r\n                out[modelPath] = JSON.parse(this.LS.getItem(key));\r\n            }\r\n        }\r\n        return out;\r\n    }\r\n    async removeModel(path) {\r\n        path = maybeStripScheme(path);\r\n        const keys = getModelKeys(path);\r\n        if (this.LS.getItem(keys.info) == null) {\r\n            throw new Error(`Cannot find model at path '${path}'`);\r\n        }\r\n        const info = JSON.parse(this.LS.getItem(keys.info));\r\n        this.LS.removeItem(keys.info);\r\n        this.LS.removeItem(keys.topology);\r\n        this.LS.removeItem(keys.weightSpecs);\r\n        this.LS.removeItem(keys.weightData);\r\n        return info;\r\n    }\r\n}\r\n//# sourceMappingURL=local_storage.js.map"]},"metadata":{},"sourceType":"module"}