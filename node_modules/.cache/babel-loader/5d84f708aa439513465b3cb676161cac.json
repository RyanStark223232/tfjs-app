{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2017 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { env } from './environment';\nimport * as base from './util_base';\nexport * from './util_base';\n/**\r\n * Create typed array for scalar value. Used for storing in `DataStorage`.\r\n */\n\nexport function createScalarValue(value, dtype) {\n  if (dtype === 'string') {\n    return encodeString(value);\n  }\n\n  return toTypedArray([value], dtype);\n}\n\nfunction noConversionNeeded(a, dtype) {\n  return a instanceof Float32Array && dtype === 'float32' || a instanceof Int32Array && dtype === 'int32' || a instanceof Uint8Array && dtype === 'bool';\n}\n\nexport function toTypedArray(a, dtype) {\n  if (dtype === 'string') {\n    throw new Error('Cannot convert a string[] to a TypedArray');\n  }\n\n  if (Array.isArray(a)) {\n    a = base.flatten(a);\n  }\n\n  if (env().getBool('DEBUG')) {\n    base.checkConversionForErrors(a, dtype);\n  }\n\n  if (noConversionNeeded(a, dtype)) {\n    return a;\n  }\n\n  if (dtype == null || dtype === 'float32' || dtype === 'complex64') {\n    return new Float32Array(a);\n  } else if (dtype === 'int32') {\n    return new Int32Array(a);\n  } else if (dtype === 'bool') {\n    var bool = new Uint8Array(a.length);\n\n    for (var i = 0; i < bool.length; ++i) {\n      if (Math.round(a[i]) !== 0) {\n        bool[i] = 1;\n      }\n    }\n\n    return bool;\n  } else {\n    throw new Error(\"Unknown data type \".concat(dtype));\n  }\n}\n/**\r\n * Returns the current high-resolution time in milliseconds relative to an\r\n * arbitrary time in the past. It works across different platforms (node.js,\r\n * browsers).\r\n *\r\n * ```js\r\n * console.log(tf.util.now());\r\n * ```\r\n *\r\n * @doc {heading: 'Util', namespace: 'util'}\r\n */\n\nexport function now() {\n  return env().platform.now();\n}\n/**\r\n * Returns a platform-specific implementation of\r\n * [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\r\n *\r\n * If `fetch` is defined on the global object (`window`, `process`, etc.),\r\n * `tf.util.fetch` returns that function.\r\n *\r\n * If not, `tf.util.fetch` returns a platform-specific solution.\r\n *\r\n * ```js\r\n * const resource = await tf.util.fetch('https://unpkg.com/@tensorflow/tfjs');\r\n * // handle response\r\n * ```\r\n *\r\n * @doc {heading: 'Util'}\r\n */\n\nexport function fetch(path, requestInits) {\n  return env().platform.fetch(path, requestInits);\n}\n/**\r\n * Encodes the provided string into bytes using the provided encoding scheme.\r\n *\r\n * @param s The string to encode.\r\n * @param encoding The encoding scheme. Defaults to utf-8.\r\n *\r\n * @doc {heading: 'Util'}\r\n */\n\nexport function encodeString(s) {\n  var encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'utf-8';\n  encoding = encoding || 'utf-8';\n  return env().platform.encode(s, encoding);\n}\n/**\r\n * Decodes the provided bytes into a string using the provided encoding scheme.\r\n * @param bytes The bytes to decode.\r\n *\r\n * @param encoding The encoding scheme. Defaults to utf-8.\r\n *\r\n * @doc {heading: 'Util'}\r\n */\n\nexport function decodeString(bytes) {\n  var encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'utf-8';\n  encoding = encoding || 'utf-8';\n  return env().platform.decode(bytes, encoding);\n}","map":{"version":3,"sources":["../src/util.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2017 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { env } from './environment';\r\nimport * as base from './util_base';\r\nexport * from './util_base';\r\n/**\r\n * Create typed array for scalar value. Used for storing in `DataStorage`.\r\n */\r\nexport function createScalarValue(value, dtype) {\r\n    if (dtype === 'string') {\r\n        return encodeString(value);\r\n    }\r\n    return toTypedArray([value], dtype);\r\n}\r\nfunction noConversionNeeded(a, dtype) {\r\n    return (a instanceof Float32Array && dtype === 'float32') ||\r\n        (a instanceof Int32Array && dtype === 'int32') ||\r\n        (a instanceof Uint8Array && dtype === 'bool');\r\n}\r\nexport function toTypedArray(a, dtype) {\r\n    if (dtype === 'string') {\r\n        throw new Error('Cannot convert a string[] to a TypedArray');\r\n    }\r\n    if (Array.isArray(a)) {\r\n        a = base.flatten(a);\r\n    }\r\n    if (env().getBool('DEBUG')) {\r\n        base.checkConversionForErrors(a, dtype);\r\n    }\r\n    if (noConversionNeeded(a, dtype)) {\r\n        return a;\r\n    }\r\n    if (dtype == null || dtype === 'float32' || dtype === 'complex64') {\r\n        return new Float32Array(a);\r\n    }\r\n    else if (dtype === 'int32') {\r\n        return new Int32Array(a);\r\n    }\r\n    else if (dtype === 'bool') {\r\n        const bool = new Uint8Array(a.length);\r\n        for (let i = 0; i < bool.length; ++i) {\r\n            if (Math.round(a[i]) !== 0) {\r\n                bool[i] = 1;\r\n            }\r\n        }\r\n        return bool;\r\n    }\r\n    else {\r\n        throw new Error(`Unknown data type ${dtype}`);\r\n    }\r\n}\r\n/**\r\n * Returns the current high-resolution time in milliseconds relative to an\r\n * arbitrary time in the past. It works across different platforms (node.js,\r\n * browsers).\r\n *\r\n * ```js\r\n * console.log(tf.util.now());\r\n * ```\r\n *\r\n * @doc {heading: 'Util', namespace: 'util'}\r\n */\r\nexport function now() {\r\n    return env().platform.now();\r\n}\r\n/**\r\n * Returns a platform-specific implementation of\r\n * [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\r\n *\r\n * If `fetch` is defined on the global object (`window`, `process`, etc.),\r\n * `tf.util.fetch` returns that function.\r\n *\r\n * If not, `tf.util.fetch` returns a platform-specific solution.\r\n *\r\n * ```js\r\n * const resource = await tf.util.fetch('https://unpkg.com/@tensorflow/tfjs');\r\n * // handle response\r\n * ```\r\n *\r\n * @doc {heading: 'Util'}\r\n */\r\nexport function fetch(path, requestInits) {\r\n    return env().platform.fetch(path, requestInits);\r\n}\r\n/**\r\n * Encodes the provided string into bytes using the provided encoding scheme.\r\n *\r\n * @param s The string to encode.\r\n * @param encoding The encoding scheme. Defaults to utf-8.\r\n *\r\n * @doc {heading: 'Util'}\r\n */\r\nexport function encodeString(s, encoding = 'utf-8') {\r\n    encoding = encoding || 'utf-8';\r\n    return env().platform.encode(s, encoding);\r\n}\r\n/**\r\n * Decodes the provided bytes into a string using the provided encoding scheme.\r\n * @param bytes The bytes to decode.\r\n *\r\n * @param encoding The encoding scheme. Defaults to utf-8.\r\n *\r\n * @doc {heading: 'Util'}\r\n */\r\nexport function decodeString(bytes, encoding = 'utf-8') {\r\n    encoding = encoding || 'utf-8';\r\n    return env().platform.decode(bytes, encoding);\r\n}\r\n//# sourceMappingURL=util.js.map"]},"metadata":{},"sourceType":"module"}