{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/regenerator\";\nimport _slicedToArray from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _asyncToGenerator from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { nonMaxSuppressionV4Impl } from '../../backends/non_max_suppression_impl';\nimport { convertToTensor } from '../../tensor_util_env';\nimport { nonMaxSuppSanityCheck } from '../nonmax_util';\n/**\r\n * Asynchronously performs non maximum suppression of bounding boxes based on\r\n * iou (intersection over union), with an option to pad results.\r\n *\r\n * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is\r\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of\r\n *     the bounding box.\r\n * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.\r\n * @param maxOutputSize The maximum number of boxes to be selected.\r\n * @param iouThreshold A float representing the threshold for deciding whether\r\n *     boxes overlap too much with respect to IOU. Must be between [0, 1].\r\n *     Defaults to 0.5 (50% box overlap).\r\n * @param scoreThreshold A threshold for deciding when to remove boxes based\r\n *     on score. Defaults to -inf, which means any score is accepted.\r\n * @param padToMaxOutputSize Defalts to false. If true, size of output\r\n *     `selectedIndices` is padded to maxOutputSize.\r\n * @return A map with the following properties:\r\n *     - selectedIndices: A 1D tensor with the selected box indices.\r\n *     - validOutputs: A scalar denoting how many elements in `selectedIndices`\r\n *       are valid. Valid elements occur first, then padding.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\r\n */\n\nfunction nonMaxSuppressionPaddedAsync_(_x, _x2, _x3) {\n  return _nonMaxSuppressionPaddedAsync_.apply(this, arguments);\n}\n\nfunction _nonMaxSuppressionPaddedAsync_() {\n  _nonMaxSuppressionPaddedAsync_ = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(boxes, scores, maxOutputSize) {\n    var iouThreshold,\n        scoreThreshold,\n        padToMaxOutputSize,\n        $boxes,\n        $scores,\n        params,\n        $maxOutputSize,\n        $iouThreshold,\n        $scoreThreshold,\n        _yield$Promise$all,\n        _yield$Promise$all2,\n        boxesVals,\n        scoresVals,\n        res,\n        _args = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            iouThreshold = _args.length > 3 && _args[3] !== undefined ? _args[3] : 0.5;\n            scoreThreshold = _args.length > 4 && _args[4] !== undefined ? _args[4] : Number.NEGATIVE_INFINITY;\n            padToMaxOutputSize = _args.length > 5 && _args[5] !== undefined ? _args[5] : false;\n            $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppressionAsync');\n            $scores = convertToTensor(scores, 'scores', 'nonMaxSuppressionAsync');\n            params = nonMaxSuppSanityCheck($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold, null\n            /* softNmsSigma */\n            );\n            $maxOutputSize = params.maxOutputSize;\n            $iouThreshold = params.iouThreshold;\n            $scoreThreshold = params.scoreThreshold;\n            _context.next = 11;\n            return Promise.all([$boxes.data(), $scores.data()]);\n\n          case 11:\n            _yield$Promise$all = _context.sent;\n            _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);\n            boxesVals = _yield$Promise$all2[0];\n            scoresVals = _yield$Promise$all2[1];\n            // We call a cpu based impl directly with the typedarray data here rather\n            // than a kernel because all kernels are synchronous (and thus cannot await\n            // .data()).\n            res = nonMaxSuppressionV4Impl(boxesVals, scoresVals, $maxOutputSize, $iouThreshold, $scoreThreshold, padToMaxOutputSize);\n\n            if ($boxes !== boxes) {\n              $boxes.dispose();\n            }\n\n            if ($scores !== scores) {\n              $scores.dispose();\n            }\n\n            return _context.abrupt(\"return\", res);\n\n          case 19:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _nonMaxSuppressionPaddedAsync_.apply(this, arguments);\n}\n\nexport var nonMaxSuppressionPaddedAsync = nonMaxSuppressionPaddedAsync_;","map":{"version":3,"sources":["../../../src/ops/image/non_max_suppression_padded_async.ts"],"names":[],"mappings":";;;;AAAA;;;;;;;;;;;;;;;AAeG;AACH,SAAQ,uBAAR,QAAsC,yCAAtC;AAGA,SAAQ,eAAR,QAA8B,uBAA9B;AAEA,SAAQ,qBAAR,QAAoC,gBAApC;AAEA;;;;;;;;;;;;;;;;;;;;;;AAsBG;;SACY,6B;;;;;4FAAf,iBACI,KADJ,EACgC,MADhC,EAEI,aAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAE2B,YAAA,YAF3B,2DAE0C,GAF1C;AAGI,YAAA,cAHJ,2DAGqB,MAAM,CAAC,iBAH5B;AAII,YAAA,kBAJJ,2DAIyB,KAJzB;AAKQ,YAAA,MALR,GAKiB,eAAe,CAAC,KAAD,EAAQ,OAAR,EAAiB,wBAAjB,CALhC;AAMQ,YAAA,OANR,GAMkB,eAAe,CAAC,MAAD,EAAS,QAAT,EAAmB,wBAAnB,CANjC;AAQQ,YAAA,MARR,GAQiB,qBAAqB,CAChC,MADgC,EACxB,OADwB,EACf,aADe,EACA,YADA,EACc,cADd,EAEhC;AAAK;AAF2B,aARtC;AAWQ,YAAA,cAXR,GAWyB,MAAM,CAAC,aAXhC;AAYQ,YAAA,aAZR,GAYwB,MAAM,CAAC,YAZ/B;AAaQ,YAAA,eAbR,GAa0B,MAAM,CAAC,cAbjC;AAAA;AAAA,mBAgBY,OAAO,CAAC,GAAR,CAAY,CAAC,MAAM,CAAC,IAAP,EAAD,EAAgB,OAAO,CAAC,IAAR,EAAhB,CAAZ,CAhBZ;;AAAA;AAAA;AAAA;AAeS,YAAA,SAfT;AAeoB,YAAA,UAfpB;AAkBE;AACA;AACA;AACM,YAAA,GArBR,GAqBc,uBAAuB,CAC/B,SAD+B,EACpB,UADoB,EACR,cADQ,EACQ,aADR,EACuB,eADvB,EAE/B,kBAF+B,CArBrC;;AAyBE,gBAAI,MAAM,KAAK,KAAf,EAAsB;AACpB,cAAA,MAAM,CAAC,OAAP;AACD;;AACD,gBAAI,OAAO,KAAK,MAAhB,EAAwB;AACtB,cAAA,OAAO,CAAC,OAAR;AACD;;AA9BH,6CA+BS,GA/BT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAkCA,OAAO,IAAM,4BAA4B,GAAG,6BAArC","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { nonMaxSuppressionV4Impl } from '../../backends/non_max_suppression_impl';\r\nimport { convertToTensor } from '../../tensor_util_env';\r\nimport { nonMaxSuppSanityCheck } from '../nonmax_util';\r\n/**\r\n * Asynchronously performs non maximum suppression of bounding boxes based on\r\n * iou (intersection over union), with an option to pad results.\r\n *\r\n * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is\r\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of\r\n *     the bounding box.\r\n * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.\r\n * @param maxOutputSize The maximum number of boxes to be selected.\r\n * @param iouThreshold A float representing the threshold for deciding whether\r\n *     boxes overlap too much with respect to IOU. Must be between [0, 1].\r\n *     Defaults to 0.5 (50% box overlap).\r\n * @param scoreThreshold A threshold for deciding when to remove boxes based\r\n *     on score. Defaults to -inf, which means any score is accepted.\r\n * @param padToMaxOutputSize Defalts to false. If true, size of output\r\n *     `selectedIndices` is padded to maxOutputSize.\r\n * @return A map with the following properties:\r\n *     - selectedIndices: A 1D tensor with the selected box indices.\r\n *     - validOutputs: A scalar denoting how many elements in `selectedIndices`\r\n *       are valid. Valid elements occur first, then padding.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\r\n */\r\nasync function nonMaxSuppressionPaddedAsync_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY, padToMaxOutputSize = false) {\r\n    const $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppressionAsync');\r\n    const $scores = convertToTensor(scores, 'scores', 'nonMaxSuppressionAsync');\r\n    const params = nonMaxSuppSanityCheck($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold, null /* softNmsSigma */);\r\n    const $maxOutputSize = params.maxOutputSize;\r\n    const $iouThreshold = params.iouThreshold;\r\n    const $scoreThreshold = params.scoreThreshold;\r\n    const [boxesVals, scoresVals] = await Promise.all([$boxes.data(), $scores.data()]);\r\n    // We call a cpu based impl directly with the typedarray data here rather\r\n    // than a kernel because all kernels are synchronous (and thus cannot await\r\n    // .data()).\r\n    const res = nonMaxSuppressionV4Impl(boxesVals, scoresVals, $maxOutputSize, $iouThreshold, $scoreThreshold, padToMaxOutputSize);\r\n    if ($boxes !== boxes) {\r\n        $boxes.dispose();\r\n    }\r\n    if ($scores !== scores) {\r\n        $scores.dispose();\r\n    }\r\n    return res;\r\n}\r\nexport const nonMaxSuppressionPaddedAsync = nonMaxSuppressionPaddedAsync_;\r\n//# sourceMappingURL=non_max_suppression_padded_async.js.map"]},"metadata":{},"sourceType":"module"}