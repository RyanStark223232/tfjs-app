{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { MirrorPad } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\r\n * Pads a `tf.Tensor` using mirror padding.\r\n *\r\n * This operation implements the `REFLECT` and `SYMMETRIC` modes of pad.\r\n *\r\n * ```js\r\n * const x = tf.range(0, 9).reshape([1, 1, 3, 3]);\r\n * x.mirrorPad([[0, 0], [0, 0], [2, 2], [2, 2]], 'reflect').print();\r\n * ```\r\n * @param x The tensor to pad.\r\n * @param paddings An array of length `R` (the rank of the tensor), where\r\n * each element is a length-2 tuple of ints `[padBefore, padAfter]`,\r\n * specifying how much to pad along each dimension of the tensor.\r\n * In \"reflect\" mode, the padded regions do not include the borders,\r\n * while in \"symmetric\" mode the padded regions do include the borders.\r\n * For example, if the input is `[1, 2, 3]` and paddings is `[0, 2]`,\r\n * then the output is `[1, 2, 3, 2, 1]` in \"reflect\" mode, and\r\n * `[1, 2, 3, 3, 2]` in \"symmetric\" mode.\r\n * If `mode` is \"reflect\" then both `paddings[D, 0]` and `paddings[D, 1]`\r\n * must be no greater than `x.shape[D] - 1`. If mode is \"symmetric\"\r\n * then both `paddings[D, 0]` and `paddings[D, 1]` must be no greater than\r\n * `x.shape[D]`\r\n * @param mode String to specify padding mode. Can be `'reflect' | 'symmetric'`\r\n */\n\n/** @doc {heading: 'Tensors', subheading: 'Transformations'} */\n\nfunction mirrorPad_(x, paddings, mode) {\n  util.assert(mode === 'reflect' || mode === 'symmetric', () => `Invalid mode. Mode must be either reflect or symmetric. ` + `Got ${mode}.`);\n  const $x = convertToTensor(x, 'x', 'mirrorPad');\n\n  if ($x.rank === 0) {\n    throw new Error('mirrorPad(scalar) is not defined. ' + 'Pass non-scalar to mirrorPad');\n  }\n\n  util.assert(paddings.length === $x.rank, () => `Padding doesn't match input. Must be ${$x.rank}. ` + `Got ${paddings.length}.`);\n  const shapeOffset = mode === 'reflect' ? 1 : 0;\n\n  for (let i = 0; i < $x.rank; i++) {\n    util.assert(paddings[i].length === 2, () => `Invalid number of paddings. Must be length of 2 each.`);\n    util.assert(paddings[i][0] >= 0 && paddings[i][0] <= $x.shape[i] - shapeOffset && paddings[i][1] >= 0 && paddings[i][1] <= $x.shape[i] - shapeOffset, () => `Padding in dimension ${i} cannot be greater than or equal ` + `to ${$x.shape[i] - shapeOffset} or less than 0 for input of ` + `shape ${$x.shape}`);\n  }\n\n  const attrs = {\n    paddings,\n    mode\n  };\n  const inputs = {\n    x: $x\n  };\n  return ENGINE.runKernel(MirrorPad, inputs, attrs);\n}\n\nexport const mirrorPad = op({\n  mirrorPad_\n});","map":{"version":3,"sources":["../../src/ops/mirror_pad.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,MAAR,QAAqB,WAArB;AACA,SAAQ,SAAR,QAAyD,iBAAzD;AAIA,SAAQ,eAAR,QAA8B,oBAA9B;AAEA,OAAO,KAAK,IAAZ,MAAsB,SAAtB;AAEA,SAAQ,EAAR,QAAiB,aAAjB;AAEA;;;;;;;;;;;;;;;;;;;;;;;AAuBG;;AACH;;AACA,SAAS,UAAT,CACI,CADJ,EACqB,QADrB,EAEI,IAFJ,EAE+B;AAC7B,EAAA,IAAI,CAAC,MAAL,CACI,IAAI,KAAK,SAAT,IAAsB,IAAI,KAAK,WADnC,EAEI,MAAM,0DAAA,GACF,OAAO,IAAI,GAHnB;AAKA,QAAM,EAAE,GAAG,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,WAAT,CAA1B;;AACA,MAAI,EAAE,CAAC,IAAH,KAAY,CAAhB,EAAmB;AACjB,UAAM,IAAI,KAAJ,CACF,uCACA,8BAFE,CAAN;AAGD;;AACD,EAAA,IAAI,CAAC,MAAL,CACI,QAAQ,CAAC,MAAT,KAAoB,EAAE,CAAC,IAD3B,EAEI,MAAM,wCAAwC,EAAE,CAAC,IAAI,IAA/C,GACF,OAAO,QAAQ,CAAC,MAAM,GAH9B;AAIA,QAAM,WAAW,GAAG,IAAI,KAAK,SAAT,GAAqB,CAArB,GAAyB,CAA7C;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,EAAE,CAAC,IAAvB,EAA6B,CAAC,EAA9B,EAAkC;AAChC,IAAA,IAAI,CAAC,MAAL,CACI,QAAQ,CAAC,CAAD,CAAR,CAAY,MAAZ,KAAuB,CAD3B,EAEI,MAAM,uDAFV;AAGA,IAAA,IAAI,CAAC,MAAL,CACI,QAAQ,CAAC,CAAD,CAAR,CAAY,CAAZ,KAAkB,CAAlB,IAAuB,QAAQ,CAAC,CAAD,CAAR,CAAY,CAAZ,KAAkB,EAAE,CAAC,KAAH,CAAS,CAAT,IAAc,WAAvD,IACI,QAAQ,CAAC,CAAD,CAAR,CAAY,CAAZ,KAAkB,CADtB,IAC2B,QAAQ,CAAC,CAAD,CAAR,CAAY,CAAZ,KAAkB,EAAE,CAAC,KAAH,CAAS,CAAT,IAAc,WAF/D,EAGI,MAAM,wBAAwB,CAAC,mCAAzB,GACF,MAAM,EAAE,CAAC,KAAH,CAAS,CAAT,IAAc,WAAW,+BAD7B,GAEF,SAAS,EAAE,CAAC,KAAK,EALzB;AAMD;;AAED,QAAM,KAAK,GAAmB;AAAC,IAAA,QAAD;AAAW,IAAA;AAAX,GAA9B;AACA,QAAM,MAAM,GAAoB;AAAC,IAAA,CAAC,EAAE;AAAJ,GAAhC;AACA,SAAO,MAAM,CAAC,SAAP,CACI,SADJ,EACe,MADf,EAEI,KAFJ,CAAP;AAGD;;AAED,OAAO,MAAM,SAAS,GAAG,EAAE,CAAC;AAAC,EAAA;AAAD,CAAD,CAApB","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { ENGINE } from '../engine';\r\nimport { MirrorPad } from '../kernel_names';\r\nimport { convertToTensor } from '../tensor_util_env';\r\nimport * as util from '../util';\r\nimport { op } from './operation';\r\n/**\r\n * Pads a `tf.Tensor` using mirror padding.\r\n *\r\n * This operation implements the `REFLECT` and `SYMMETRIC` modes of pad.\r\n *\r\n * ```js\r\n * const x = tf.range(0, 9).reshape([1, 1, 3, 3]);\r\n * x.mirrorPad([[0, 0], [0, 0], [2, 2], [2, 2]], 'reflect').print();\r\n * ```\r\n * @param x The tensor to pad.\r\n * @param paddings An array of length `R` (the rank of the tensor), where\r\n * each element is a length-2 tuple of ints `[padBefore, padAfter]`,\r\n * specifying how much to pad along each dimension of the tensor.\r\n * In \"reflect\" mode, the padded regions do not include the borders,\r\n * while in \"symmetric\" mode the padded regions do include the borders.\r\n * For example, if the input is `[1, 2, 3]` and paddings is `[0, 2]`,\r\n * then the output is `[1, 2, 3, 2, 1]` in \"reflect\" mode, and\r\n * `[1, 2, 3, 3, 2]` in \"symmetric\" mode.\r\n * If `mode` is \"reflect\" then both `paddings[D, 0]` and `paddings[D, 1]`\r\n * must be no greater than `x.shape[D] - 1`. If mode is \"symmetric\"\r\n * then both `paddings[D, 0]` and `paddings[D, 1]` must be no greater than\r\n * `x.shape[D]`\r\n * @param mode String to specify padding mode. Can be `'reflect' | 'symmetric'`\r\n */\r\n/** @doc {heading: 'Tensors', subheading: 'Transformations'} */\r\nfunction mirrorPad_(x, paddings, mode) {\r\n    util.assert(mode === 'reflect' || mode === 'symmetric', () => `Invalid mode. Mode must be either reflect or symmetric. ` +\r\n        `Got ${mode}.`);\r\n    const $x = convertToTensor(x, 'x', 'mirrorPad');\r\n    if ($x.rank === 0) {\r\n        throw new Error('mirrorPad(scalar) is not defined. ' +\r\n            'Pass non-scalar to mirrorPad');\r\n    }\r\n    util.assert(paddings.length === $x.rank, () => `Padding doesn't match input. Must be ${$x.rank}. ` +\r\n        `Got ${paddings.length}.`);\r\n    const shapeOffset = mode === 'reflect' ? 1 : 0;\r\n    for (let i = 0; i < $x.rank; i++) {\r\n        util.assert(paddings[i].length === 2, () => `Invalid number of paddings. Must be length of 2 each.`);\r\n        util.assert(paddings[i][0] >= 0 && paddings[i][0] <= $x.shape[i] - shapeOffset &&\r\n            paddings[i][1] >= 0 && paddings[i][1] <= $x.shape[i] - shapeOffset, () => `Padding in dimension ${i} cannot be greater than or equal ` +\r\n            `to ${$x.shape[i] - shapeOffset} or less than 0 for input of ` +\r\n            `shape ${$x.shape}`);\r\n    }\r\n    const attrs = { paddings, mode };\r\n    const inputs = { x: $x };\r\n    return ENGINE.runKernel(MirrorPad, inputs, attrs);\r\n}\r\nexport const mirrorPad = op({ mirrorPad_ });\r\n//# sourceMappingURL=mirror_pad.js.map"]},"metadata":{},"sourceType":"module"}