{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { keep, tidy } from '../globals';\nimport { add } from '../ops/add';\nimport { mul } from '../ops/mul';\nimport { scalar } from '../ops/scalar';\nimport { registerClass } from '../serialization';\nimport { Optimizer } from './optimizer';\n/** @doclink Optimizer */\n\nexport var SGDOptimizer = /*#__PURE__*/function (_Optimizer) {\n  _inherits(SGDOptimizer, _Optimizer);\n\n  var _super = _createSuper(SGDOptimizer);\n\n  function SGDOptimizer(learningRate) {\n    var _this;\n\n    _classCallCheck(this, SGDOptimizer);\n\n    _this = _super.call(this);\n    _this.learningRate = learningRate;\n\n    _this.setLearningRate(learningRate);\n\n    return _this;\n  }\n\n  _createClass(SGDOptimizer, [{\n    key: \"applyGradients\",\n    value: function applyGradients(variableGradients) {\n      var _this2 = this;\n\n      var varNames = Array.isArray(variableGradients) ? variableGradients.map(function (v) {\n        return v.name;\n      }) : Object.keys(variableGradients);\n      varNames.forEach(function (name, i) {\n        var gradient = Array.isArray(variableGradients) ? variableGradients[i].tensor : variableGradients[name];\n\n        if (gradient == null) {\n          return;\n        }\n\n        var value = ENGINE.registeredVariables[name];\n        tidy(function () {\n          var newValue = add(mul(_this2.c, gradient), value);\n          value.assign(newValue);\n        });\n      });\n      this.incrementIterations();\n    }\n    /**\r\n     * Sets the learning rate of the optimizer.\r\n     */\n\n  }, {\n    key: \"setLearningRate\",\n    value: function setLearningRate(learningRate) {\n      this.learningRate = learningRate;\n\n      if (this.c != null) {\n        this.c.dispose();\n      }\n\n      this.c = keep(scalar(-learningRate));\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.c.dispose();\n    }\n  }, {\n    key: \"getWeights\",\n    value: function () {\n      var _getWeights = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.saveIterations();\n\n              case 2:\n                _context.t0 = _context.sent;\n                return _context.abrupt(\"return\", [_context.t0]);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getWeights() {\n        return _getWeights.apply(this, arguments);\n      }\n\n      return getWeights;\n    }()\n  }, {\n    key: \"setWeights\",\n    value: function () {\n      var _setWeights = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(weightValues) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.extractIterations(weightValues);\n\n              case 2:\n                weightValues = _context2.sent;\n\n                if (!(weightValues.length !== 0)) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                throw new Error('SGD optimizer does not have settable weights.');\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function setWeights(_x) {\n        return _setWeights.apply(this, arguments);\n      }\n\n      return setWeights;\n    }()\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return {\n        'learningRate': this.learningRate\n      };\n    }\n    /** @nocollapse */\n\n  }], [{\n    key: \"fromConfig\",\n    value: function fromConfig(cls, config) {\n      return new cls(config['learningRate']);\n    }\n  }]);\n\n  return SGDOptimizer;\n}(Optimizer);\n/** @nocollapse */\n\nSGDOptimizer.className = 'SGD'; // Note: Name matters for Python compatibility.\n\nregisterClass(SGDOptimizer);","map":{"version":3,"sources":["../../src/optimizers/sgd_optimizer.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { ENGINE } from '../engine';\r\nimport { keep, tidy } from '../globals';\r\nimport { add } from '../ops/add';\r\nimport { mul } from '../ops/mul';\r\nimport { scalar } from '../ops/scalar';\r\nimport { registerClass } from '../serialization';\r\nimport { Optimizer } from './optimizer';\r\n/** @doclink Optimizer */\r\nexport class SGDOptimizer extends Optimizer {\r\n    constructor(learningRate) {\r\n        super();\r\n        this.learningRate = learningRate;\r\n        this.setLearningRate(learningRate);\r\n    }\r\n    applyGradients(variableGradients) {\r\n        const varNames = Array.isArray(variableGradients) ?\r\n            variableGradients.map(v => v.name) :\r\n            Object.keys(variableGradients);\r\n        varNames.forEach((name, i) => {\r\n            const gradient = Array.isArray(variableGradients) ?\r\n                variableGradients[i].tensor :\r\n                variableGradients[name];\r\n            if (gradient == null) {\r\n                return;\r\n            }\r\n            const value = ENGINE.registeredVariables[name];\r\n            tidy(() => {\r\n                const newValue = add(mul(this.c, gradient), value);\r\n                value.assign(newValue);\r\n            });\r\n        });\r\n        this.incrementIterations();\r\n    }\r\n    /**\r\n     * Sets the learning rate of the optimizer.\r\n     */\r\n    setLearningRate(learningRate) {\r\n        this.learningRate = learningRate;\r\n        if (this.c != null) {\r\n            this.c.dispose();\r\n        }\r\n        this.c = keep(scalar(-learningRate));\r\n    }\r\n    dispose() {\r\n        this.c.dispose();\r\n    }\r\n    async getWeights() {\r\n        return [await this.saveIterations()];\r\n    }\r\n    async setWeights(weightValues) {\r\n        weightValues = await this.extractIterations(weightValues);\r\n        if (weightValues.length !== 0) {\r\n            throw new Error('SGD optimizer does not have settable weights.');\r\n        }\r\n    }\r\n    getConfig() {\r\n        return { 'learningRate': this.learningRate };\r\n    }\r\n    /** @nocollapse */\r\n    static fromConfig(cls, config) {\r\n        return new cls(config['learningRate']);\r\n    }\r\n}\r\n/** @nocollapse */\r\nSGDOptimizer.className = 'SGD'; // Note: Name matters for Python compatibility.\r\nregisterClass(SGDOptimizer);\r\n//# sourceMappingURL=sgd_optimizer.js.map"]},"metadata":{},"sourceType":"module"}