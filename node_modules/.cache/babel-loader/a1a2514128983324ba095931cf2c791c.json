{"ast":null,"code":"import { reshape as arrayReshape } from '../../utils/array';\nimport { factory } from '../../utils/factory';\nvar name = 'reshape';\nvar dependencies = ['typed', 'isInteger', 'matrix'];\nexport var createReshape = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      isInteger = _ref.isInteger,\n      matrix = _ref.matrix;\n  /**\r\n   * Reshape a multi dimensional array to fit the specified dimensions\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.reshape(x, sizes)\r\n   *\r\n   * Examples:\r\n   *\r\n   *     math.reshape([1, 2, 3, 4, 5, 6], [2, 3])\r\n   *     // returns Array  [[1, 2, 3], [4, 5, 6]]\r\n   *\r\n   *     math.reshape([[1, 2], [3, 4]], [1, 4])\r\n   *     // returns Array  [[1, 2, 3, 4]]\r\n   *\r\n   *     math.reshape([[1, 2], [3, 4]], [4])\r\n   *     // returns Array [1, 2, 3, 4]\r\n   *\r\n   *     const x = math.matrix([1, 2, 3, 4, 5, 6, 7, 8])\r\n   *     math.reshape(x, [2, 2, 2])\r\n   *     // returns Matrix [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]\r\n   *\r\n   * See also:\r\n   *\r\n   *     size, squeeze, resize\r\n   *\r\n   * @param {Array | Matrix | *} x  Matrix to be reshaped\r\n   * @param {number[]} sizes        One dimensional array with integral sizes for\r\n   *                                each dimension\r\n   *\r\n   * @return {* | Array | Matrix}   A reshaped clone of matrix `x`\r\n   *\r\n   * @throws {TypeError}            If `sizes` does not contain solely integers\r\n   * @throws {DimensionError}       If the product of the new dimension sizes does\r\n   *                                not equal that of the old ones\r\n   */\n\n  return typed(name, {\n    'Matrix, Array': function MatrixArray(x, sizes) {\n      if (x.reshape) {\n        return x.reshape(sizes);\n      } else {\n        return matrix(arrayReshape(x.valueOf(), sizes));\n      }\n    },\n    'Array, Array': function ArrayArray(x, sizes) {\n      sizes.forEach(function (size) {\n        if (!isInteger(size)) {\n          throw new TypeError('Invalid size for dimension: ' + size);\n        }\n      });\n      return arrayReshape(x, sizes);\n    }\n  });\n});","map":{"version":3,"sources":["C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/mathjs/es/function/matrix/reshape.js"],"names":["reshape","arrayReshape","factory","name","dependencies","createReshape","_ref","typed","isInteger","matrix","MatrixArray","x","sizes","valueOf","ArrayArray","forEach","size","TypeError"],"mappings":"AAAA,SAASA,OAAO,IAAIC,YAApB,QAAwC,mBAAxC;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,IAAIC,IAAI,GAAG,SAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,WAAV,EAAuB,QAAvB,CAAnB;AACA,OAAO,IAAIC,aAAa,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AACpF,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAAA,MACIC,SAAS,GAAGF,IAAI,CAACE,SADrB;AAAA,MAEIC,MAAM,GAAGH,IAAI,CAACG,MAFlB;AAIA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOF,KAAK,CAACJ,IAAD,EAAO;AACjB,qBAAiB,SAASO,WAAT,CAAqBC,CAArB,EAAwBC,KAAxB,EAA+B;AAC9C,UAAID,CAAC,CAACX,OAAN,EAAe;AACb,eAAOW,CAAC,CAACX,OAAF,CAAUY,KAAV,CAAP;AACD,OAFD,MAEO;AACL,eAAOH,MAAM,CAACR,YAAY,CAACU,CAAC,CAACE,OAAF,EAAD,EAAcD,KAAd,CAAb,CAAb;AACD;AACF,KAPgB;AAQjB,oBAAgB,SAASE,UAAT,CAAoBH,CAApB,EAAuBC,KAAvB,EAA8B;AAC5CA,MAAAA,KAAK,CAACG,OAAN,CAAc,UAAUC,IAAV,EAAgB;AAC5B,YAAI,CAACR,SAAS,CAACQ,IAAD,CAAd,EAAsB;AACpB,gBAAM,IAAIC,SAAJ,CAAc,iCAAiCD,IAA/C,CAAN;AACD;AACF,OAJD;AAKA,aAAOf,YAAY,CAACU,CAAD,EAAIC,KAAJ,CAAnB;AACD;AAfgB,GAAP,CAAZ;AAiBD,CA1DgD,CAA1C","sourcesContent":["import { reshape as arrayReshape } from '../../utils/array';\r\nimport { factory } from '../../utils/factory';\r\nvar name = 'reshape';\r\nvar dependencies = ['typed', 'isInteger', 'matrix'];\r\nexport var createReshape = /* #__PURE__ */factory(name, dependencies, function (_ref) {\r\n  var typed = _ref.typed,\r\n      isInteger = _ref.isInteger,\r\n      matrix = _ref.matrix;\r\n\r\n  /**\r\n   * Reshape a multi dimensional array to fit the specified dimensions\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.reshape(x, sizes)\r\n   *\r\n   * Examples:\r\n   *\r\n   *     math.reshape([1, 2, 3, 4, 5, 6], [2, 3])\r\n   *     // returns Array  [[1, 2, 3], [4, 5, 6]]\r\n   *\r\n   *     math.reshape([[1, 2], [3, 4]], [1, 4])\r\n   *     // returns Array  [[1, 2, 3, 4]]\r\n   *\r\n   *     math.reshape([[1, 2], [3, 4]], [4])\r\n   *     // returns Array [1, 2, 3, 4]\r\n   *\r\n   *     const x = math.matrix([1, 2, 3, 4, 5, 6, 7, 8])\r\n   *     math.reshape(x, [2, 2, 2])\r\n   *     // returns Matrix [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]\r\n   *\r\n   * See also:\r\n   *\r\n   *     size, squeeze, resize\r\n   *\r\n   * @param {Array | Matrix | *} x  Matrix to be reshaped\r\n   * @param {number[]} sizes        One dimensional array with integral sizes for\r\n   *                                each dimension\r\n   *\r\n   * @return {* | Array | Matrix}   A reshaped clone of matrix `x`\r\n   *\r\n   * @throws {TypeError}            If `sizes` does not contain solely integers\r\n   * @throws {DimensionError}       If the product of the new dimension sizes does\r\n   *                                not equal that of the old ones\r\n   */\r\n  return typed(name, {\r\n    'Matrix, Array': function MatrixArray(x, sizes) {\r\n      if (x.reshape) {\r\n        return x.reshape(sizes);\r\n      } else {\r\n        return matrix(arrayReshape(x.valueOf(), sizes));\r\n      }\r\n    },\r\n    'Array, Array': function ArrayArray(x, sizes) {\r\n      sizes.forEach(function (size) {\r\n        if (!isInteger(size)) {\r\n          throw new TypeError('Invalid size for dimension: ' + size);\r\n        }\r\n      });\r\n      return arrayReshape(x, sizes);\r\n    }\r\n  });\r\n});"]},"metadata":{},"sourceType":"module"}