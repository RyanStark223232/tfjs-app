{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { Unpack } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\r\n * Unstacks a `tf.Tensor` of rank-`R` into a list of rank-`(R-1)` `tf.Tensor`s.\r\n *\r\n * ```js\r\n * const a = tf.tensor2d([1, 2, 3, 4], [2, 2]);\r\n *\r\n * tf.unstack(a).forEach(tensor => tensor.print());\r\n * ```\r\n *\r\n * @param x A tensor object.\r\n * @param axis The axis to unstack along. Defaults to 0 (the first dim).\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\r\n */\n\nfunction unstack_(x) {\n  var axis = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var $x = convertToTensor(x, 'x', 'unstack');\n  util.assert(axis >= -$x.shape.length && axis < $x.shape.length, function () {\n    return \"Axis = \".concat(axis, \" is not in [-\").concat($x.shape.length, \", \").concat($x.shape.length, \")\");\n  });\n\n  if (axis < 0) {\n    axis += $x.shape.length;\n  }\n\n  var inputs = {\n    value: $x\n  };\n  var attrs = {\n    axis: axis\n  };\n\n  var forward = function forward(backend) {\n    return backend.unstack($x, axis);\n  };\n\n  return ENGINE.runKernelFunc(forward, inputs, null\n  /* grad */\n  , Unpack, attrs);\n}\n\nexport var unstack = op({\n  unstack_: unstack_\n});","map":{"version":3,"sources":["../../src/ops/unstack.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAGH,SAAQ,MAAR,QAAkC,WAAlC;AACA,SAAQ,MAAR,QAAgD,iBAAhD;AAIA,SAAQ,eAAR,QAA8B,oBAA9B;AAEA,OAAO,KAAK,IAAZ,MAAsB,SAAtB;AAEA,SAAQ,EAAR,QAAiB,aAAjB;AAEA;;;;;;;;;;;;;AAaG;;AACH,SAAS,QAAT,CAAkB,CAAlB,EAAgD;AAAA,MAAR,IAAQ,uEAAD,CAAC;AAC9C,MAAM,EAAE,GAAG,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,SAAT,CAA1B;AACA,EAAA,IAAI,CAAC,MAAL,CACI,IAAI,IAAI,CAAC,EAAE,CAAC,KAAH,CAAS,MAAlB,IAA4B,IAAI,GAAG,EAAE,CAAC,KAAH,CAAS,MADhD,EAEI;AAAA,4BACc,IADd,0BACkC,EAAE,CAAC,KAAH,CAAS,MAD3C,eACsD,EAAE,CAAC,KAAH,CAAS,MAD/D;AAAA,GAFJ;;AAIA,MAAI,IAAI,GAAG,CAAX,EAAc;AACZ,IAAA,IAAI,IAAI,EAAE,CAAC,KAAH,CAAS,MAAjB;AACD;;AACD,MAAM,MAAM,GAAiB;AAAC,IAAA,KAAK,EAAE;AAAR,GAA7B;AACA,MAAM,KAAK,GAAgB;AAAC,IAAA,IAAI,EAAJ;AAAD,GAA3B;;AACA,MAAM,OAAO,GAA0B,SAAjC,OAAiC,CAAC,OAAD;AAAA,WACnC,OAAO,CAAC,OAAR,CAAgB,EAAhB,EAAoB,IAApB,CADmC;AAAA,GAAvC;;AAEA,SAAO,MAAM,CAAC,aAAP,CACH,OADG,EACM,MADN,EACsC;AAAK;AAD3C,IACuD,MADvD,EAEH,KAFG,CAAP;AAGD;;AAED,OAAO,IAAM,OAAO,GAAG,EAAE,CAAC;AAAC,EAAA,QAAQ,EAAR;AAAD,CAAD,CAAlB","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { ENGINE } from '../engine';\r\nimport { Unpack } from '../kernel_names';\r\nimport { convertToTensor } from '../tensor_util_env';\r\nimport * as util from '../util';\r\nimport { op } from './operation';\r\n/**\r\n * Unstacks a `tf.Tensor` of rank-`R` into a list of rank-`(R-1)` `tf.Tensor`s.\r\n *\r\n * ```js\r\n * const a = tf.tensor2d([1, 2, 3, 4], [2, 2]);\r\n *\r\n * tf.unstack(a).forEach(tensor => tensor.print());\r\n * ```\r\n *\r\n * @param x A tensor object.\r\n * @param axis The axis to unstack along. Defaults to 0 (the first dim).\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\r\n */\r\nfunction unstack_(x, axis = 0) {\r\n    const $x = convertToTensor(x, 'x', 'unstack');\r\n    util.assert(axis >= -$x.shape.length && axis < $x.shape.length, () => `Axis = ${axis} is not in [-${$x.shape.length}, ${$x.shape.length})`);\r\n    if (axis < 0) {\r\n        axis += $x.shape.length;\r\n    }\r\n    const inputs = { value: $x };\r\n    const attrs = { axis };\r\n    const forward = (backend) => backend.unstack($x, axis);\r\n    return ENGINE.runKernelFunc(forward, inputs, null /* grad */, Unpack, attrs);\r\n}\r\nexport const unstack = op({ unstack_ });\r\n//# sourceMappingURL=unstack.js.map"]},"metadata":{},"sourceType":"module"}