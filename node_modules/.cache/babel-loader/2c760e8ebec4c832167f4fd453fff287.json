{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { ClipByValue } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\r\n * Clips values element-wise. `max(min(x, clipValueMax), clipValueMin)`\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([-1, 2, -3, 4]);\r\n *\r\n * x.clipByValue(-2, 3).print();  // or tf.clipByValue(x, -2, 3)\r\n * ```\r\n * @param x The input tensor.\r\n * @param clipValueMin Lower-bound of range to be clipped to.\r\n * @param clipValueMax Upper-bound of range to be clipped to.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Basic math'}\r\n */\n\nfunction clipByValue_(x, clipValueMin, clipValueMax) {\n  const $x = convertToTensor(x, 'x', 'clipByValue');\n  util.assert(clipValueMin <= clipValueMax, () => `Error in clip: min (${clipValueMin}) must be ` + `less than or equal to max (${clipValueMax}).`);\n  const inputs = {\n    x: $x\n  };\n  const attrs = {\n    clipValueMin,\n    clipValueMax\n  };\n  return ENGINE.runKernelFunc((backend, save) => {\n    const res = backend.clip($x, clipValueMin, clipValueMax);\n    save([$x]);\n    return res;\n  }, inputs, null\n  /* grad */\n  , ClipByValue, attrs);\n}\n\nexport const clipByValue = op({\n  clipByValue_\n});","map":{"version":3,"sources":["../../src/ops/clip_by_value.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AACH,SAAQ,MAAR,QAAqB,WAArB;AACA,SAAQ,WAAR,QAA+D,iBAA/D;AAIA,SAAQ,eAAR,QAA8B,oBAA9B;AAEA,OAAO,KAAK,IAAZ,MAAsB,SAAtB;AAEA,SAAQ,EAAR,QAAiB,aAAjB;AAEA;;;;;;;;;;;;;AAaG;;AACH,SAAS,YAAT,CACI,CADJ,EACqB,YADrB,EAC2C,YAD3C,EAC+D;AAC7D,QAAM,EAAE,GAAG,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,aAAT,CAA1B;AACA,EAAA,IAAI,CAAC,MAAL,CACK,YAAY,IAAI,YADrB,EAEI,MAAM,uBAAuB,YAAY,YAAnC,GACF,8BAA8B,YAAY,IAHlD;AAKA,QAAM,MAAM,GAAsB;AAAC,IAAA,CAAC,EAAE;AAAJ,GAAlC;AACA,QAAM,KAAK,GAAqB;AAAC,IAAA,YAAD;AAAe,IAAA;AAAf,GAAhC;AAEA,SAAO,MAAM,CAAC,aAAP,CACH,CAAC,OAAD,EAAU,IAAV,KAAkB;AAChB,UAAM,GAAG,GAAG,OAAO,CAAC,IAAR,CAAa,EAAb,EAAiB,YAAjB,EAA+B,YAA/B,CAAZ;AACA,IAAA,IAAI,CAAC,CAAC,EAAD,CAAD,CAAJ;AACA,WAAO,GAAP;AACD,GALE,EAMH,MANG,EAM6B;AAAK;AANlC,IAM8C,WAN9C,EAOH,KAPG,CAAP;AAQD;;AAED,OAAO,MAAM,WAAW,GAAG,EAAE,CAAC;AAAC,EAAA;AAAD,CAAD,CAAtB","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { ENGINE } from '../engine';\r\nimport { ClipByValue } from '../kernel_names';\r\nimport { convertToTensor } from '../tensor_util_env';\r\nimport * as util from '../util';\r\nimport { op } from './operation';\r\n/**\r\n * Clips values element-wise. `max(min(x, clipValueMax), clipValueMin)`\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([-1, 2, -3, 4]);\r\n *\r\n * x.clipByValue(-2, 3).print();  // or tf.clipByValue(x, -2, 3)\r\n * ```\r\n * @param x The input tensor.\r\n * @param clipValueMin Lower-bound of range to be clipped to.\r\n * @param clipValueMax Upper-bound of range to be clipped to.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Basic math'}\r\n */\r\nfunction clipByValue_(x, clipValueMin, clipValueMax) {\r\n    const $x = convertToTensor(x, 'x', 'clipByValue');\r\n    util.assert((clipValueMin <= clipValueMax), () => `Error in clip: min (${clipValueMin}) must be ` +\r\n        `less than or equal to max (${clipValueMax}).`);\r\n    const inputs = { x: $x };\r\n    const attrs = { clipValueMin, clipValueMax };\r\n    return ENGINE.runKernelFunc((backend, save) => {\r\n        const res = backend.clip($x, clipValueMin, clipValueMax);\r\n        save([$x]);\r\n        return res;\r\n    }, inputs, null /* grad */, ClipByValue, attrs);\r\n}\r\nexport const clipByValue = op({ clipByValue_ });\r\n//# sourceMappingURL=clip_by_value.js.map"]},"metadata":{},"sourceType":"module"}