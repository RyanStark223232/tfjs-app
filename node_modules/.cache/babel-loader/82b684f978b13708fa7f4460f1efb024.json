{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport * as util from './util';\nexport class Profiler {\n  constructor(backendTimer, logger) {\n    this.backendTimer = backendTimer;\n    this.logger = logger;\n\n    if (logger == null) {\n      this.logger = new Logger();\n    }\n  }\n\n  profileKernel(kernelName, inputs, f) {\n    let outputs;\n\n    const holdResultWrapperFn = () => {\n      outputs = f();\n    };\n\n    const timer = this.backendTimer.time(holdResultWrapperFn);\n\n    for (let i = 0; i < outputs.length; i++) {\n      const output = outputs[i]; // Dangling promise here because we don't want to propagate up\n      // asynchronicity.\n\n      output.data().then(tensorVals => {\n        checkComputationForErrors(tensorVals, output.dtype, kernelName);\n      });\n    }\n\n    const kernelProfile = {\n      kernelName,\n      outputs,\n      inputs,\n      timeMs: timer.then(timing => timing.kernelMs),\n      extraInfo: timer.then(timing => timing.getExtraProfileInfo != null ? timing.getExtraProfileInfo() : '')\n    };\n    return kernelProfile;\n  }\n\n  logKernelProfile(kernelProfile) {\n    const {\n      kernelName,\n      outputs,\n      timeMs,\n      inputs,\n      extraInfo\n    } = kernelProfile;\n    outputs.forEach(result => {\n      Promise.all([result.data(), timeMs, extraInfo]).then(valueContainer => {\n        this.logger.logKernelProfile(kernelName, result, valueContainer[0], valueContainer[1], inputs, valueContainer[2]);\n      });\n    });\n  }\n\n}\nexport function checkComputationForErrors(vals, dtype, kernelName) {\n  if (dtype !== 'float32') {\n    // Only floating point computations will generate NaN values\n    return false;\n  }\n\n  for (let i = 0; i < vals.length; i++) {\n    const num = vals[i];\n\n    if (isNaN(num) || !isFinite(num)) {\n      // Throwing custom exception so behavior is testable.\n      console.warn(`Found ${num} in the result of '${kernelName}'`);\n      return true;\n    }\n  }\n\n  return false;\n}\nexport class Logger {\n  logKernelProfile(name, result, vals, timeMs, inputs, extraInfo) {\n    const time = typeof timeMs === 'number' ? util.rightPad(`${timeMs}ms`, 9) : timeMs['error'];\n    const paddedName = util.rightPad(name, 25);\n    const rank = result.rank;\n    const size = result.size;\n    const shape = util.rightPad(result.shape.toString(), 14);\n    let inputShapesDescription = '';\n\n    for (const name in inputs) {\n      const input = inputs[name];\n\n      if (input != null) {\n        // The input might be a non-tensor (e.g HTMLImageElement), in which case\n        // we claim the output shape as input shape.\n        const inputShape = input.shape || result.shape;\n        const inputRank = inputShape.length;\n        inputShapesDescription += `${name}: ${inputRank}D ${inputRank > 0 ? inputShape : ''} `;\n      }\n    }\n\n    console.log(`%c${paddedName}\\t%c${time}\\t%c${rank}D ${shape}\\t%c${size}\\t%c${inputShapesDescription}\\t%c${extraInfo}`, 'font-weight:bold', 'color:red', 'color:blue', 'color: orange', 'color: green', 'color: steelblue');\n  }\n\n}","map":{"version":3,"sources":["../src/profiler.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAMH,OAAO,KAAK,IAAZ,MAAsB,QAAtB;AAUA,OAAM,MAAO,QAAP,CAAe;AACnB,EAAA,WAAA,CAAoB,YAApB,EAAwD,MAAxD,EAAuE;AAAnD,SAAA,YAAA,GAAA,YAAA;AAAoC,SAAA,MAAA,GAAA,MAAA;;AACtD,QAAI,MAAM,IAAI,IAAd,EAAoB;AAClB,WAAK,MAAL,GAAc,IAAI,MAAJ,EAAd;AACD;AACF;;AAED,EAAA,aAAa,CAAC,UAAD,EAAqB,MAArB,EAA6C,CAA7C,EAA8D;AAEzE,QAAI,OAAJ;;AACA,UAAM,mBAAmB,GAAG,MAAK;AAC/B,MAAA,OAAO,GAAG,CAAC,EAAX;AACD,KAFD;;AAGA,UAAM,KAAK,GAAG,KAAK,YAAL,CAAkB,IAAlB,CAAuB,mBAAvB,CAAd;;AAEA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,OAAO,CAAC,MAA5B,EAAoC,CAAC,EAArC,EAAyC;AACvC,YAAM,MAAM,GAAG,OAAO,CAAC,CAAD,CAAtB,CADuC,CAEvC;AACA;;AACA,MAAA,MAAM,CAAC,IAAP,GAAc,IAAd,CAAmB,UAAU,IAAG;AAC9B,QAAA,yBAAyB,CAAC,UAAD,EAAa,MAAM,CAAC,KAApB,EAA2B,UAA3B,CAAzB;AACD,OAFD;AAGD;;AAED,UAAM,aAAa,GAAG;AACpB,MAAA,UADoB;AAEpB,MAAA,OAFoB;AAGpB,MAAA,MAHoB;AAIpB,MAAA,MAAM,EAAE,KAAK,CAAC,IAAN,CAAW,MAAM,IAAI,MAAM,CAAC,QAA5B,CAJY;AAKpB,MAAA,SAAS,EAAE,KAAK,CAAC,IAAN,CACP,MAAM,IAAI,MAAM,CAAC,mBAAP,IAA8B,IAA9B,GACN,MAAM,CAAC,mBAAP,EADM,GAEN,EAHG;AALS,KAAtB;AAUA,WAAO,aAAP;AACD;;AAED,EAAA,gBAAgB,CAAC,aAAD,EAA6B;AAC3C,UAAM;AAAC,MAAA,UAAD;AAAa,MAAA,OAAb;AAAsB,MAAA,MAAtB;AAA8B,MAAA,MAA9B;AAAsC,MAAA;AAAtC,QAAmD,aAAzD;AAEA,IAAA,OAAO,CAAC,OAAR,CAAgB,MAAM,IAAG;AACvB,MAAA,OAAO,CAAC,GAAR,CAAY,CAAC,MAAM,CAAC,IAAP,EAAD,EAAgB,MAAhB,EAAwB,SAAxB,CAAZ,EAAgD,IAAhD,CAAqD,cAAc,IAAG;AACpE,aAAK,MAAL,CAAY,gBAAZ,CACI,UADJ,EACgB,MADhB,EACwB,cAAc,CAAC,CAAD,CADtC,EAC2C,cAAc,CAAC,CAAD,CADzD,EAC8D,MAD9D,EAEI,cAAc,CAAC,CAAD,CAFlB;AAGD,OAJD;AAKD,KAND;AAOD;;AA/CkB;AAkDrB,OAAM,SAAU,yBAAV,CACF,IADE,EACoB,KADpB,EAC8B,UAD9B,EACgD;AACpD,MAAI,KAAK,KAAK,SAAd,EAAyB;AACvB;AACA,WAAO,KAAP;AACD;;AACD,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,IAAI,CAAC,MAAzB,EAAiC,CAAC,EAAlC,EAAsC;AACpC,UAAM,GAAG,GAAG,IAAI,CAAC,CAAD,CAAhB;;AACA,QAAI,KAAK,CAAC,GAAD,CAAL,IAAc,CAAC,QAAQ,CAAC,GAAD,CAA3B,EAAkC;AAChC;AACA,MAAA,OAAO,CAAC,IAAR,CAAa,SAAS,GAAG,sBAAsB,UAAU,GAAzD;AACA,aAAO,IAAP;AACD;AACF;;AACD,SAAO,KAAP;AACD;AAED,OAAM,MAAO,MAAP,CAAa;AACjB,EAAA,gBAAgB,CACZ,IADY,EACE,MADF,EACkB,IADlB,EAEZ,MAFY,EAEoB,MAFpB,EAGZ,SAHY,EAGM;AACpB,UAAM,IAAI,GAAG,OAAO,MAAP,KAAkB,QAAlB,GAA6B,IAAI,CAAC,QAAL,CAAc,GAAG,MAAM,IAAvB,EAA6B,CAA7B,CAA7B,GAC6B,MAAM,CAAC,OAAD,CADhD;AAEA,UAAM,UAAU,GAAG,IAAI,CAAC,QAAL,CAAc,IAAd,EAAoB,EAApB,CAAnB;AACA,UAAM,IAAI,GAAG,MAAM,CAAC,IAApB;AACA,UAAM,IAAI,GAAG,MAAM,CAAC,IAApB;AACA,UAAM,KAAK,GAAG,IAAI,CAAC,QAAL,CAAc,MAAM,CAAC,KAAP,CAAa,QAAb,EAAd,EAAuC,EAAvC,CAAd;AACA,QAAI,sBAAsB,GAAG,EAA7B;;AAEA,SAAK,MAAM,IAAX,IAAmB,MAAnB,EAA2B;AACzB,YAAM,KAAK,GAAG,MAAM,CAAC,IAAD,CAApB;;AACA,UAAI,KAAK,IAAI,IAAb,EAAmB;AACjB;AACA;AACA,cAAM,UAAU,GAAG,KAAK,CAAC,KAAN,IAAe,MAAM,CAAC,KAAzC;AACA,cAAM,SAAS,GAAG,UAAU,CAAC,MAA7B;AACA,QAAA,sBAAsB,IAClB,GAAG,IAAI,KAAK,SAAS,KAAK,SAAS,GAAG,CAAZ,GAAgB,UAAhB,GAA6B,EAAE,GAD7D;AAED;AACF;;AAED,IAAA,OAAO,CAAC,GAAR,CACI,KAAK,UAAU,OAAO,IAAI,OAAO,IAAI,KAAK,KAAK,OAAO,IAAI,OACtD,sBAAsB,OAAO,SAAS,EAF9C,EAGI,kBAHJ,EAGwB,WAHxB,EAGqC,YAHrC,EAGmD,eAHnD,EAII,cAJJ,EAIoB,kBAJpB;AAKD;;AA9BgB","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport * as util from './util';\r\nexport class Profiler {\r\n    constructor(backendTimer, logger) {\r\n        this.backendTimer = backendTimer;\r\n        this.logger = logger;\r\n        if (logger == null) {\r\n            this.logger = new Logger();\r\n        }\r\n    }\r\n    profileKernel(kernelName, inputs, f) {\r\n        let outputs;\r\n        const holdResultWrapperFn = () => {\r\n            outputs = f();\r\n        };\r\n        const timer = this.backendTimer.time(holdResultWrapperFn);\r\n        for (let i = 0; i < outputs.length; i++) {\r\n            const output = outputs[i];\r\n            // Dangling promise here because we don't want to propagate up\r\n            // asynchronicity.\r\n            output.data().then(tensorVals => {\r\n                checkComputationForErrors(tensorVals, output.dtype, kernelName);\r\n            });\r\n        }\r\n        const kernelProfile = {\r\n            kernelName,\r\n            outputs,\r\n            inputs,\r\n            timeMs: timer.then(timing => timing.kernelMs),\r\n            extraInfo: timer.then(timing => timing.getExtraProfileInfo != null ?\r\n                timing.getExtraProfileInfo() :\r\n                '')\r\n        };\r\n        return kernelProfile;\r\n    }\r\n    logKernelProfile(kernelProfile) {\r\n        const { kernelName, outputs, timeMs, inputs, extraInfo } = kernelProfile;\r\n        outputs.forEach(result => {\r\n            Promise.all([result.data(), timeMs, extraInfo]).then(valueContainer => {\r\n                this.logger.logKernelProfile(kernelName, result, valueContainer[0], valueContainer[1], inputs, valueContainer[2]);\r\n            });\r\n        });\r\n    }\r\n}\r\nexport function checkComputationForErrors(vals, dtype, kernelName) {\r\n    if (dtype !== 'float32') {\r\n        // Only floating point computations will generate NaN values\r\n        return false;\r\n    }\r\n    for (let i = 0; i < vals.length; i++) {\r\n        const num = vals[i];\r\n        if (isNaN(num) || !isFinite(num)) {\r\n            // Throwing custom exception so behavior is testable.\r\n            console.warn(`Found ${num} in the result of '${kernelName}'`);\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nexport class Logger {\r\n    logKernelProfile(name, result, vals, timeMs, inputs, extraInfo) {\r\n        const time = typeof timeMs === 'number' ? util.rightPad(`${timeMs}ms`, 9) :\r\n            timeMs['error'];\r\n        const paddedName = util.rightPad(name, 25);\r\n        const rank = result.rank;\r\n        const size = result.size;\r\n        const shape = util.rightPad(result.shape.toString(), 14);\r\n        let inputShapesDescription = '';\r\n        for (const name in inputs) {\r\n            const input = inputs[name];\r\n            if (input != null) {\r\n                // The input might be a non-tensor (e.g HTMLImageElement), in which case\r\n                // we claim the output shape as input shape.\r\n                const inputShape = input.shape || result.shape;\r\n                const inputRank = inputShape.length;\r\n                inputShapesDescription +=\r\n                    `${name}: ${inputRank}D ${inputRank > 0 ? inputShape : ''} `;\r\n            }\r\n        }\r\n        console.log(`%c${paddedName}\\t%c${time}\\t%c${rank}D ${shape}\\t%c${size}\\t%c${inputShapesDescription}\\t%c${extraInfo}`, 'font-weight:bold', 'color:red', 'color:blue', 'color: orange', 'color: green', 'color: steelblue');\r\n    }\r\n}\r\n//# sourceMappingURL=profiler.js.map"]},"metadata":{},"sourceType":"module"}