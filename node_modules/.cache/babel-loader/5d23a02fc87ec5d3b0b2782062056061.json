{"ast":null,"code":"import _inherits from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _regeneratorRuntime from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { tensorToString } from './tensor_format';\nimport * as util from './util';\nimport { computeStrides, toNestedArray } from './util';\n/**\r\n * A mutable object, similar to `tf.Tensor`, that allows users to set values\r\n * at locations before converting to an immutable `tf.Tensor`.\r\n *\r\n * See `tf.buffer` for creating a tensor buffer.\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n */\n\nexport var TensorBuffer = /*#__PURE__*/function () {\n  function TensorBuffer(shape, dtype, values) {\n    var _this = this;\n\n    _classCallCheck(this, TensorBuffer);\n\n    this.dtype = dtype;\n    this.shape = shape.slice();\n    this.size = util.sizeFromShape(shape);\n\n    if (values != null) {\n      var n = values.length;\n      util.assert(n === this.size, function () {\n        return \"Length of values '\".concat(n, \"' does not match the size \") + \"inferred by the shape '\".concat(_this.size, \"'.\");\n      });\n    }\n\n    if (dtype === 'complex64') {\n      throw new Error(\"complex64 dtype TensorBuffers are not supported. Please create \" + \"a TensorBuffer for the real and imaginary parts separately and \" + \"call tf.complex(real, imag).\");\n    }\n\n    this.values = values || util.getArrayFromDType(dtype, this.size);\n    this.strides = computeStrides(shape);\n  }\n  /**\r\n   * Sets a value in the buffer at a given location.\r\n   *\r\n   * @param value The value to set.\r\n   * @param locs  The location indices.\r\n   *\r\n   * @doc {heading: 'Tensors', subheading: 'Creation'}\r\n   */\n\n\n  _createClass(TensorBuffer, [{\n    key: \"set\",\n    value: function set(value) {\n      var _this2 = this;\n\n      for (var _len = arguments.length, locs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        locs[_key - 1] = arguments[_key];\n      }\n\n      if (locs.length === 0) {\n        locs = [0];\n      }\n\n      util.assert(locs.length === this.rank, function () {\n        return \"The number of provided coordinates (\".concat(locs.length, \") must \") + \"match the rank (\".concat(_this2.rank, \")\");\n      });\n      var index = this.locToIndex(locs);\n      this.values[index] = value;\n    }\n    /**\r\n     * Returns the value in the buffer at the provided location.\r\n     *\r\n     * @param locs The location indices.\r\n     *\r\n     * @doc {heading: 'Tensors', subheading: 'Creation'}\r\n     */\n\n  }, {\n    key: \"get\",\n    value: function get() {\n      for (var _len2 = arguments.length, locs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        locs[_key2] = arguments[_key2];\n      }\n\n      if (locs.length === 0) {\n        locs = [0];\n      }\n\n      var i = 0;\n\n      for (var _i = 0, _locs = locs; _i < _locs.length; _i++) {\n        var loc = _locs[_i];\n\n        if (loc < 0 || loc >= this.shape[i]) {\n          var msg = \"Requested out of range element at \".concat(locs, \". \") + \"  Buffer shape=\".concat(this.shape);\n          throw new Error(msg);\n        }\n\n        i++;\n      }\n\n      var index = locs[locs.length - 1];\n\n      for (var _i2 = 0; _i2 < locs.length - 1; ++_i2) {\n        index += this.strides[_i2] * locs[_i2];\n      }\n\n      return this.values[index];\n    }\n  }, {\n    key: \"locToIndex\",\n    value: function locToIndex(locs) {\n      if (this.rank === 0) {\n        return 0;\n      } else if (this.rank === 1) {\n        return locs[0];\n      }\n\n      var index = locs[locs.length - 1];\n\n      for (var i = 0; i < locs.length - 1; ++i) {\n        index += this.strides[i] * locs[i];\n      }\n\n      return index;\n    }\n  }, {\n    key: \"indexToLoc\",\n    value: function indexToLoc(index) {\n      if (this.rank === 0) {\n        return [];\n      } else if (this.rank === 1) {\n        return [index];\n      }\n\n      var locs = new Array(this.shape.length);\n\n      for (var i = 0; i < locs.length - 1; ++i) {\n        locs[i] = Math.floor(index / this.strides[i]);\n        index -= locs[i] * this.strides[i];\n      }\n\n      locs[locs.length - 1] = index;\n      return locs;\n    }\n  }, {\n    key: \"toTensor\",\n\n    /**\r\n     * Creates an immutable `tf.Tensor` object from the buffer.\r\n     *\r\n     * @doc {heading: 'Tensors', subheading: 'Creation'}\r\n     */\n    value: function toTensor() {\n      return trackerFn().makeTensor(this.values, this.shape, this.dtype);\n    }\n  }, {\n    key: \"rank\",\n    get: function get() {\n      return this.shape.length;\n    }\n  }]);\n\n  return TensorBuffer;\n}(); // For tracking tensor creation and disposal.\n\nvar trackerFn = null; // Used by chaining methods to call into ops.\n\nvar opHandler = null; // Used to warn about deprecated methods.\n\nvar deprecationWarningFn = null; // This here so that we can use this method on dev branches and keep the\n// functionality at master.\n// tslint:disable-next-line:no-unused-expression\n\n[deprecationWarningFn];\n/**\r\n * An external consumer can register itself as the tensor tracker. This way\r\n * the Tensor class can notify the tracker for every tensor created and\r\n * disposed.\r\n */\n\nexport function setTensorTracker(fn) {\n  trackerFn = fn;\n}\n/**\r\n * An external consumer can register itself as the op handler. This way the\r\n * Tensor class can have chaining methods that call into ops via the op\r\n * handler.\r\n */\n\nexport function setOpHandler(handler) {\n  opHandler = handler;\n}\n/**\r\n * Sets the deprecation warning function to be used by this file. This way the\r\n * Tensor class can be a leaf but still use the environment.\r\n */\n\nexport function setDeprecationWarningFn(fn) {\n  deprecationWarningFn = fn;\n}\n/**\r\n * A `tf.Tensor` object represents an immutable, multidimensional array of\r\n * numbers that has a shape and a data type.\r\n *\r\n * See `tf.tensor` for details on how to create a `tf.Tensor`.\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n */\n\nexport var Tensor = /*#__PURE__*/function () {\n  function Tensor(shape, dtype, dataId, id) {\n    _classCallCheck(this, Tensor);\n\n    /** Whether this tensor has been globally kept. */\n    this.kept = false;\n    this.isDisposedInternal = false;\n    this.shape = shape.slice();\n    this.dtype = dtype || 'float32';\n    this.size = util.sizeFromShape(shape);\n    this.strides = computeStrides(shape);\n    this.dataId = dataId;\n    this.id = id;\n    this.rankType = this.rank < 5 ? this.rank.toString() : 'higher';\n  }\n\n  _createClass(Tensor, [{\n    key: \"buffer\",\n\n    /**\r\n     * Returns a promise of `tf.TensorBuffer` that holds the underlying data.\r\n     *\r\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n     */\n    value: function () {\n      var _buffer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var vals;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.data();\n\n              case 2:\n                vals = _context.sent;\n                return _context.abrupt(\"return\", opHandler.buffer(this.shape, this.dtype, vals));\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function buffer() {\n        return _buffer.apply(this, arguments);\n      }\n\n      return buffer;\n    }()\n    /**\r\n     * Returns a `tf.TensorBuffer` that holds the underlying data.\r\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n     */\n\n  }, {\n    key: \"bufferSync\",\n    value: function bufferSync() {\n      return opHandler.buffer(this.shape, this.dtype, this.dataSync());\n    }\n    /**\r\n     * Returns the tensor data as a nested array. The transfer of data is done\r\n     * asynchronously.\r\n     *\r\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n     */\n\n  }, {\n    key: \"array\",\n    value: function () {\n      var _array = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var vals;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.data();\n\n              case 2:\n                vals = _context2.sent;\n                return _context2.abrupt(\"return\", toNestedArray(this.shape, vals));\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function array() {\n        return _array.apply(this, arguments);\n      }\n\n      return array;\n    }()\n    /**\r\n     * Returns the tensor data as a nested array. The transfer of data is done\r\n     * synchronously.\r\n     *\r\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n     */\n\n  }, {\n    key: \"arraySync\",\n    value: function arraySync() {\n      return toNestedArray(this.shape, this.dataSync());\n    }\n    /**\r\n     * Asynchronously downloads the values from the `tf.Tensor`. Returns a\r\n     * promise of `TypedArray` that resolves when the computation has finished.\r\n     *\r\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n     */\n\n  }, {\n    key: \"data\",\n    value: function () {\n      var _data = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var data, bytes;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this.throwIfDisposed();\n                data = trackerFn().read(this.dataId);\n\n                if (!(this.dtype === 'string')) {\n                  _context3.next = 13;\n                  break;\n                }\n\n                _context3.next = 5;\n                return data;\n\n              case 5:\n                bytes = _context3.sent;\n                _context3.prev = 6;\n                return _context3.abrupt(\"return\", bytes.map(function (b) {\n                  return util.decodeString(b);\n                }));\n\n              case 10:\n                _context3.prev = 10;\n                _context3.t0 = _context3[\"catch\"](6);\n                throw new Error('Failed to decode the string bytes into utf-8. ' + 'To get the original bytes, call tensor.bytes().');\n\n              case 13:\n                return _context3.abrupt(\"return\", data);\n\n              case 14:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[6, 10]]);\n      }));\n\n      function data() {\n        return _data.apply(this, arguments);\n      }\n\n      return data;\n    }()\n    /**\r\n     * Synchronously downloads the values from the `tf.Tensor`. This blocks the\r\n     * UI thread until the values are ready, which can cause performance issues.\r\n     *\r\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n     */\n\n  }, {\n    key: \"dataSync\",\n    value: function dataSync() {\n      this.throwIfDisposed();\n      var data = trackerFn().readSync(this.dataId);\n\n      if (this.dtype === 'string') {\n        try {\n          return data.map(function (b) {\n            return util.decodeString(b);\n          });\n        } catch (_a) {\n          throw new Error('Failed to decode the string bytes into utf-8. ' + 'To get the original bytes, call tensor.bytes().');\n        }\n      }\n\n      return data;\n    }\n    /** Returns the underlying bytes of the tensor's data. */\n\n  }, {\n    key: \"bytes\",\n    value: function () {\n      var _bytes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                this.throwIfDisposed();\n                _context4.next = 3;\n                return trackerFn().read(this.dataId);\n\n              case 3:\n                data = _context4.sent;\n\n                if (!(this.dtype === 'string')) {\n                  _context4.next = 8;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", data);\n\n              case 8:\n                return _context4.abrupt(\"return\", new Uint8Array(data.buffer));\n\n              case 9:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function bytes() {\n        return _bytes.apply(this, arguments);\n      }\n\n      return bytes;\n    }()\n    /**\r\n     * Disposes `tf.Tensor` from memory.\r\n     *\r\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      if (this.isDisposed) {\n        return;\n      }\n\n      trackerFn().disposeTensor(this);\n      this.isDisposedInternal = true;\n    }\n  }, {\n    key: \"throwIfDisposed\",\n    value: function throwIfDisposed() {\n      if (this.isDisposed) {\n        throw new Error(\"Tensor is disposed.\");\n      }\n    }\n    /**\r\n     * Prints the `tf.Tensor`. See `tf.print` for details.\r\n     *\r\n     * @param verbose Whether to print verbose information about the tensor,\r\n     *    including dtype and size.\r\n     *\r\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n     */\n\n  }, {\n    key: \"print\",\n    value: function print() {\n      var verbose = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      return opHandler.print(this, verbose);\n    }\n    /**\r\n     * Returns a copy of the tensor. See `tf.clone` for details.\r\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n     */\n\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      this.throwIfDisposed();\n      return opHandler.clone(this);\n    }\n    /**\r\n     * Returns a human-readable description of the tensor. Useful for logging.\r\n     *\r\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var verbose = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var vals = this.dataSync();\n      return tensorToString(vals, this.shape, this.dtype, verbose);\n    }\n  }, {\n    key: \"cast\",\n    value: function cast(dtype) {\n      this.throwIfDisposed();\n      return opHandler.cast(this, dtype);\n    }\n  }, {\n    key: \"variable\",\n    value: function variable() {\n      var trainable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      var name = arguments.length > 1 ? arguments[1] : undefined;\n      var dtype = arguments.length > 2 ? arguments[2] : undefined;\n      this.throwIfDisposed();\n      return trackerFn().makeVariable(this, trainable, name, dtype);\n    }\n  }, {\n    key: \"rank\",\n    get: function get() {\n      return this.shape.length;\n    }\n  }, {\n    key: \"isDisposed\",\n    get: function get() {\n      return this.isDisposedInternal;\n    }\n  }]);\n\n  return Tensor;\n}();\nObject.defineProperty(Tensor, Symbol.hasInstance, {\n  value: function value(instance) {\n    // Implementation note: we should use properties of the object that will be\n    // defined before the constructor body has finished executing (methods).\n    // This is because when this code is transpiled by babel, babel will call\n    // classCallCheck before the constructor body is run.\n    // See https://github.com/tensorflow/tfjs/issues/3384 for backstory.\n    return !!instance && instance.data != null && instance.dataSync != null && instance.throwIfDisposed != null;\n  }\n});\n/**\r\n * A mutable `tf.Tensor`, useful for persisting state, e.g. for training.\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n */\n\nexport var Variable = /*#__PURE__*/function (_Tensor) {\n  _inherits(Variable, _Tensor);\n\n  var _super = _createSuper(Variable);\n\n  function Variable(initialValue, trainable, name, tensorId) {\n    var _this3;\n\n    _classCallCheck(this, Variable);\n\n    _this3 = _super.call(this, initialValue.shape, initialValue.dtype, initialValue.dataId, tensorId);\n    _this3.trainable = trainable;\n    _this3.name = name;\n    return _this3;\n  }\n  /**\r\n   * Assign a new `tf.Tensor` to this variable. The new `tf.Tensor` must have\r\n   * the same shape and dtype as the old `tf.Tensor`.\r\n   *\r\n   * @param newValue New tensor to be assigned to this variable.\r\n   *\r\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n   */\n\n\n  _createClass(Variable, [{\n    key: \"assign\",\n    value: function assign(newValue) {\n      if (newValue.dtype !== this.dtype) {\n        throw new Error(\"dtype of the new value (\".concat(newValue.dtype, \") and \") + \"previous value (\".concat(this.dtype, \") must match\"));\n      }\n\n      if (!util.arraysEqual(newValue.shape, this.shape)) {\n        throw new Error(\"shape of the new value (\".concat(newValue.shape, \") and \") + \"previous value (\".concat(this.shape, \") must match\"));\n      }\n\n      trackerFn().disposeTensor(this);\n      this.dataId = newValue.dataId;\n      trackerFn().incRef(this, null\n      /* backend */\n      );\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      trackerFn().disposeVariable(this);\n      this.isDisposedInternal = true;\n    }\n  }]);\n\n  return Variable;\n}(Tensor);\nObject.defineProperty(Variable, Symbol.hasInstance, {\n  value: function value(instance) {\n    return instance instanceof Tensor && instance.assign != null && instance.assign instanceof Function;\n  }\n});","map":{"version":3,"sources":["../src/tensor.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2017 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { tensorToString } from './tensor_format';\r\nimport * as util from './util';\r\nimport { computeStrides, toNestedArray } from './util';\r\n/**\r\n * A mutable object, similar to `tf.Tensor`, that allows users to set values\r\n * at locations before converting to an immutable `tf.Tensor`.\r\n *\r\n * See `tf.buffer` for creating a tensor buffer.\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n */\r\nexport class TensorBuffer {\r\n    constructor(shape, dtype, values) {\r\n        this.dtype = dtype;\r\n        this.shape = shape.slice();\r\n        this.size = util.sizeFromShape(shape);\r\n        if (values != null) {\r\n            const n = values.length;\r\n            util.assert(n === this.size, () => `Length of values '${n}' does not match the size ` +\r\n                `inferred by the shape '${this.size}'.`);\r\n        }\r\n        if (dtype === 'complex64') {\r\n            throw new Error(`complex64 dtype TensorBuffers are not supported. Please create ` +\r\n                `a TensorBuffer for the real and imaginary parts separately and ` +\r\n                `call tf.complex(real, imag).`);\r\n        }\r\n        this.values = values || util.getArrayFromDType(dtype, this.size);\r\n        this.strides = computeStrides(shape);\r\n    }\r\n    /**\r\n     * Sets a value in the buffer at a given location.\r\n     *\r\n     * @param value The value to set.\r\n     * @param locs  The location indices.\r\n     *\r\n     * @doc {heading: 'Tensors', subheading: 'Creation'}\r\n     */\r\n    set(value, ...locs) {\r\n        if (locs.length === 0) {\r\n            locs = [0];\r\n        }\r\n        util.assert(locs.length === this.rank, () => `The number of provided coordinates (${locs.length}) must ` +\r\n            `match the rank (${this.rank})`);\r\n        const index = this.locToIndex(locs);\r\n        this.values[index] = value;\r\n    }\r\n    /**\r\n     * Returns the value in the buffer at the provided location.\r\n     *\r\n     * @param locs The location indices.\r\n     *\r\n     * @doc {heading: 'Tensors', subheading: 'Creation'}\r\n     */\r\n    get(...locs) {\r\n        if (locs.length === 0) {\r\n            locs = [0];\r\n        }\r\n        let i = 0;\r\n        for (const loc of locs) {\r\n            if (loc < 0 || loc >= this.shape[i]) {\r\n                const msg = `Requested out of range element at ${locs}. ` +\r\n                    `  Buffer shape=${this.shape}`;\r\n                throw new Error(msg);\r\n            }\r\n            i++;\r\n        }\r\n        let index = locs[locs.length - 1];\r\n        for (let i = 0; i < locs.length - 1; ++i) {\r\n            index += this.strides[i] * locs[i];\r\n        }\r\n        return this.values[index];\r\n    }\r\n    locToIndex(locs) {\r\n        if (this.rank === 0) {\r\n            return 0;\r\n        }\r\n        else if (this.rank === 1) {\r\n            return locs[0];\r\n        }\r\n        let index = locs[locs.length - 1];\r\n        for (let i = 0; i < locs.length - 1; ++i) {\r\n            index += this.strides[i] * locs[i];\r\n        }\r\n        return index;\r\n    }\r\n    indexToLoc(index) {\r\n        if (this.rank === 0) {\r\n            return [];\r\n        }\r\n        else if (this.rank === 1) {\r\n            return [index];\r\n        }\r\n        const locs = new Array(this.shape.length);\r\n        for (let i = 0; i < locs.length - 1; ++i) {\r\n            locs[i] = Math.floor(index / this.strides[i]);\r\n            index -= locs[i] * this.strides[i];\r\n        }\r\n        locs[locs.length - 1] = index;\r\n        return locs;\r\n    }\r\n    get rank() {\r\n        return this.shape.length;\r\n    }\r\n    /**\r\n     * Creates an immutable `tf.Tensor` object from the buffer.\r\n     *\r\n     * @doc {heading: 'Tensors', subheading: 'Creation'}\r\n     */\r\n    toTensor() {\r\n        return trackerFn().makeTensor(this.values, this.shape, this.dtype);\r\n    }\r\n}\r\n// For tracking tensor creation and disposal.\r\nlet trackerFn = null;\r\n// Used by chaining methods to call into ops.\r\nlet opHandler = null;\r\n// Used to warn about deprecated methods.\r\nlet deprecationWarningFn = null;\r\n// This here so that we can use this method on dev branches and keep the\r\n// functionality at master.\r\n// tslint:disable-next-line:no-unused-expression\r\n[deprecationWarningFn];\r\n/**\r\n * An external consumer can register itself as the tensor tracker. This way\r\n * the Tensor class can notify the tracker for every tensor created and\r\n * disposed.\r\n */\r\nexport function setTensorTracker(fn) {\r\n    trackerFn = fn;\r\n}\r\n/**\r\n * An external consumer can register itself as the op handler. This way the\r\n * Tensor class can have chaining methods that call into ops via the op\r\n * handler.\r\n */\r\nexport function setOpHandler(handler) {\r\n    opHandler = handler;\r\n}\r\n/**\r\n * Sets the deprecation warning function to be used by this file. This way the\r\n * Tensor class can be a leaf but still use the environment.\r\n */\r\nexport function setDeprecationWarningFn(fn) {\r\n    deprecationWarningFn = fn;\r\n}\r\n/**\r\n * A `tf.Tensor` object represents an immutable, multidimensional array of\r\n * numbers that has a shape and a data type.\r\n *\r\n * See `tf.tensor` for details on how to create a `tf.Tensor`.\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n */\r\nexport class Tensor {\r\n    constructor(shape, dtype, dataId, id) {\r\n        /** Whether this tensor has been globally kept. */\r\n        this.kept = false;\r\n        this.isDisposedInternal = false;\r\n        this.shape = shape.slice();\r\n        this.dtype = dtype || 'float32';\r\n        this.size = util.sizeFromShape(shape);\r\n        this.strides = computeStrides(shape);\r\n        this.dataId = dataId;\r\n        this.id = id;\r\n        this.rankType = (this.rank < 5 ? this.rank.toString() : 'higher');\r\n    }\r\n    get rank() {\r\n        return this.shape.length;\r\n    }\r\n    /**\r\n     * Returns a promise of `tf.TensorBuffer` that holds the underlying data.\r\n     *\r\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n     */\r\n    async buffer() {\r\n        const vals = await this.data();\r\n        return opHandler.buffer(this.shape, this.dtype, vals);\r\n    }\r\n    /**\r\n     * Returns a `tf.TensorBuffer` that holds the underlying data.\r\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n     */\r\n    bufferSync() {\r\n        return opHandler.buffer(this.shape, this.dtype, this.dataSync());\r\n    }\r\n    /**\r\n     * Returns the tensor data as a nested array. The transfer of data is done\r\n     * asynchronously.\r\n     *\r\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n     */\r\n    async array() {\r\n        const vals = await this.data();\r\n        return toNestedArray(this.shape, vals);\r\n    }\r\n    /**\r\n     * Returns the tensor data as a nested array. The transfer of data is done\r\n     * synchronously.\r\n     *\r\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n     */\r\n    arraySync() {\r\n        return toNestedArray(this.shape, this.dataSync());\r\n    }\r\n    /**\r\n     * Asynchronously downloads the values from the `tf.Tensor`. Returns a\r\n     * promise of `TypedArray` that resolves when the computation has finished.\r\n     *\r\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n     */\r\n    async data() {\r\n        this.throwIfDisposed();\r\n        const data = trackerFn().read(this.dataId);\r\n        if (this.dtype === 'string') {\r\n            const bytes = await data;\r\n            try {\r\n                return bytes.map(b => util.decodeString(b));\r\n            }\r\n            catch (_a) {\r\n                throw new Error('Failed to decode the string bytes into utf-8. ' +\r\n                    'To get the original bytes, call tensor.bytes().');\r\n            }\r\n        }\r\n        return data;\r\n    }\r\n    /**\r\n     * Synchronously downloads the values from the `tf.Tensor`. This blocks the\r\n     * UI thread until the values are ready, which can cause performance issues.\r\n     *\r\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n     */\r\n    dataSync() {\r\n        this.throwIfDisposed();\r\n        const data = trackerFn().readSync(this.dataId);\r\n        if (this.dtype === 'string') {\r\n            try {\r\n                return data.map(b => util.decodeString(b));\r\n            }\r\n            catch (_a) {\r\n                throw new Error('Failed to decode the string bytes into utf-8. ' +\r\n                    'To get the original bytes, call tensor.bytes().');\r\n            }\r\n        }\r\n        return data;\r\n    }\r\n    /** Returns the underlying bytes of the tensor's data. */\r\n    async bytes() {\r\n        this.throwIfDisposed();\r\n        const data = await trackerFn().read(this.dataId);\r\n        if (this.dtype === 'string') {\r\n            return data;\r\n        }\r\n        else {\r\n            return new Uint8Array(data.buffer);\r\n        }\r\n    }\r\n    /**\r\n     * Disposes `tf.Tensor` from memory.\r\n     *\r\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n     */\r\n    dispose() {\r\n        if (this.isDisposed) {\r\n            return;\r\n        }\r\n        trackerFn().disposeTensor(this);\r\n        this.isDisposedInternal = true;\r\n    }\r\n    get isDisposed() {\r\n        return this.isDisposedInternal;\r\n    }\r\n    throwIfDisposed() {\r\n        if (this.isDisposed) {\r\n            throw new Error(`Tensor is disposed.`);\r\n        }\r\n    }\r\n    /**\r\n     * Prints the `tf.Tensor`. See `tf.print` for details.\r\n     *\r\n     * @param verbose Whether to print verbose information about the tensor,\r\n     *    including dtype and size.\r\n     *\r\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n     */\r\n    print(verbose = false) {\r\n        return opHandler.print(this, verbose);\r\n    }\r\n    /**\r\n     * Returns a copy of the tensor. See `tf.clone` for details.\r\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n     */\r\n    clone() {\r\n        this.throwIfDisposed();\r\n        return opHandler.clone(this);\r\n    }\r\n    /**\r\n     * Returns a human-readable description of the tensor. Useful for logging.\r\n     *\r\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n     */\r\n    toString(verbose = false) {\r\n        const vals = this.dataSync();\r\n        return tensorToString(vals, this.shape, this.dtype, verbose);\r\n    }\r\n    cast(dtype) {\r\n        this.throwIfDisposed();\r\n        return opHandler.cast(this, dtype);\r\n    }\r\n    variable(trainable = true, name, dtype) {\r\n        this.throwIfDisposed();\r\n        return trackerFn().makeVariable(this, trainable, name, dtype);\r\n    }\r\n}\r\nObject.defineProperty(Tensor, Symbol.hasInstance, {\r\n    value: (instance) => {\r\n        // Implementation note: we should use properties of the object that will be\r\n        // defined before the constructor body has finished executing (methods).\r\n        // This is because when this code is transpiled by babel, babel will call\r\n        // classCallCheck before the constructor body is run.\r\n        // See https://github.com/tensorflow/tfjs/issues/3384 for backstory.\r\n        return !!instance && instance.data != null && instance.dataSync != null &&\r\n            instance.throwIfDisposed != null;\r\n    }\r\n});\r\n/**\r\n * A mutable `tf.Tensor`, useful for persisting state, e.g. for training.\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n */\r\nexport class Variable extends Tensor {\r\n    constructor(initialValue, trainable, name, tensorId) {\r\n        super(initialValue.shape, initialValue.dtype, initialValue.dataId, tensorId);\r\n        this.trainable = trainable;\r\n        this.name = name;\r\n    }\r\n    /**\r\n     * Assign a new `tf.Tensor` to this variable. The new `tf.Tensor` must have\r\n     * the same shape and dtype as the old `tf.Tensor`.\r\n     *\r\n     * @param newValue New tensor to be assigned to this variable.\r\n     *\r\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n     */\r\n    assign(newValue) {\r\n        if (newValue.dtype !== this.dtype) {\r\n            throw new Error(`dtype of the new value (${newValue.dtype}) and ` +\r\n                `previous value (${this.dtype}) must match`);\r\n        }\r\n        if (!util.arraysEqual(newValue.shape, this.shape)) {\r\n            throw new Error(`shape of the new value (${newValue.shape}) and ` +\r\n                `previous value (${this.shape}) must match`);\r\n        }\r\n        trackerFn().disposeTensor(this);\r\n        this.dataId = newValue.dataId;\r\n        trackerFn().incRef(this, null /* backend */);\r\n    }\r\n    dispose() {\r\n        trackerFn().disposeVariable(this);\r\n        this.isDisposedInternal = true;\r\n    }\r\n}\r\nObject.defineProperty(Variable, Symbol.hasInstance, {\r\n    value: (instance) => {\r\n        return instance instanceof Tensor && instance.assign != null &&\r\n            instance.assign instanceof Function;\r\n    }\r\n});\r\n//# sourceMappingURL=tensor.js.map"]},"metadata":{},"sourceType":"module"}