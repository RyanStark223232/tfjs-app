{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { AvgPool } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { cast } from './cast';\nimport * as conv_util from './conv_util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\r\n * Computes the 2D average pooling of an image.\r\n *\r\n * @param x The input tensor, of rank 4 or rank 3 of shape\r\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\r\n * @param filterSize The filter size: `[filterHeight, filterWidth]`. If\r\n *     `filterSize` is a single number, then `filterHeight == filterWidth`.\r\n * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If\r\n *     `strides` is a single number, then `strideHeight == strideWidth`.\r\n * @param pad The type of padding algorithm:\r\n *    - `same` and stride 1: output will be of same size as input,\r\n *       regardless of filter size.\r\n *    - `valid`: output will be smaller than input if filter is larger\r\n *       than 1x1.\r\n *    - For more info, see this guide:\r\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\r\n *         https://www.tensorflow.org/api_guides/python/nn#Convolution)\r\n * @param dimRoundingMode The rounding mode used when computing output\r\n *     dimensions if pad is a number. If none is provided, it will not round\r\n *     and error if the output is of fractional size.\r\n */\n\nfunction avgPool_(x, filterSize, strides, pad, dimRoundingMode) {\n  var $x = convertToTensor(x, 'x', 'avgPool', 'float32');\n  var dilations = 1;\n  util.assert(conv_util.eitherStridesOrDilationsAreOne(strides, dilations), function () {\n    return 'Error in avgPool: Either strides or dilations must be 1. ' + \"Got strides \".concat(strides, \" and dilations '\").concat(dilations, \"'\");\n  });\n  var x4D = $x;\n  var reshapedTo4D = false;\n\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n  }\n\n  util.assert(x4D.rank === 4, function () {\n    return \"Error in avgPool: x must be rank 4 but got rank \".concat(x4D.rank, \".\");\n  });\n\n  if (dimRoundingMode != null) {\n    util.assert(util.isInt(pad), function () {\n      return \"Error in avgPool: pad must be an integer when using, \" + \"dimRoundingMode \".concat(dimRoundingMode, \" but got pad \").concat(pad, \".\");\n    });\n  }\n\n  var forward = function forward(backend, save) {\n    var convInfo = conv_util.computePool2DInfo(x4D.shape, filterSize, strides, 1\n    /* dilations */\n    , pad, dimRoundingMode);\n    save([x4D]);\n\n    if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 && util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n      return x4D.clone();\n    }\n\n    return backend.avgPool(x4D, convInfo);\n  };\n\n  var inputs = {\n    x: x4D\n  };\n  var attrs = {\n    filterSize: filterSize,\n    strides: strides,\n    pad: pad,\n    dimRoundingMode: dimRoundingMode\n  };\n  var res = ENGINE.runKernelFunc(forward, inputs, null\n  /* grad */\n  , AvgPool, attrs);\n  res = cast(res, $x.dtype);\n\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n  }\n\n  return res;\n}\n\nexport var avgPool = op({\n  avgPool_: avgPool_\n});","map":{"version":3,"sources":["../../src/ops/avg_pool.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { ENGINE } from '../engine';\r\nimport { AvgPool } from '../kernel_names';\r\nimport { convertToTensor } from '../tensor_util_env';\r\nimport * as util from '../util';\r\nimport { cast } from './cast';\r\nimport * as conv_util from './conv_util';\r\nimport { op } from './operation';\r\nimport { reshape } from './reshape';\r\n/**\r\n * Computes the 2D average pooling of an image.\r\n *\r\n * @param x The input tensor, of rank 4 or rank 3 of shape\r\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\r\n * @param filterSize The filter size: `[filterHeight, filterWidth]`. If\r\n *     `filterSize` is a single number, then `filterHeight == filterWidth`.\r\n * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If\r\n *     `strides` is a single number, then `strideHeight == strideWidth`.\r\n * @param pad The type of padding algorithm:\r\n *    - `same` and stride 1: output will be of same size as input,\r\n *       regardless of filter size.\r\n *    - `valid`: output will be smaller than input if filter is larger\r\n *       than 1x1.\r\n *    - For more info, see this guide:\r\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\r\n *         https://www.tensorflow.org/api_guides/python/nn#Convolution)\r\n * @param dimRoundingMode The rounding mode used when computing output\r\n *     dimensions if pad is a number. If none is provided, it will not round\r\n *     and error if the output is of fractional size.\r\n */\r\nfunction avgPool_(x, filterSize, strides, pad, dimRoundingMode) {\r\n    const $x = convertToTensor(x, 'x', 'avgPool', 'float32');\r\n    const dilations = 1;\r\n    util.assert(conv_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in avgPool: Either strides or dilations must be 1. ' +\r\n        `Got strides ${strides} and dilations '${dilations}'`);\r\n    let x4D = $x;\r\n    let reshapedTo4D = false;\r\n    if ($x.rank === 3) {\r\n        reshapedTo4D = true;\r\n        x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\r\n    }\r\n    util.assert(x4D.rank === 4, () => `Error in avgPool: x must be rank 4 but got rank ${x4D.rank}.`);\r\n    if (dimRoundingMode != null) {\r\n        util.assert(util.isInt(pad), () => `Error in avgPool: pad must be an integer when using, ` +\r\n            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\r\n    }\r\n    const forward = (backend, save) => {\r\n        const convInfo = conv_util.computePool2DInfo(x4D.shape, filterSize, strides, 1 /* dilations */, pad, dimRoundingMode);\r\n        save([x4D]);\r\n        if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\r\n            util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\r\n            return x4D.clone();\r\n        }\r\n        return backend.avgPool(x4D, convInfo);\r\n    };\r\n    const inputs = { x: x4D };\r\n    const attrs = { filterSize, strides, pad, dimRoundingMode };\r\n    let res = ENGINE.runKernelFunc(forward, inputs, null /* grad */, AvgPool, attrs);\r\n    res = cast(res, $x.dtype);\r\n    if (reshapedTo4D) {\r\n        return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\r\n    }\r\n    return res;\r\n}\r\nexport const avgPool = op({ avgPool_ });\r\n//# sourceMappingURL=avg_pool.js.map"]},"metadata":{},"sourceType":"module"}