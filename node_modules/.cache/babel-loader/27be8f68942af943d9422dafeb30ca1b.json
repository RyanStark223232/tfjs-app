{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { nearestDivisor } from '../util';\nimport { PARALLELIZE_THRESHOLD } from './reduce_util';\nexport function segOpComputeOptimalWindowSize(inSize, numSegments) {\n  var done = false;\n  var res;\n\n  if (inSize <= PARALLELIZE_THRESHOLD) {\n    res = inSize;\n    done = true;\n  } else {\n    res = nearestDivisor(inSize, Math.floor(Math.sqrt(inSize)));\n  }\n\n  while (!done) {\n    if (res > numSegments || res === inSize) {\n      done = true;\n    } else {\n      res = nearestDivisor(inSize, res + 1);\n    }\n  }\n\n  return res;\n}\nexport function computeOutShape(aShape, axis, numSegments) {\n  var outShape = [];\n  var rank = aShape.length;\n\n  for (var dim = 0; dim < rank; dim++) {\n    if (dim !== axis) {\n      outShape.push(aShape[dim]);\n    } else {\n      outShape.push(numSegments);\n    }\n  }\n\n  return outShape;\n}\nexport function collectGatherOpShapeInfo(x, indices, axis) {\n  var dimSize = x.shape[axis];\n  var outputShape = [];\n  var batchSize = 1;\n  var sliceSize = 1;\n\n  for (var i = 0; i < axis; i++) {\n    outputShape.push(x.shape[i]);\n    batchSize *= x.shape[i];\n  }\n\n  for (var _i = 0; _i < indices.rank; _i++) {\n    outputShape.push(indices.shape[_i]);\n  }\n\n  for (var _i2 = axis + 1; _i2 < x.rank; _i2++) {\n    outputShape.push(x.shape[_i2]);\n    sliceSize *= x.shape[_i2];\n  }\n\n  return {\n    batchSize: batchSize,\n    sliceSize: sliceSize,\n    dimSize: dimSize,\n    outputShape: outputShape\n  };\n}","map":{"version":3,"sources":["../../src/ops/segment_util.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAGH,SAAQ,cAAR,QAA6B,SAA7B;AAEA,SAAQ,qBAAR,QAAoC,eAApC;AASA,OAAM,SAAU,6BAAV,CACF,MADE,EACc,WADd,EACiC;AACrC,MAAI,IAAI,GAAG,KAAX;AACA,MAAI,GAAJ;;AAEA,MAAI,MAAM,IAAI,qBAAd,EAAqC;AACnC,IAAA,GAAG,GAAG,MAAN;AACA,IAAA,IAAI,GAAG,IAAP;AACD,GAHD,MAGO;AACL,IAAA,GAAG,GAAG,cAAc,CAAC,MAAD,EAAS,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,IAAL,CAAU,MAAV,CAAX,CAAT,CAApB;AACD;;AAED,SAAO,CAAC,IAAR,EAAc;AACZ,QAAI,GAAG,GAAG,WAAN,IAAqB,GAAG,KAAK,MAAjC,EAAyC;AACvC,MAAA,IAAI,GAAG,IAAP;AACD,KAFD,MAEO;AACL,MAAA,GAAG,GAAG,cAAc,CAAC,MAAD,EAAS,GAAG,GAAG,CAAf,CAApB;AACD;AACF;;AACD,SAAO,GAAP;AACD;AAED,OAAM,SAAU,eAAV,CACF,MADE,EACgB,IADhB,EAC8B,WAD9B,EACiD;AACrD,MAAM,QAAQ,GAAG,EAAjB;AACA,MAAM,IAAI,GAAG,MAAM,CAAC,MAApB;;AACA,OAAK,IAAI,GAAG,GAAG,CAAf,EAAkB,GAAG,GAAG,IAAxB,EAA8B,GAAG,EAAjC,EAAqC;AACnC,QAAI,GAAG,KAAK,IAAZ,EAAkB;AAChB,MAAA,QAAQ,CAAC,IAAT,CAAc,MAAM,CAAC,GAAD,CAApB;AACD,KAFD,MAEO;AACL,MAAA,QAAQ,CAAC,IAAT,CAAc,WAAd;AACD;AACF;;AACD,SAAO,QAAP;AACD;AAQD,OAAM,SAAU,wBAAV,CACF,CADE,EACS,OADT,EAC0B,IAD1B,EACsC;AAC1C,MAAM,OAAO,GAAG,CAAC,CAAC,KAAF,CAAQ,IAAR,CAAhB;AAEA,MAAM,WAAW,GAAa,EAA9B;AACA,MAAI,SAAS,GAAG,CAAhB;AACA,MAAI,SAAS,GAAG,CAAhB;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,IAApB,EAA0B,CAAC,EAA3B,EAA+B;AAC7B,IAAA,WAAW,CAAC,IAAZ,CAAiB,CAAC,CAAC,KAAF,CAAQ,CAAR,CAAjB;AACA,IAAA,SAAS,IAAI,CAAC,CAAC,KAAF,CAAQ,CAAR,CAAb;AACD;;AAED,OAAK,IAAI,EAAC,GAAG,CAAb,EAAgB,EAAC,GAAG,OAAO,CAAC,IAA5B,EAAkC,EAAC,EAAnC,EAAuC;AACrC,IAAA,WAAW,CAAC,IAAZ,CAAiB,OAAO,CAAC,KAAR,CAAc,EAAd,CAAjB;AACD;;AAED,OAAK,IAAI,GAAC,GAAG,IAAI,GAAG,CAApB,EAAuB,GAAC,GAAG,CAAC,CAAC,IAA7B,EAAmC,GAAC,EAApC,EAAwC;AACtC,IAAA,WAAW,CAAC,IAAZ,CAAiB,CAAC,CAAC,KAAF,CAAQ,GAAR,CAAjB;AACA,IAAA,SAAS,IAAI,CAAC,CAAC,KAAF,CAAQ,GAAR,CAAb;AACD;;AAED,SAAO;AAAC,IAAA,SAAS,EAAT,SAAD;AAAY,IAAA,SAAS,EAAT,SAAZ;AAAuB,IAAA,OAAO,EAAP,OAAvB;AAAgC,IAAA,WAAW,EAAX;AAAhC,GAAP;AACD","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { nearestDivisor } from '../util';\r\nimport { PARALLELIZE_THRESHOLD } from './reduce_util';\r\nexport function segOpComputeOptimalWindowSize(inSize, numSegments) {\r\n    let done = false;\r\n    let res;\r\n    if (inSize <= PARALLELIZE_THRESHOLD) {\r\n        res = inSize;\r\n        done = true;\r\n    }\r\n    else {\r\n        res = nearestDivisor(inSize, Math.floor(Math.sqrt(inSize)));\r\n    }\r\n    while (!done) {\r\n        if (res > numSegments || res === inSize) {\r\n            done = true;\r\n        }\r\n        else {\r\n            res = nearestDivisor(inSize, res + 1);\r\n        }\r\n    }\r\n    return res;\r\n}\r\nexport function computeOutShape(aShape, axis, numSegments) {\r\n    const outShape = [];\r\n    const rank = aShape.length;\r\n    for (let dim = 0; dim < rank; dim++) {\r\n        if (dim !== axis) {\r\n            outShape.push(aShape[dim]);\r\n        }\r\n        else {\r\n            outShape.push(numSegments);\r\n        }\r\n    }\r\n    return outShape;\r\n}\r\nexport function collectGatherOpShapeInfo(x, indices, axis) {\r\n    const dimSize = x.shape[axis];\r\n    const outputShape = [];\r\n    let batchSize = 1;\r\n    let sliceSize = 1;\r\n    for (let i = 0; i < axis; i++) {\r\n        outputShape.push(x.shape[i]);\r\n        batchSize *= x.shape[i];\r\n    }\r\n    for (let i = 0; i < indices.rank; i++) {\r\n        outputShape.push(indices.shape[i]);\r\n    }\r\n    for (let i = axis + 1; i < x.rank; i++) {\r\n        outputShape.push(x.shape[i]);\r\n        sliceSize *= x.shape[i];\r\n    }\r\n    return { batchSize, sliceSize, dimSize, outputShape };\r\n}\r\n//# sourceMappingURL=segment_util.js.map"]},"metadata":{},"sourceType":"module"}