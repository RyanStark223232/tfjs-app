{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nimport { hasOwnProperty } from './object';\n/**\r\n * Get a property of a plain object\r\n * Throws an error in case the object is not a plain object or the\r\n * property is not defined on the object itself\r\n * @param {Object} object\r\n * @param {string} prop\r\n * @return {*} Returns the property value when safe\r\n */\n\nfunction getSafeProperty(object, prop) {\n  // only allow getting safe properties of a plain object\n  if (isPlainObject(object) && isSafeProperty(object, prop)) {\n    return object[prop];\n  }\n\n  if (typeof object[prop] === 'function' && isSafeMethod(object, prop)) {\n    throw new Error('Cannot access method \"' + prop + '\" as a property');\n  }\n\n  throw new Error('No access to property \"' + prop + '\"');\n}\n/**\r\n * Set a property on a plain object.\r\n * Throws an error in case the object is not a plain object or the\r\n * property would override an inherited property like .constructor or .toString\r\n * @param {Object} object\r\n * @param {string} prop\r\n * @param {*} value\r\n * @return {*} Returns the value\r\n */\n// TODO: merge this function into access.js?\n\n\nfunction setSafeProperty(object, prop, value) {\n  // only allow setting safe properties of a plain object\n  if (isPlainObject(object) && isSafeProperty(object, prop)) {\n    object[prop] = value;\n    return value;\n  }\n\n  throw new Error('No access to property \"' + prop + '\"');\n}\n/**\r\n * Test whether a property is safe to use for an object.\r\n * For example .toString and .constructor are not safe\r\n * @param {string} prop\r\n * @return {boolean} Returns true when safe\r\n */\n\n\nfunction isSafeProperty(object, prop) {\n  if (!object || _typeof(object) !== 'object') {\n    return false;\n  } // SAFE: whitelisted\n  // e.g length\n\n\n  if (hasOwnProperty(safeNativeProperties, prop)) {\n    return true;\n  } // UNSAFE: inherited from Object prototype\n  // e.g constructor\n\n\n  if (prop in Object.prototype) {\n    // 'in' is used instead of hasOwnProperty for nodejs v0.10\n    // which is inconsistent on root prototypes. It is safe\n    // here because Object.prototype is a root object\n    return false;\n  } // UNSAFE: inherited from Function prototype\n  // e.g call, apply\n\n\n  if (prop in Function.prototype) {\n    // 'in' is used instead of hasOwnProperty for nodejs v0.10\n    // which is inconsistent on root prototypes. It is safe\n    // here because Function.prototype is a root object\n    return false;\n  }\n\n  return true;\n}\n/**\r\n * Validate whether a method is safe.\r\n * Throws an error when that's not the case.\r\n * @param {Object} object\r\n * @param {string} method\r\n */\n// TODO: merge this function into assign.js?\n\n\nfunction validateSafeMethod(object, method) {\n  if (!isSafeMethod(object, method)) {\n    throw new Error('No access to method \"' + method + '\"');\n  }\n}\n/**\r\n * Check whether a method is safe.\r\n * Throws an error when that's not the case (for example for `constructor`).\r\n * @param {Object} object\r\n * @param {string} method\r\n * @return {boolean} Returns true when safe, false otherwise\r\n */\n\n\nfunction isSafeMethod(object, method) {\n  if (object === null || object === undefined || typeof object[method] !== 'function') {\n    return false;\n  } // UNSAFE: ghosted\n  // e.g overridden toString\n  // Note that IE10 doesn't support __proto__ and we can't do this check there.\n\n\n  if (hasOwnProperty(object, method) && Object.getPrototypeOf && method in Object.getPrototypeOf(object)) {\n    return false;\n  } // SAFE: whitelisted\n  // e.g toString\n\n\n  if (hasOwnProperty(safeNativeMethods, method)) {\n    return true;\n  } // UNSAFE: inherited from Object prototype\n  // e.g constructor\n\n\n  if (method in Object.prototype) {\n    // 'in' is used instead of hasOwnProperty for nodejs v0.10\n    // which is inconsistent on root prototypes. It is safe\n    // here because Object.prototype is a root object\n    return false;\n  } // UNSAFE: inherited from Function prototype\n  // e.g call, apply\n\n\n  if (method in Function.prototype) {\n    // 'in' is used instead of hasOwnProperty for nodejs v0.10\n    // which is inconsistent on root prototypes. It is safe\n    // here because Function.prototype is a root object\n    return false;\n  }\n\n  return true;\n}\n\nfunction isPlainObject(object) {\n  return _typeof(object) === 'object' && object && object.constructor === Object;\n}\n\nvar safeNativeProperties = {\n  length: true,\n  name: true\n};\nvar safeNativeMethods = {\n  toString: true,\n  valueOf: true,\n  toLocaleString: true\n};\nexport { getSafeProperty };\nexport { setSafeProperty };\nexport { isSafeProperty };\nexport { validateSafeMethod };\nexport { isSafeMethod };\nexport { isPlainObject };","map":{"version":3,"sources":["C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/mathjs/es/utils/customs.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","hasOwnProperty","getSafeProperty","object","prop","isPlainObject","isSafeProperty","isSafeMethod","Error","setSafeProperty","value","safeNativeProperties","Object","Function","validateSafeMethod","method","undefined","getPrototypeOf","safeNativeMethods","length","name","toString","valueOf","toLocaleString"],"mappings":"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","sourcesContent":["function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\r\n\r\nimport { hasOwnProperty } from './object';\r\n/**\r\n * Get a property of a plain object\r\n * Throws an error in case the object is not a plain object or the\r\n * property is not defined on the object itself\r\n * @param {Object} object\r\n * @param {string} prop\r\n * @return {*} Returns the property value when safe\r\n */\r\n\r\nfunction getSafeProperty(object, prop) {\r\n  // only allow getting safe properties of a plain object\r\n  if (isPlainObject(object) && isSafeProperty(object, prop)) {\r\n    return object[prop];\r\n  }\r\n\r\n  if (typeof object[prop] === 'function' && isSafeMethod(object, prop)) {\r\n    throw new Error('Cannot access method \"' + prop + '\" as a property');\r\n  }\r\n\r\n  throw new Error('No access to property \"' + prop + '\"');\r\n}\r\n/**\r\n * Set a property on a plain object.\r\n * Throws an error in case the object is not a plain object or the\r\n * property would override an inherited property like .constructor or .toString\r\n * @param {Object} object\r\n * @param {string} prop\r\n * @param {*} value\r\n * @return {*} Returns the value\r\n */\r\n// TODO: merge this function into access.js?\r\n\r\n\r\nfunction setSafeProperty(object, prop, value) {\r\n  // only allow setting safe properties of a plain object\r\n  if (isPlainObject(object) && isSafeProperty(object, prop)) {\r\n    object[prop] = value;\r\n    return value;\r\n  }\r\n\r\n  throw new Error('No access to property \"' + prop + '\"');\r\n}\r\n/**\r\n * Test whether a property is safe to use for an object.\r\n * For example .toString and .constructor are not safe\r\n * @param {string} prop\r\n * @return {boolean} Returns true when safe\r\n */\r\n\r\n\r\nfunction isSafeProperty(object, prop) {\r\n  if (!object || _typeof(object) !== 'object') {\r\n    return false;\r\n  } // SAFE: whitelisted\r\n  // e.g length\r\n\r\n\r\n  if (hasOwnProperty(safeNativeProperties, prop)) {\r\n    return true;\r\n  } // UNSAFE: inherited from Object prototype\r\n  // e.g constructor\r\n\r\n\r\n  if (prop in Object.prototype) {\r\n    // 'in' is used instead of hasOwnProperty for nodejs v0.10\r\n    // which is inconsistent on root prototypes. It is safe\r\n    // here because Object.prototype is a root object\r\n    return false;\r\n  } // UNSAFE: inherited from Function prototype\r\n  // e.g call, apply\r\n\r\n\r\n  if (prop in Function.prototype) {\r\n    // 'in' is used instead of hasOwnProperty for nodejs v0.10\r\n    // which is inconsistent on root prototypes. It is safe\r\n    // here because Function.prototype is a root object\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n/**\r\n * Validate whether a method is safe.\r\n * Throws an error when that's not the case.\r\n * @param {Object} object\r\n * @param {string} method\r\n */\r\n// TODO: merge this function into assign.js?\r\n\r\n\r\nfunction validateSafeMethod(object, method) {\r\n  if (!isSafeMethod(object, method)) {\r\n    throw new Error('No access to method \"' + method + '\"');\r\n  }\r\n}\r\n/**\r\n * Check whether a method is safe.\r\n * Throws an error when that's not the case (for example for `constructor`).\r\n * @param {Object} object\r\n * @param {string} method\r\n * @return {boolean} Returns true when safe, false otherwise\r\n */\r\n\r\n\r\nfunction isSafeMethod(object, method) {\r\n  if (object === null || object === undefined || typeof object[method] !== 'function') {\r\n    return false;\r\n  } // UNSAFE: ghosted\r\n  // e.g overridden toString\r\n  // Note that IE10 doesn't support __proto__ and we can't do this check there.\r\n\r\n\r\n  if (hasOwnProperty(object, method) && Object.getPrototypeOf && method in Object.getPrototypeOf(object)) {\r\n    return false;\r\n  } // SAFE: whitelisted\r\n  // e.g toString\r\n\r\n\r\n  if (hasOwnProperty(safeNativeMethods, method)) {\r\n    return true;\r\n  } // UNSAFE: inherited from Object prototype\r\n  // e.g constructor\r\n\r\n\r\n  if (method in Object.prototype) {\r\n    // 'in' is used instead of hasOwnProperty for nodejs v0.10\r\n    // which is inconsistent on root prototypes. It is safe\r\n    // here because Object.prototype is a root object\r\n    return false;\r\n  } // UNSAFE: inherited from Function prototype\r\n  // e.g call, apply\r\n\r\n\r\n  if (method in Function.prototype) {\r\n    // 'in' is used instead of hasOwnProperty for nodejs v0.10\r\n    // which is inconsistent on root prototypes. It is safe\r\n    // here because Function.prototype is a root object\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction isPlainObject(object) {\r\n  return _typeof(object) === 'object' && object && object.constructor === Object;\r\n}\r\n\r\nvar safeNativeProperties = {\r\n  length: true,\r\n  name: true\r\n};\r\nvar safeNativeMethods = {\r\n  toString: true,\r\n  valueOf: true,\r\n  toLocaleString: true\r\n};\r\nexport { getSafeProperty };\r\nexport { setSafeProperty };\r\nexport { isSafeProperty };\r\nexport { validateSafeMethod };\r\nexport { isSafeMethod };\r\nexport { isPlainObject };"]},"metadata":{},"sourceType":"module"}