{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { IsInf } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\r\n * Returns which elements of x are Infinity or -Infinity.\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([NaN, Infinity, -Infinity, 0, 1]);\r\n *\r\n * x.isInf().print();  // or tf.isNaN(x)\r\n * ```\r\n * @param x The input Tensor.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Basic math'}\r\n */\n\nfunction isInf_(x) {\n  var $x = convertToTensor(x, 'x', 'isInf');\n  var inputs = {\n    x: $x\n  };\n  return ENGINE.runKernelFunc(function (backend) {\n    return backend.isInf($x);\n  }, inputs, null\n  /* grad */\n  , IsInf);\n}\n\nexport var isInf = op({\n  isInf_: isInf_\n});","map":{"version":3,"sources":["../../src/ops/is_inf.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,MAAR,QAAqB,WAArB;AACA,SAAQ,KAAR,QAAiC,iBAAjC;AAGA,SAAQ,eAAR,QAA8B,oBAA9B;AAGA,SAAQ,EAAR,QAAiB,aAAjB;AAEA;;;;;;;;;;;AAWG;;AACH,SAAS,MAAT,CAAkC,CAAlC,EAAiD;AAC/C,MAAM,EAAE,GAAG,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,OAAT,CAA1B;AAEA,MAAM,MAAM,GAAgB;AAAC,IAAA,CAAC,EAAE;AAAJ,GAA5B;AAEA,SAAO,MAAM,CAAC,aAAP,CACH,UAAC,OAAD;AAAA,WAAa,OAAO,CAAC,KAAR,CAAc,EAAd,CAAb;AAAA,GADG,EAC6B,MAD7B,EAEH;AAAK;AAFF,IAEc,KAFd,CAAP;AAGD;;AACD,OAAO,IAAM,KAAK,GAAG,EAAE,CAAC;AAAC,EAAA,MAAM,EAAN;AAAD,CAAD,CAAhB","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { ENGINE } from '../engine';\r\nimport { IsInf } from '../kernel_names';\r\nimport { convertToTensor } from '../tensor_util_env';\r\nimport { op } from './operation';\r\n/**\r\n * Returns which elements of x are Infinity or -Infinity.\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([NaN, Infinity, -Infinity, 0, 1]);\r\n *\r\n * x.isInf().print();  // or tf.isNaN(x)\r\n * ```\r\n * @param x The input Tensor.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Basic math'}\r\n */\r\nfunction isInf_(x) {\r\n    const $x = convertToTensor(x, 'x', 'isInf');\r\n    const inputs = { x: $x };\r\n    return ENGINE.runKernelFunc((backend) => backend.isInf($x), inputs, null /* grad */, IsInf);\r\n}\r\nexport const isInf = op({ isInf_ });\r\n//# sourceMappingURL=is_inf.js.map"]},"metadata":{},"sourceType":"module"}