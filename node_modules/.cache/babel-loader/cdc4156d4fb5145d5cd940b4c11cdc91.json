{"ast":null,"code":"import _classCallCheck from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nexport var COMPLEX_FFT = {\n  REAL: 'return real * expR - imag * expI;',\n  IMAG: 'return real * expI + imag * expR;'\n};\nexport var FFTProgram = function FFTProgram(op, inputShape, inverse) {\n  _classCallCheck(this, FFTProgram);\n\n  this.variableNames = ['real', 'imag'];\n  var innerDim = inputShape[1];\n  this.outputShape = inputShape;\n  var exponentMultiplierSnippet = inverse ? \"2.0 * \".concat(Math.PI) : \"-2.0 * \".concat(Math.PI);\n  var resultDenominator = inverse ? \"\".concat(innerDim, \".0\") : '1.0';\n  this.userCode = \"\\n      const float exponentMultiplier = \".concat(exponentMultiplierSnippet, \";\\n\\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\\n        \").concat(op, \"\\n      }\\n\\n      float mulMatDFT(int batch, int index) {\\n        float indexRatio = float(index) / float(\").concat(innerDim, \");\\n        float exponentMultiplierTimesIndexRatio =\\n            exponentMultiplier * indexRatio;\\n\\n        float result = 0.0;\\n\\n        for (int i = 0; i < \").concat(innerDim, \"; i++) {\\n          // x = (-2|2 * PI / N) * index * i;\\n          float x = exponentMultiplierTimesIndexRatio * float(i);\\n          float expR = cos(x);\\n          float expI = sin(x);\\n          float real = getReal(batch, i);\\n          float imag = getImag(batch, i);\\n\\n          result +=\\n              unaryOpComplex(real, expR, imag, expI) / \").concat(resultDenominator, \";\\n        }\\n\\n        return result;\\n      }\\n\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        setOutput(mulMatDFT(coords[0], coords[1]));\\n      }\\n    \");\n};","map":{"version":3,"sources":["../src/fft_gpu.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AAIH,OAAO,IAAM,WAAW,GAAG;AACzB,EAAA,IAAI,EAAE,mCADmB;AAEzB,EAAA,IAAI,EAAE;AAFmB,CAApB;AAKP,WAAa,UAAb,GAKE,oBAAY,EAAZ,EAAwB,UAAxB,EAAsD,OAAtD,EAAsE;AAAA;;AAJtE,OAAA,aAAA,GAAgB,CAAC,MAAD,EAAS,MAAT,CAAhB;AAKE,MAAM,QAAQ,GAAG,UAAU,CAAC,CAAD,CAA3B;AACA,OAAK,WAAL,GAAmB,UAAnB;AAEA,MAAM,yBAAyB,GAC3B,OAAO,mBAAY,IAAI,CAAC,EAAjB,qBAAkC,IAAI,CAAC,EAAvC,CADX;AAEA,MAAM,iBAAiB,GAAG,OAAO,aAAM,QAAN,UAAqB,KAAtD;AAEA,OAAK,QAAL,sDACqC,yBADrC,wGAIM,EAJN,yHAQ8C,QAR9C,+KAc0B,QAd1B,6WAuBqD,iBAvBrD;AAkCD,CA/CH","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nexport const COMPLEX_FFT = {\r\n    REAL: 'return real * expR - imag * expI;',\r\n    IMAG: 'return real * expI + imag * expR;'\r\n};\r\nexport class FFTProgram {\r\n    constructor(op, inputShape, inverse) {\r\n        this.variableNames = ['real', 'imag'];\r\n        const innerDim = inputShape[1];\r\n        this.outputShape = inputShape;\r\n        const exponentMultiplierSnippet = inverse ? `2.0 * ${Math.PI}` : `-2.0 * ${Math.PI}`;\r\n        const resultDenominator = inverse ? `${innerDim}.0` : '1.0';\r\n        this.userCode = `\r\n      const float exponentMultiplier = ${exponentMultiplierSnippet};\r\n\r\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\r\n        ${op}\r\n      }\r\n\r\n      float mulMatDFT(int batch, int index) {\r\n        float indexRatio = float(index) / float(${innerDim});\r\n        float exponentMultiplierTimesIndexRatio =\r\n            exponentMultiplier * indexRatio;\r\n\r\n        float result = 0.0;\r\n\r\n        for (int i = 0; i < ${innerDim}; i++) {\r\n          // x = (-2|2 * PI / N) * index * i;\r\n          float x = exponentMultiplierTimesIndexRatio * float(i);\r\n          float expR = cos(x);\r\n          float expI = sin(x);\r\n          float real = getReal(batch, i);\r\n          float imag = getImag(batch, i);\r\n\r\n          result +=\r\n              unaryOpComplex(real, expR, imag, expI) / ${resultDenominator};\r\n        }\r\n\r\n        return result;\r\n      }\r\n\r\n      void main() {\r\n        ivec2 coords = getOutputCoords();\r\n        setOutput(mulMatDFT(coords[0], coords[1]));\r\n      }\r\n    `;\r\n    }\r\n}\r\n//# sourceMappingURL=fft_gpu.js.map"]},"metadata":{},"sourceType":"module"}