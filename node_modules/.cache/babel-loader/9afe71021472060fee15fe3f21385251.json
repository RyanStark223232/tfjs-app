{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { Erf } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { cast } from './cast';\nimport { op } from './operation';\n/**\r\n * Computes gause error function of the input `tf.Tensor` element-wise:\r\n * `erf(x)`\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([0, .1, -.1, .7]);\r\n *\r\n * x.erf().print(); // or tf.erf(x);\r\n * ```\r\n * @param x The input tensor.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Basic math'}\r\n */\n\nfunction erf_(x) {\n  var $x = convertToTensor(x, 'x', 'erf');\n  util.assert($x.dtype === 'int32' || $x.dtype === 'float32', function () {\n    return 'Input dtype must be `int32` or `float32`.';\n  });\n\n  if ($x.dtype === 'int32') {\n    $x = cast($x, 'float32');\n  }\n\n  var inputs = {\n    x: $x\n  };\n  return ENGINE.runKernelFunc(function (backend, save) {\n    var res = backend.erf($x);\n    save([$x]);\n    return res;\n  }, inputs, null\n  /* grad */\n  , Erf);\n}\n\nexport var erf = op({\n  erf_: erf_\n});","map":{"version":3,"sources":["../../src/ops/erf.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,MAAR,QAAqB,WAArB;AACA,SAAQ,GAAR,QAA6B,iBAA7B;AAGA,SAAQ,eAAR,QAA8B,oBAA9B;AAEA,OAAO,KAAK,IAAZ,MAAsB,SAAtB;AAEA,SAAQ,IAAR,QAAmB,QAAnB;AACA,SAAQ,EAAR,QAAiB,aAAjB;AAEA;;;;;;;;;;;;AAYG;;AACH,SAAS,IAAT,CAAgC,CAAhC,EAA+C;AAC7C,MAAI,EAAE,GAAG,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,KAAT,CAAxB;AACA,EAAA,IAAI,CAAC,MAAL,CACI,EAAE,CAAC,KAAH,KAAa,OAAb,IAAwB,EAAE,CAAC,KAAH,KAAa,SADzC,EAEI;AAAA,WAAM,2CAAN;AAAA,GAFJ;;AAIA,MAAI,EAAE,CAAC,KAAH,KAAa,OAAjB,EAA0B;AACxB,IAAA,EAAE,GAAG,IAAI,CAAC,EAAD,EAAK,SAAL,CAAT;AACD;;AAED,MAAM,MAAM,GAAc;AAAC,IAAA,CAAC,EAAE;AAAJ,GAA1B;AACA,SAAO,MAAM,CAAC,aAAP,CAAqB,UAAC,OAAD,EAAU,IAAV,EAAkB;AAC5C,QAAM,GAAG,GAAG,OAAO,CAAC,GAAR,CAAY,EAAZ,CAAZ;AACA,IAAA,IAAI,CAAC,CAAC,EAAD,CAAD,CAAJ;AACA,WAAO,GAAP;AACD,GAJM,EAIJ,MAJI,EAI4B;AAAK;AAJjC,IAI6C,GAJ7C,CAAP;AAKD;;AACD,OAAO,IAAM,GAAG,GAAG,EAAE,CAAC;AAAC,EAAA,IAAI,EAAJ;AAAD,CAAD,CAAd","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { ENGINE } from '../engine';\r\nimport { Erf } from '../kernel_names';\r\nimport { convertToTensor } from '../tensor_util_env';\r\nimport * as util from '../util';\r\nimport { cast } from './cast';\r\nimport { op } from './operation';\r\n/**\r\n * Computes gause error function of the input `tf.Tensor` element-wise:\r\n * `erf(x)`\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([0, .1, -.1, .7]);\r\n *\r\n * x.erf().print(); // or tf.erf(x);\r\n * ```\r\n * @param x The input tensor.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Basic math'}\r\n */\r\nfunction erf_(x) {\r\n    let $x = convertToTensor(x, 'x', 'erf');\r\n    util.assert($x.dtype === 'int32' || $x.dtype === 'float32', () => 'Input dtype must be `int32` or `float32`.');\r\n    if ($x.dtype === 'int32') {\r\n        $x = cast($x, 'float32');\r\n    }\r\n    const inputs = { x: $x };\r\n    return ENGINE.runKernelFunc((backend, save) => {\r\n        const res = backend.erf($x);\r\n        save([$x]);\r\n        return res;\r\n    }, inputs, null /* grad */, Erf);\r\n}\r\nexport const erf = op({ erf_ });\r\n//# sourceMappingURL=erf.js.map"]},"metadata":{},"sourceType":"module"}