{"ast":null,"code":"import _slicedToArray from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { getGlslDifferences } from './glsl_version';\nimport * as shader_util from './shader_compiler_util';\nexport var EncodeMatrixProgram = function EncodeMatrixProgram(outputShape, texShape) {\n  var inputIsUnsignedByte = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  _classCallCheck(this, EncodeMatrixProgram);\n\n  this.variableNames = ['A'];\n  var glsl = getGlslDifferences();\n\n  var _texShape = _slicedToArray(texShape, 2),\n      height = _texShape[0],\n      width = _texShape[1];\n\n  this.outputShape = outputShape;\n  var output = \"result\";\n\n  if (inputIsUnsignedByte) {\n    output = \"floor(result * 255. + 0.5)\";\n  }\n\n  this.userCode = \"\\n      \".concat(shader_util.getFlatIndexFrom3D(outputShape), \"\\n\\n      void main() {\\n        ivec3 coords = getOutputCoords();\\n\\n        int flatIndex = getFlatIndex(coords);\\n        int offset = imod(flatIndex, 4);\\n\\n        flatIndex = idiv(flatIndex, 4, 1.);\\n\\n        int r = flatIndex / \").concat(width, \";\\n        int c = imod(flatIndex, \").concat(width, \");\\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(\").concat(width, \".0, \").concat(height, \".0);\\n        vec4 values = \").concat(glsl.texture2D, \"(A, uv);\\n\\n        float result;\\n\\n        if(offset == 0) {\\n          result = values[0];\\n        } else if(offset == 1) {\\n          result = values[1];\\n        } else if(offset == 2) {\\n          result = values[2];\\n        } else {\\n          result = values[3];\\n        }\\n\\n        \").concat(glsl.output, \" = vec4(\").concat(output, \", 0., 0., 0.);\\n      }\\n    \");\n};","map":{"version":3,"sources":["../src/encode_matrix_gpu.ts"],"names":[],"mappings":";;;AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,kBAAR,QAAiC,gBAAjC;AAEA,OAAO,KAAK,WAAZ,MAA6B,wBAA7B;AAEA,WAAa,mBAAb,GAKE,6BACI,WADJ,EAC2C,QAD3C,EAE+B;AAAA,MAA3B,mBAA2B,uEAAL,KAAK;;AAAA;;AAN/B,OAAA,aAAA,GAAgB,CAAC,GAAD,CAAhB;AAOE,MAAM,IAAI,GAAG,kBAAkB,EAA/B;;AAD6B,iCAEL,QAFK;AAAA,MAEtB,MAFsB;AAAA,MAEd,KAFc;;AAG7B,OAAK,WAAL,GAAmB,WAAnB;AAEA,MAAI,MAAM,WAAV;;AACA,MAAI,mBAAJ,EAAyB;AACvB,IAAA,MAAM,+BAAN;AACD;;AAED,OAAK,QAAL,qBACI,WAAW,CAAC,kBAAZ,CAA+B,WAA/B,CADJ,yPAW0B,KAX1B,gDAY8B,KAZ9B,gEAa6C,KAb7C,iBAayD,MAbzD,yCAcoB,IAAI,CAAC,SAdzB,oTA4BM,IAAI,CAAC,MA5BX,qBA4B4B,MA5B5B;AA+BD,CAhDH","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { getGlslDifferences } from './glsl_version';\r\nimport * as shader_util from './shader_compiler_util';\r\nexport class EncodeMatrixProgram {\r\n    constructor(outputShape, texShape, inputIsUnsignedByte = false) {\r\n        this.variableNames = ['A'];\r\n        const glsl = getGlslDifferences();\r\n        const [height, width] = texShape;\r\n        this.outputShape = outputShape;\r\n        let output = `result`;\r\n        if (inputIsUnsignedByte) {\r\n            output = `floor(result * 255. + 0.5)`;\r\n        }\r\n        this.userCode = `\r\n      ${shader_util.getFlatIndexFrom3D(outputShape)}\r\n\r\n      void main() {\r\n        ivec3 coords = getOutputCoords();\r\n\r\n        int flatIndex = getFlatIndex(coords);\r\n        int offset = imod(flatIndex, 4);\r\n\r\n        flatIndex = idiv(flatIndex, 4, 1.);\r\n\r\n        int r = flatIndex / ${width};\r\n        int c = imod(flatIndex, ${width});\r\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(${width}.0, ${height}.0);\r\n        vec4 values = ${glsl.texture2D}(A, uv);\r\n\r\n        float result;\r\n\r\n        if(offset == 0) {\r\n          result = values[0];\r\n        } else if(offset == 1) {\r\n          result = values[1];\r\n        } else if(offset == 2) {\r\n          result = values[2];\r\n        } else {\r\n          result = values[3];\r\n        }\r\n\r\n        ${glsl.output} = vec4(${output}, 0., 0., 0.);\r\n      }\r\n    `;\r\n    }\r\n}\r\n//# sourceMappingURL=encode_matrix_gpu.js.map"]},"metadata":{},"sourceType":"module"}