{"ast":null,"code":"import _slicedToArray from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { UnsortedSegmentSum } from '../kernel_names';\nimport { expandDims } from '../ops/expand_dims';\nimport { gather } from '../ops/gather';\nimport { greaterEqual } from '../ops/greater_equal';\nimport { logicalAnd } from '../ops/logical_and';\nimport { maximum } from '../ops/maximum';\nimport { ones } from '../ops/ones';\nimport { scalar } from '../ops/scalar';\nimport { where } from '../ops/where';\nimport { zerosLike } from '../ops/zeros_like';\nexport var unsortedSegmentSumGradConfig = {\n  kernelName: UnsortedSegmentSum,\n  inputsToSave: ['segmentIds'],\n  gradFunc: function gradFunc(dy, saved) {\n    var _saved = _slicedToArray(saved, 1),\n        segmentIds = _saved[0];\n\n    var derX = function derX() {\n      return gatherDropNegatives(dy, segmentIds);\n    };\n\n    return {\n      x: derX\n    };\n  }\n};\n\nfunction gatherDropNegatives(x, indices) {\n  // Helper function for unsorted segment ops. Gathers params for\n  // positive segment ids and gathers 0 for inputs with negative segment id.\n  // Mirrors _GatherDropNegatives from tensorflow/python/ops/math_grad.py\n  var zeroClippedIndices = maximum(indices, zerosLike(indices));\n  var gathered = gather(x, zeroClippedIndices);\n  var isPositive = greaterEqual(indices, scalar(0, 'int32'));\n  var numIters = gathered.rank - isPositive.rank;\n\n  for (var i = 0; i < numIters; ++i) {\n    isPositive = expandDims(isPositive, i + 1);\n  }\n\n  isPositive = logicalAnd(isPositive, ones(gathered.shape, 'bool'));\n  var zeroSlice = zerosLike(gathered);\n  return where(isPositive, gathered, zeroSlice);\n}","map":{"version":3,"sources":["../../src/gradients/UnsortedSegmentSum_grad.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,kBAAR,QAAiC,iBAAjC;AAEA,SAAQ,UAAR,QAAyB,oBAAzB;AACA,SAAQ,MAAR,QAAqB,eAArB;AACA,SAAQ,YAAR,QAA2B,sBAA3B;AACA,SAAQ,UAAR,QAAyB,oBAAzB;AACA,SAAQ,OAAR,QAAsB,gBAAtB;AACA,SAAQ,IAAR,QAAmB,aAAnB;AACA,SAAQ,MAAR,QAAqB,eAArB;AACA,SAAQ,KAAR,QAAoB,cAApB;AACA,SAAQ,SAAR,QAAwB,mBAAxB;AAGA,OAAO,IAAM,4BAA4B,GAAe;AACtD,EAAA,UAAU,EAAE,kBAD0C;AAEtD,EAAA,YAAY,EAAE,CAAC,YAAD,CAFwC;AAGtD,EAAA,QAAQ,EAAE,kBAAC,EAAD,EAAa,KAAb,EAAgC;AAAA,gCACnB,KADmB;AAAA,QACjC,UADiC;;AAGxC,QAAM,IAAI,GAAG,SAAP,IAAO,GAAK;AAChB,aAAO,mBAAmB,CAAC,EAAD,EAAK,UAAL,CAA1B;AACD,KAFD;;AAGA,WAAO;AAAC,MAAA,CAAC,EAAE;AAAJ,KAAP;AACD;AAVqD,CAAjD;;AAaP,SAAS,mBAAT,CAA+C,CAA/C,EAAqD,OAArD,EAAsE;AACpE;AACA;AACA;AACA,MAAM,kBAAkB,GAAG,OAAO,CAAC,OAAD,EAAU,SAAS,CAAC,OAAD,CAAnB,CAAlC;AACA,MAAM,QAAQ,GAAG,MAAM,CAAC,CAAD,EAAI,kBAAJ,CAAvB;AACA,MAAI,UAAU,GAAG,YAAY,CAAC,OAAD,EAAU,MAAM,CAAC,CAAD,EAAI,OAAJ,CAAhB,CAA7B;AACA,MAAM,QAAQ,GAAG,QAAQ,CAAC,IAAT,GAAgB,UAAU,CAAC,IAA5C;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,QAApB,EAA8B,EAAE,CAAhC,EAAmC;AACjC,IAAA,UAAU,GAAG,UAAU,CAAC,UAAD,EAAa,CAAC,GAAG,CAAjB,CAAvB;AACD;;AACD,EAAA,UAAU,GAAG,UAAU,CAAC,UAAD,EAAa,IAAI,CAAC,QAAQ,CAAC,KAAV,EAAiB,MAAjB,CAAjB,CAAvB;AACA,MAAM,SAAS,GAAG,SAAS,CAAC,QAAD,CAA3B;AACA,SAAO,KAAK,CAAC,UAAD,EAAa,QAAb,EAAuB,SAAvB,CAAZ;AACD","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { UnsortedSegmentSum } from '../kernel_names';\r\nimport { expandDims } from '../ops/expand_dims';\r\nimport { gather } from '../ops/gather';\r\nimport { greaterEqual } from '../ops/greater_equal';\r\nimport { logicalAnd } from '../ops/logical_and';\r\nimport { maximum } from '../ops/maximum';\r\nimport { ones } from '../ops/ones';\r\nimport { scalar } from '../ops/scalar';\r\nimport { where } from '../ops/where';\r\nimport { zerosLike } from '../ops/zeros_like';\r\nexport const unsortedSegmentSumGradConfig = {\r\n    kernelName: UnsortedSegmentSum,\r\n    inputsToSave: ['segmentIds'],\r\n    gradFunc: (dy, saved) => {\r\n        const [segmentIds] = saved;\r\n        const derX = () => {\r\n            return gatherDropNegatives(dy, segmentIds);\r\n        };\r\n        return { x: derX };\r\n    }\r\n};\r\nfunction gatherDropNegatives(x, indices) {\r\n    // Helper function for unsorted segment ops. Gathers params for\r\n    // positive segment ids and gathers 0 for inputs with negative segment id.\r\n    // Mirrors _GatherDropNegatives from tensorflow/python/ops/math_grad.py\r\n    const zeroClippedIndices = maximum(indices, zerosLike(indices));\r\n    const gathered = gather(x, zeroClippedIndices);\r\n    let isPositive = greaterEqual(indices, scalar(0, 'int32'));\r\n    const numIters = gathered.rank - isPositive.rank;\r\n    for (let i = 0; i < numIters; ++i) {\r\n        isPositive = expandDims(isPositive, i + 1);\r\n    }\r\n    isPositive = logicalAnd(isPositive, ones(gathered.shape, 'bool'));\r\n    const zeroSlice = zerosLike(gathered);\r\n    return where(isPositive, gathered, zeroSlice);\r\n}\r\n//# sourceMappingURL=UnsortedSegmentSum_grad.js.map"]},"metadata":{},"sourceType":"module"}