{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { tidy, util } from '@tensorflow/tfjs-core'; // tslint:disable-next-line: no-imports-from-dist\n\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context) => {\n  switch (node.op) {\n    case 'ConcatV2':\n    case 'Concat':\n      {\n        const n = getParamValue('n', node, tensorMap, context);\n        const axis = getParamValue('axis', node, tensorMap, context);\n        let inputs = getParamValue('tensors', node, tensorMap, context);\n        inputs = inputs.slice(0, n);\n        return [tfOps.concat(inputs, axis)];\n      }\n\n    case 'GatherV2':\n    case 'Gather':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        const input = getParamValue('x', node, tensorMap, context);\n        const indices = getParamValue('indices', node, tensorMap, context);\n        return [tfOps.gather(input, tfOps.cast(indices, 'int32'), axis)];\n      }\n\n    case 'ReverseV2':\n    case 'Reverse':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        const input = getParamValue('x', node, tensorMap, context);\n        return [tfOps.reverse(input, axis)];\n      }\n\n    case 'Slice':\n      {\n        // tslint:disable-next-line:no-any\n        const begin = getParamValue('begin', node, tensorMap, context); // tslint:disable-next-line:no-any\n\n        const size = getParamValue('size', node, tensorMap, context);\n        return [tfOps.slice(getParamValue('x', node, tensorMap, context), begin, size)];\n      }\n\n    case 'StridedSlice':\n      {\n        const begin = getParamValue('begin', node, tensorMap, context);\n        const end = getParamValue('end', node, tensorMap, context);\n        const strides = getParamValue('strides', node, tensorMap, context);\n        const beginMask = getParamValue('beginMask', node, tensorMap, context);\n        const endMask = getParamValue('endMask', node, tensorMap, context);\n        const ellipsisMask = getParamValue('ellipsisMask', node, tensorMap, context);\n        const newAxisMask = getParamValue('newAxisMask', node, tensorMap, context);\n        const shrinkAxisMask = getParamValue('shrinkAxisMask', node, tensorMap, context);\n        const tensor = getParamValue('x', node, tensorMap, context);\n        return [tfOps.stridedSlice(tensor, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask)];\n      }\n\n    case 'Pack':\n      {\n        return tidy(() => {\n          const axis = getParamValue('axis', node, tensorMap, context);\n          const tensors = getParamValue('tensors', node, tensorMap, context); // Reshape the tensors to the first tensor's shape if they don't\n          // match.\n\n          const shape = tensors[0].shape;\n          const squeezedShape = tfOps.squeeze(tensors[0]).shape;\n          const mapped = tensors.map(tensor => {\n            const sameShape = util.arraysEqual(tensor.shape, shape);\n\n            if (!sameShape && !util.arraysEqual(tfOps.squeeze(tensor).shape, squeezedShape)) {\n              throw new Error('the input tensors shape does not match');\n            }\n\n            return sameShape ? tensor : tfOps.reshape(tensor, shape);\n          });\n          return [tfOps.stack(mapped, axis)];\n        });\n      }\n\n    case 'Unpack':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        const tensor = getParamValue('tensor', node, tensorMap, context);\n        return tfOps.unstack(tensor, axis);\n      }\n\n    case 'Tile':\n      {\n        const reps = getParamValue('reps', node, tensorMap, context);\n        return [tfOps.tile(getParamValue('x', node, tensorMap, context), reps)];\n      }\n\n    case 'Split':\n    case 'SplitV':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        const numOrSizeSplits = getParamValue('numOrSizeSplits', node, tensorMap, context);\n        const tensor = getParamValue('x', node, tensorMap, context);\n        return tfOps.split(tensor, numOrSizeSplits, axis);\n      }\n\n    case 'ScatterNd':\n      {\n        const indices = getParamValue('indices', node, tensorMap, context);\n        const values = getParamValue('values', node, tensorMap, context);\n        const shape = getParamValue('shape', node, tensorMap, context);\n        return [tfOps.scatterND(indices, values, shape)];\n      }\n\n    case 'GatherNd':\n      {\n        const x = getParamValue('x', node, tensorMap, context);\n        const indices = getParamValue('indices', node, tensorMap, context);\n        return [tfOps.gatherND(x, indices)];\n      }\n\n    case 'SparseToDense':\n      {\n        const indices = getParamValue('sparseIndices', node, tensorMap, context);\n        const shape = getParamValue('outputShape', node, tensorMap, context);\n        const sparseValues = getParamValue('sparseValues', node, tensorMap, context);\n        const defaultValue = getParamValue('defaultValue', node, tensorMap, context);\n        return [tfOps.sparseToDense(indices, sparseValues, shape, sparseValues.dtype === defaultValue.dtype ? defaultValue : tfOps.cast(defaultValue, sparseValues.dtype))];\n      }\n\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'slice_join';","map":{"version":3,"sources":["../../../src/operations/executors/slice_join_executor.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { tidy, util } from '@tensorflow/tfjs-core';\r\n// tslint:disable-next-line: no-imports-from-dist\r\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\r\nimport { getParamValue } from './utils';\r\nexport const executeOp = (node, tensorMap, context) => {\r\n    switch (node.op) {\r\n        case 'ConcatV2':\r\n        case 'Concat': {\r\n            const n = getParamValue('n', node, tensorMap, context);\r\n            const axis = getParamValue('axis', node, tensorMap, context);\r\n            let inputs = getParamValue('tensors', node, tensorMap, context);\r\n            inputs = inputs.slice(0, n);\r\n            return [tfOps.concat(inputs, axis)];\r\n        }\r\n        case 'GatherV2':\r\n        case 'Gather': {\r\n            const axis = getParamValue('axis', node, tensorMap, context);\r\n            const input = getParamValue('x', node, tensorMap, context);\r\n            const indices = getParamValue('indices', node, tensorMap, context);\r\n            return [tfOps.gather(input, tfOps.cast(indices, 'int32'), axis)];\r\n        }\r\n        case 'ReverseV2':\r\n        case 'Reverse': {\r\n            const axis = getParamValue('axis', node, tensorMap, context);\r\n            const input = getParamValue('x', node, tensorMap, context);\r\n            return [tfOps.reverse(input, axis)];\r\n        }\r\n        case 'Slice': {\r\n            // tslint:disable-next-line:no-any\r\n            const begin = getParamValue('begin', node, tensorMap, context);\r\n            // tslint:disable-next-line:no-any\r\n            const size = getParamValue('size', node, tensorMap, context);\r\n            return [tfOps.slice(getParamValue('x', node, tensorMap, context), begin, size)];\r\n        }\r\n        case 'StridedSlice': {\r\n            const begin = getParamValue('begin', node, tensorMap, context);\r\n            const end = getParamValue('end', node, tensorMap, context);\r\n            const strides = getParamValue('strides', node, tensorMap, context);\r\n            const beginMask = getParamValue('beginMask', node, tensorMap, context);\r\n            const endMask = getParamValue('endMask', node, tensorMap, context);\r\n            const ellipsisMask = getParamValue('ellipsisMask', node, tensorMap, context);\r\n            const newAxisMask = getParamValue('newAxisMask', node, tensorMap, context);\r\n            const shrinkAxisMask = getParamValue('shrinkAxisMask', node, tensorMap, context);\r\n            const tensor = getParamValue('x', node, tensorMap, context);\r\n            return [tfOps.stridedSlice(tensor, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask)];\r\n        }\r\n        case 'Pack': {\r\n            return tidy(() => {\r\n                const axis = getParamValue('axis', node, tensorMap, context);\r\n                const tensors = getParamValue('tensors', node, tensorMap, context);\r\n                // Reshape the tensors to the first tensor's shape if they don't\r\n                // match.\r\n                const shape = tensors[0].shape;\r\n                const squeezedShape = tfOps.squeeze(tensors[0]).shape;\r\n                const mapped = tensors.map(tensor => {\r\n                    const sameShape = util.arraysEqual(tensor.shape, shape);\r\n                    if (!sameShape &&\r\n                        !util.arraysEqual(tfOps.squeeze(tensor).shape, squeezedShape)) {\r\n                        throw new Error('the input tensors shape does not match');\r\n                    }\r\n                    return sameShape ? tensor : tfOps.reshape(tensor, shape);\r\n                });\r\n                return [tfOps.stack(mapped, axis)];\r\n            });\r\n        }\r\n        case 'Unpack': {\r\n            const axis = getParamValue('axis', node, tensorMap, context);\r\n            const tensor = getParamValue('tensor', node, tensorMap, context);\r\n            return tfOps.unstack(tensor, axis);\r\n        }\r\n        case 'Tile': {\r\n            const reps = getParamValue('reps', node, tensorMap, context);\r\n            return [tfOps.tile(getParamValue('x', node, tensorMap, context), reps)];\r\n        }\r\n        case 'Split':\r\n        case 'SplitV': {\r\n            const axis = getParamValue('axis', node, tensorMap, context);\r\n            const numOrSizeSplits = getParamValue('numOrSizeSplits', node, tensorMap, context);\r\n            const tensor = getParamValue('x', node, tensorMap, context);\r\n            return tfOps.split(tensor, numOrSizeSplits, axis);\r\n        }\r\n        case 'ScatterNd': {\r\n            const indices = getParamValue('indices', node, tensorMap, context);\r\n            const values = getParamValue('values', node, tensorMap, context);\r\n            const shape = getParamValue('shape', node, tensorMap, context);\r\n            return [tfOps.scatterND(indices, values, shape)];\r\n        }\r\n        case 'GatherNd': {\r\n            const x = getParamValue('x', node, tensorMap, context);\r\n            const indices = getParamValue('indices', node, tensorMap, context);\r\n            return [tfOps.gatherND(x, indices)];\r\n        }\r\n        case 'SparseToDense': {\r\n            const indices = getParamValue('sparseIndices', node, tensorMap, context);\r\n            const shape = getParamValue('outputShape', node, tensorMap, context);\r\n            const sparseValues = getParamValue('sparseValues', node, tensorMap, context);\r\n            const defaultValue = getParamValue('defaultValue', node, tensorMap, context);\r\n            return [tfOps.sparseToDense(indices, sparseValues, shape, sparseValues.dtype === defaultValue.dtype ?\r\n                    defaultValue :\r\n                    tfOps.cast(defaultValue, sparseValues.dtype))];\r\n        }\r\n        default:\r\n            throw TypeError(`Node type ${node.op} is not implemented`);\r\n    }\r\n};\r\nexport const CATEGORY = 'slice_join';\r\n//# sourceMappingURL=slice_join_executor.js.map"]},"metadata":{},"sourceType":"module"}