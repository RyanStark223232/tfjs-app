{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { cast } from '../kernels/Cast';\nimport { complex } from '../kernels/Complex';\n/**\r\n * Template that creates a `KernelFunc` for binary ops.\r\n * @param name Kernel name.\r\n * @param binaryKernelImpl A `SimpleBinaryKernelImpl` for the kernel.\r\n * @param binaryKernelComplexImpl Optional. If exists, represents a\r\n *     `ComplexBinaryKernelImpl` for the kernel, will be used when input dtype\r\n *     is `complex64`.\r\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\r\n *     result has the same dtype as the first input. This is mainly used in\r\n *     comparison kernels, such as Equal, Less, Greater, etc.\r\n */\n\nexport function binaryKernelFunc(name, simpleImpl, complexImpl, dtype) {\n  if (complexImpl == null) {\n    return ({\n      inputs,\n      backend\n    }) => {\n      const {\n        a,\n        b\n      } = inputs;\n      const cpuBackend = backend;\n      assertNotComplex([a, b], name);\n      const aVals = cpuBackend.data.get(a.dataId).values;\n      const bVals = cpuBackend.data.get(b.dataId).values;\n      const $dtype = dtype || a.dtype;\n      const [resultData, resultShape] = simpleImpl(a.shape, b.shape, aVals, bVals, $dtype);\n      return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n    };\n  }\n\n  return ({\n    inputs,\n    backend\n  }) => {\n    const {\n      a,\n      b\n    } = inputs;\n    const cpuBackend = backend;\n\n    if (a.dtype === 'complex64' || b.dtype === 'complex64') {\n      const $aComplex = cast({\n        inputs: {\n          x: a\n        },\n        backend: cpuBackend,\n        attrs: {\n          dtype: 'complex64'\n        }\n      });\n      const $aComplexVals = cpuBackend.data.get($aComplex.dataId);\n      const aReal = $aComplexVals.complexTensorInfos.real;\n      const aImag = $aComplexVals.complexTensorInfos.imag;\n      const aRealVals = cpuBackend.data.get(aReal.dataId).values;\n      const aImagVals = cpuBackend.data.get(aImag.dataId).values;\n      const $bComplex = cast({\n        inputs: {\n          x: b\n        },\n        backend: cpuBackend,\n        attrs: {\n          dtype: 'complex64'\n        }\n      });\n      const $bComplexVals = cpuBackend.data.get($bComplex.dataId);\n      const bReal = $bComplexVals.complexTensorInfos.real;\n      const bImag = $bComplexVals.complexTensorInfos.imag;\n      const bRealVals = cpuBackend.data.get(bReal.dataId).values;\n      const bImagVals = cpuBackend.data.get(bImag.dataId).values;\n      const [resultRealData, resultImagData, resultShape] = complexImpl(a.shape, b.shape, aRealVals, aImagVals, bRealVals, bImagVals);\n      const resultReal = cpuBackend.makeTensorInfo(resultShape, 'float32', resultRealData);\n      const resultImag = cpuBackend.makeTensorInfo(resultShape, 'float32', resultImagData);\n      const result = complex({\n        inputs: {\n          real: resultReal,\n          imag: resultImag\n        },\n        backend: cpuBackend\n      });\n      cpuBackend.disposeIntermediateTensorInfo($aComplex);\n      cpuBackend.disposeIntermediateTensorInfo($bComplex);\n      cpuBackend.disposeIntermediateTensorInfo(resultReal);\n      cpuBackend.disposeIntermediateTensorInfo(resultImag);\n      return result;\n    } else {\n      const aVals = cpuBackend.data.get(a.dataId).values;\n      const bVals = cpuBackend.data.get(b.dataId).values;\n      const $dtype = dtype || a.dtype;\n      const [resultData, resultShape] = simpleImpl(a.shape, b.shape, aVals, bVals, $dtype);\n      return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n    }\n  };\n}\n/**\r\n * Template that creates the complex type implementation for binary ops.\r\n * Supports broadcast.\r\n */\n\nexport function createComplexBinaryKernelImpl(op) {\n  return (aShape, bShape, aRealVals, aImagVals, bRealVals, bImagVals) => {\n    const resultShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    const resultSize = util.sizeFromShape(resultShape);\n    const resultRank = resultShape.length;\n    const resultStrides = util.computeStrides(resultShape);\n    const resultRealVals = util.getTypedArrayFromDType('float32', resultSize);\n    const resultImagVals = util.getTypedArrayFromDType('float32', resultSize);\n    const aBroadcastDims = backend_util.getBroadcastDims(aShape, resultShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(bShape, resultShape);\n    const aVals = backend_util.mergeRealAndImagArrays(aRealVals, aImagVals);\n    const bVals = backend_util.mergeRealAndImagArrays(bRealVals, bImagVals);\n    const aRank = aShape.length;\n    const aStrides = util.computeStrides(aShape);\n    const bRank = bShape.length;\n    const bStrides = util.computeStrides(bShape);\n\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < resultRealVals.length; i++) {\n        const aIdx = i % aVals.length;\n        const bIdx = i % bVals.length;\n        const result = op(aVals[aIdx * 2], aVals[aIdx * 2 + 1], bVals[bIdx * 2], bVals[bIdx * 2 + 1]);\n        resultRealVals[i] = result.real;\n        resultImagVals[i] = result.imag;\n      }\n    } else {\n      for (let i = 0; i < resultRealVals.length; i++) {\n        const loc = util.indexToLoc(i, resultRank, resultStrides);\n        const aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n        const bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n        const opResult = op(aVals[aIndex * 2], aVals[aIndex * 2 + 1], bVals[bIndex * 2], bVals[bIndex * 2 + 1]);\n        resultRealVals[i] = opResult.real;\n        resultImagVals[i] = opResult.imag;\n      }\n    }\n\n    return [resultRealVals, resultImagVals, resultShape];\n  };\n}","map":{"version":3,"sources":["../../src/utils/kernel_utils.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { backend_util, util } from '@tensorflow/tfjs-core';\r\nimport { assertNotComplex } from '../cpu_util';\r\nimport { cast } from '../kernels/Cast';\r\nimport { complex } from '../kernels/Complex';\r\n/**\r\n * Template that creates a `KernelFunc` for binary ops.\r\n * @param name Kernel name.\r\n * @param binaryKernelImpl A `SimpleBinaryKernelImpl` for the kernel.\r\n * @param binaryKernelComplexImpl Optional. If exists, represents a\r\n *     `ComplexBinaryKernelImpl` for the kernel, will be used when input dtype\r\n *     is `complex64`.\r\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\r\n *     result has the same dtype as the first input. This is mainly used in\r\n *     comparison kernels, such as Equal, Less, Greater, etc.\r\n */\r\nexport function binaryKernelFunc(name, simpleImpl, complexImpl, dtype) {\r\n    if (complexImpl == null) {\r\n        return ({ inputs, backend }) => {\r\n            const { a, b } = inputs;\r\n            const cpuBackend = backend;\r\n            assertNotComplex([a, b], name);\r\n            const aVals = cpuBackend.data.get(a.dataId).values;\r\n            const bVals = cpuBackend.data.get(b.dataId).values;\r\n            const $dtype = dtype || a.dtype;\r\n            const [resultData, resultShape] = simpleImpl(a.shape, b.shape, aVals, bVals, $dtype);\r\n            return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\r\n        };\r\n    }\r\n    return ({ inputs, backend }) => {\r\n        const { a, b } = inputs;\r\n        const cpuBackend = backend;\r\n        if (a.dtype === 'complex64' || b.dtype === 'complex64') {\r\n            const $aComplex = cast({ inputs: { x: a }, backend: cpuBackend, attrs: { dtype: 'complex64' } });\r\n            const $aComplexVals = cpuBackend.data.get($aComplex.dataId);\r\n            const aReal = $aComplexVals.complexTensorInfos.real;\r\n            const aImag = $aComplexVals.complexTensorInfos.imag;\r\n            const aRealVals = cpuBackend.data.get(aReal.dataId).values;\r\n            const aImagVals = cpuBackend.data.get(aImag.dataId).values;\r\n            const $bComplex = cast({ inputs: { x: b }, backend: cpuBackend, attrs: { dtype: 'complex64' } });\r\n            const $bComplexVals = cpuBackend.data.get($bComplex.dataId);\r\n            const bReal = $bComplexVals.complexTensorInfos.real;\r\n            const bImag = $bComplexVals.complexTensorInfos.imag;\r\n            const bRealVals = cpuBackend.data.get(bReal.dataId).values;\r\n            const bImagVals = cpuBackend.data.get(bImag.dataId).values;\r\n            const [resultRealData, resultImagData, resultShape] = complexImpl(a.shape, b.shape, aRealVals, aImagVals, bRealVals, bImagVals);\r\n            const resultReal = cpuBackend.makeTensorInfo(resultShape, 'float32', resultRealData);\r\n            const resultImag = cpuBackend.makeTensorInfo(resultShape, 'float32', resultImagData);\r\n            const result = complex({ inputs: { real: resultReal, imag: resultImag }, backend: cpuBackend });\r\n            cpuBackend.disposeIntermediateTensorInfo($aComplex);\r\n            cpuBackend.disposeIntermediateTensorInfo($bComplex);\r\n            cpuBackend.disposeIntermediateTensorInfo(resultReal);\r\n            cpuBackend.disposeIntermediateTensorInfo(resultImag);\r\n            return result;\r\n        }\r\n        else {\r\n            const aVals = cpuBackend.data.get(a.dataId).values;\r\n            const bVals = cpuBackend.data.get(b.dataId).values;\r\n            const $dtype = dtype || a.dtype;\r\n            const [resultData, resultShape] = simpleImpl(a.shape, b.shape, aVals, bVals, $dtype);\r\n            return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\r\n        }\r\n    };\r\n}\r\n/**\r\n * Template that creates the complex type implementation for binary ops.\r\n * Supports broadcast.\r\n */\r\nexport function createComplexBinaryKernelImpl(op) {\r\n    return (aShape, bShape, aRealVals, aImagVals, bRealVals, bImagVals) => {\r\n        const resultShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\r\n        const resultSize = util.sizeFromShape(resultShape);\r\n        const resultRank = resultShape.length;\r\n        const resultStrides = util.computeStrides(resultShape);\r\n        const resultRealVals = util.getTypedArrayFromDType('float32', resultSize);\r\n        const resultImagVals = util.getTypedArrayFromDType('float32', resultSize);\r\n        const aBroadcastDims = backend_util.getBroadcastDims(aShape, resultShape);\r\n        const bBroadcastDims = backend_util.getBroadcastDims(bShape, resultShape);\r\n        const aVals = backend_util.mergeRealAndImagArrays(aRealVals, aImagVals);\r\n        const bVals = backend_util.mergeRealAndImagArrays(bRealVals, bImagVals);\r\n        const aRank = aShape.length;\r\n        const aStrides = util.computeStrides(aShape);\r\n        const bRank = bShape.length;\r\n        const bStrides = util.computeStrides(bShape);\r\n        if (aBroadcastDims.length + bBroadcastDims.length === 0) {\r\n            for (let i = 0; i < resultRealVals.length; i++) {\r\n                const aIdx = i % aVals.length;\r\n                const bIdx = i % bVals.length;\r\n                const result = op(aVals[aIdx * 2], aVals[aIdx * 2 + 1], bVals[bIdx * 2], bVals[bIdx * 2 + 1]);\r\n                resultRealVals[i] = result.real;\r\n                resultImagVals[i] = result.imag;\r\n            }\r\n        }\r\n        else {\r\n            for (let i = 0; i < resultRealVals.length; i++) {\r\n                const loc = util.indexToLoc(i, resultRank, resultStrides);\r\n                const aLoc = loc.slice(-aRank);\r\n                aBroadcastDims.forEach(d => aLoc[d] = 0);\r\n                const aIndex = util.locToIndex(aLoc, aRank, aStrides);\r\n                const bLoc = loc.slice(-bRank);\r\n                bBroadcastDims.forEach(d => bLoc[d] = 0);\r\n                const bIndex = util.locToIndex(bLoc, bRank, bStrides);\r\n                const opResult = op(aVals[aIndex * 2], aVals[aIndex * 2 + 1], bVals[bIndex * 2], bVals[bIndex * 2 + 1]);\r\n                resultRealVals[i] = opResult.real;\r\n                resultImagVals[i] = opResult.imag;\r\n            }\r\n        }\r\n        return [resultRealVals, resultImagVals, resultShape];\r\n    };\r\n}\r\n//# sourceMappingURL=kernel_utils.js.map"]},"metadata":{},"sourceType":"module"}