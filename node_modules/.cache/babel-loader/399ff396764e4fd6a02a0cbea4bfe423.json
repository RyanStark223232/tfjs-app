{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../../engine';\nimport { NonMaxSuppressionV3 } from '../../kernel_names';\nimport { convertToTensor } from '../../tensor_util_env';\nimport { nonMaxSuppSanityCheck } from '../nonmax_util';\nimport { op } from '../operation';\n\nfunction nonMaxSuppression_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY) {\n  const $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppression');\n  const $scores = convertToTensor(scores, 'scores', 'nonMaxSuppression');\n  const inputs = nonMaxSuppSanityCheck($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold);\n  maxOutputSize = inputs.maxOutputSize;\n  iouThreshold = inputs.iouThreshold;\n  scoreThreshold = inputs.scoreThreshold;\n  const attrs = {\n    maxOutputSize,\n    iouThreshold,\n    scoreThreshold\n  };\n  return ENGINE.runKernelFunc(b => b.nonMaxSuppression($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold), {\n    boxes: $boxes,\n    scores: $scores\n  }, null\n  /* grad */\n  , NonMaxSuppressionV3, attrs);\n}\n\nexport const nonMaxSuppression = op({\n  nonMaxSuppression_\n});","map":{"version":3,"sources":["../../../src/ops/image/non_max_suppression.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,MAAR,QAAqB,cAArB;AACA,SAAQ,mBAAR,QAAkC,oBAAlC;AAEA,SAAQ,eAAR,QAA8B,uBAA9B;AAGA,SAAQ,qBAAR,QAAoC,gBAApC;AACA,SAAQ,EAAR,QAAiB,cAAjB;;AAEA,SAAS,kBAAT,CACI,KADJ,EACgC,MADhC,EAEI,aAFJ,EAE2B,YAAY,GAAG,GAF1C,EAGI,cAAc,GAAG,MAAM,CAAC,iBAH5B,EAG6C;AAC3C,QAAM,MAAM,GAAG,eAAe,CAAC,KAAD,EAAQ,OAAR,EAAiB,mBAAjB,CAA9B;AACA,QAAM,OAAO,GAAG,eAAe,CAAC,MAAD,EAAS,QAAT,EAAmB,mBAAnB,CAA/B;AAEA,QAAM,MAAM,GAAG,qBAAqB,CAChC,MADgC,EACxB,OADwB,EACf,aADe,EACA,YADA,EACc,cADd,CAApC;AAEA,EAAA,aAAa,GAAG,MAAM,CAAC,aAAvB;AACA,EAAA,YAAY,GAAG,MAAM,CAAC,YAAtB;AACA,EAAA,cAAc,GAAG,MAAM,CAAC,cAAxB;AAEA,QAAM,KAAK,GAAG;AAAC,IAAA,aAAD;AAAgB,IAAA,YAAhB;AAA8B,IAAA;AAA9B,GAAd;AACA,SAAO,MAAM,CAAC,aAAP,CACH,CAAC,IAAI,CAAC,CAAC,iBAAF,CACD,MADC,EACO,OADP,EACgB,aADhB,EAC+B,YAD/B,EAC6C,cAD7C,CADF,EAGH;AAAC,IAAA,KAAK,EAAE,MAAR;AAAgB,IAAA,MAAM,EAAE;AAAxB,GAHG,EAG+B;AAAK;AAHpC,IAGgD,mBAHhD,EAIH,KAJG,CAAP;AAKD;;AAED,OAAO,MAAM,iBAAiB,GAAG,EAAE,CAAC;AAAC,EAAA;AAAD,CAAD,CAA5B","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { ENGINE } from '../../engine';\r\nimport { NonMaxSuppressionV3 } from '../../kernel_names';\r\nimport { convertToTensor } from '../../tensor_util_env';\r\nimport { nonMaxSuppSanityCheck } from '../nonmax_util';\r\nimport { op } from '../operation';\r\nfunction nonMaxSuppression_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY) {\r\n    const $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppression');\r\n    const $scores = convertToTensor(scores, 'scores', 'nonMaxSuppression');\r\n    const inputs = nonMaxSuppSanityCheck($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold);\r\n    maxOutputSize = inputs.maxOutputSize;\r\n    iouThreshold = inputs.iouThreshold;\r\n    scoreThreshold = inputs.scoreThreshold;\r\n    const attrs = { maxOutputSize, iouThreshold, scoreThreshold };\r\n    return ENGINE.runKernelFunc(b => b.nonMaxSuppression($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold), { boxes: $boxes, scores: $scores }, null /* grad */, NonMaxSuppressionV3, attrs);\r\n}\r\nexport const nonMaxSuppression = op({ nonMaxSuppression_ });\r\n//# sourceMappingURL=non_max_suppression.js.map"]},"metadata":{},"sourceType":"module"}