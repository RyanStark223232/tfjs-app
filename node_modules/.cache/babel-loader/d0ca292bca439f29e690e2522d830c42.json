{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { clone } from '../../utils/object';\nimport { validateIndex } from '../../utils/array';\nvar name = 'row';\nvar dependencies = ['typed', 'Index', 'matrix', 'range'];\nexport var createRow = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      Index = _ref.Index,\n      matrix = _ref.matrix,\n      range = _ref.range;\n  /**\r\n   * Return a row from a Matrix.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.row(value, index)\r\n   *\r\n   * Example:\r\n   *\r\n   *     // get a row\r\n   *     const d = [[1, 2], [3, 4]]\r\n   *     math.row(d, 1) // returns [[3, 4]]\r\n   *\r\n   * See also:\r\n   *\r\n   *     column\r\n   *\r\n   * @param {Array | Matrix } value   An array or matrix\r\n   * @param {number} row              The index of the row\r\n   * @return {Array | Matrix}         The retrieved row\r\n   */\n\n  return typed(name, {\n    'Matrix, number': _row,\n    'Array, number': function ArrayNumber(value, row) {\n      return _row(matrix(clone(value)), row).valueOf();\n    }\n  });\n  /**\r\n   * Retrieve a row of a matrix\r\n   * @param {Matrix } value  A matrix\r\n   * @param {number} row     The index of the row\r\n   * @return {Matrix}        The retrieved row\r\n   */\n\n  function _row(value, row) {\n    // check dimensions\n    if (value.size().length !== 2) {\n      throw new Error('Only two dimensional matrix is supported');\n    }\n\n    validateIndex(row, value.size()[0]);\n    var columnRange = range(0, value.size()[1]);\n    var index = new Index(row, columnRange);\n    return value.subset(index);\n  }\n});","map":{"version":3,"sources":["C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/mathjs/es/function/matrix/row.js"],"names":["factory","clone","validateIndex","name","dependencies","createRow","_ref","typed","Index","matrix","range","_row","ArrayNumber","value","row","valueOf","size","length","Error","columnRange","index","subset"],"mappings":"AAAA,SAASA,OAAT,QAAwB,qBAAxB;AACA,SAASC,KAAT,QAAsB,oBAAtB;AACA,SAASC,aAAT,QAA8B,mBAA9B;AACA,IAAIC,IAAI,GAAG,KAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,OAAV,EAAmB,QAAnB,EAA6B,OAA7B,CAAnB;AACA,OAAO,IAAIC,SAAS,GAAG,eAAeL,OAAO,CAACG,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AAChF,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAAA,MACIC,KAAK,GAAGF,IAAI,CAACE,KADjB;AAAA,MAEIC,MAAM,GAAGH,IAAI,CAACG,MAFlB;AAAA,MAGIC,KAAK,GAAGJ,IAAI,CAACI,KAHjB;AAKA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOH,KAAK,CAACJ,IAAD,EAAO;AACjB,sBAAkBQ,IADD;AAEjB,qBAAiB,SAASC,WAAT,CAAqBC,KAArB,EAA4BC,GAA5B,EAAiC;AAChD,aAAOH,IAAI,CAACF,MAAM,CAACR,KAAK,CAACY,KAAD,CAAN,CAAP,EAAuBC,GAAvB,CAAJ,CAAgCC,OAAhC,EAAP;AACD;AAJgB,GAAP,CAAZ;AAMA;AACF;AACA;AACA;AACA;AACA;;AAEE,WAASJ,IAAT,CAAcE,KAAd,EAAqBC,GAArB,EAA0B;AACxB;AACA,QAAID,KAAK,CAACG,IAAN,GAAaC,MAAb,KAAwB,CAA5B,EAA+B;AAC7B,YAAM,IAAIC,KAAJ,CAAU,0CAAV,CAAN;AACD;;AAEDhB,IAAAA,aAAa,CAACY,GAAD,EAAMD,KAAK,CAACG,IAAN,GAAa,CAAb,CAAN,CAAb;AACA,QAAIG,WAAW,GAAGT,KAAK,CAAC,CAAD,EAAIG,KAAK,CAACG,IAAN,GAAa,CAAb,CAAJ,CAAvB;AACA,QAAII,KAAK,GAAG,IAAIZ,KAAJ,CAAUM,GAAV,EAAeK,WAAf,CAAZ;AACA,WAAON,KAAK,CAACQ,MAAN,CAAaD,KAAb,CAAP;AACD;AACF,CAnD4C,CAAtC","sourcesContent":["import { factory } from '../../utils/factory';\r\nimport { clone } from '../../utils/object';\r\nimport { validateIndex } from '../../utils/array';\r\nvar name = 'row';\r\nvar dependencies = ['typed', 'Index', 'matrix', 'range'];\r\nexport var createRow = /* #__PURE__ */factory(name, dependencies, function (_ref) {\r\n  var typed = _ref.typed,\r\n      Index = _ref.Index,\r\n      matrix = _ref.matrix,\r\n      range = _ref.range;\r\n\r\n  /**\r\n   * Return a row from a Matrix.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.row(value, index)\r\n   *\r\n   * Example:\r\n   *\r\n   *     // get a row\r\n   *     const d = [[1, 2], [3, 4]]\r\n   *     math.row(d, 1) // returns [[3, 4]]\r\n   *\r\n   * See also:\r\n   *\r\n   *     column\r\n   *\r\n   * @param {Array | Matrix } value   An array or matrix\r\n   * @param {number} row              The index of the row\r\n   * @return {Array | Matrix}         The retrieved row\r\n   */\r\n  return typed(name, {\r\n    'Matrix, number': _row,\r\n    'Array, number': function ArrayNumber(value, row) {\r\n      return _row(matrix(clone(value)), row).valueOf();\r\n    }\r\n  });\r\n  /**\r\n   * Retrieve a row of a matrix\r\n   * @param {Matrix } value  A matrix\r\n   * @param {number} row     The index of the row\r\n   * @return {Matrix}        The retrieved row\r\n   */\r\n\r\n  function _row(value, row) {\r\n    // check dimensions\r\n    if (value.size().length !== 2) {\r\n      throw new Error('Only two dimensional matrix is supported');\r\n    }\r\n\r\n    validateIndex(row, value.size()[0]);\r\n    var columnRange = range(0, value.size()[1]);\r\n    var index = new Index(row, columnRange);\r\n    return value.subset(index);\r\n  }\r\n});"]},"metadata":{},"sourceType":"module"}