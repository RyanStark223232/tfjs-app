{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { AddN } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\r\n * Adds a list of `tf.Tensor`s element-wise, each with the same shape and dtype.\r\n *\r\n * ```js\r\n * const a = tf.tensor1d([1, 2]);\r\n * const b = tf.tensor1d([3, 4]);\r\n * const c = tf.tensor1d([5, 6]);\r\n *\r\n * tf.addN([a, b, c]).print();\r\n * ```\r\n * @param tensors A list of tensors with the same shape and dtype.\r\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\r\n */\n\nfunction addN_(tensors) {\n  util.assert(Array.isArray(tensors), function () {\n    return 'The argument passed to tf.addN() must be a list of tensors';\n  });\n  util.assert(tensors.length >= 1, function () {\n    return \"Must pass at least one tensor to tf.addN(), but got \" + \"\".concat(tensors.length);\n  });\n  var $tensors = tensors.map(function (t, i) {\n    return convertToTensor(t, \"tensors\".concat(i), 'addN');\n  });\n  var firstTensor = $tensors[0];\n  $tensors.forEach(function (t) {\n    if (t.dtype !== firstTensor.dtype) {\n      throw new Error('All tensors passed to tf.addN() must have the same dtype');\n    }\n  });\n  $tensors.forEach(function (t) {\n    if (!util.arraysEqual(t.shape, firstTensor.shape)) {\n      throw new Error('All tensors passed to tf.addN() must have the same shape');\n    }\n  });\n\n  var forward = function forward(backend, save) {\n    var res = backend.addN($tensors);\n    save($tensors);\n    return res;\n  };\n\n  var inputs = $tensors;\n  return ENGINE.runKernelFunc(forward, inputs, null\n  /* grad */\n  , AddN);\n}\n\nexport var addN = op({\n  addN_: addN_\n});","map":{"version":3,"sources":["../../src/ops/add_n.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AACH,SAAQ,MAAR,QAAkC,WAAlC;AACA,SAAQ,IAAR,QAA+B,iBAA/B;AAGA,SAAQ,eAAR,QAA8B,oBAA9B;AAEA,OAAO,KAAK,IAAZ,MAAsB,SAAtB;AAEA,SAAQ,EAAR,QAAiB,aAAjB;AAEA;;;;;;;;;;;;AAYG;;AACH,SAAS,KAAT,CAAiC,OAAjC,EAA6D;AAC3D,EAAA,IAAI,CAAC,MAAL,CACI,KAAK,CAAC,OAAN,CAAc,OAAd,CADJ,EAEI;AAAA,WAAM,4DAAN;AAAA,GAFJ;AAGA,EAAA,IAAI,CAAC,MAAL,CACI,OAAO,CAAC,MAAR,IAAkB,CADtB,EAEI;AAAA,WAAM,mEACC,OAAO,CAAC,MADT,CAAN;AAAA,GAFJ;AAKA,MAAM,QAAQ,GACV,OAAO,CAAC,GAAR,CAAY,UAAC,CAAD,EAAI,CAAJ;AAAA,WAAU,eAAe,CAAC,CAAD,mBAAc,CAAd,GAAmB,MAAnB,CAAzB;AAAA,GAAZ,CADJ;AAGA,MAAM,WAAW,GAAG,QAAQ,CAAC,CAAD,CAA5B;AACA,EAAA,QAAQ,CAAC,OAAT,CAAiB,UAAA,CAAC,EAAG;AACnB,QAAI,CAAC,CAAC,KAAF,KAAY,WAAW,CAAC,KAA5B,EAAmC;AACjC,YAAM,IAAI,KAAJ,CACF,0DADE,CAAN;AAED;AACF,GALD;AAOA,EAAA,QAAQ,CAAC,OAAT,CAAiB,UAAA,CAAC,EAAG;AACnB,QAAI,CAAC,IAAI,CAAC,WAAL,CAAiB,CAAC,CAAC,KAAnB,EAA0B,WAAW,CAAC,KAAtC,CAAL,EAAmD;AACjD,YAAM,IAAI,KAAJ,CACF,0DADE,CAAN;AAED;AACF,GALD;;AAOA,MAAM,OAAO,GAAwB,SAA/B,OAA+B,CAAC,OAAD,EAAU,IAAV,EAAkB;AACrD,QAAM,GAAG,GAAG,OAAO,CAAC,IAAR,CAAa,QAAb,CAAZ;AACA,IAAA,IAAI,CAAC,QAAD,CAAJ;AACA,WAAO,GAAP;AACD,GAJD;;AAMA,MAAM,MAAM,GAAe,QAA3B;AAEA,SAAO,MAAM,CAAC,aAAP,CACI,OADJ,EACa,MADb,EAC6C;AAAK;AADlD,IAC8D,IAD9D,CAAP;AAGD;;AAED,OAAO,IAAM,IAAI,GAAG,EAAE,CAAC;AAAC,EAAA,KAAK,EAAL;AAAD,CAAD,CAAf","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { ENGINE } from '../engine';\r\nimport { AddN } from '../kernel_names';\r\nimport { convertToTensor } from '../tensor_util_env';\r\nimport * as util from '../util';\r\nimport { op } from './operation';\r\n/**\r\n * Adds a list of `tf.Tensor`s element-wise, each with the same shape and dtype.\r\n *\r\n * ```js\r\n * const a = tf.tensor1d([1, 2]);\r\n * const b = tf.tensor1d([3, 4]);\r\n * const c = tf.tensor1d([5, 6]);\r\n *\r\n * tf.addN([a, b, c]).print();\r\n * ```\r\n * @param tensors A list of tensors with the same shape and dtype.\r\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\r\n */\r\nfunction addN_(tensors) {\r\n    util.assert(Array.isArray(tensors), () => 'The argument passed to tf.addN() must be a list of tensors');\r\n    util.assert(tensors.length >= 1, () => `Must pass at least one tensor to tf.addN(), but got ` +\r\n        `${tensors.length}`);\r\n    const $tensors = tensors.map((t, i) => convertToTensor(t, `tensors${i}`, 'addN'));\r\n    const firstTensor = $tensors[0];\r\n    $tensors.forEach(t => {\r\n        if (t.dtype !== firstTensor.dtype) {\r\n            throw new Error('All tensors passed to tf.addN() must have the same dtype');\r\n        }\r\n    });\r\n    $tensors.forEach(t => {\r\n        if (!util.arraysEqual(t.shape, firstTensor.shape)) {\r\n            throw new Error('All tensors passed to tf.addN() must have the same shape');\r\n        }\r\n    });\r\n    const forward = (backend, save) => {\r\n        const res = backend.addN($tensors);\r\n        save($tensors);\r\n        return res;\r\n    };\r\n    const inputs = $tensors;\r\n    return ENGINE.runKernelFunc(forward, inputs, null /* grad */, AddN);\r\n}\r\nexport const addN = op({ addN_ });\r\n//# sourceMappingURL=add_n.js.map"]},"metadata":{},"sourceType":"module"}