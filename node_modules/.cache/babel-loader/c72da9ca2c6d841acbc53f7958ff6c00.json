{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { Reverse } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { parseAxisParam } from '../util';\nimport { clone } from './clone';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\r\n * Reverses a `tf.Tensor` along a specified axis.\r\n *\r\n * Also available are stricter rank-specific methods that assert that `x` is\r\n * of the given rank:\r\n *   - `tf.reverse1d`\r\n *   - `tf.reverse2d`\r\n *   - `tf.reverse3d`\r\n *   - `tf.reverse4d`\r\n *\r\n * Except `tf.reverse1d` (which does not have axis param), all methods have\r\n * same signature as this method.\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([1, 2, 3, 4]);\r\n *\r\n * x.reverse().print();\r\n * ```\r\n *\r\n * ```js\r\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\r\n *\r\n * const axis = 1;\r\n * x.reverse(axis).print();\r\n * ```\r\n * @param x The input tensor to be reversed.\r\n * @param axis The set of dimensions to reverse. Must be in the\r\n *     range [-rank(x), rank(x)). Defaults to all axes.\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\r\n */\n\nfunction reverse_(x, axis) {\n  const $x = convertToTensor(x, 'x', 'reverse');\n\n  const forward = backend => {\n    const axes = parseAxisParam(axis, $x.shape);\n\n    if ($x.rank === 0) {\n      return clone($x);\n    }\n\n    const res = backend.reverse($x, axes);\n    return reshape(res, $x.shape);\n  };\n\n  const inputs = {\n    x: $x\n  };\n  const attrs = {\n    dims: axis\n  };\n  return ENGINE.runKernelFunc(forward, inputs, null\n  /* gradient */\n  , Reverse, attrs);\n}\n\nexport const reverse = op({\n  reverse_\n});","map":{"version":3,"sources":["../../src/ops/reverse.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,MAAR,QAAkC,WAAlC;AACA,SAAQ,OAAR,QAAmD,iBAAnD;AAIA,SAAQ,eAAR,QAA8B,oBAA9B;AAEA,SAAQ,cAAR,QAA6B,SAA7B;AAEA,SAAQ,KAAR,QAAoB,SAApB;AACA,SAAQ,EAAR,QAAiB,aAAjB;AACA,SAAQ,OAAR,QAAsB,WAAtB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BG;;AACH,SAAS,QAAT,CACI,CADJ,EACqB,IADrB,EAC2C;AACzC,QAAM,EAAE,GAAG,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,SAAT,CAA1B;;AAEA,QAAM,OAAO,GAAyB,OAAD,IAAY;AAC/C,UAAM,IAAI,GAAG,cAAc,CAAC,IAAD,EAAO,EAAE,CAAC,KAAV,CAA3B;;AACA,QAAI,EAAE,CAAC,IAAH,KAAY,CAAhB,EAAmB;AACjB,aAAO,KAAK,CAAC,EAAD,CAAZ;AACD;;AACD,UAAM,GAAG,GAAG,OAAO,CAAC,OAAR,CAAgB,EAAhB,EAAoB,IAApB,CAAZ;AACA,WAAO,OAAO,CAAC,GAAD,EAAM,EAAE,CAAC,KAAT,CAAd;AACD,GAPD;;AASA,QAAM,MAAM,GAAkB;AAAC,IAAA,CAAC,EAAE;AAAJ,GAA9B;AACA,QAAM,KAAK,GAAiB;AAAC,IAAA,IAAI,EAAE;AAAP,GAA5B;AAEA,SAAO,MAAM,CAAC,aAAP,CACI,OADJ,EACa,MADb,EAC6C;AAAK;AADlD,IAEI,OAFJ,EAEa,KAFb,CAAP;AAGD;;AAED,OAAO,MAAM,OAAO,GAAG,EAAE,CAAC;AAAC,EAAA;AAAD,CAAD,CAAlB","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { ENGINE } from '../engine';\r\nimport { Reverse } from '../kernel_names';\r\nimport { convertToTensor } from '../tensor_util_env';\r\nimport { parseAxisParam } from '../util';\r\nimport { clone } from './clone';\r\nimport { op } from './operation';\r\nimport { reshape } from './reshape';\r\n/**\r\n * Reverses a `tf.Tensor` along a specified axis.\r\n *\r\n * Also available are stricter rank-specific methods that assert that `x` is\r\n * of the given rank:\r\n *   - `tf.reverse1d`\r\n *   - `tf.reverse2d`\r\n *   - `tf.reverse3d`\r\n *   - `tf.reverse4d`\r\n *\r\n * Except `tf.reverse1d` (which does not have axis param), all methods have\r\n * same signature as this method.\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([1, 2, 3, 4]);\r\n *\r\n * x.reverse().print();\r\n * ```\r\n *\r\n * ```js\r\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\r\n *\r\n * const axis = 1;\r\n * x.reverse(axis).print();\r\n * ```\r\n * @param x The input tensor to be reversed.\r\n * @param axis The set of dimensions to reverse. Must be in the\r\n *     range [-rank(x), rank(x)). Defaults to all axes.\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\r\n */\r\nfunction reverse_(x, axis) {\r\n    const $x = convertToTensor(x, 'x', 'reverse');\r\n    const forward = (backend) => {\r\n        const axes = parseAxisParam(axis, $x.shape);\r\n        if ($x.rank === 0) {\r\n            return clone($x);\r\n        }\r\n        const res = backend.reverse($x, axes);\r\n        return reshape(res, $x.shape);\r\n    };\r\n    const inputs = { x: $x };\r\n    const attrs = { dims: axis };\r\n    return ENGINE.runKernelFunc(forward, inputs, null /* gradient */, Reverse, attrs);\r\n}\r\nexport const reverse = op({ reverse_ });\r\n//# sourceMappingURL=reverse.js.map"]},"metadata":{},"sourceType":"module"}