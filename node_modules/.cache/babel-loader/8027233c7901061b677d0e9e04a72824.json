{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nexport var json = [{\n  'tfOpName': 'FusedBatchNorm',\n  'category': 'normalization',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'scale',\n    'type': 'tensor'\n  }, {\n    'start': 2,\n    'name': 'offset',\n    'type': 'tensor'\n  }, {\n    'start': 3,\n    'name': 'mean',\n    'type': 'tensor'\n  }, {\n    'start': 4,\n    'name': 'variance',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'epsilon',\n    'name': 'epsilon',\n    'type': 'number',\n    'defaultValue': 0.001\n  }, {\n    'tfName': 'data_format',\n    'name': 'dataFormat',\n    'type': 'string',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'FusedBatchNormV2',\n  'category': 'normalization',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'scale',\n    'type': 'tensor'\n  }, {\n    'start': 2,\n    'name': 'offset',\n    'type': 'tensor'\n  }, {\n    'start': 3,\n    'name': 'mean',\n    'type': 'tensor'\n  }, {\n    'start': 4,\n    'name': 'variance',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'epsilon',\n    'name': 'epsilon',\n    'type': 'number',\n    'defaultValue': 0.001\n  }, {\n    'tfName': 'data_format',\n    'name': 'dataFormat',\n    'type': 'string',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'FusedBatchNormV3',\n  'category': 'normalization',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'scale',\n    'type': 'tensor'\n  }, {\n    'start': 2,\n    'name': 'offset',\n    'type': 'tensor'\n  }, {\n    'start': 3,\n    'name': 'mean',\n    'type': 'tensor'\n  }, {\n    'start': 4,\n    'name': 'variance',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'epsilon',\n    'name': 'epsilon',\n    'type': 'number',\n    'defaultValue': 0.001\n  }, {\n    'tfName': 'data_format',\n    'name': 'dataFormat',\n    'type': 'string',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'LRN',\n  'category': 'normalization',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'depth_radius',\n    'name': 'radius',\n    'type': 'number',\n    'defaultValue': 5\n  }, {\n    'tfName': 'bias',\n    'name': 'bias',\n    'type': 'number',\n    'defaultValue': 1.0\n  }, {\n    'tfName': 'alpha',\n    'name': 'alpha',\n    'type': 'number',\n    'defaultValue': 1.0\n  }, {\n    'tfName': 'beta',\n    'name': 'beta',\n    'type': 'number',\n    'defaultValue': 0.5\n  }]\n}, {\n  'tfOpName': 'Softmax',\n  'category': 'normalization',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }]\n}, {\n  'tfOpName': 'LogSoftmax',\n  'category': 'normalization',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }]\n}, {\n  'tfOpName': 'SparseToDense',\n  'category': 'normalization',\n  'inputs': [{\n    'start': 0,\n    'name': 'sparseIndices',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'outputShape',\n    'type': 'number[]'\n  }, {\n    'start': 2,\n    'name': 'sparseValues',\n    'type': 'tensor'\n  }, {\n    'start': 3,\n    'name': 'defaultValue',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'validate_indices',\n    'name': 'validateIndices',\n    'type': 'bool',\n    'defaultValue': true,\n    'notSupported': true\n  }]\n}];","map":{"version":3,"sources":["../../../src/operations/op_list/normalization.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nexport const json = [\r\n    {\r\n        'tfOpName': 'FusedBatchNorm',\r\n        'category': 'normalization',\r\n        'inputs': [\r\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\r\n            { 'start': 1, 'name': 'scale', 'type': 'tensor' },\r\n            { 'start': 2, 'name': 'offset', 'type': 'tensor' },\r\n            { 'start': 3, 'name': 'mean', 'type': 'tensor' },\r\n            { 'start': 4, 'name': 'variance', 'type': 'tensor' },\r\n        ],\r\n        'attrs': [\r\n            {\r\n                'tfName': 'epsilon',\r\n                'name': 'epsilon',\r\n                'type': 'number',\r\n                'defaultValue': 0.001\r\n            },\r\n            {\r\n                'tfName': 'data_format',\r\n                'name': 'dataFormat',\r\n                'type': 'string',\r\n                'notSupported': true\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        'tfOpName': 'FusedBatchNormV2',\r\n        'category': 'normalization',\r\n        'inputs': [\r\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\r\n            { 'start': 1, 'name': 'scale', 'type': 'tensor' },\r\n            { 'start': 2, 'name': 'offset', 'type': 'tensor' },\r\n            { 'start': 3, 'name': 'mean', 'type': 'tensor' },\r\n            { 'start': 4, 'name': 'variance', 'type': 'tensor' },\r\n        ],\r\n        'attrs': [\r\n            {\r\n                'tfName': 'epsilon',\r\n                'name': 'epsilon',\r\n                'type': 'number',\r\n                'defaultValue': 0.001\r\n            },\r\n            {\r\n                'tfName': 'data_format',\r\n                'name': 'dataFormat',\r\n                'type': 'string',\r\n                'notSupported': true\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        'tfOpName': 'FusedBatchNormV3',\r\n        'category': 'normalization',\r\n        'inputs': [\r\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\r\n            { 'start': 1, 'name': 'scale', 'type': 'tensor' },\r\n            { 'start': 2, 'name': 'offset', 'type': 'tensor' },\r\n            { 'start': 3, 'name': 'mean', 'type': 'tensor' },\r\n            { 'start': 4, 'name': 'variance', 'type': 'tensor' },\r\n        ],\r\n        'attrs': [\r\n            {\r\n                'tfName': 'epsilon',\r\n                'name': 'epsilon',\r\n                'type': 'number',\r\n                'defaultValue': 0.001\r\n            },\r\n            {\r\n                'tfName': 'data_format',\r\n                'name': 'dataFormat',\r\n                'type': 'string',\r\n                'notSupported': true\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        'tfOpName': 'LRN',\r\n        'category': 'normalization',\r\n        'inputs': [\r\n            { 'start': 0, 'name': 'x', 'type': 'tensor' },\r\n        ],\r\n        'attrs': [\r\n            {\r\n                'tfName': 'depth_radius',\r\n                'name': 'radius',\r\n                'type': 'number',\r\n                'defaultValue': 5\r\n            },\r\n            { 'tfName': 'bias', 'name': 'bias', 'type': 'number', 'defaultValue': 1.0 },\r\n            {\r\n                'tfName': 'alpha',\r\n                'name': 'alpha',\r\n                'type': 'number',\r\n                'defaultValue': 1.0\r\n            },\r\n            {\r\n                'tfName': 'beta',\r\n                'name': 'beta',\r\n                'type': 'number',\r\n                'defaultValue': 0.5\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        'tfOpName': 'Softmax',\r\n        'category': 'normalization',\r\n        'inputs': [{ 'start': 0, 'name': 'x', 'type': 'tensor' }]\r\n    },\r\n    {\r\n        'tfOpName': 'LogSoftmax',\r\n        'category': 'normalization',\r\n        'inputs': [{ 'start': 0, 'name': 'x', 'type': 'tensor' }]\r\n    },\r\n    {\r\n        'tfOpName': 'SparseToDense',\r\n        'category': 'normalization',\r\n        'inputs': [\r\n            { 'start': 0, 'name': 'sparseIndices', 'type': 'tensor' },\r\n            { 'start': 1, 'name': 'outputShape', 'type': 'number[]' },\r\n            { 'start': 2, 'name': 'sparseValues', 'type': 'tensor' },\r\n            { 'start': 3, 'name': 'defaultValue', 'type': 'tensor' },\r\n        ],\r\n        'attrs': [{\r\n                'tfName': 'validate_indices',\r\n                'name': 'validateIndices',\r\n                'type': 'bool',\r\n                'defaultValue': true,\r\n                'notSupported': true\r\n            }]\r\n    }\r\n];\r\n//# sourceMappingURL=normalization.js.map"]},"metadata":{},"sourceType":"module"}