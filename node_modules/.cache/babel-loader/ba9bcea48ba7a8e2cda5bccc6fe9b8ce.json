{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { FromPixels } from '../kernel_names';\nimport { getKernel } from '../kernel_registry';\nimport { Tensor } from '../tensor';\nimport { convertToTensor } from '../tensor_util_env';\nimport { cast } from './cast';\nimport { op } from './operation';\nimport { tensor3d } from './tensor3d';\nlet fromPixels2DContext;\n/**\r\n * Creates a `tf.Tensor` from an image.\r\n *\r\n * ```js\r\n * const image = new ImageData(1, 1);\r\n * image.data[0] = 100;\r\n * image.data[1] = 150;\r\n * image.data[2] = 200;\r\n * image.data[3] = 255;\r\n *\r\n * tf.browser.fromPixels(image).print();\r\n * ```\r\n *\r\n * @param pixels The input image to construct the tensor from. The\r\n * supported image types are all 4-channel. You can also pass in an image\r\n * object with following attributes:\r\n * `{data: Uint8Array; width: number; height: number}`\r\n * @param numChannels The number of channels of the output tensor. A\r\n * numChannels value less than 4 allows you to ignore channels. Defaults to\r\n * 3 (ignores alpha channel of input image).\r\n *\r\n * @doc {heading: 'Browser', namespace: 'browser', ignoreCI: true}\r\n */\n\nfunction fromPixels_(pixels, numChannels = 3) {\n  // Sanity checks.\n  if (numChannels > 4) {\n    throw new Error('Cannot construct Tensor with more than 4 channels from pixels.');\n  }\n\n  if (pixels == null) {\n    throw new Error('pixels passed to tf.browser.fromPixels() can not be null');\n  }\n\n  let isPixelData = false;\n  let isImageData = false;\n  let isVideo = false;\n  let isImage = false;\n  let isCanvasLike = false;\n\n  if (pixels.data instanceof Uint8Array) {\n    isPixelData = true;\n  } else if (typeof ImageData !== 'undefined' && pixels instanceof ImageData) {\n    isImageData = true;\n  } else if (typeof HTMLVideoElement !== 'undefined' && pixels instanceof HTMLVideoElement) {\n    isVideo = true;\n  } else if (typeof HTMLImageElement !== 'undefined' && pixels instanceof HTMLImageElement) {\n    isImage = true; // tslint:disable-next-line: no-any\n  } else if (pixels.getContext != null) {\n    isCanvasLike = true;\n  } else {\n    throw new Error('pixels passed to tf.browser.fromPixels() must be either an ' + `HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData ` + `in browser, or OffscreenCanvas, ImageData in webworker` + ` or {data: Uint32Array, width: number, height: number}, ` + `but was ${pixels.constructor.name}`);\n  }\n\n  if (isVideo) {\n    const HAVE_CURRENT_DATA_READY_STATE = 2;\n\n    if (isVideo && pixels.readyState < HAVE_CURRENT_DATA_READY_STATE) {\n      throw new Error('The video element has not loaded data yet. Please wait for ' + '`loadeddata` event on the <video> element.');\n    }\n  } // If the current backend has 'FromPixels' registered, it has a more\n  // efficient way of handling pixel uploads, so we call that.\n\n\n  const kernel = getKernel(FromPixels, ENGINE.backendName);\n\n  if (kernel != null) {\n    const inputs = {\n      pixels\n    };\n    const attrs = {\n      numChannels\n    };\n    return ENGINE.runKernel(FromPixels, inputs, attrs);\n  }\n\n  const [width, height] = isVideo ? [pixels.videoWidth, pixels.videoHeight] : [pixels.width, pixels.height];\n  let vals;\n\n  if (isCanvasLike) {\n    vals = // tslint:disable-next-line:no-any\n    pixels.getContext('2d').getImageData(0, 0, width, height).data;\n  } else if (isImageData || isPixelData) {\n    vals = pixels.data;\n  } else if (isImage || isVideo) {\n    if (fromPixels2DContext == null) {\n      fromPixels2DContext = document.createElement('canvas').getContext('2d');\n    }\n\n    fromPixels2DContext.canvas.width = width;\n    fromPixels2DContext.canvas.height = height;\n    fromPixels2DContext.drawImage(pixels, 0, 0, width, height);\n    vals = fromPixels2DContext.getImageData(0, 0, width, height).data;\n  }\n\n  let values;\n\n  if (numChannels === 4) {\n    values = new Int32Array(vals);\n  } else {\n    const numPixels = width * height;\n    values = new Int32Array(numPixels * numChannels);\n\n    for (let i = 0; i < numPixels; i++) {\n      for (let channel = 0; channel < numChannels; ++channel) {\n        values[i * numChannels + channel] = vals[i * 4 + channel];\n      }\n    }\n  }\n\n  const outShape = [height, width, numChannels];\n  return tensor3d(values, outShape, 'int32');\n}\n/**\r\n * Draws a `tf.Tensor` of pixel values to a byte array or optionally a\r\n * canvas.\r\n *\r\n * When the dtype of the input is 'float32', we assume values in the range\r\n * [0-1]. Otherwise, when input is 'int32', we assume values in the range\r\n * [0-255].\r\n *\r\n * Returns a promise that resolves when the canvas has been drawn to.\r\n *\r\n * @param img A rank-2 or rank-3 tensor. If rank-2, draws grayscale. If\r\n *     rank-3, must have depth of 1, 3 or 4. When depth of 1, draws\r\n * grayscale. When depth of 3, we draw with the first three components of\r\n * the depth dimension corresponding to r, g, b and alpha = 1. When depth of\r\n * 4, all four components of the depth dimension correspond to r, g, b, a.\r\n * @param canvas The canvas to draw to.\r\n *\r\n * @doc {heading: 'Browser', namespace: 'browser'}\r\n */\n\n\nexport async function toPixels(img, canvas) {\n  let $img = convertToTensor(img, 'img', 'toPixels');\n\n  if (!(img instanceof Tensor)) {\n    // Assume int32 if user passed a native array.\n    const originalImgTensor = $img;\n    $img = cast(originalImgTensor, 'int32');\n    originalImgTensor.dispose();\n  }\n\n  if ($img.rank !== 2 && $img.rank !== 3) {\n    throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${$img.rank}.`);\n  }\n\n  const [height, width] = $img.shape.slice(0, 2);\n  const depth = $img.rank === 2 ? 1 : $img.shape[2];\n\n  if (depth > 4 || depth === 2) {\n    throw new Error(`toPixels only supports depth of size ` + `1, 3 or 4 but got ${depth}`);\n  }\n\n  if ($img.dtype !== 'float32' && $img.dtype !== 'int32') {\n    throw new Error(`Unsupported type for toPixels: ${$img.dtype}.` + ` Please use float32 or int32 tensors.`);\n  }\n\n  const data = await $img.data();\n  const multiplier = $img.dtype === 'float32' ? 255 : 1;\n  const bytes = new Uint8ClampedArray(width * height * 4);\n\n  for (let i = 0; i < height * width; ++i) {\n    const rgba = [0, 0, 0, 255];\n\n    for (let d = 0; d < depth; d++) {\n      const value = data[i * depth + d];\n\n      if ($img.dtype === 'float32') {\n        if (value < 0 || value > 1) {\n          throw new Error(`Tensor values for a float32 Tensor must be in the ` + `range [0 - 1] but encountered ${value}.`);\n        }\n      } else if ($img.dtype === 'int32') {\n        if (value < 0 || value > 255) {\n          throw new Error(`Tensor values for a int32 Tensor must be in the ` + `range [0 - 255] but encountered ${value}.`);\n        }\n      }\n\n      if (depth === 1) {\n        rgba[0] = value * multiplier;\n        rgba[1] = value * multiplier;\n        rgba[2] = value * multiplier;\n      } else {\n        rgba[d] = value * multiplier;\n      }\n    }\n\n    const j = i * 4;\n    bytes[j + 0] = Math.round(rgba[0]);\n    bytes[j + 1] = Math.round(rgba[1]);\n    bytes[j + 2] = Math.round(rgba[2]);\n    bytes[j + 3] = Math.round(rgba[3]);\n  }\n\n  if (canvas != null) {\n    canvas.width = width;\n    canvas.height = height;\n    const ctx = canvas.getContext('2d');\n    const imageData = new ImageData(bytes, width, height);\n    ctx.putImageData(imageData, 0, 0);\n  }\n\n  if ($img !== img) {\n    $img.dispose();\n  }\n\n  return bytes;\n}\nexport const fromPixels = op({\n  fromPixels_\n});","map":{"version":3,"sources":["../../src/ops/browser.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { ENGINE } from '../engine';\r\nimport { FromPixels } from '../kernel_names';\r\nimport { getKernel } from '../kernel_registry';\r\nimport { Tensor } from '../tensor';\r\nimport { convertToTensor } from '../tensor_util_env';\r\nimport { cast } from './cast';\r\nimport { op } from './operation';\r\nimport { tensor3d } from './tensor3d';\r\nlet fromPixels2DContext;\r\n/**\r\n * Creates a `tf.Tensor` from an image.\r\n *\r\n * ```js\r\n * const image = new ImageData(1, 1);\r\n * image.data[0] = 100;\r\n * image.data[1] = 150;\r\n * image.data[2] = 200;\r\n * image.data[3] = 255;\r\n *\r\n * tf.browser.fromPixels(image).print();\r\n * ```\r\n *\r\n * @param pixels The input image to construct the tensor from. The\r\n * supported image types are all 4-channel. You can also pass in an image\r\n * object with following attributes:\r\n * `{data: Uint8Array; width: number; height: number}`\r\n * @param numChannels The number of channels of the output tensor. A\r\n * numChannels value less than 4 allows you to ignore channels. Defaults to\r\n * 3 (ignores alpha channel of input image).\r\n *\r\n * @doc {heading: 'Browser', namespace: 'browser', ignoreCI: true}\r\n */\r\nfunction fromPixels_(pixels, numChannels = 3) {\r\n    // Sanity checks.\r\n    if (numChannels > 4) {\r\n        throw new Error('Cannot construct Tensor with more than 4 channels from pixels.');\r\n    }\r\n    if (pixels == null) {\r\n        throw new Error('pixels passed to tf.browser.fromPixels() can not be null');\r\n    }\r\n    let isPixelData = false;\r\n    let isImageData = false;\r\n    let isVideo = false;\r\n    let isImage = false;\r\n    let isCanvasLike = false;\r\n    if (pixels.data instanceof Uint8Array) {\r\n        isPixelData = true;\r\n    }\r\n    else if (typeof (ImageData) !== 'undefined' && pixels instanceof ImageData) {\r\n        isImageData = true;\r\n    }\r\n    else if (typeof (HTMLVideoElement) !== 'undefined' &&\r\n        pixels instanceof HTMLVideoElement) {\r\n        isVideo = true;\r\n    }\r\n    else if (typeof (HTMLImageElement) !== 'undefined' &&\r\n        pixels instanceof HTMLImageElement) {\r\n        isImage = true;\r\n        // tslint:disable-next-line: no-any\r\n    }\r\n    else if (pixels.getContext != null) {\r\n        isCanvasLike = true;\r\n    }\r\n    else {\r\n        throw new Error('pixels passed to tf.browser.fromPixels() must be either an ' +\r\n            `HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData ` +\r\n            `in browser, or OffscreenCanvas, ImageData in webworker` +\r\n            ` or {data: Uint32Array, width: number, height: number}, ` +\r\n            `but was ${pixels.constructor.name}`);\r\n    }\r\n    if (isVideo) {\r\n        const HAVE_CURRENT_DATA_READY_STATE = 2;\r\n        if (isVideo &&\r\n            pixels.readyState <\r\n                HAVE_CURRENT_DATA_READY_STATE) {\r\n            throw new Error('The video element has not loaded data yet. Please wait for ' +\r\n                '`loadeddata` event on the <video> element.');\r\n        }\r\n    }\r\n    // If the current backend has 'FromPixels' registered, it has a more\r\n    // efficient way of handling pixel uploads, so we call that.\r\n    const kernel = getKernel(FromPixels, ENGINE.backendName);\r\n    if (kernel != null) {\r\n        const inputs = { pixels };\r\n        const attrs = { numChannels };\r\n        return ENGINE.runKernel(FromPixels, inputs, attrs);\r\n    }\r\n    const [width, height] = isVideo ?\r\n        [\r\n            pixels.videoWidth,\r\n            pixels.videoHeight\r\n        ] :\r\n        [pixels.width, pixels.height];\r\n    let vals;\r\n    if (isCanvasLike) {\r\n        vals =\r\n            // tslint:disable-next-line:no-any\r\n            pixels.getContext('2d').getImageData(0, 0, width, height).data;\r\n    }\r\n    else if (isImageData || isPixelData) {\r\n        vals = pixels.data;\r\n    }\r\n    else if (isImage || isVideo) {\r\n        if (fromPixels2DContext == null) {\r\n            fromPixels2DContext = document.createElement('canvas').getContext('2d');\r\n        }\r\n        fromPixels2DContext.canvas.width = width;\r\n        fromPixels2DContext.canvas.height = height;\r\n        fromPixels2DContext.drawImage(pixels, 0, 0, width, height);\r\n        vals = fromPixels2DContext.getImageData(0, 0, width, height).data;\r\n    }\r\n    let values;\r\n    if (numChannels === 4) {\r\n        values = new Int32Array(vals);\r\n    }\r\n    else {\r\n        const numPixels = width * height;\r\n        values = new Int32Array(numPixels * numChannels);\r\n        for (let i = 0; i < numPixels; i++) {\r\n            for (let channel = 0; channel < numChannels; ++channel) {\r\n                values[i * numChannels + channel] = vals[i * 4 + channel];\r\n            }\r\n        }\r\n    }\r\n    const outShape = [height, width, numChannels];\r\n    return tensor3d(values, outShape, 'int32');\r\n}\r\n/**\r\n * Draws a `tf.Tensor` of pixel values to a byte array or optionally a\r\n * canvas.\r\n *\r\n * When the dtype of the input is 'float32', we assume values in the range\r\n * [0-1]. Otherwise, when input is 'int32', we assume values in the range\r\n * [0-255].\r\n *\r\n * Returns a promise that resolves when the canvas has been drawn to.\r\n *\r\n * @param img A rank-2 or rank-3 tensor. If rank-2, draws grayscale. If\r\n *     rank-3, must have depth of 1, 3 or 4. When depth of 1, draws\r\n * grayscale. When depth of 3, we draw with the first three components of\r\n * the depth dimension corresponding to r, g, b and alpha = 1. When depth of\r\n * 4, all four components of the depth dimension correspond to r, g, b, a.\r\n * @param canvas The canvas to draw to.\r\n *\r\n * @doc {heading: 'Browser', namespace: 'browser'}\r\n */\r\nexport async function toPixels(img, canvas) {\r\n    let $img = convertToTensor(img, 'img', 'toPixels');\r\n    if (!(img instanceof Tensor)) {\r\n        // Assume int32 if user passed a native array.\r\n        const originalImgTensor = $img;\r\n        $img = cast(originalImgTensor, 'int32');\r\n        originalImgTensor.dispose();\r\n    }\r\n    if ($img.rank !== 2 && $img.rank !== 3) {\r\n        throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${$img.rank}.`);\r\n    }\r\n    const [height, width] = $img.shape.slice(0, 2);\r\n    const depth = $img.rank === 2 ? 1 : $img.shape[2];\r\n    if (depth > 4 || depth === 2) {\r\n        throw new Error(`toPixels only supports depth of size ` +\r\n            `1, 3 or 4 but got ${depth}`);\r\n    }\r\n    if ($img.dtype !== 'float32' && $img.dtype !== 'int32') {\r\n        throw new Error(`Unsupported type for toPixels: ${$img.dtype}.` +\r\n            ` Please use float32 or int32 tensors.`);\r\n    }\r\n    const data = await $img.data();\r\n    const multiplier = $img.dtype === 'float32' ? 255 : 1;\r\n    const bytes = new Uint8ClampedArray(width * height * 4);\r\n    for (let i = 0; i < height * width; ++i) {\r\n        const rgba = [0, 0, 0, 255];\r\n        for (let d = 0; d < depth; d++) {\r\n            const value = data[i * depth + d];\r\n            if ($img.dtype === 'float32') {\r\n                if (value < 0 || value > 1) {\r\n                    throw new Error(`Tensor values for a float32 Tensor must be in the ` +\r\n                        `range [0 - 1] but encountered ${value}.`);\r\n                }\r\n            }\r\n            else if ($img.dtype === 'int32') {\r\n                if (value < 0 || value > 255) {\r\n                    throw new Error(`Tensor values for a int32 Tensor must be in the ` +\r\n                        `range [0 - 255] but encountered ${value}.`);\r\n                }\r\n            }\r\n            if (depth === 1) {\r\n                rgba[0] = value * multiplier;\r\n                rgba[1] = value * multiplier;\r\n                rgba[2] = value * multiplier;\r\n            }\r\n            else {\r\n                rgba[d] = value * multiplier;\r\n            }\r\n        }\r\n        const j = i * 4;\r\n        bytes[j + 0] = Math.round(rgba[0]);\r\n        bytes[j + 1] = Math.round(rgba[1]);\r\n        bytes[j + 2] = Math.round(rgba[2]);\r\n        bytes[j + 3] = Math.round(rgba[3]);\r\n    }\r\n    if (canvas != null) {\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n        const ctx = canvas.getContext('2d');\r\n        const imageData = new ImageData(bytes, width, height);\r\n        ctx.putImageData(imageData, 0, 0);\r\n    }\r\n    if ($img !== img) {\r\n        $img.dispose();\r\n    }\r\n    return bytes;\r\n}\r\nexport const fromPixels = op({ fromPixels_ });\r\n//# sourceMappingURL=browser.js.map"]},"metadata":{},"sourceType":"module"}