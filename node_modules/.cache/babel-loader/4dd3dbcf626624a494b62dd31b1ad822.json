{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class ScatterProgram {\n  constructor(updateSize, sliceDim, indicesRank, updatesRank, strides, shape, summingDupeIndex = true) {\n    this.variableNames = ['updates', 'indices', 'defaultValue'];\n    this.outputShape = shape;\n    const stridesType = getCoordsDataType(strides.length);\n    const dtype = getCoordsDataType(shape.length);\n    let indicesString = '';\n\n    if (indicesRank === 1) {\n      indicesString = 'i';\n    } else if (indicesRank === 2) {\n      indicesString = 'i, j';\n    }\n\n    const indicesSnippet = `getIndices(${indicesString})`;\n    let updatesString = '';\n\n    if (updatesRank === 1) {\n      updatesString = 'i';\n    } else if (updatesRank === 2) {\n      updatesString = 'i, coords[1]';\n    }\n\n    const updatesSnippet = `getUpdates(${updatesString})`;\n    const strideString = sliceDim > 1 ? 'strides[j]' : 'strides';\n    this.userCode = `\n        ${stridesType} strides = ${stridesType}(${strides});\n\n        void main() {\n          ${dtype} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${updateSize}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${sliceDim}; j++) {\n              int index = round(${indicesSnippet});\n              flattenedIndex += index * ${strideString};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${updatesSnippet};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `;\n  }\n\n}","map":{"version":3,"sources":["../src/scatter_gpu.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAGH,SAAQ,iBAAR,QAAgC,mBAAhC;AAEA,OAAM,MAAO,cAAP,CAAqB;AAKzB,EAAA,WAAA,CACI,UADJ,EACwB,QADxB,EAC0C,WAD1C,EAEI,WAFJ,EAEyB,OAFzB,EAE4C,KAF5C,EAGI,gBAAgB,GAAG,IAHvB,EAG2B;AAP3B,SAAA,aAAA,GAAgB,CAAC,SAAD,EAAY,SAAZ,EAAuB,cAAvB,CAAhB;AAQE,SAAK,WAAL,GAAmB,KAAnB;AACA,UAAM,WAAW,GAAG,iBAAiB,CAAC,OAAO,CAAC,MAAT,CAArC;AACA,UAAM,KAAK,GAAG,iBAAiB,CAAC,KAAK,CAAC,MAAP,CAA/B;AACA,QAAI,aAAa,GAAG,EAApB;;AACA,QAAI,WAAW,KAAK,CAApB,EAAuB;AACrB,MAAA,aAAa,GAAG,GAAhB;AACD,KAFD,MAEO,IAAI,WAAW,KAAK,CAApB,EAAuB;AAC5B,MAAA,aAAa,GAAG,MAAhB;AACD;;AACD,UAAM,cAAc,GAAG,cAAc,aAAa,GAAlD;AAEA,QAAI,aAAa,GAAG,EAApB;;AACA,QAAI,WAAW,KAAK,CAApB,EAAuB;AACrB,MAAA,aAAa,GAAG,GAAhB;AACD,KAFD,MAEO,IAAI,WAAW,KAAK,CAApB,EAAuB;AAC5B,MAAA,aAAa,GAAG,cAAhB;AACD;;AACD,UAAM,cAAc,GAAG,cAAc,aAAa,GAAlD;AAEA,UAAM,YAAY,GAAG,QAAQ,GAAG,CAAX,GAAe,YAAf,GAA8B,SAAnD;AACA,SAAK,QAAL,GAAgB;UACV,WAAW,cAAc,WAAW,IAAI,OAAO;;;YAG7C,KAAK;;;gCAGe,UAAU;;kCAER,QAAQ;kCACR,cAAc;0CACN,YAAY;;;uBAG/B,cAAc;;;;;;AAM9B,OApBH;AAqBD;;AAlDwB","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { getCoordsDataType } from './shader_compiler';\r\nexport class ScatterProgram {\r\n    constructor(updateSize, sliceDim, indicesRank, updatesRank, strides, shape, summingDupeIndex = true) {\r\n        this.variableNames = ['updates', 'indices', 'defaultValue'];\r\n        this.outputShape = shape;\r\n        const stridesType = getCoordsDataType(strides.length);\r\n        const dtype = getCoordsDataType(shape.length);\r\n        let indicesString = '';\r\n        if (indicesRank === 1) {\r\n            indicesString = 'i';\r\n        }\r\n        else if (indicesRank === 2) {\r\n            indicesString = 'i, j';\r\n        }\r\n        const indicesSnippet = `getIndices(${indicesString})`;\r\n        let updatesString = '';\r\n        if (updatesRank === 1) {\r\n            updatesString = 'i';\r\n        }\r\n        else if (updatesRank === 2) {\r\n            updatesString = 'i, coords[1]';\r\n        }\r\n        const updatesSnippet = `getUpdates(${updatesString})`;\r\n        const strideString = sliceDim > 1 ? 'strides[j]' : 'strides';\r\n        this.userCode = `\r\n        ${stridesType} strides = ${stridesType}(${strides});\r\n\r\n        void main() {\r\n          ${dtype} coords = getOutputCoords();\r\n          float sum = 0.0;\r\n          bool found = false;\r\n          for (int i = 0; i < ${updateSize}; i++) {\r\n            int flattenedIndex = 0;\r\n            for (int j = 0; j < ${sliceDim}; j++) {\r\n              int index = round(${indicesSnippet});\r\n              flattenedIndex += index * ${strideString};\r\n            }\r\n            if (flattenedIndex == coords[0]) {\r\n              sum += ${updatesSnippet};\r\n              found = true;\r\n            }\r\n          }\r\n          setOutput(mix(getDefaultValue(), sum, float(found)));\r\n        }\r\n      `;\r\n    }\r\n}\r\n//# sourceMappingURL=scatter_gpu.js.map"]},"metadata":{},"sourceType":"module"}