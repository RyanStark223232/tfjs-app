{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { Tensor } from '../tensor';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { add } from './add';\nimport { div } from './div';\nimport { getNoiseShape } from './dropout_util';\nimport { floor } from './floor';\nimport { mul } from './mul';\nimport { op } from './operation';\nimport { randomUniform } from './random_uniform';\n/**\r\n * Computes dropout.\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([1, 2, 2, 1]);\r\n * const rate = 0.75;\r\n * const output = tf.dropout(x, rate);\r\n * output.print();\r\n * ```\r\n *\r\n * @param x A floating point Tensor or TensorLike.\r\n * @param rate A float in the range [0, 1). The probability that each element\r\n *   of x is discarded.\r\n * @param noiseShape An array of numbers of type int32, representing the\r\n * shape for randomly generated keep/drop flags. If the noiseShape has null\r\n * value, it will be automatically replaced with the x's relative dimension\r\n * size. Optional.\r\n * @param seed Used to create random seeds. Optional.\r\n * @returns A Tensor of the same shape of x.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Dropout'}\r\n */\n\nfunction dropout_(x, rate, noiseShape, seed) {\n  var $x = convertToTensor(x, 'x', 'dropout');\n  util.assert($x.dtype === 'float32', function () {\n    return \"x has to be a floating point tensor since it's going to be \" + \"scaled, but got a \".concat($x.dtype, \" tensor instead.\");\n  });\n  util.assert(rate >= 0 && rate < 1, function () {\n    return \"rate must be a float in the range [0, 1), but got \".concat(rate, \".\");\n  });\n\n  if (rate === 0) {\n    return x instanceof Tensor ? $x.clone() : $x;\n  }\n\n  var $noiseShape = getNoiseShape($x, noiseShape);\n  var keepProb = 1 - rate;\n  var multiplier = div(floor(add(randomUniform($noiseShape, 0, 1, 'float32', seed), keepProb)), keepProb);\n  return mul($x, multiplier);\n}\n\nexport var dropout = op({\n  dropout_: dropout_\n});","map":{"version":3,"sources":["../../src/ops/dropout.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,MAAR,QAAqB,WAArB;AACA,SAAQ,eAAR,QAA8B,oBAA9B;AAEA,OAAO,KAAK,IAAZ,MAAsB,SAAtB;AAEA,SAAQ,GAAR,QAAkB,OAAlB;AACA,SAAQ,GAAR,QAAkB,OAAlB;AACA,SAAQ,aAAR,QAA4B,gBAA5B;AACA,SAAQ,KAAR,QAAoB,SAApB;AACA,SAAQ,GAAR,QAAkB,OAAlB;AACA,SAAQ,EAAR,QAAiB,aAAjB;AACA,SAAQ,aAAR,QAA4B,kBAA5B;AAEA;;;;;;;;;;;;;;;;;;;;;AAqBG;;AACH,SAAS,QAAT,CACI,CADJ,EAC0B,IAD1B,EACwC,UADxC,EAEI,IAFJ,EAEwB;AACtB,MAAM,EAAE,GAAG,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,SAAT,CAA1B;AAEA,EAAA,IAAI,CAAC,MAAL,CACI,EAAE,CAAC,KAAH,KAAa,SADjB,EAEI;AAAA,WAAM,4FACmB,EAAE,CAAC,KADtB,qBAAN;AAAA,GAFJ;AAIA,EAAA,IAAI,CAAC,MAAL,CACI,IAAI,IAAI,CAAR,IAAa,IAAI,GAAG,CADxB,EAEI;AAAA,uEAA2D,IAA3D;AAAA,GAFJ;;AAIA,MAAI,IAAI,KAAK,CAAb,EAAgB;AACd,WAAO,CAAC,YAAY,MAAb,GAAsB,EAAE,CAAC,KAAH,EAAtB,GAAmC,EAA1C;AACD;;AAED,MAAM,WAAW,GAAG,aAAa,CAAC,EAAD,EAAK,UAAL,CAAjC;AACA,MAAM,QAAQ,GAAG,IAAI,IAArB;AACA,MAAM,UAAU,GAAG,GAAG,CAClB,KAAK,CAAC,GAAG,CAAC,aAAa,CAAC,WAAD,EAAc,CAAd,EAAiB,CAAjB,EAAoB,SAApB,EAA+B,IAA/B,CAAd,EAAoD,QAApD,CAAJ,CADa,EAElB,QAFkB,CAAtB;AAIA,SAAO,GAAG,CAAC,EAAD,EAAK,UAAL,CAAV;AACD;;AAED,OAAO,IAAM,OAAO,GAAG,EAAE,CAAC;AAAC,EAAA,QAAQ,EAAR;AAAD,CAAD,CAAlB","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { Tensor } from '../tensor';\r\nimport { convertToTensor } from '../tensor_util_env';\r\nimport * as util from '../util';\r\nimport { add } from './add';\r\nimport { div } from './div';\r\nimport { getNoiseShape } from './dropout_util';\r\nimport { floor } from './floor';\r\nimport { mul } from './mul';\r\nimport { op } from './operation';\r\nimport { randomUniform } from './random_uniform';\r\n/**\r\n * Computes dropout.\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([1, 2, 2, 1]);\r\n * const rate = 0.75;\r\n * const output = tf.dropout(x, rate);\r\n * output.print();\r\n * ```\r\n *\r\n * @param x A floating point Tensor or TensorLike.\r\n * @param rate A float in the range [0, 1). The probability that each element\r\n *   of x is discarded.\r\n * @param noiseShape An array of numbers of type int32, representing the\r\n * shape for randomly generated keep/drop flags. If the noiseShape has null\r\n * value, it will be automatically replaced with the x's relative dimension\r\n * size. Optional.\r\n * @param seed Used to create random seeds. Optional.\r\n * @returns A Tensor of the same shape of x.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Dropout'}\r\n */\r\nfunction dropout_(x, rate, noiseShape, seed) {\r\n    const $x = convertToTensor(x, 'x', 'dropout');\r\n    util.assert($x.dtype === 'float32', () => `x has to be a floating point tensor since it's going to be ` +\r\n        `scaled, but got a ${$x.dtype} tensor instead.`);\r\n    util.assert(rate >= 0 && rate < 1, () => `rate must be a float in the range [0, 1), but got ${rate}.`);\r\n    if (rate === 0) {\r\n        return x instanceof Tensor ? $x.clone() : $x;\r\n    }\r\n    const $noiseShape = getNoiseShape($x, noiseShape);\r\n    const keepProb = 1 - rate;\r\n    const multiplier = div(floor(add(randomUniform($noiseShape, 0, 1, 'float32', seed), keepProb)), keepProb);\r\n    return mul($x, multiplier);\r\n}\r\nexport const dropout = op({ dropout_ });\r\n//# sourceMappingURL=dropout.js.map"]},"metadata":{},"sourceType":"module"}