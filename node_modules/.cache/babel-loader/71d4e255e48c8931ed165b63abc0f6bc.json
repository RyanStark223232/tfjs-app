{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport { parseAxisParam } from '../util';\nimport { expandShapeToKeepDim } from './axis_util';\nimport { cast } from './cast';\nimport { mean } from './mean';\nimport { op } from './operation';\nimport { reshape } from './reshape';\nimport { square } from './square';\nimport { sub } from './sub';\n/**\r\n * Calculates the mean and variance of `x`. The mean and variance are\r\n * calculated by aggregating the contents of `x` across `axes`. If `x` is\r\n * 1-D and `axes = [0]` this is just the mean and variance of a vector.\r\n *\r\n * @param x The input tensor.\r\n * @param axis The dimension(s) along with to compute mean and\r\n *     variance. By default it reduces all dimensions.\r\n * @param keepDims If true, the moments have the same dimensionality as the\r\n *     input.\r\n * @return An object with two keys: `mean` and `variance`.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Normalization'}\r\n */\n\nfunction moments_(x, axis = null, keepDims = false) {\n  x = convertToTensor(x, 'x', 'moments');\n  const axes = parseAxisParam(axis, x.shape);\n  const xMean = mean(x, axes, keepDims);\n  let keepDimsShape = xMean.shape;\n\n  if (!keepDims) {\n    keepDimsShape = expandShapeToKeepDim(xMean.shape, axes);\n  }\n\n  const devSquared = square(sub(cast(x, 'float32'), reshape(xMean, keepDimsShape)));\n  const variance = mean(devSquared, axes, keepDims);\n  return {\n    mean: xMean,\n    variance\n  };\n}\n\nexport const moments = op({\n  moments_\n});","map":{"version":3,"sources":["../../src/ops/moments.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAGH,SAAQ,eAAR,QAA8B,oBAA9B;AAEA,SAAQ,cAAR,QAA6B,SAA7B;AAEA,SAAQ,oBAAR,QAAmC,aAAnC;AACA,SAAQ,IAAR,QAAmB,QAAnB;AACA,SAAQ,IAAR,QAAmB,QAAnB;AACA,SAAQ,EAAR,QAAiB,aAAjB;AACA,SAAQ,OAAR,QAAsB,WAAtB;AACA,SAAQ,MAAR,QAAqB,UAArB;AACA,SAAQ,GAAR,QAAkB,OAAlB;AAEA;;;;;;;;;;;;;AAaG;;AACH,SAAS,QAAT,CACI,CADJ,EAC0B,IAAA,GAAwB,IADlD,EAEI,QAAQ,GAAG,KAFf,EAEoB;AAClB,EAAA,CAAC,GAAG,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,SAAT,CAAnB;AACA,QAAM,IAAI,GAAG,cAAc,CAAC,IAAD,EAAO,CAAC,CAAC,KAAT,CAA3B;AACA,QAAM,KAAK,GAAG,IAAI,CAAC,CAAD,EAAI,IAAJ,EAAU,QAAV,CAAlB;AACA,MAAI,aAAa,GAAG,KAAK,CAAC,KAA1B;;AACA,MAAI,CAAC,QAAL,EAAe;AACb,IAAA,aAAa,GAAG,oBAAoB,CAAC,KAAK,CAAC,KAAP,EAAc,IAAd,CAApC;AACD;;AACD,QAAM,UAAU,GACZ,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAD,EAAI,SAAJ,CAAL,EAAqB,OAAO,CAAC,KAAD,EAAQ,aAAR,CAA5B,CAAJ,CADV;AAEA,QAAM,QAAQ,GAAG,IAAI,CAAC,UAAD,EAAa,IAAb,EAAmB,QAAnB,CAArB;AACA,SAAO;AAAC,IAAA,IAAI,EAAE,KAAP;AAAc,IAAA;AAAd,GAAP;AACD;;AAED,OAAO,MAAM,OAAO,GAAG,EAAE,CAAC;AAAC,EAAA;AAAD,CAAD,CAAlB","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { convertToTensor } from '../tensor_util_env';\r\nimport { parseAxisParam } from '../util';\r\nimport { expandShapeToKeepDim } from './axis_util';\r\nimport { cast } from './cast';\r\nimport { mean } from './mean';\r\nimport { op } from './operation';\r\nimport { reshape } from './reshape';\r\nimport { square } from './square';\r\nimport { sub } from './sub';\r\n/**\r\n * Calculates the mean and variance of `x`. The mean and variance are\r\n * calculated by aggregating the contents of `x` across `axes`. If `x` is\r\n * 1-D and `axes = [0]` this is just the mean and variance of a vector.\r\n *\r\n * @param x The input tensor.\r\n * @param axis The dimension(s) along with to compute mean and\r\n *     variance. By default it reduces all dimensions.\r\n * @param keepDims If true, the moments have the same dimensionality as the\r\n *     input.\r\n * @return An object with two keys: `mean` and `variance`.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Normalization'}\r\n */\r\nfunction moments_(x, axis = null, keepDims = false) {\r\n    x = convertToTensor(x, 'x', 'moments');\r\n    const axes = parseAxisParam(axis, x.shape);\r\n    const xMean = mean(x, axes, keepDims);\r\n    let keepDimsShape = xMean.shape;\r\n    if (!keepDims) {\r\n        keepDimsShape = expandShapeToKeepDim(xMean.shape, axes);\r\n    }\r\n    const devSquared = square(sub(cast(x, 'float32'), reshape(xMean, keepDimsShape)));\r\n    const variance = mean(devSquared, axes, keepDims);\r\n    return { mean: xMean, variance };\r\n}\r\nexport const moments = op({ moments_ });\r\n//# sourceMappingURL=moments.js.map"]},"metadata":{},"sourceType":"module"}