{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { deepMap } from '../../utils/collection';\nimport { expNumber } from '../../plain/number';\nvar name = 'exp';\nvar dependencies = ['typed'];\nexport var createExp = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n  /**\r\n   * Calculate the exponent of a value.\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.exp(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.exp(2)                  // returns number 7.3890560989306495\r\n   *    math.pow(math.e, 2)          // returns number 7.3890560989306495\r\n   *    math.log(math.exp(2))        // returns number 2\r\n   *\r\n   *    math.exp([1, 2, 3])\r\n   *    // returns Array [\r\n   *    //   2.718281828459045,\r\n   *    //   7.3890560989306495,\r\n   *    //   20.085536923187668\r\n   *    // ]\r\n   *\r\n   * See also:\r\n   *\r\n   *    expm1, log, pow\r\n   *\r\n   * @param {number | BigNumber | Complex | Array | Matrix} x  A number or matrix to exponentiate\r\n   * @return {number | BigNumber | Complex | Array | Matrix} Exponent of `x`\r\n   */\n\n  return typed(name, {\n    number: expNumber,\n    Complex: function Complex(x) {\n      return x.exp();\n    },\n    BigNumber: function BigNumber(x) {\n      return x.exp();\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // TODO: exp(sparse) should return a dense matrix since exp(0)==1\n      return deepMap(x, this);\n    }\n  });\n});","map":{"version":3,"sources":["C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/mathjs/es/function/arithmetic/exp.js"],"names":["factory","deepMap","expNumber","name","dependencies","createExp","_ref","typed","number","Complex","x","exp","BigNumber","ArrayMatrix"],"mappings":"AAAA,SAASA,OAAT,QAAwB,qBAAxB;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,IAAIC,IAAI,GAAG,KAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,CAAnB;AACA,OAAO,IAAIC,SAAS,GAAG,eAAeL,OAAO,CAACG,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AAChF,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOA,KAAK,CAACJ,IAAD,EAAO;AACjBK,IAAAA,MAAM,EAAEN,SADS;AAEjBO,IAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBC,CAAjB,EAAoB;AAC3B,aAAOA,CAAC,CAACC,GAAF,EAAP;AACD,KAJgB;AAKjBC,IAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBF,CAAnB,EAAsB;AAC/B,aAAOA,CAAC,CAACC,GAAF,EAAP;AACD,KAPgB;AAQjB,sBAAkB,SAASE,WAAT,CAAqBH,CAArB,EAAwB;AACxC;AACA,aAAOT,OAAO,CAACS,CAAD,EAAI,IAAJ,CAAd;AACD;AAXgB,GAAP,CAAZ;AAaD,CA5C4C,CAAtC","sourcesContent":["import { factory } from '../../utils/factory';\r\nimport { deepMap } from '../../utils/collection';\r\nimport { expNumber } from '../../plain/number';\r\nvar name = 'exp';\r\nvar dependencies = ['typed'];\r\nexport var createExp = /* #__PURE__ */factory(name, dependencies, function (_ref) {\r\n  var typed = _ref.typed;\r\n\r\n  /**\r\n   * Calculate the exponent of a value.\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.exp(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.exp(2)                  // returns number 7.3890560989306495\r\n   *    math.pow(math.e, 2)          // returns number 7.3890560989306495\r\n   *    math.log(math.exp(2))        // returns number 2\r\n   *\r\n   *    math.exp([1, 2, 3])\r\n   *    // returns Array [\r\n   *    //   2.718281828459045,\r\n   *    //   7.3890560989306495,\r\n   *    //   20.085536923187668\r\n   *    // ]\r\n   *\r\n   * See also:\r\n   *\r\n   *    expm1, log, pow\r\n   *\r\n   * @param {number | BigNumber | Complex | Array | Matrix} x  A number or matrix to exponentiate\r\n   * @return {number | BigNumber | Complex | Array | Matrix} Exponent of `x`\r\n   */\r\n  return typed(name, {\r\n    number: expNumber,\r\n    Complex: function Complex(x) {\r\n      return x.exp();\r\n    },\r\n    BigNumber: function BigNumber(x) {\r\n      return x.exp();\r\n    },\r\n    'Array | Matrix': function ArrayMatrix(x) {\r\n      // TODO: exp(sparse) should return a dense matrix since exp(0)==1\r\n      return deepMap(x, this);\r\n    }\r\n  });\r\n});"]},"metadata":{},"sourceType":"module"}