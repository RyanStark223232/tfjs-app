{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../../engine';\nimport { assert } from '../../util';\nimport { div } from '../div';\nimport { mul } from '../mul';\nimport { norm } from '../norm';\nimport { op } from '../operation';\nimport { split } from '../split';\nimport { squeeze } from '../squeeze';\nimport { stack } from '../stack';\nimport { sub } from '../sub';\nimport { sum } from '../sum';\n/**\r\n * Gram-Schmidt orthogonalization.\r\n *\r\n * ```js\r\n * const x = tf.tensor2d([[1, 2], [3, 4]]);\r\n * let y = tf.linalg.gramSchmidt(x);\r\n * y.print();\r\n * console.log('Othogonalized:');\r\n * y.dot(y.transpose()).print();  // should be nearly the identity matrix.\r\n * console.log('First row direction maintained:');\r\n * const data = await y.array();\r\n * console.log(data[0][1] / data[0][0]);  // should be nearly 2.\r\n * ```\r\n *\r\n * @param xs The vectors to be orthogonalized, in one of the two following\r\n *   formats:\r\n *   - An Array of `tf.Tensor1D`.\r\n *   - A `tf.Tensor2D`, i.e., a matrix, in which case the vectors are the rows\r\n *     of `xs`.\r\n *   In each case, all the vectors must have the same length and the length\r\n *   must be greater than or equal to the number of vectors.\r\n * @returns The orthogonalized and normalized vectors or matrix.\r\n *   Orthogonalization means that the vectors or the rows of the matrix\r\n *   are orthogonal (zero inner products). Normalization means that each\r\n *   vector or each row of the matrix has an L2 norm that equals `1`.\r\n *\r\n * @doc {heading:'Operations', subheading:'Linear Algebra', namespace:'linalg'}\r\n */\n\nfunction gramSchmidt_(xs) {\n  let inputIsTensor2D;\n\n  if (Array.isArray(xs)) {\n    inputIsTensor2D = false;\n    assert(xs != null && xs.length > 0, () => 'Gram-Schmidt process: input must not be null, undefined, or ' + 'empty');\n    const dim = xs[0].shape[0];\n\n    for (let i = 1; i < xs.length; ++i) {\n      assert(xs[i].shape[0] === dim, () => 'Gram-Schmidt: Non-unique lengths found in the input vectors: ' + `(${xs[i].shape[0]} vs. ${dim})`);\n    }\n  } else {\n    inputIsTensor2D = true;\n    xs = split(xs, xs.shape[0], 0).map(x => squeeze(x, [0]));\n  }\n\n  assert(xs.length <= xs[0].shape[0], () => `Gram-Schmidt: Number of vectors (${xs.length}) exceeds ` + `number of dimensions (${xs[0].shape[0]}).`);\n  const ys = [];\n  const xs1d = xs;\n\n  for (let i = 0; i < xs.length; ++i) {\n    ys.push(ENGINE.tidy(() => {\n      let x = xs1d[i];\n\n      if (i > 0) {\n        for (let j = 0; j < i; ++j) {\n          const proj = mul(sum(mul(ys[j], x)), ys[j]);\n          x = sub(x, proj);\n        }\n      }\n\n      return div(x, norm(x, 'euclidean'));\n    }));\n  }\n\n  if (inputIsTensor2D) {\n    return stack(ys, 0);\n  } else {\n    return ys;\n  }\n}\n\nexport const gramSchmidt = op({\n  gramSchmidt_\n});","map":{"version":3,"sources":["../../../src/ops/linalg/gram_schmidt.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { ENGINE } from '../../engine';\r\nimport { assert } from '../../util';\r\nimport { div } from '../div';\r\nimport { mul } from '../mul';\r\nimport { norm } from '../norm';\r\nimport { op } from '../operation';\r\nimport { split } from '../split';\r\nimport { squeeze } from '../squeeze';\r\nimport { stack } from '../stack';\r\nimport { sub } from '../sub';\r\nimport { sum } from '../sum';\r\n/**\r\n * Gram-Schmidt orthogonalization.\r\n *\r\n * ```js\r\n * const x = tf.tensor2d([[1, 2], [3, 4]]);\r\n * let y = tf.linalg.gramSchmidt(x);\r\n * y.print();\r\n * console.log('Othogonalized:');\r\n * y.dot(y.transpose()).print();  // should be nearly the identity matrix.\r\n * console.log('First row direction maintained:');\r\n * const data = await y.array();\r\n * console.log(data[0][1] / data[0][0]);  // should be nearly 2.\r\n * ```\r\n *\r\n * @param xs The vectors to be orthogonalized, in one of the two following\r\n *   formats:\r\n *   - An Array of `tf.Tensor1D`.\r\n *   - A `tf.Tensor2D`, i.e., a matrix, in which case the vectors are the rows\r\n *     of `xs`.\r\n *   In each case, all the vectors must have the same length and the length\r\n *   must be greater than or equal to the number of vectors.\r\n * @returns The orthogonalized and normalized vectors or matrix.\r\n *   Orthogonalization means that the vectors or the rows of the matrix\r\n *   are orthogonal (zero inner products). Normalization means that each\r\n *   vector or each row of the matrix has an L2 norm that equals `1`.\r\n *\r\n * @doc {heading:'Operations', subheading:'Linear Algebra', namespace:'linalg'}\r\n */\r\nfunction gramSchmidt_(xs) {\r\n    let inputIsTensor2D;\r\n    if (Array.isArray(xs)) {\r\n        inputIsTensor2D = false;\r\n        assert(xs != null && xs.length > 0, () => 'Gram-Schmidt process: input must not be null, undefined, or ' +\r\n            'empty');\r\n        const dim = xs[0].shape[0];\r\n        for (let i = 1; i < xs.length; ++i) {\r\n            assert(xs[i].shape[0] === dim, () => 'Gram-Schmidt: Non-unique lengths found in the input vectors: ' +\r\n                `(${xs[i].shape[0]} vs. ${dim})`);\r\n        }\r\n    }\r\n    else {\r\n        inputIsTensor2D = true;\r\n        xs = split(xs, xs.shape[0], 0).map(x => squeeze(x, [0]));\r\n    }\r\n    assert(xs.length <= xs[0].shape[0], () => `Gram-Schmidt: Number of vectors (${xs.length}) exceeds ` +\r\n        `number of dimensions (${xs[0].shape[0]}).`);\r\n    const ys = [];\r\n    const xs1d = xs;\r\n    for (let i = 0; i < xs.length; ++i) {\r\n        ys.push(ENGINE.tidy(() => {\r\n            let x = xs1d[i];\r\n            if (i > 0) {\r\n                for (let j = 0; j < i; ++j) {\r\n                    const proj = mul(sum(mul(ys[j], x)), ys[j]);\r\n                    x = sub(x, proj);\r\n                }\r\n            }\r\n            return div(x, norm(x, 'euclidean'));\r\n        }));\r\n    }\r\n    if (inputIsTensor2D) {\r\n        return stack(ys, 0);\r\n    }\r\n    else {\r\n        return ys;\r\n    }\r\n}\r\nexport const gramSchmidt = op({ gramSchmidt_ });\r\n//# sourceMappingURL=gram_schmidt.js.map"]},"metadata":{},"sourceType":"module"}