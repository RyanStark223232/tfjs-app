{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { Real } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\r\n * Returns the real part of a complex (or real) tensor.\r\n *\r\n * Given a tensor input, this operation returns a tensor of type float that is\r\n * the real part of each element in input considered as a complex number.\r\n *\r\n * If the input is real, it simply makes a clone.\r\n *\r\n * ```js\r\n * const x = tf.complex([-2.25, 3.25], [4.75, 5.75]);\r\n * tf.real(x).print();\r\n * ```\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Creation'}\r\n */\n\nfunction real_(input) {\n  const $input = convertToTensor(input, 'input', 'real');\n\n  const forward = backend => {\n    return backend.real($input);\n  };\n\n  const inputs = {\n    input: $input\n  };\n  return ENGINE.runKernelFunc(forward, inputs, null\n  /* gradient */\n  , Real);\n}\n\nexport const real = op({\n  real_\n});","map":{"version":3,"sources":["../../src/ops/real.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,MAAR,QAAkC,WAAlC;AACA,SAAQ,IAAR,QAA+B,iBAA/B;AAGA,SAAQ,eAAR,QAA8B,oBAA9B;AAEA,SAAQ,EAAR,QAAiB,aAAjB;AAEA;;;;;;;;;;;;;;AAcG;;AACH,SAAS,KAAT,CAAiC,KAAjC,EAAoD;AAClD,QAAM,MAAM,GAAG,eAAe,CAAC,KAAD,EAAQ,OAAR,EAAiB,MAAjB,CAA9B;;AAEA,QAAM,OAAO,GAAyB,OAAD,IAAY;AAC/C,WAAO,OAAO,CAAC,IAAR,CAAa,MAAb,CAAP;AACD,GAFD;;AAIA,QAAM,MAAM,GAAe;AAAC,IAAA,KAAK,EAAE;AAAR,GAA3B;AACA,SAAO,MAAM,CAAC,aAAP,CACI,OADJ,EACa,MADb,EAC6C;AAAK;AADlD,IAEI,IAFJ,CAAP;AAGD;;AAED,OAAO,MAAM,IAAI,GAAG,EAAE,CAAC;AAAC,EAAA;AAAD,CAAD,CAAf","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { ENGINE } from '../engine';\r\nimport { Real } from '../kernel_names';\r\nimport { convertToTensor } from '../tensor_util_env';\r\nimport { op } from './operation';\r\n/**\r\n * Returns the real part of a complex (or real) tensor.\r\n *\r\n * Given a tensor input, this operation returns a tensor of type float that is\r\n * the real part of each element in input considered as a complex number.\r\n *\r\n * If the input is real, it simply makes a clone.\r\n *\r\n * ```js\r\n * const x = tf.complex([-2.25, 3.25], [4.75, 5.75]);\r\n * tf.real(x).print();\r\n * ```\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Creation'}\r\n */\r\nfunction real_(input) {\r\n    const $input = convertToTensor(input, 'input', 'real');\r\n    const forward = (backend) => {\r\n        return backend.real($input);\r\n    };\r\n    const inputs = { input: $input };\r\n    return ENGINE.runKernelFunc(forward, inputs, null /* gradient */, Real);\r\n}\r\nexport const real = op({ real_ });\r\n//# sourceMappingURL=real.js.map"]},"metadata":{},"sourceType":"module"}