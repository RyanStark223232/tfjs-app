{"ast":null,"code":"import _classCallCheck from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nexport var DepthwiseConv2DProgram = function DepthwiseConv2DProgram(convInfo) {\n  var addBias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var activation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var hasPreluActivation = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n  _classCallCheck(this, DepthwiseConv2DProgram);\n\n  this.variableNames = ['x', 'W'];\n  this.outputShape = convInfo.outShape;\n  var xNumRows = convInfo.inHeight;\n  var xNumCols = convInfo.inWidth;\n  var padTop = convInfo.padInfo.top;\n  var padLeft = convInfo.padInfo.left;\n  var strideHeight = convInfo.strideHeight;\n  var strideWidth = convInfo.strideWidth;\n  var dilationHeight = convInfo.dilationHeight;\n  var dilationWidth = convInfo.dilationWidth;\n  var filterHeight = convInfo.filterHeight;\n  var filterWidth = convInfo.filterWidth;\n  var channelMul = convInfo.outChannels / convInfo.inChannels;\n  var activationSnippet = '',\n      applyActivationSnippet = '';\n\n  if (activation) {\n    if (hasPreluActivation) {\n      activationSnippet = \"float activation(float a) {\\n          float b = getPreluActivationWeightsAtOutCoords();\\n          \".concat(activation, \"\\n        }\");\n    } else {\n      activationSnippet = \"\\n          float activation(float x) {\\n            \".concat(activation, \"\\n          }\\n        \");\n    }\n\n    applyActivationSnippet = \"result = activation(result);\";\n  }\n\n  var addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n\n  if (addBias) {\n    this.variableNames.push('bias');\n  }\n\n  if (hasPreluActivation) {\n    this.variableNames.push('preluActivationWeights');\n  }\n\n  this.userCode = \"\\n      \".concat(activationSnippet, \"\\n\\n      const ivec2 strides = ivec2(\").concat(strideHeight, \", \").concat(strideWidth, \");\\n      const ivec2 pads = ivec2(\").concat(padTop, \", \").concat(padLeft, \");\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords.x;\\n        ivec2 xRCCorner = coords.yz * strides - pads;\\n        int d2 = coords.w;\\n        int d1 = d2 / \").concat(channelMul, \";\\n        int q = d2 - d1 * \").concat(channelMul, \";\\n\\n        int xRCorner = xRCCorner.x;\\n        int xCCorner = xRCCorner.y;\\n\\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\\n        for (int wR = 0; wR < \").concat(filterHeight, \"; wR++) {\\n          int xR = xRCorner + wR * \").concat(dilationHeight, \";\\n\\n          if (xR < 0 || xR >= \").concat(xNumRows, \") {\\n            continue;\\n          }\\n\\n          for (int wC = 0; wC < \").concat(filterWidth, \"; wC++) {\\n            int xC = xCCorner + wC * \").concat(dilationWidth, \";\\n\\n            if (xC < 0 || xC >= \").concat(xNumCols, \") {\\n              continue;\\n            }\\n\\n            float xVal = getX(batch, xR, xC, d1);\\n            float wVal = getW(wR, wC, d1, q);\\n            dotProd += xVal * wVal;\\n          }\\n        }\\n\\n        float result = dotProd;\\n        \").concat(addBiasSnippet, \"\\n        \").concat(applyActivationSnippet, \"\\n        setOutput(result);\\n      }\\n    \");\n};","map":{"version":3,"sources":["../src/conv_gpu_depthwise.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AAKH,WAAa,sBAAb,GAKE,gCACI,QADJ,EAEyD;AAAA,MADlB,OACkB,uEADR,KACQ;AAAA,MAArD,UAAqD,uEAAhC,IAAgC;AAAA,MAA1B,kBAA0B,uEAAL,KAAK;;AAAA;;AANzD,OAAA,aAAA,GAAgB,CAAC,GAAD,EAAM,GAAN,CAAhB;AAOE,OAAK,WAAL,GAAmB,QAAQ,CAAC,QAA5B;AAEA,MAAM,QAAQ,GAAG,QAAQ,CAAC,QAA1B;AACA,MAAM,QAAQ,GAAG,QAAQ,CAAC,OAA1B;AACA,MAAM,MAAM,GAAG,QAAQ,CAAC,OAAT,CAAiB,GAAhC;AACA,MAAM,OAAO,GAAG,QAAQ,CAAC,OAAT,CAAiB,IAAjC;AACA,MAAM,YAAY,GAAG,QAAQ,CAAC,YAA9B;AACA,MAAM,WAAW,GAAG,QAAQ,CAAC,WAA7B;AACA,MAAM,cAAc,GAAG,QAAQ,CAAC,cAAhC;AACA,MAAM,aAAa,GAAG,QAAQ,CAAC,aAA/B;AACA,MAAM,YAAY,GAAG,QAAQ,CAAC,YAA9B;AACA,MAAM,WAAW,GAAG,QAAQ,CAAC,WAA7B;AACA,MAAM,UAAU,GAAG,QAAQ,CAAC,WAAT,GAAuB,QAAQ,CAAC,UAAnD;AAEA,MAAI,iBAAiB,GAAG,EAAxB;AAAA,MAA4B,sBAAsB,GAAG,EAArD;;AACA,MAAI,UAAJ,EAAgB;AACd,QAAI,kBAAJ,EAAwB;AACtB,MAAA,iBAAiB,iHAEb,UAFa,gBAAjB;AAID,KALD,MAKO;AACL,MAAA,iBAAiB,kEAEX,UAFW,4BAAjB;AAKD;;AAED,IAAA,sBAAsB,iCAAtB;AACD;;AAED,MAAM,cAAc,GAAG,OAAO,GAAG,iCAAH,GAAuC,EAArE;;AACA,MAAI,OAAJ,EAAa;AACX,SAAK,aAAL,CAAmB,IAAnB,CAAwB,MAAxB;AACD;;AAED,MAAI,kBAAJ,EAAwB;AACtB,SAAK,aAAL,CAAmB,IAAnB,CAAwB,wBAAxB;AACD;;AAED,OAAK,QAAL,qBACI,iBADJ,mDAGgC,YAHhC,eAGiD,WAHjD,gDAI6B,MAJ7B,eAIwC,OAJxC,2NAWoB,UAXpB,0CAYwB,UAZxB,2XAqB4B,YArB5B,2DAsBiC,cAtBjC,gDAwB4B,QAxB5B,wFA4B8B,WA5B9B,6DA6BmC,aA7BnC,kDA+B8B,QA/B9B,sQA0CM,cA1CN,uBA2CM,sBA3CN;AA+CD,CAhGH","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2017 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nexport class DepthwiseConv2DProgram {\r\n    constructor(convInfo, addBias = false, activation = null, hasPreluActivation = false) {\r\n        this.variableNames = ['x', 'W'];\r\n        this.outputShape = convInfo.outShape;\r\n        const xNumRows = convInfo.inHeight;\r\n        const xNumCols = convInfo.inWidth;\r\n        const padTop = convInfo.padInfo.top;\r\n        const padLeft = convInfo.padInfo.left;\r\n        const strideHeight = convInfo.strideHeight;\r\n        const strideWidth = convInfo.strideWidth;\r\n        const dilationHeight = convInfo.dilationHeight;\r\n        const dilationWidth = convInfo.dilationWidth;\r\n        const filterHeight = convInfo.filterHeight;\r\n        const filterWidth = convInfo.filterWidth;\r\n        const channelMul = convInfo.outChannels / convInfo.inChannels;\r\n        let activationSnippet = '', applyActivationSnippet = '';\r\n        if (activation) {\r\n            if (hasPreluActivation) {\r\n                activationSnippet = `float activation(float a) {\r\n          float b = getPreluActivationWeightsAtOutCoords();\r\n          ${activation}\r\n        }`;\r\n            }\r\n            else {\r\n                activationSnippet = `\r\n          float activation(float x) {\r\n            ${activation}\r\n          }\r\n        `;\r\n            }\r\n            applyActivationSnippet = `result = activation(result);`;\r\n        }\r\n        const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\r\n        if (addBias) {\r\n            this.variableNames.push('bias');\r\n        }\r\n        if (hasPreluActivation) {\r\n            this.variableNames.push('preluActivationWeights');\r\n        }\r\n        this.userCode = `\r\n      ${activationSnippet}\r\n\r\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\r\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\r\n\r\n      void main() {\r\n        ivec4 coords = getOutputCoords();\r\n        int batch = coords.x;\r\n        ivec2 xRCCorner = coords.yz * strides - pads;\r\n        int d2 = coords.w;\r\n        int d1 = d2 / ${channelMul};\r\n        int q = d2 - d1 * ${channelMul};\r\n\r\n        int xRCorner = xRCCorner.x;\r\n        int xCCorner = xRCCorner.y;\r\n\r\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\r\n        // ? = to be determined. : = across all values in that axis.\r\n        float dotProd = 0.0;\r\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\r\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\r\n          int xR = xRCorner + wR * ${dilationHeight};\r\n\r\n          if (xR < 0 || xR >= ${xNumRows}) {\r\n            continue;\r\n          }\r\n\r\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\r\n            int xC = xCCorner + wC * ${dilationWidth};\r\n\r\n            if (xC < 0 || xC >= ${xNumCols}) {\r\n              continue;\r\n            }\r\n\r\n            float xVal = getX(batch, xR, xC, d1);\r\n            float wVal = getW(wR, wC, d1, q);\r\n            dotProd += xVal * wVal;\r\n          }\r\n        }\r\n\r\n        float result = dotProd;\r\n        ${addBiasSnippet}\r\n        ${applyActivationSnippet}\r\n        setOutput(result);\r\n      }\r\n    `;\r\n    }\r\n}\r\n//# sourceMappingURL=conv_gpu_depthwise.js.map"]},"metadata":{},"sourceType":"module"}