{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { TensorBuffer } from '../tensor';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\n/**\r\n * Computes the difference between two lists of numbers.\r\n *\r\n * Given a Tensor `x` and a Tensor `y`, this operation returns a Tensor `out`\r\n * that represents all values that are in `x` but not in `y`. The returned\r\n * Tensor `out` is sorted in the same order that the numbers appear in `x`\r\n * (duplicates are preserved). This operation also returns a Tensor indices that\r\n * represents the position of each out element in `x`. In other words:\r\n *\r\n * `out[i] = x[idx[i]] for i in [0, 1, ..., out.length - 1]`\r\n *\r\n * ```js\r\n * const x = [1, 2, 3, 4, 5, 6];\r\n * const y = [1, 3, 5];\r\n *\r\n * const [out, indices] = await tf.setdiff1dAsync(x, y);\r\n * out.print(); // [2, 4, 6]\r\n * indices.print(); // [1, 3, 5]\r\n * ```\r\n *\r\n * @param x 1-D Tensor. Values to keep.\r\n * @param y 1-D Tensor. Must have the same type as x. Values to exclude in the\r\n *     output.\r\n * @returns Promise of Tensor tuple [out, indices].\r\n *  out: Tensor with the same type as x.\r\n *  indices: A Tensor of type int32.\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\r\n */\n\nfunction setdiff1dAsync_(_x, _x2) {\n  return _setdiff1dAsync_.apply(this, arguments);\n}\n\nfunction _setdiff1dAsync_() {\n  _setdiff1dAsync_ = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(x, y) {\n    var $x, $y, xVals, yVals, ySet, outputSize, i, buffer, indices, _i, p;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            $x = convertToTensor(x, 'x', 'setdiff1d');\n            $y = convertToTensor(y, 'y', 'setdiff1d');\n            util.assert($x.dtype === $y.dtype, function () {\n              return \"x and y should have the same dtype, but got x (\".concat($x.dtype, \") and y (\").concat($y.dtype, \").\");\n            });\n            util.assert($x.rank === 1, function () {\n              return \"x should be 1D tensor, but got x (\".concat($x.shape, \").\");\n            });\n            util.assert($y.rank === 1, function () {\n              return \"y should be 1D tensor, but got y (\".concat($y.shape, \").\");\n            });\n            _context.next = 7;\n            return $x.data();\n\n          case 7:\n            xVals = _context.sent;\n            _context.next = 10;\n            return $y.data();\n\n          case 10:\n            yVals = _context.sent;\n            ySet = new Set(yVals);\n            outputSize = 0;\n\n            for (i = 0; i < xVals.length; i++) {\n              if (!ySet.has(xVals[i])) {\n                outputSize++;\n              }\n            }\n\n            buffer = new TensorBuffer([outputSize], $x.dtype);\n            indices = new TensorBuffer([outputSize], 'int32');\n\n            for (_i = 0, p = 0; _i < xVals.length; _i++) {\n              if (!ySet.has(xVals[_i])) {\n                buffer.values[p] = xVals[_i];\n                indices.values[p] = _i;\n                p++;\n              }\n            }\n\n            return _context.abrupt(\"return\", [buffer.toTensor(), indices.toTensor()]);\n\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _setdiff1dAsync_.apply(this, arguments);\n}\n\nexport var setdiff1dAsync = setdiff1dAsync_;","map":{"version":3,"sources":["../../src/ops/setdiff1d_async.ts"],"names":[],"mappings":";;;AAAA;;;;;;;;;;;;;;;AAeG;AACH,SAAgB,YAAhB,QAAmC,WAAnC;AACA,SAAQ,eAAR,QAA8B,oBAA9B;AAEA,OAAO,KAAK,IAAZ,MAAsB,SAAtB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BG;;SACY,e;;;;;8EAAf,iBACI,CADJ,EAC0B,CAD1B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEQ,YAAA,EAFR,GAEa,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,WAAT,CAF5B;AAGQ,YAAA,EAHR,GAGa,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,WAAT,CAH5B;AAKE,YAAA,IAAI,CAAC,MAAL,CACI,EAAE,CAAC,KAAH,KAAa,EAAE,CAAC,KADpB,EAEI;AAAA,8EACI,EAAE,CAAC,KADP,sBACwB,EAAE,CAAC,KAD3B;AAAA,aAFJ;AAKA,YAAA,IAAI,CAAC,MAAL,CACI,EAAE,CAAC,IAAH,KAAY,CADhB,EACmB;AAAA,iEAA2C,EAAE,CAAC,KAA9C;AAAA,aADnB;AAGA,YAAA,IAAI,CAAC,MAAL,CACI,EAAE,CAAC,IAAH,KAAY,CADhB,EACmB;AAAA,iEAA2C,EAAE,CAAC,KAA9C;AAAA,aADnB;AAbF;AAAA,mBAgBsB,EAAE,CAAC,IAAH,EAhBtB;;AAAA;AAgBQ,YAAA,KAhBR;AAAA;AAAA,mBAiBsB,EAAE,CAAC,IAAH,EAjBtB;;AAAA;AAiBQ,YAAA,KAjBR;AAkBQ,YAAA,IAlBR,GAkBe,IAAI,GAAJ,CAAQ,KAAR,CAlBf;AAoBM,YAAA,UApBN,GAoBmB,CApBnB;;AAqBE,iBAAS,CAAT,GAAa,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,MAA1B,EAAkC,CAAC,EAAnC,EAAuC;AACrC,kBAAI,CAAC,IAAI,CAAC,GAAL,CAAS,KAAK,CAAC,CAAD,CAAd,CAAL,EAAyB;AACvB,gBAAA,UAAU;AACX;AACF;;AAEK,YAAA,MA3BR,GA2BiB,IAAI,YAAJ,CAAiB,CAAC,UAAD,CAAjB,EAA+B,EAAE,CAAC,KAAlC,CA3BjB;AA4BQ,YAAA,OA5BR,GA4BkB,IAAI,YAAJ,CAAiB,CAAC,UAAD,CAAjB,EAA+B,OAA/B,CA5BlB;;AA6BE,iBAAS,EAAT,GAAa,CAAb,EAAgB,CAAhB,GAAoB,CAApB,EAAuB,EAAC,GAAG,KAAK,CAAC,MAAjC,EAAyC,EAAC,EAA1C,EAA8C;AAC5C,kBAAI,CAAC,IAAI,CAAC,GAAL,CAAS,KAAK,CAAC,EAAD,CAAd,CAAL,EAAyB;AACvB,gBAAA,MAAM,CAAC,MAAP,CAAc,CAAd,IAAmB,KAAK,CAAC,EAAD,CAAxB;AACA,gBAAA,OAAO,CAAC,MAAR,CAAe,CAAf,IAAoB,EAApB;AACA,gBAAA,CAAC;AACF;AACF;;AAnCH,6CAoCS,CAAC,MAAM,CAAC,QAAP,EAAD,EAAoB,OAAO,CAAC,QAAR,EAApB,CApCT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAsCA,OAAO,IAAM,cAAc,GAAG,eAAvB","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { TensorBuffer } from '../tensor';\r\nimport { convertToTensor } from '../tensor_util_env';\r\nimport * as util from '../util';\r\n/**\r\n * Computes the difference between two lists of numbers.\r\n *\r\n * Given a Tensor `x` and a Tensor `y`, this operation returns a Tensor `out`\r\n * that represents all values that are in `x` but not in `y`. The returned\r\n * Tensor `out` is sorted in the same order that the numbers appear in `x`\r\n * (duplicates are preserved). This operation also returns a Tensor indices that\r\n * represents the position of each out element in `x`. In other words:\r\n *\r\n * `out[i] = x[idx[i]] for i in [0, 1, ..., out.length - 1]`\r\n *\r\n * ```js\r\n * const x = [1, 2, 3, 4, 5, 6];\r\n * const y = [1, 3, 5];\r\n *\r\n * const [out, indices] = await tf.setdiff1dAsync(x, y);\r\n * out.print(); // [2, 4, 6]\r\n * indices.print(); // [1, 3, 5]\r\n * ```\r\n *\r\n * @param x 1-D Tensor. Values to keep.\r\n * @param y 1-D Tensor. Must have the same type as x. Values to exclude in the\r\n *     output.\r\n * @returns Promise of Tensor tuple [out, indices].\r\n *  out: Tensor with the same type as x.\r\n *  indices: A Tensor of type int32.\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\r\n */\r\nasync function setdiff1dAsync_(x, y) {\r\n    const $x = convertToTensor(x, 'x', 'setdiff1d');\r\n    const $y = convertToTensor(y, 'y', 'setdiff1d');\r\n    util.assert($x.dtype === $y.dtype, () => `x and y should have the same dtype, but got x (${$x.dtype}) and y (${$y.dtype}).`);\r\n    util.assert($x.rank === 1, () => `x should be 1D tensor, but got x (${$x.shape}).`);\r\n    util.assert($y.rank === 1, () => `y should be 1D tensor, but got y (${$y.shape}).`);\r\n    const xVals = await $x.data();\r\n    const yVals = await $y.data();\r\n    const ySet = new Set(yVals);\r\n    let outputSize = 0;\r\n    for (let i = 0; i < xVals.length; i++) {\r\n        if (!ySet.has(xVals[i])) {\r\n            outputSize++;\r\n        }\r\n    }\r\n    const buffer = new TensorBuffer([outputSize], $x.dtype);\r\n    const indices = new TensorBuffer([outputSize], 'int32');\r\n    for (let i = 0, p = 0; i < xVals.length; i++) {\r\n        if (!ySet.has(xVals[i])) {\r\n            buffer.values[p] = xVals[i];\r\n            indices.values[p] = i;\r\n            p++;\r\n        }\r\n    }\r\n    return [buffer.toTensor(), indices.toTensor()];\r\n}\r\nexport const setdiff1dAsync = setdiff1dAsync_;\r\n//# sourceMappingURL=setdiff1d_async.js.map"]},"metadata":{},"sourceType":"module"}