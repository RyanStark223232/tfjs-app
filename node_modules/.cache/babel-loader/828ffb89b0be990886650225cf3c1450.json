{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { TensorBuffer, util } from '@tensorflow/tfjs-core';\nexport function uniqueImpl(values, axis, shape, dtype) {\n  // Normalize and validate axis.\n  var $axis = util.parseAxisParam(axis, shape)[0]; // Calculate the new shape that is suitable for extracting data along the\n  // given axis.\n  //\n  // The rank is 3.\n  // The size of the 1st dimension is the size of all the axes < the given axis.\n  // The size of the 2nd dimension is the same as the size of the given axis.\n  // The size of the 3rd dimension is the size of all the axes > the given axis.\n  //\n  // For example, for a 4D tensor with shape=[2, 3, 5, 4] and axis=2, the\n  // newShape would be: [2*3, 5, 4].\n  //\n  // Note that this is not the final output shape. This will be the shape for an\n  // intermediate TensorBuffer (see inputBuffer below) to allow us to extract\n  // values along the given axis. To demonstrate how it works, consider the\n  // following example:\n  //\n  // Input: a 3D tensor, with shape [1, 2, 3]\n  // [\n  //   [\n  //      [1,2,3],\n  //      [4,5,6]\n  //   ]\n  // ]\n  // Axis: 2 (the last axis).\n  // Along axis 2, we expect to extract 3 tensors: [1,4], [2,5], [3,6].\n  //\n  // For this example, newShape would be: [2, 3, 1], where 2 is calculated from\n  // 1*2. The re-shaped data would look like:\n  //\n  // [\n  //   [\n  //     [1], [2], [3]\n  //   ],\n  //   [\n  //     [4], [5], [6]\n  //   ]\n  // ]\n  //\n  // Then, we can construct a 3-level nested loop by the following dimension\n  // order to extract the values along the axis (dimension1):\n  // i: dimension1       // 0,1,2 (newShape[1])\n  //   m: dimension0     // 0,1   (newShape[0])\n  //     n: dimension2   // 0     (newShape[2])\n  //\n  //                       m, i, n\n  //                      ---------\n  // Iteration 0: data at [0, 0, 0] => \"1\"\n  // Iteration 1: data at [1, 0, 0] => \"4\"\n  // We got [1,4].\n  // Iteration 2: data at [0, 1, 0] => \"2\"\n  // Iteration 3: data at [1, 1, 0] => \"5\"\n  // We got [2,5].\n  // Iteration 4: data at [0, 2, 0] => \"3\"\n  // Iteration 5: data at [1, 2, 0] => \"6\"\n  // We got [3,6].\n\n  var newShape = [1, shape[0], 1];\n\n  for (var i = 0; i < $axis; i++) {\n    newShape[0] *= shape[i];\n  }\n\n  newShape[1] = shape[$axis];\n\n  for (var _i = $axis + 1; _i < shape.length; _i++) {\n    newShape[2] *= shape[_i];\n  } // A map from unique elements (their string representations) to their values\n  // in \"indices\" (below).\n\n\n  var uniqueElements = {}; // The indices of each unique element in the original tensor along the given\n  // axis. It is 1D and has the same size as the given axis.\n\n  var indices = new Int32Array(shape[$axis]); // Create a buffer so we can easily extract value at a given location.\n\n  var inputBuffer = new TensorBuffer(newShape, dtype, values); // The indices along the given axis that have unique elements. This is a\n  // de-duped version of \"indices\" above.\n\n  var uniqueIndices = [];\n  var is1DTensor = newShape[0] === 1 && newShape[2] === 1;\n\n  for (var _i2 = 0; _i2 < shape[$axis]; _i2++) {\n    // Extract values along the axis.\n    var element = void 0;\n\n    if (is1DTensor) {\n      // Fast path for 1D tensor input.\n      element = values[_i2].toString();\n    } else {\n      var axisValues = [];\n\n      for (var m = 0; m < newShape[0]; m++) {\n        for (var n = 0; n < newShape[2]; n++) {\n          axisValues.push(inputBuffer.get(m, _i2, n));\n        }\n      }\n\n      element = axisValues.join(',');\n    } // Dedup and update various indices.\n\n\n    if (uniqueElements[element] !== undefined) {\n      indices[_i2] = uniqueElements[element];\n    } else {\n      var uniqueIndex = Object.keys(uniqueElements).length;\n      uniqueElements[element] = uniqueIndex;\n      indices[_i2] = uniqueIndex;\n      uniqueIndices.push(_i2);\n    }\n  } // Now we know where each of the unique elements are located along the axis\n  // (uniqueIndices). Extract them from input buffer and store them in the\n  // output buffer.\n\n\n  var outputTmpShape = newShape.slice();\n  outputTmpShape[1] = Object.keys(uniqueElements).length;\n  var outputBuffer = new TensorBuffer(outputTmpShape, dtype);\n  uniqueIndices.forEach(function (uniqueElementIndex, i) {\n    for (var _m = 0; _m < newShape[0]; _m++) {\n      for (var _n = 0; _n < newShape[2]; _n++) {\n        outputBuffer.set(inputBuffer.get(_m, uniqueElementIndex, _n), _m, i, _n);\n      }\n    }\n  }); // The output shape can be calculated from the input shape with the size of\n  // the given axis replaced by the number of unique elements along that axis.\n\n  var outputShape = shape.slice();\n  outputShape[$axis] = outputTmpShape[1];\n  return {\n    outputValues: outputBuffer.values,\n    outputShape: outputShape,\n    indices: indices\n  };\n}","map":{"version":3,"sources":["../../src/kernels/Unique_impl.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { TensorBuffer, util } from '@tensorflow/tfjs-core';\r\nexport function uniqueImpl(values, axis, shape, dtype) {\r\n    // Normalize and validate axis.\r\n    const $axis = util.parseAxisParam(axis, shape)[0];\r\n    // Calculate the new shape that is suitable for extracting data along the\r\n    // given axis.\r\n    //\r\n    // The rank is 3.\r\n    // The size of the 1st dimension is the size of all the axes < the given axis.\r\n    // The size of the 2nd dimension is the same as the size of the given axis.\r\n    // The size of the 3rd dimension is the size of all the axes > the given axis.\r\n    //\r\n    // For example, for a 4D tensor with shape=[2, 3, 5, 4] and axis=2, the\r\n    // newShape would be: [2*3, 5, 4].\r\n    //\r\n    // Note that this is not the final output shape. This will be the shape for an\r\n    // intermediate TensorBuffer (see inputBuffer below) to allow us to extract\r\n    // values along the given axis. To demonstrate how it works, consider the\r\n    // following example:\r\n    //\r\n    // Input: a 3D tensor, with shape [1, 2, 3]\r\n    // [\r\n    //   [\r\n    //      [1,2,3],\r\n    //      [4,5,6]\r\n    //   ]\r\n    // ]\r\n    // Axis: 2 (the last axis).\r\n    // Along axis 2, we expect to extract 3 tensors: [1,4], [2,5], [3,6].\r\n    //\r\n    // For this example, newShape would be: [2, 3, 1], where 2 is calculated from\r\n    // 1*2. The re-shaped data would look like:\r\n    //\r\n    // [\r\n    //   [\r\n    //     [1], [2], [3]\r\n    //   ],\r\n    //   [\r\n    //     [4], [5], [6]\r\n    //   ]\r\n    // ]\r\n    //\r\n    // Then, we can construct a 3-level nested loop by the following dimension\r\n    // order to extract the values along the axis (dimension1):\r\n    // i: dimension1       // 0,1,2 (newShape[1])\r\n    //   m: dimension0     // 0,1   (newShape[0])\r\n    //     n: dimension2   // 0     (newShape[2])\r\n    //\r\n    //                       m, i, n\r\n    //                      ---------\r\n    // Iteration 0: data at [0, 0, 0] => \"1\"\r\n    // Iteration 1: data at [1, 0, 0] => \"4\"\r\n    // We got [1,4].\r\n    // Iteration 2: data at [0, 1, 0] => \"2\"\r\n    // Iteration 3: data at [1, 1, 0] => \"5\"\r\n    // We got [2,5].\r\n    // Iteration 4: data at [0, 2, 0] => \"3\"\r\n    // Iteration 5: data at [1, 2, 0] => \"6\"\r\n    // We got [3,6].\r\n    const newShape = [1, shape[0], 1];\r\n    for (let i = 0; i < $axis; i++) {\r\n        newShape[0] *= shape[i];\r\n    }\r\n    newShape[1] = shape[$axis];\r\n    for (let i = $axis + 1; i < shape.length; i++) {\r\n        newShape[2] *= shape[i];\r\n    }\r\n    // A map from unique elements (their string representations) to their values\r\n    // in \"indices\" (below).\r\n    const uniqueElements = {};\r\n    // The indices of each unique element in the original tensor along the given\r\n    // axis. It is 1D and has the same size as the given axis.\r\n    const indices = new Int32Array(shape[$axis]);\r\n    // Create a buffer so we can easily extract value at a given location.\r\n    const inputBuffer = new TensorBuffer(newShape, dtype, values);\r\n    // The indices along the given axis that have unique elements. This is a\r\n    // de-duped version of \"indices\" above.\r\n    const uniqueIndices = [];\r\n    const is1DTensor = newShape[0] === 1 && newShape[2] === 1;\r\n    for (let i = 0; i < shape[$axis]; i++) {\r\n        // Extract values along the axis.\r\n        let element;\r\n        if (is1DTensor) {\r\n            // Fast path for 1D tensor input.\r\n            element = values[i].toString();\r\n        }\r\n        else {\r\n            const axisValues = [];\r\n            for (let m = 0; m < newShape[0]; m++) {\r\n                for (let n = 0; n < newShape[2]; n++) {\r\n                    axisValues.push(inputBuffer.get(m, i, n));\r\n                }\r\n            }\r\n            element = axisValues.join(',');\r\n        }\r\n        // Dedup and update various indices.\r\n        if (uniqueElements[element] !== undefined) {\r\n            indices[i] = uniqueElements[element];\r\n        }\r\n        else {\r\n            const uniqueIndex = Object.keys(uniqueElements).length;\r\n            uniqueElements[element] = uniqueIndex;\r\n            indices[i] = uniqueIndex;\r\n            uniqueIndices.push(i);\r\n        }\r\n    }\r\n    // Now we know where each of the unique elements are located along the axis\r\n    // (uniqueIndices). Extract them from input buffer and store them in the\r\n    // output buffer.\r\n    const outputTmpShape = newShape.slice();\r\n    outputTmpShape[1] = Object.keys(uniqueElements).length;\r\n    const outputBuffer = new TensorBuffer(outputTmpShape, dtype);\r\n    uniqueIndices.forEach((uniqueElementIndex, i) => {\r\n        for (let m = 0; m < newShape[0]; m++) {\r\n            for (let n = 0; n < newShape[2]; n++) {\r\n                outputBuffer.set(inputBuffer.get(m, uniqueElementIndex, n), m, i, n);\r\n            }\r\n        }\r\n    });\r\n    // The output shape can be calculated from the input shape with the size of\r\n    // the given axis replaced by the number of unique elements along that axis.\r\n    const outputShape = shape.slice();\r\n    outputShape[$axis] = outputTmpShape[1];\r\n    return {\r\n        outputValues: outputBuffer.values,\r\n        outputShape,\r\n        indices,\r\n    };\r\n}\r\n//# sourceMappingURL=Unique_impl.js.map"]},"metadata":{},"sourceType":"module"}