{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nexport class RotateProgram {\n  constructor(imageShape, radians, fillValue, center) {\n    this.variableNames = ['Image'];\n    this.outputShape = [];\n    const imageHeight = imageShape[1];\n    const imageWidth = imageShape[2];\n    const sinFactor = Math.sin(radians).toFixed(3);\n    const cosFactor = Math.cos(radians).toFixed(3);\n    this.outputShape = imageShape;\n    const [centerX, centerY] = backend_util.getImageCenter(center, imageHeight, imageWidth);\n    const centerXString = centerX.toFixed(3);\n    const centerYString = centerY.toFixed(3);\n    let fillSnippet = '';\n\n    if (typeof fillValue === 'number') {\n      fillSnippet = `float outputValue = ${fillValue.toFixed(2)};`;\n    } else {\n      fillSnippet = `\n        vec3 fill = vec3(${fillValue.join(',')});\n        float outputValue = fill[coords[3]];`;\n    }\n\n    this.userCode = `\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - ${centerXString}) * ${cosFactor} - (float(y) - ${centerYString}) * ${sinFactor};\n          float coordYFloat = (float(x) - ${centerXString}) * ${sinFactor} + (float(y) - ${centerYString}) * ${cosFactor};\n          int coordX = int(round(coordXFloat + ${centerXString}));\n          int coordY = int(round(coordYFloat + ${centerYString}));\n          ${fillSnippet}\n          if(coordX >= 0 && coordX < ${imageWidth} && coordY >= 0 && coordY < ${imageHeight}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `;\n  }\n\n}","map":{"version":3,"sources":["../src/rotate_gpu.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,YAAR,QAA2B,uBAA3B;AAIA,OAAM,MAAO,aAAP,CAAoB;AAKxB,EAAA,WAAA,CACI,UADJ,EACkD,OADlD,EAEI,SAFJ,EAGI,MAHJ,EAGmC;AAPnC,SAAA,aAAA,GAAgB,CAAC,OAAD,CAAhB;AACA,SAAA,WAAA,GAAwB,EAAxB;AAOE,UAAM,WAAW,GAAG,UAAU,CAAC,CAAD,CAA9B;AACA,UAAM,UAAU,GAAG,UAAU,CAAC,CAAD,CAA7B;AACA,UAAM,SAAS,GAAG,IAAI,CAAC,GAAL,CAAS,OAAT,EAAkB,OAAlB,CAA0B,CAA1B,CAAlB;AACA,UAAM,SAAS,GAAG,IAAI,CAAC,GAAL,CAAS,OAAT,EAAkB,OAAlB,CAA0B,CAA1B,CAAlB;AACA,SAAK,WAAL,GAAmB,UAAnB;AAEA,UAAM,CAAC,OAAD,EAAU,OAAV,IACF,YAAY,CAAC,cAAb,CAA4B,MAA5B,EAAoC,WAApC,EAAiD,UAAjD,CADJ;AAEA,UAAM,aAAa,GAAG,OAAO,CAAC,OAAR,CAAgB,CAAhB,CAAtB;AACA,UAAM,aAAa,GAAG,OAAO,CAAC,OAAR,CAAgB,CAAhB,CAAtB;AAEA,QAAI,WAAW,GAAG,EAAlB;;AACA,QAAI,OAAO,SAAP,KAAqB,QAAzB,EAAmC;AACjC,MAAA,WAAW,GAAG,uBAAuB,SAAS,CAAC,OAAV,CAAkB,CAAlB,CAAoB,GAAzD;AACD,KAFD,MAEO;AACL,MAAA,WAAW,GAAG;2BACO,SAAS,CAAC,IAAV,CAAe,GAAf,CAAmB;AACD,6CAFvC;AAGD;;AAED,SAAK,QAAL,GAAgB;;;;;4CAKwB,aAAa,OACjD,SAAS,kBAAkB,aAAa,OAAO,SAAS;4CACpB,aAAa,OACjD,SAAS,kBAAkB,aAAa,OAAO,SAAS;iDACf,aAAa;iDACb,aAAa;YAClD,WAAW;uCACgB,UAAU,+BACzC,WAAW;;;;;AAKd,KAlBD;AAmBD;;AAhDuB","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { backend_util } from '@tensorflow/tfjs-core';\r\nexport class RotateProgram {\r\n    constructor(imageShape, radians, fillValue, center) {\r\n        this.variableNames = ['Image'];\r\n        this.outputShape = [];\r\n        const imageHeight = imageShape[1];\r\n        const imageWidth = imageShape[2];\r\n        const sinFactor = Math.sin(radians).toFixed(3);\r\n        const cosFactor = Math.cos(radians).toFixed(3);\r\n        this.outputShape = imageShape;\r\n        const [centerX, centerY] = backend_util.getImageCenter(center, imageHeight, imageWidth);\r\n        const centerXString = centerX.toFixed(3);\r\n        const centerYString = centerY.toFixed(3);\r\n        let fillSnippet = '';\r\n        if (typeof fillValue === 'number') {\r\n            fillSnippet = `float outputValue = ${fillValue.toFixed(2)};`;\r\n        }\r\n        else {\r\n            fillSnippet = `\r\n        vec3 fill = vec3(${fillValue.join(',')});\r\n        float outputValue = fill[coords[3]];`;\r\n        }\r\n        this.userCode = `\r\n        void main() {\r\n          ivec4 coords = getOutputCoords();\r\n          int x = coords[2];\r\n          int y = coords[1];\r\n          float coordXFloat = (float(x) - ${centerXString}) * ${cosFactor} - (float(y) - ${centerYString}) * ${sinFactor};\r\n          float coordYFloat = (float(x) - ${centerXString}) * ${sinFactor} + (float(y) - ${centerYString}) * ${cosFactor};\r\n          int coordX = int(round(coordXFloat + ${centerXString}));\r\n          int coordY = int(round(coordYFloat + ${centerYString}));\r\n          ${fillSnippet}\r\n          if(coordX >= 0 && coordX < ${imageWidth} && coordY >= 0 && coordY < ${imageHeight}) {\r\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\r\n          }\r\n          setOutput(outputValue);\r\n        }\r\n    `;\r\n    }\r\n}\r\n//# sourceMappingURL=rotate_gpu.js.map"]},"metadata":{},"sourceType":"module"}