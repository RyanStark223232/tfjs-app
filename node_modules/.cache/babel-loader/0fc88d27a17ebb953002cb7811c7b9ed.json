{"ast":null,"code":"import _slicedToArray from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { makeTypesMatch } from '../tensor_util';\nimport { convertToTensor } from '../tensor_util_env';\nimport { div } from './div';\nimport { equal } from './equal';\nimport { op } from './operation';\nimport { where } from './where';\nimport { zerosLike } from './zeros_like';\n/**\r\n * Divides two `tf.Tensor`s element-wise, A / B. Supports broadcasting. Return 0\r\n * if denominator is 0.\r\n *\r\n *\r\n * ```js\r\n * const a = tf.tensor1d([1, 4, 9, 16]);\r\n * const b = tf.tensor1d([1, 2, 3, 4]);\r\n * const c = tf.tensor1d([0, 0, 0, 0]);\r\n *\r\n * a.divNoNan(b).print();  // or tf.divNoNan(a, b)\r\n * a.divNoNan(c).print();  // or tf.divNoNan(a, c)\r\n * ```\r\n *\r\n * ```js\r\n * // Broadcast div a with b.\r\n * const a = tf.tensor1d([2, 4, 6, 8]);\r\n * const b = tf.scalar(2);\r\n * const c = tf.scalar(0);\r\n *\r\n * a.divNoNan(b).print();  // or tf.divNoNan(a, b)\r\n * a.divNoNan(c).print();  // or tf.divNoNan(a, c)\r\n * ```\r\n *\r\n * @param a The first tensor as the numerator.\r\n * @param b The second tensor as the denominator. Must have the same dtype as\r\n * `a`.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\r\n */\n\nfunction divNoNan_(a, b) {\n  // TODO: Make this into its own kernel.\n  var $a = convertToTensor(a, 'a', 'div');\n  var $b = convertToTensor(b, 'b', 'div');\n\n  var _makeTypesMatch = makeTypesMatch($a, $b);\n\n  var _makeTypesMatch2 = _slicedToArray(_makeTypesMatch, 2);\n\n  $a = _makeTypesMatch2[0];\n  $b = _makeTypesMatch2[1];\n  var divResult = div($a, $b);\n  var zeros = zerosLike(divResult);\n  var bEqualsZero = equal($b, zeros);\n  return where(bEqualsZero, zeros, divResult);\n}\n\nexport var divNoNan = op({\n  divNoNan_: divNoNan_\n});","map":{"version":3,"sources":["../../src/ops/div_no_nan.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AAGH,SAAQ,cAAR,QAA6B,gBAA7B;AACA,SAAQ,eAAR,QAA8B,oBAA9B;AAGA,SAAQ,GAAR,QAAkB,OAAlB;AACA,SAAQ,KAAR,QAAoB,SAApB;AACA,SAAQ,EAAR,QAAiB,aAAjB;AACA,SAAQ,KAAR,QAAoB,SAApB;AACA,SAAQ,SAAR,QAAwB,cAAxB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BG;;AACH,SAAS,SAAT,CACI,CADJ,EAC0B,CAD1B,EAC8C;AAC5C;AACA,MAAI,EAAE,GAAG,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,KAAT,CAAxB;AACA,MAAI,EAAE,GAAG,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,KAAT,CAAxB;;AAH4C,wBAIjC,cAAc,CAAC,EAAD,EAAK,EAAL,CAJmB;;AAAA;;AAI3C,EAAA,EAJ2C;AAIvC,EAAA,EAJuC;AAM5C,MAAM,SAAS,GAAG,GAAG,CAAC,EAAD,EAAK,EAAL,CAArB;AACA,MAAM,KAAK,GAAG,SAAS,CAAC,SAAD,CAAvB;AACA,MAAM,WAAW,GAAG,KAAK,CAAC,EAAD,EAAK,KAAL,CAAzB;AACA,SAAO,KAAK,CAAC,WAAD,EAAc,KAAd,EAAqB,SAArB,CAAZ;AACD;;AAED,OAAO,IAAM,QAAQ,GAAG,EAAE,CAAC;AAAC,EAAA,SAAS,EAAT;AAAD,CAAD,CAAnB","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { makeTypesMatch } from '../tensor_util';\r\nimport { convertToTensor } from '../tensor_util_env';\r\nimport { div } from './div';\r\nimport { equal } from './equal';\r\nimport { op } from './operation';\r\nimport { where } from './where';\r\nimport { zerosLike } from './zeros_like';\r\n/**\r\n * Divides two `tf.Tensor`s element-wise, A / B. Supports broadcasting. Return 0\r\n * if denominator is 0.\r\n *\r\n *\r\n * ```js\r\n * const a = tf.tensor1d([1, 4, 9, 16]);\r\n * const b = tf.tensor1d([1, 2, 3, 4]);\r\n * const c = tf.tensor1d([0, 0, 0, 0]);\r\n *\r\n * a.divNoNan(b).print();  // or tf.divNoNan(a, b)\r\n * a.divNoNan(c).print();  // or tf.divNoNan(a, c)\r\n * ```\r\n *\r\n * ```js\r\n * // Broadcast div a with b.\r\n * const a = tf.tensor1d([2, 4, 6, 8]);\r\n * const b = tf.scalar(2);\r\n * const c = tf.scalar(0);\r\n *\r\n * a.divNoNan(b).print();  // or tf.divNoNan(a, b)\r\n * a.divNoNan(c).print();  // or tf.divNoNan(a, c)\r\n * ```\r\n *\r\n * @param a The first tensor as the numerator.\r\n * @param b The second tensor as the denominator. Must have the same dtype as\r\n * `a`.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\r\n */\r\nfunction divNoNan_(a, b) {\r\n    // TODO: Make this into its own kernel.\r\n    let $a = convertToTensor(a, 'a', 'div');\r\n    let $b = convertToTensor(b, 'b', 'div');\r\n    [$a, $b] = makeTypesMatch($a, $b);\r\n    const divResult = div($a, $b);\r\n    const zeros = zerosLike(divResult);\r\n    const bEqualsZero = equal($b, zeros);\r\n    return where(bEqualsZero, zeros, divResult);\r\n}\r\nexport const divNoNan = op({ divNoNan_ });\r\n//# sourceMappingURL=div_no_nan.js.map"]},"metadata":{},"sourceType":"module"}