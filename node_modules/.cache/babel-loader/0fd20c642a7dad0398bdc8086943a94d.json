{"ast":null,"code":"import { convertToTensor } from '../tensor_util_env';\nimport { conv2DBackpropInput } from './conv2d_backprop_input';\nimport { op } from './operation';\n/**\r\n * Computes the transposed 2D convolution of an image, also known as a\r\n * deconvolution.\r\n *\r\n * @param x The input image, of rank 4 or rank 3, of shape\r\n *   `[batch, height, width, inDepth]`. If rank 3, batch of 1 is assumed.\r\n * @param filter The filter, rank 4, of shape\r\n *     `[filterHeight, filterWidth, outDepth, inDepth]`.\r\n *     `inDepth` must match `inDepth` in `x`.\r\n * @param outputShape Output shape, of rank 4 or rank 3:\r\n *     `[batch, height, width, outDepth]`. If rank 3, batch of 1 is assumed.\r\n * @param strides The strides of the original convolution:\r\n *     `[strideHeight, strideWidth]`.\r\n * @param pad  The type of padding algorithm used in the non-transpose version\r\n *    of the op.\r\n * @param dimRoundingMode The rounding mode used when computing output\r\n *    dimensions if pad is a number. If none is provided, it will not round\r\n *    and error if the output is of fractional size.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Convolution'}\r\n */\n\nfunction conv2dTranspose_(x, filter, outputShape, strides, pad, dimRoundingMode) {\n  var $x = convertToTensor(x, 'x', 'conv2dTranspose');\n  var $filter = convertToTensor(filter, 'filter', 'conv2dTranspose');\n  return conv2DBackpropInput(outputShape, $x, $filter, strides, pad, 'NHWC', dimRoundingMode);\n}\n\nexport var conv2dTranspose = op({\n  conv2dTranspose_: conv2dTranspose_\n});","map":{"version":3,"sources":["../../src/ops/conv2d_transpose.ts"],"names":[],"mappings":"AAiBA,SAAQ,eAAR,QAA8B,oBAA9B;AAGA,SAAQ,mBAAR,QAAkC,yBAAlC;AACA,SAAQ,EAAR,QAAiB,aAAjB;AAEA;;;;;;;;;;;;;;;;;;;;AAoBG;;AACH,SAAS,gBAAT,CACI,CADJ,EACqB,MADrB,EAEI,WAFJ,EAGI,OAHJ,EAGsC,GAHtC,EAII,eAJJ,EAI4C;AAC1C,MAAM,EAAE,GAAG,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,iBAAT,CAA1B;AACA,MAAM,OAAO,GAAG,eAAe,CAAC,MAAD,EAAS,QAAT,EAAmB,iBAAnB,CAA/B;AAEA,SAAO,mBAAmB,CACtB,WADsB,EACT,EADS,EACL,OADK,EACI,OADJ,EACa,GADb,EACkB,MADlB,EAC0B,eAD1B,CAA1B;AAED;;AAED,OAAO,IAAM,eAAe,GAAG,EAAE,CAAC;AAAC,EAAA,gBAAgB,EAAhB;AAAD,CAAD,CAA1B","sourceRoot":"","sourcesContent":["import { convertToTensor } from '../tensor_util_env';\r\nimport { conv2DBackpropInput } from './conv2d_backprop_input';\r\nimport { op } from './operation';\r\n/**\r\n * Computes the transposed 2D convolution of an image, also known as a\r\n * deconvolution.\r\n *\r\n * @param x The input image, of rank 4 or rank 3, of shape\r\n *   `[batch, height, width, inDepth]`. If rank 3, batch of 1 is assumed.\r\n * @param filter The filter, rank 4, of shape\r\n *     `[filterHeight, filterWidth, outDepth, inDepth]`.\r\n *     `inDepth` must match `inDepth` in `x`.\r\n * @param outputShape Output shape, of rank 4 or rank 3:\r\n *     `[batch, height, width, outDepth]`. If rank 3, batch of 1 is assumed.\r\n * @param strides The strides of the original convolution:\r\n *     `[strideHeight, strideWidth]`.\r\n * @param pad  The type of padding algorithm used in the non-transpose version\r\n *    of the op.\r\n * @param dimRoundingMode The rounding mode used when computing output\r\n *    dimensions if pad is a number. If none is provided, it will not round\r\n *    and error if the output is of fractional size.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Convolution'}\r\n */\r\nfunction conv2dTranspose_(x, filter, outputShape, strides, pad, dimRoundingMode) {\r\n    const $x = convertToTensor(x, 'x', 'conv2dTranspose');\r\n    const $filter = convertToTensor(filter, 'filter', 'conv2dTranspose');\r\n    return conv2DBackpropInput(outputShape, $x, $filter, strides, pad, 'NHWC', dimRoundingMode);\r\n}\r\nexport const conv2dTranspose = op({ conv2dTranspose_ });\r\n//# sourceMappingURL=conv2d_transpose.js.map"]},"metadata":{},"sourceType":"module"}