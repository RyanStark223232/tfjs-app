{"ast":null,"code":"import _classCallCheck from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport var ReverseProgram = function ReverseProgram(xShape, axis) {\n  _classCallCheck(this, ReverseProgram);\n\n  this.variableNames = ['x'];\n  var rank = xShape.length;\n\n  if (rank > 4) {\n    throw new Error(\"WebGL backend: Reverse of rank-\".concat(rank, \" tensor is not yet supported\"));\n  }\n\n  this.outputShape = xShape;\n\n  if (rank === 1) {\n    this.userCode = \"\\n        void main() {\\n          int coord = getOutputCoords();\\n          setOutput(getX(\".concat(xShape[0], \" - coord - 1));\\n        }\\n      \");\n    return;\n  }\n\n  var getInCoord = function getInCoord(i) {\n    if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {\n      return \"\".concat(xShape[i], \" - coords[\").concat(i, \"] - 1\");\n    }\n\n    return \"coords[\".concat(i, \"]\");\n  };\n\n  var inCoords = xShape.map(function (_, i) {\n    return getInCoord(i);\n  }).join(',');\n  var type = getCoordsDataType(rank);\n  this.userCode = \"\\n      void main() {\\n        \".concat(type, \" coords = getOutputCoords();\\n        setOutput(getX(\").concat(inCoords, \"));\\n      }\\n    \");\n};","map":{"version":3,"sources":["../src/reverse_gpu.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AAGH,SAAQ,iBAAR,QAAgC,mBAAhC;AAEA,WAAa,cAAb,GAKE,wBAAY,MAAZ,EAA8B,IAA9B,EAA4C;AAAA;;AAJ5C,OAAA,aAAA,GAAgB,CAAC,GAAD,CAAhB;AAKE,MAAM,IAAI,GAAG,MAAM,CAAC,MAApB;;AACA,MAAI,IAAI,GAAG,CAAX,EAAc;AACZ,UAAM,IAAI,KAAJ,0CACgC,IADhC,kCAAN;AAED;;AACD,OAAK,WAAL,GAAmB,MAAnB;;AAEA,MAAI,IAAI,KAAK,CAAb,EAAgB;AACd,SAAK,QAAL,yGAGqB,MAAM,CAAC,CAAD,CAH3B;AAMA;AACD;;AACD,MAAM,UAAU,GAAG,SAAb,UAAa,CAAC,CAAD,EAAc;AAC/B,QAAI,IAAI,CAAC,OAAL,CAAa,CAAb,MAAoB,CAAC,CAArB,IAA0B,MAAM,CAAC,CAAD,CAAN,KAAc,CAA5C,EAA+C;AAC7C,uBAAU,MAAM,CAAC,CAAD,CAAhB,uBAAgC,CAAhC;AACD;;AACD,4BAAiB,CAAjB;AACD,GALD;;AAMA,MAAM,QAAQ,GAAG,MAAM,CAAC,GAAP,CAAW,UAAC,CAAD,EAAI,CAAJ;AAAA,WAAU,UAAU,CAAC,CAAD,CAApB;AAAA,GAAX,EAAoC,IAApC,CAAyC,GAAzC,CAAjB;AACA,MAAM,IAAI,GAAG,iBAAiB,CAAC,IAAD,CAA9B;AAEA,OAAK,QAAL,4CAEM,IAFN,kEAGqB,QAHrB;AAMD,CArCH","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2017 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { getCoordsDataType } from './shader_compiler';\r\nexport class ReverseProgram {\r\n    constructor(xShape, axis) {\r\n        this.variableNames = ['x'];\r\n        const rank = xShape.length;\r\n        if (rank > 4) {\r\n            throw new Error(`WebGL backend: Reverse of rank-${rank} tensor is not yet supported`);\r\n        }\r\n        this.outputShape = xShape;\r\n        if (rank === 1) {\r\n            this.userCode = `\r\n        void main() {\r\n          int coord = getOutputCoords();\r\n          setOutput(getX(${xShape[0]} - coord - 1));\r\n        }\r\n      `;\r\n            return;\r\n        }\r\n        const getInCoord = (i) => {\r\n            if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {\r\n                return `${xShape[i]} - coords[${i}] - 1`;\r\n            }\r\n            return `coords[${i}]`;\r\n        };\r\n        const inCoords = xShape.map((_, i) => getInCoord(i)).join(',');\r\n        const type = getCoordsDataType(rank);\r\n        this.userCode = `\r\n      void main() {\r\n        ${type} coords = getOutputCoords();\r\n        setOutput(getX(${inCoords}));\r\n      }\r\n    `;\r\n    }\r\n}\r\n//# sourceMappingURL=reverse_gpu.js.map"]},"metadata":{},"sourceType":"module"}