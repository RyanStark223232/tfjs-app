{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { inferShape } from '../tensor_util_env';\nimport { makeTensor } from './tensor_ops_util';\n/**\r\n * Creates a `tf.Tensor` with the provided values, shape and dtype.\r\n *\r\n * ```js\r\n * // Pass an array of values to create a vector.\r\n * tf.tensor([1, 2, 3, 4]).print();\r\n * ```\r\n *\r\n * ```js\r\n * // Pass a nested array of values to make a matrix or a higher\r\n * // dimensional tensor.\r\n * tf.tensor([[1, 2], [3, 4]]).print();\r\n * ```\r\n *\r\n * ```js\r\n * // Pass a flat array and specify a shape yourself.\r\n * tf.tensor([1, 2, 3, 4], [2, 2]).print();\r\n * ```\r\n *\r\n * @param values The values of the tensor. Can be nested array of numbers,\r\n *     or a flat array, or a `TypedArray`. If the values are strings,\r\n *     they will be encoded as utf-8 and kept as `Uint8Array[]`.\r\n * @param shape The shape of the tensor. Optional. If not provided,\r\n *   it is inferred from `values`.\r\n * @param dtype The data type.\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Creation'}\r\n */\n\nexport function tensor(values, shape, dtype) {\n  var inferredShape = inferShape(values, dtype);\n  return makeTensor(values, shape, inferredShape, dtype);\n}","map":{"version":3,"sources":["../../src/ops/tensor.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAGH,SAAQ,UAAR,QAAyB,oBAAzB;AAIA,SAAQ,UAAR,QAAyB,mBAAzB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BG;;AACH,OAAM,SAAU,MAAV,CACF,MADE,EACkB,KADlB,EACuC,KADvC,EACuD;AAC3D,MAAM,aAAa,GAAG,UAAU,CAAC,MAAD,EAAS,KAAT,CAAhC;AACA,SAAO,UAAU,CAAC,MAAD,EAAS,KAAT,EAAgB,aAAhB,EAA+B,KAA/B,CAAjB;AACD","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { inferShape } from '../tensor_util_env';\r\nimport { makeTensor } from './tensor_ops_util';\r\n/**\r\n * Creates a `tf.Tensor` with the provided values, shape and dtype.\r\n *\r\n * ```js\r\n * // Pass an array of values to create a vector.\r\n * tf.tensor([1, 2, 3, 4]).print();\r\n * ```\r\n *\r\n * ```js\r\n * // Pass a nested array of values to make a matrix or a higher\r\n * // dimensional tensor.\r\n * tf.tensor([[1, 2], [3, 4]]).print();\r\n * ```\r\n *\r\n * ```js\r\n * // Pass a flat array and specify a shape yourself.\r\n * tf.tensor([1, 2, 3, 4], [2, 2]).print();\r\n * ```\r\n *\r\n * @param values The values of the tensor. Can be nested array of numbers,\r\n *     or a flat array, or a `TypedArray`. If the values are strings,\r\n *     they will be encoded as utf-8 and kept as `Uint8Array[]`.\r\n * @param shape The shape of the tensor. Optional. If not provided,\r\n *   it is inferred from `values`.\r\n * @param dtype The data type.\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Creation'}\r\n */\r\nexport function tensor(values, shape, dtype) {\r\n    const inferredShape = inferShape(values, dtype);\r\n    return makeTensor(values, shape, inferredShape, dtype);\r\n}\r\n//# sourceMappingURL=tensor.js.map"]},"metadata":{},"sourceType":"module"}