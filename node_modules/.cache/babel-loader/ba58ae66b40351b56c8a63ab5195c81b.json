{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { isTypedArray } from '../util';\nimport { makeTensor } from './tensor_ops_util';\n/**\r\n * Creates rank-0 `tf.Tensor` (scalar) with the provided value and dtype.\r\n *\r\n * The same functionality can be achieved with `tf.tensor`, but in general\r\n * we recommend using `tf.scalar` as it makes the code more readable.\r\n *\r\n * ```js\r\n * tf.scalar(3.14).print();\r\n * ```\r\n *\r\n * @param value The value of the scalar.\r\n * @param dtype The data type.\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Creation'}\r\n */\n\nexport function scalar(value, dtype) {\n  if ((isTypedArray(value) && dtype !== 'string' || Array.isArray(value)) && dtype !== 'complex64') {\n    throw new Error('Error creating a new Scalar: value must be a primitive ' + '(number|boolean|string)');\n  }\n\n  if (dtype === 'string' && isTypedArray(value) && !(value instanceof Uint8Array)) {\n    throw new Error('When making a scalar from encoded string, ' + 'the value must be `Uint8Array`.');\n  }\n\n  var shape = [];\n  var inferredShape = [];\n  return makeTensor(value, shape, inferredShape, dtype);\n}","map":{"version":3,"sources":["../../src/ops/scalar.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAIH,SAAQ,YAAR,QAA2B,SAA3B;AACA,SAAQ,UAAR,QAAyB,mBAAzB;AAEA;;;;;;;;;;;;;;AAcG;;AACH,OAAM,SAAU,MAAV,CACF,KADE,EACuC,KADvC,EACuD;AAC3D,MAAI,CAAE,YAAY,CAAC,KAAD,CAAZ,IAAuB,KAAK,KAAK,QAAlC,IAA+C,KAAK,CAAC,OAAN,CAAc,KAAd,CAAhD,KACA,KAAK,KAAK,WADd,EAC2B;AACzB,UAAM,IAAI,KAAJ,CACF,4DACA,yBAFE,CAAN;AAGD;;AACD,MAAI,KAAK,KAAK,QAAV,IAAsB,YAAY,CAAC,KAAD,CAAlC,IACA,EAAE,KAAK,YAAY,UAAnB,CADJ,EACoC;AAClC,UAAM,IAAI,KAAJ,CACF,+CACA,iCAFE,CAAN;AAGD;;AACD,MAAM,KAAK,GAAa,EAAxB;AACA,MAAM,aAAa,GAAa,EAAhC;AACA,SAAO,UAAU,CAAC,KAAD,EAAQ,KAAR,EAAe,aAAf,EAA8B,KAA9B,CAAjB;AACD","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { isTypedArray } from '../util';\r\nimport { makeTensor } from './tensor_ops_util';\r\n/**\r\n * Creates rank-0 `tf.Tensor` (scalar) with the provided value and dtype.\r\n *\r\n * The same functionality can be achieved with `tf.tensor`, but in general\r\n * we recommend using `tf.scalar` as it makes the code more readable.\r\n *\r\n * ```js\r\n * tf.scalar(3.14).print();\r\n * ```\r\n *\r\n * @param value The value of the scalar.\r\n * @param dtype The data type.\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Creation'}\r\n */\r\nexport function scalar(value, dtype) {\r\n    if (((isTypedArray(value) && dtype !== 'string') || Array.isArray(value)) &&\r\n        dtype !== 'complex64') {\r\n        throw new Error('Error creating a new Scalar: value must be a primitive ' +\r\n            '(number|boolean|string)');\r\n    }\r\n    if (dtype === 'string' && isTypedArray(value) &&\r\n        !(value instanceof Uint8Array)) {\r\n        throw new Error('When making a scalar from encoded string, ' +\r\n            'the value must be `Uint8Array`.');\r\n    }\r\n    const shape = [];\r\n    const inferredShape = [];\r\n    return makeTensor(value, shape, inferredShape, dtype);\r\n}\r\n//# sourceMappingURL=scalar.js.map"]},"metadata":{},"sourceType":"module"}