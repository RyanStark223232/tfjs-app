{"ast":null,"code":"import _classCallCheck from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nexport var DepthwiseConv2DDerFilterProgram = function DepthwiseConv2DDerFilterProgram(convInfo) {\n  _classCallCheck(this, DepthwiseConv2DDerFilterProgram);\n\n  this.variableNames = ['x', 'dy'];\n  this.outputShape = convInfo.filterShape;\n  var strideHeight = convInfo.strideHeight;\n  var strideWidth = convInfo.strideWidth;\n  var padTop = convInfo.padInfo.top;\n  var padLeft = convInfo.padInfo.left;\n  var channelMul = convInfo.outChannels / convInfo.inChannels;\n  this.userCode = \"\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int wR = coords.x;\\n        int wC = coords.y;\\n        int d1 = coords.z;\\n        int dm = coords.w;\\n        int d2 = d1 * \".concat(channelMul, \" + dm;\\n\\n        float dotProd = 0.0;\\n\\n        // TO DO: Vec4 over the batch size\\n        for (int b = 0; b < \").concat(convInfo.batchSize, \"; b++) {\\n          for (int yR = 0; yR < \").concat(convInfo.outHeight, \"; yR++) {\\n            int xR = wR + yR * \").concat(strideHeight, \" - \").concat(padTop, \";\\n\\n            if (xR < 0 || xR >= \").concat(convInfo.inHeight, \") {\\n              continue;\\n            }\\n\\n            for (int yC = 0; yC < \").concat(convInfo.outWidth, \"; yC++) {\\n              int xC = wC + yC * \").concat(strideWidth, \" - \").concat(padLeft, \";\\n\\n              if (xC < 0 || xC >= \").concat(convInfo.inWidth, \") {\\n                continue;\\n              }\\n\\n              float dyValue = getDy(b, yR, yC, d2);\\n              float xValue = getX(b, xR, xC, d1);\\n              dotProd += (xValue * dyValue);\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \");\n};\nexport var DepthwiseConv2DDerInputProgram = function DepthwiseConv2DDerInputProgram(convInfo) {\n  _classCallCheck(this, DepthwiseConv2DDerInputProgram);\n\n  this.variableNames = ['dy', 'W'];\n  this.outputShape = convInfo.inShape;\n  var filterHeight = convInfo.filterHeight;\n  var filterWidth = convInfo.filterWidth;\n  var strideHeight = convInfo.strideHeight;\n  var strideWidth = convInfo.strideWidth;\n  var padTop = filterHeight - 1 - convInfo.padInfo.top;\n  var padLeft = filterWidth - 1 - convInfo.padInfo.left;\n  var channelMul = convInfo.outChannels / convInfo.inChannels;\n  this.userCode = \"\\n      const ivec2 pads = ivec2(\".concat(padTop, \", \").concat(padLeft, \");\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int d1 = coords[3];\\n        ivec2 dyCorner = coords.yz - pads;\\n        int dyRCorner = dyCorner.x;\\n        int dyCCorner = dyCorner.y;\\n\\n        float dotProd = 0.0;\\n\\n        for (int wR = 0; wR < \").concat(filterHeight, \"; wR++) {\\n          float dyR = float(dyRCorner + wR) / \").concat(strideHeight, \".0;\\n\\n          if (dyR < 0.0 || dyR >= \").concat(convInfo.outHeight, \".0 || fract(dyR) > 0.0) {\\n            continue;\\n          }\\n          int idyR = int(dyR);\\n\\n          int wRPerm = \").concat(filterHeight, \" - 1 - wR;\\n\\n          for (int wC = 0; wC < \").concat(filterWidth, \"; wC++) {\\n            float dyC = float(dyCCorner + wC) / \").concat(strideWidth, \".0;\\n\\n            if (dyC < 0.0 || dyC >= \").concat(convInfo.outWidth, \".0 ||\\n                fract(dyC) > 0.0) {\\n              continue;\\n            }\\n            int idyC = int(dyC);\\n\\n            int wCPerm = \").concat(filterWidth, \" - 1 - wC;\\n\\n            // TO DO: Vec4 over the channelMul\\n            for (int dm = 0; dm < \").concat(channelMul, \"; dm++) {\\n              int d2 = d1 * \").concat(channelMul, \" + dm;\\n              float xValue = getDy(batch, idyR, idyC, d2);\\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\\n              dotProd += xValue * wValue;\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \");\n};","map":{"version":3,"sources":["../src/conv_backprop_gpu_depthwise.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AAKH,WAAa,+BAAb,GAKE,yCAAY,QAAZ,EAA6C;AAAA;;AAJ7C,OAAA,aAAA,GAAgB,CAAC,GAAD,EAAM,IAAN,CAAhB;AAKE,OAAK,WAAL,GAAmB,QAAQ,CAAC,WAA5B;AAEA,MAAM,YAAY,GAAG,QAAQ,CAAC,YAA9B;AACA,MAAM,WAAW,GAAG,QAAQ,CAAC,WAA7B;AACA,MAAM,MAAM,GAAG,QAAQ,CAAC,OAAT,CAAiB,GAAhC;AACA,MAAM,OAAO,GAAG,QAAQ,CAAC,OAAT,CAAiB,IAAjC;AACA,MAAM,UAAU,GAAG,QAAQ,CAAC,WAAT,GAAuB,QAAQ,CAAC,UAAnD;AAEA,OAAK,QAAL,qNAOoB,UAPpB,+HAY0B,QAAQ,CAAC,SAZnC,uDAa8B,QAAQ,CAAC,SAbvC,uDAc6B,YAd7B,gBAc+C,MAd/C,kDAgB8B,QAAQ,CAAC,QAhBvC,8FAoBgC,QAAQ,CAAC,QApBzC,yDAqB+B,WArB/B,gBAqBgD,OArBhD,oDAuBgC,QAAQ,CAAC,OAvBzC;AAoCD,CAlDH;AAqDA,WAAa,8BAAb,GAKE,wCAAY,QAAZ,EAA6C;AAAA;;AAJ7C,OAAA,aAAA,GAAgB,CAAC,IAAD,EAAO,GAAP,CAAhB;AAKE,OAAK,WAAL,GAAmB,QAAQ,CAAC,OAA5B;AAEA,MAAM,YAAY,GAAG,QAAQ,CAAC,YAA9B;AACA,MAAM,WAAW,GAAG,QAAQ,CAAC,WAA7B;AACA,MAAM,YAAY,GAAG,QAAQ,CAAC,YAA9B;AACA,MAAM,WAAW,GAAG,QAAQ,CAAC,WAA7B;AAEA,MAAM,MAAM,GAAG,YAAY,GAAG,CAAf,GAAmB,QAAQ,CAAC,OAAT,CAAiB,GAAnD;AACA,MAAM,OAAO,GAAG,WAAW,GAAG,CAAd,GAAkB,QAAQ,CAAC,OAAT,CAAiB,IAAnD;AACA,MAAM,UAAU,GAAG,QAAQ,CAAC,WAAT,GAAuB,QAAQ,CAAC,UAAnD;AAEA,OAAK,QAAL,8CAC6B,MAD7B,eACwC,OADxC,sUAa4B,YAb5B,sEAc4C,YAd5C,sDAgBgC,QAAQ,CAAC,SAhBzC,qIAqBqB,YArBrB,2DAuB8B,WAvB9B,wEAwB8C,WAxB9C,wDA0BkC,QAAQ,CAAC,QA1B3C,8JAgCuB,WAhCvB,6GAmCgC,UAnChC,oDAoC0B,UApC1B;AA8CD,CA/DH","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nexport class DepthwiseConv2DDerFilterProgram {\r\n    constructor(convInfo) {\r\n        this.variableNames = ['x', 'dy'];\r\n        this.outputShape = convInfo.filterShape;\r\n        const strideHeight = convInfo.strideHeight;\r\n        const strideWidth = convInfo.strideWidth;\r\n        const padTop = convInfo.padInfo.top;\r\n        const padLeft = convInfo.padInfo.left;\r\n        const channelMul = convInfo.outChannels / convInfo.inChannels;\r\n        this.userCode = `\r\n      void main() {\r\n        ivec4 coords = getOutputCoords();\r\n        int wR = coords.x;\r\n        int wC = coords.y;\r\n        int d1 = coords.z;\r\n        int dm = coords.w;\r\n        int d2 = d1 * ${channelMul} + dm;\r\n\r\n        float dotProd = 0.0;\r\n\r\n        // TO DO: Vec4 over the batch size\r\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\r\n          for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\r\n            int xR = wR + yR * ${strideHeight} - ${padTop};\r\n\r\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\r\n              continue;\r\n            }\r\n\r\n            for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\r\n              int xC = wC + yC * ${strideWidth} - ${padLeft};\r\n\r\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\r\n                continue;\r\n              }\r\n\r\n              float dyValue = getDy(b, yR, yC, d2);\r\n              float xValue = getX(b, xR, xC, d1);\r\n              dotProd += (xValue * dyValue);\r\n            }\r\n          }\r\n        }\r\n        setOutput(dotProd);\r\n      }\r\n    `;\r\n    }\r\n}\r\nexport class DepthwiseConv2DDerInputProgram {\r\n    constructor(convInfo) {\r\n        this.variableNames = ['dy', 'W'];\r\n        this.outputShape = convInfo.inShape;\r\n        const filterHeight = convInfo.filterHeight;\r\n        const filterWidth = convInfo.filterWidth;\r\n        const strideHeight = convInfo.strideHeight;\r\n        const strideWidth = convInfo.strideWidth;\r\n        const padTop = filterHeight - 1 - convInfo.padInfo.top;\r\n        const padLeft = filterWidth - 1 - convInfo.padInfo.left;\r\n        const channelMul = convInfo.outChannels / convInfo.inChannels;\r\n        this.userCode = `\r\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\r\n\r\n      void main() {\r\n        ivec4 coords = getOutputCoords();\r\n        int batch = coords[0];\r\n        int d1 = coords[3];\r\n        ivec2 dyCorner = coords.yz - pads;\r\n        int dyRCorner = dyCorner.x;\r\n        int dyCCorner = dyCorner.y;\r\n\r\n        float dotProd = 0.0;\r\n\r\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\r\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\r\n\r\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\r\n            continue;\r\n          }\r\n          int idyR = int(dyR);\r\n\r\n          int wRPerm = ${filterHeight} - 1 - wR;\r\n\r\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\r\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\r\n\r\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\r\n                fract(dyC) > 0.0) {\r\n              continue;\r\n            }\r\n            int idyC = int(dyC);\r\n\r\n            int wCPerm = ${filterWidth} - 1 - wC;\r\n\r\n            // TO DO: Vec4 over the channelMul\r\n            for (int dm = 0; dm < ${channelMul}; dm++) {\r\n              int d2 = d1 * ${channelMul} + dm;\r\n              float xValue = getDy(batch, idyR, idyC, d2);\r\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\r\n              dotProd += xValue * wValue;\r\n            }\r\n          }\r\n        }\r\n        setOutput(dotProd);\r\n      }\r\n    `;\r\n    }\r\n}\r\n//# sourceMappingURL=conv_backprop_gpu_depthwise.js.map"]},"metadata":{},"sourceType":"module"}