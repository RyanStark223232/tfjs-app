{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2017 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nexport class ReduceProgram {\n  constructor(reduceInfo, reduceType) {\n    this.variableNames = ['x'];\n    const {\n      windowSize,\n      batchSize,\n      inSize,\n      outSize\n    } = reduceInfo;\n    this.outputShape = [batchSize, outSize];\n    let initializationValue = '0.0';\n    let compareOp = ``;\n\n    if (reduceType === 'prod') {\n      initializationValue = '1.0';\n    } else if (reduceType === 'min') {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '1.0 / 1e-20';\n      compareOp = `min`;\n    } else if (reduceType === 'max') {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '-1.0 / 1e-20';\n      compareOp = `max`;\n    }\n\n    let returnValue = `${reduceType}(${reduceType}(${reduceType}(` + 'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n\n    if (reduceType === 'sum') {\n      returnValue = `sumValue`;\n    } else if (reduceType === 'prod') {\n      returnValue = `prodValue`;\n    } else if (reduceType === 'all') {\n      returnValue = `allValue`;\n    } else if (reduceType === 'any') {\n      returnValue = `anyValue`;\n    }\n\n    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n    const windowSizeVec4Remainder = windowSize % 4;\n    let updateSnippet = `\n      if (${reduceType === 'sum'}) {\n        sumValue += dot(values, ones);\n      } else if (${reduceType === 'prod'}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n      }\n    `;\n    let vecType = `vec4`;\n\n    if (reduceType === 'all') {\n      initializationValue = '1.0';\n      updateSnippet = `\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      `;\n      vecType = `bvec4`;\n    } else if (reduceType === 'any') {\n      initializationValue = '0.0';\n      updateSnippet = `\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      `;\n      vecType = `bvec4`;\n    }\n\n    let checkOutOfBounds = '';\n\n    if (inSize % windowSize > 0) {\n      checkOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return initializationValue;\n        }\n      `;\n    }\n\n    this.userCode = `\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${checkOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        vec4 minMaxValue = vec4(${initializationValue});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${updateSnippet}\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n\n}","map":{"version":3,"sources":["../src/reduce_gpu.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAKH,OAAM,MAAO,aAAP,CAAoB;AAKxB,EAAA,WAAA,CACI,UADJ,EAEI,UAFJ,EAEoD;AANpD,SAAA,aAAA,GAAgB,CAAC,GAAD,CAAhB;AAOE,UAAM;AAAC,MAAA,UAAD;AAAa,MAAA,SAAb;AAAwB,MAAA,MAAxB;AAAgC,MAAA;AAAhC,QAA2C,UAAjD;AACA,SAAK,WAAL,GAAmB,CAAC,SAAD,EAAY,OAAZ,CAAnB;AAEA,QAAI,mBAAmB,GAAG,KAA1B;AACA,QAAI,SAAS,GAAG,EAAhB;;AAEA,QAAI,UAAU,KAAK,MAAnB,EAA2B;AACzB,MAAA,mBAAmB,GAAG,KAAtB;AACD,KAFD,MAEO,IAAI,UAAU,KAAK,KAAnB,EAA0B;AAC/B;AACA,MAAA,mBAAmB,GAAG,aAAtB;AACA,MAAA,SAAS,GAAG,KAAZ;AACD,KAJM,MAIA,IAAI,UAAU,KAAK,KAAnB,EAA0B;AAC/B;AACA,MAAA,mBAAmB,GAAG,cAAtB;AACA,MAAA,SAAS,GAAG,KAAZ;AACD;;AAED,QAAI,WAAW,GAAG,GAAG,UAAU,IAAI,UAAU,IAAI,UAAU,GAAzC,GACd,mEADJ;;AAGA,QAAI,UAAU,KAAK,KAAnB,EAA0B;AACxB,MAAA,WAAW,GAAG,UAAd;AACD,KAFD,MAEO,IAAI,UAAU,KAAK,MAAnB,EAA2B;AAChC,MAAA,WAAW,GAAG,WAAd;AACD,KAFM,MAEA,IAAI,UAAU,KAAK,KAAnB,EAA0B;AAC/B,MAAA,WAAW,GAAG,UAAd;AACD,KAFM,MAEA,IAAI,UAAU,KAAK,KAAnB,EAA0B;AAC/B,MAAA,WAAW,GAAG,UAAd;AACD;;AAED,UAAM,qBAAqB,GAAG,IAAI,CAAC,KAAL,CAAW,UAAU,GAAG,CAAxB,IAA6B,CAA3D;AACA,UAAM,uBAAuB,GAAG,UAAU,GAAG,CAA7C;AAEA,QAAI,aAAa,GAAG;YACZ,UAAU,KAAK,KAAK;;mBAEb,UAAU,KAAK,MAAM;;;;wBAIhB,SAAS;;AAE5B,KATD;AAWA,QAAI,OAAO,GAAG,MAAd;;AAEA,QAAI,UAAU,KAAK,KAAnB,EAA0B;AACxB,MAAA,mBAAmB,GAAG,KAAtB;AACA,MAAA,aAAa,GAAG;;;;AAIf,OAJD;AAKA,MAAA,OAAO,GAAG,OAAV;AACD,KARD,MAQO,IAAI,UAAU,KAAK,KAAnB,EAA0B;AAC/B,MAAA,mBAAmB,GAAG,KAAtB;AACA,MAAA,aAAa,GAAG;;;;AAIf,OAJD;AAKA,MAAA,OAAO,GAAG,OAAV;AACD;;AAED,QAAI,gBAAgB,GAAG,EAAvB;;AACA,QAAI,MAAM,GAAG,UAAT,GAAsB,CAA1B,EAA6B;AAC3B,MAAA,gBAAgB,GAAG;oCACW,MAAM;;;AAGnC,OAJD;AAKD;;AACD,SAAK,QAAL,GAAgB;0CACsB,mBAAmB;;;;UAInD,gBAAgB;;;;;;;;kCAQQ,UAAU;;kCAEV,mBAAmB;;;;;;8BAMvB,qBAAqB;;YAEvC,OAAO,aAAa,OAAO;;;;;;;YAO3B,aAAa;;;iCAGQ,qBAAqB;cACxC,uBAAuB,KAAK,CAAC;YAC/B,OAAO,aAAa,OAAO;;;;;;;YAO3B,aAAa;qBACJ,uBAAuB,KAAK,CAAC;YACtC,OAAO,aAAa,OAAO;;;;;;;YAO3B,aAAa;qBACJ,uBAAuB,KAAK,CAAC;YACtC,OAAO,aAAa,OAAO;;;;;;;YAO3B,aAAa;;oBAEL,WAAW;;AAE1B,KAhED;AAiED;;AAlJuB","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2017 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nexport class ReduceProgram {\r\n    constructor(reduceInfo, reduceType) {\r\n        this.variableNames = ['x'];\r\n        const { windowSize, batchSize, inSize, outSize } = reduceInfo;\r\n        this.outputShape = [batchSize, outSize];\r\n        let initializationValue = '0.0';\r\n        let compareOp = ``;\r\n        if (reduceType === 'prod') {\r\n            initializationValue = '1.0';\r\n        }\r\n        else if (reduceType === 'min') {\r\n            // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\r\n            initializationValue = '1.0 / 1e-20';\r\n            compareOp = `min`;\r\n        }\r\n        else if (reduceType === 'max') {\r\n            // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\r\n            initializationValue = '-1.0 / 1e-20';\r\n            compareOp = `max`;\r\n        }\r\n        let returnValue = `${reduceType}(${reduceType}(${reduceType}(` +\r\n            'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\r\n        if (reduceType === 'sum') {\r\n            returnValue = `sumValue`;\r\n        }\r\n        else if (reduceType === 'prod') {\r\n            returnValue = `prodValue`;\r\n        }\r\n        else if (reduceType === 'all') {\r\n            returnValue = `allValue`;\r\n        }\r\n        else if (reduceType === 'any') {\r\n            returnValue = `anyValue`;\r\n        }\r\n        const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\r\n        const windowSizeVec4Remainder = windowSize % 4;\r\n        let updateSnippet = `\r\n      if (${reduceType === 'sum'}) {\r\n        sumValue += dot(values, ones);\r\n      } else if (${reduceType === 'prod'}) {\r\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\r\n        prodValue *= tmp[0] * tmp[1];\r\n      } else {\r\n        minMaxValue = ${compareOp}(values, minMaxValue);\r\n      }\r\n    `;\r\n        let vecType = `vec4`;\r\n        if (reduceType === 'all') {\r\n            initializationValue = '1.0';\r\n            updateSnippet = `\r\n        bool reducedAllValue = all(values);\r\n        float floatedReducedAllValue = float(reducedAllValue);\r\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\r\n      `;\r\n            vecType = `bvec4`;\r\n        }\r\n        else if (reduceType === 'any') {\r\n            initializationValue = '0.0';\r\n            updateSnippet = `\r\n        bool reducedAnyValue = any(values);\r\n        float floatedReducedAnyValue = float(reducedAnyValue);\r\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\r\n      `;\r\n            vecType = `bvec4`;\r\n        }\r\n        let checkOutOfBounds = '';\r\n        if (inSize % windowSize > 0) {\r\n            checkOutOfBounds = `\r\n        if (inIdx < 0 || inIdx >= ${inSize}) {\r\n          return initializationValue;\r\n        }\r\n      `;\r\n        }\r\n        this.userCode = `\r\n      const float initializationValue = ${initializationValue};\r\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\r\n\r\n      float getValue(int batch, int inIdx) {\r\n        ${checkOutOfBounds}\r\n        return getX(batch, inIdx);\r\n      }\r\n\r\n      void main() {\r\n        ivec2 coords = getOutputCoords();\r\n        int batch = coords[0];\r\n        int outIdx = coords[1];\r\n        int inOffset = outIdx * ${windowSize};\r\n\r\n        vec4 minMaxValue = vec4(${initializationValue});\r\n        float prodValue = 1.0;\r\n        float sumValue = 0.0;\r\n        float allValue = 1.0;\r\n        float anyValue = 0.0;\r\n\r\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\r\n          int inIdx = inOffset + i;\r\n          ${vecType} values = ${vecType}(\r\n            getValue(batch, inIdx),\r\n            getValue(batch, inIdx + 1),\r\n            getValue(batch, inIdx + 2),\r\n            getValue(batch, inIdx + 3)\r\n          );\r\n\r\n          ${updateSnippet}\r\n        }\r\n\r\n        int inIdx = inOffset + ${windowSizeNearestVec4};\r\n        if (${windowSizeVec4Remainder === 1}) {\r\n          ${vecType} values = ${vecType}(\r\n            getValue(batch, inIdx),\r\n            initializationValue,\r\n            initializationValue,\r\n            initializationValue\r\n          );\r\n\r\n          ${updateSnippet}\r\n        } else if (${windowSizeVec4Remainder === 2}) {\r\n          ${vecType} values = ${vecType}(\r\n            getValue(batch, inIdx),\r\n            getValue(batch, inIdx + 1),\r\n            initializationValue,\r\n            initializationValue\r\n          );\r\n\r\n          ${updateSnippet}\r\n        } else if (${windowSizeVec4Remainder === 3}) {\r\n          ${vecType} values = ${vecType}(\r\n            getValue(batch, inIdx),\r\n            getValue(batch, inIdx + 1),\r\n            getValue(batch, inIdx + 2),\r\n            initializationValue\r\n          );\r\n\r\n          ${updateSnippet}\r\n        }\r\n        setOutput(${returnValue});\r\n      }\r\n    `;\r\n    }\r\n}\r\n//# sourceMappingURL=reduce_gpu.js.map"]},"metadata":{},"sourceType":"module"}