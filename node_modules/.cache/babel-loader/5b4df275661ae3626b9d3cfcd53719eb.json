{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { BatchToSpaceND } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\r\n * This operation reshapes the \"batch\" dimension 0 into `M + 1` dimensions of\r\n * shape `blockShape + [batch]`, interleaves these blocks back into the grid\r\n * defined by the spatial dimensions `[1, ..., M]`, to obtain a result with\r\n * the same rank as the input. The spatial dimensions of this intermediate\r\n * result are then optionally cropped according to `crops` to produce the\r\n * output. This is the reverse of `tf.spaceToBatchND`. See below for a precise\r\n * description.\r\n *\r\n * ```js\r\n * const x = tf.tensor4d([1, 2, 3, 4], [4, 1, 1, 1]);\r\n * const blockShape = [2, 2];\r\n * const crops = [[0, 0], [0, 0]];\r\n *\r\n * x.batchToSpaceND(blockShape, crops).print();\r\n * ```\r\n *\r\n * @param x A `tf.Tensor`. N-D with `x.shape` = `[batch] + spatialShape +\r\n * remainingShape`, where spatialShape has `M` dimensions.\r\n * @param blockShape A 1-D array. Must have shape `[M]`, all values must\r\n * be >= 1.\r\n * @param crops A 2-D array.  Must have shape `[M, 2]`, all values must be >= 0.\r\n * `crops[i] = [cropStart, cropEnd]` specifies the amount to crop from input\r\n * dimension `i + 1`, which corresponds to spatial dimension `i`. It is required\r\n * that `cropStart[i] + cropEnd[i] <= blockShape[i] * inputShape[i + 1]`\r\n *\r\n * This operation is equivalent to the following steps:\r\n *\r\n * 1. Reshape `x` to `reshaped` of shape: `[blockShape[0], ...,\r\n * blockShape[M-1], batch / prod(blockShape), x.shape[1], ...,\r\n * x.shape[N-1]]`\r\n *\r\n * 2. Permute dimensions of `reshaped`to produce `permuted` of shape `[batch /\r\n * prod(blockShape),x.shape[1], blockShape[0], ..., x.shape[M],\r\n * blockShape[M-1],x.shape[M+1], ..., x.shape[N-1]]`\r\n *\r\n * 3. Reshape `permuted` to produce `reshapedPermuted` of shape `[batch /\r\n * prod(blockShape),x.shape[1] * blockShape[0], ..., x.shape[M] *\r\n * blockShape[M-1],x.shape[M+1], ..., x.shape[N-1]]`\r\n *\r\n * 4. Crop the start and end of dimensions `[1, ..., M]` of `reshapedPermuted`\r\n * according to `crops` to produce the output of shape: `[batch /\r\n * prod(blockShape),x.shape[1] * blockShape[0] - crops[0,0] - crops[0,1],\r\n * ..., x.shape[M] * blockShape[M-1] - crops[M-1,0] -\r\n * crops[M-1,1],x.shape[M+1], ..., x.shape[N-1]]`\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\r\n */\n\nfunction batchToSpaceND_(x, blockShape, crops) {\n  var $x = convertToTensor(x, 'x', 'batchToSpaceND');\n  var prod = blockShape.reduce(function (a, b) {\n    return a * b;\n  });\n  util.assert($x.rank >= 1 + blockShape.length, function () {\n    return \"input rank is \".concat($x.rank, \" but should be > than blockShape.length \").concat(blockShape.length);\n  });\n  util.assert(crops.length === blockShape.length, function () {\n    return \"crops.length is \".concat(crops.length, \" but should be equal to blockShape.length  \").concat(blockShape.length);\n  });\n  util.assert($x.shape[0] % prod === 0, function () {\n    return \"input tensor batch is \".concat($x.shape[0], \" but is not divisible by the product of \") + \"the elements of blockShape \".concat(blockShape.join(' * '), \" === \").concat(prod);\n  });\n\n  var forward = function forward(backend) {\n    return backend.batchToSpaceND($x, blockShape, crops);\n  };\n\n  var inputs = {\n    x: $x\n  };\n  var attrs = {\n    blockShape: blockShape,\n    crops: crops\n  };\n  return ENGINE.runKernelFunc(forward, inputs, null\n  /* gradient */\n  , BatchToSpaceND, attrs);\n}\n\nexport var batchToSpaceND = op({\n  batchToSpaceND_: batchToSpaceND_\n});","map":{"version":3,"sources":["../../src/ops/batch_to_space_nd.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,MAAR,QAAkC,WAAlC;AACA,SAAQ,cAAR,QAAwE,iBAAxE;AAIA,SAAQ,eAAR,QAA8B,oBAA9B;AAEA,OAAO,KAAK,IAAZ,MAAsB,SAAtB;AAEA,SAAQ,EAAR,QAAiB,aAAjB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+CG;;AACH,SAAS,eAAT,CACI,CADJ,EACqB,UADrB,EAC2C,KAD3C,EAC4D;AAC1D,MAAM,EAAE,GAAG,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,gBAAT,CAA1B;AACA,MAAM,IAAI,GAAG,UAAU,CAAC,MAAX,CAAkB,UAAC,CAAD,EAAI,CAAJ;AAAA,WAAU,CAAC,GAAG,CAAd;AAAA,GAAlB,CAAb;AAEA,EAAA,IAAI,CAAC,MAAL,CACI,EAAE,CAAC,IAAH,IAAW,IAAI,UAAU,CAAC,MAD9B,EAEI;AAAA,mCAAuB,EAAE,CAAC,IAA1B,qDACI,UAAU,CAAC,MADf;AAAA,GAFJ;AAKA,EAAA,IAAI,CAAC,MAAL,CACI,KAAK,CAAC,MAAN,KAAiB,UAAU,CAAC,MADhC,EAEI;AAAA,qCACI,KAAK,CAAC,MADV,wDAEI,UAAU,CAAC,MAFf;AAAA,GAFJ;AAMA,EAAA,IAAI,CAAC,MAAL,CACI,EAAE,CAAC,KAAH,CAAS,CAAT,IAAc,IAAd,KAAuB,CAD3B,EAEI;AAAA,WAAM,gCACI,EAAE,CAAC,KAAH,CAAS,CAAT,CADJ,qFAE4B,UAAU,CAAC,IAAX,CAAgB,KAAhB,CAF5B,kBAE0D,IAF1D,CAAN;AAAA,GAFJ;;AAMA,MAAM,OAAO,GAAmB,SAA1B,OAA0B,CAAA,OAAO,EAAG;AACxC,WAAO,OAAO,CAAC,cAAR,CAAuB,EAAvB,EAA2B,UAA3B,EAAuC,KAAvC,CAAP;AACD,GAFD;;AAIA,MAAM,MAAM,GAAyB;AAAC,IAAA,CAAC,EAAE;AAAJ,GAArC;AACA,MAAM,KAAK,GAAwB;AAAC,IAAA,UAAU,EAAV,UAAD;AAAa,IAAA,KAAK,EAAL;AAAb,GAAnC;AAEA,SAAO,MAAM,CAAC,aAAP,CACH,OADG,EACM,MADN,EACsC;AAAK;AAD3C,IAEH,cAFG,EAEa,KAFb,CAAP;AAGD;;AAED,OAAO,IAAM,cAAc,GAAG,EAAE,CAAC;AAAC,EAAA,eAAe,EAAf;AAAD,CAAD,CAAzB","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { ENGINE } from '../engine';\r\nimport { BatchToSpaceND } from '../kernel_names';\r\nimport { convertToTensor } from '../tensor_util_env';\r\nimport * as util from '../util';\r\nimport { op } from './operation';\r\n/**\r\n * This operation reshapes the \"batch\" dimension 0 into `M + 1` dimensions of\r\n * shape `blockShape + [batch]`, interleaves these blocks back into the grid\r\n * defined by the spatial dimensions `[1, ..., M]`, to obtain a result with\r\n * the same rank as the input. The spatial dimensions of this intermediate\r\n * result are then optionally cropped according to `crops` to produce the\r\n * output. This is the reverse of `tf.spaceToBatchND`. See below for a precise\r\n * description.\r\n *\r\n * ```js\r\n * const x = tf.tensor4d([1, 2, 3, 4], [4, 1, 1, 1]);\r\n * const blockShape = [2, 2];\r\n * const crops = [[0, 0], [0, 0]];\r\n *\r\n * x.batchToSpaceND(blockShape, crops).print();\r\n * ```\r\n *\r\n * @param x A `tf.Tensor`. N-D with `x.shape` = `[batch] + spatialShape +\r\n * remainingShape`, where spatialShape has `M` dimensions.\r\n * @param blockShape A 1-D array. Must have shape `[M]`, all values must\r\n * be >= 1.\r\n * @param crops A 2-D array.  Must have shape `[M, 2]`, all values must be >= 0.\r\n * `crops[i] = [cropStart, cropEnd]` specifies the amount to crop from input\r\n * dimension `i + 1`, which corresponds to spatial dimension `i`. It is required\r\n * that `cropStart[i] + cropEnd[i] <= blockShape[i] * inputShape[i + 1]`\r\n *\r\n * This operation is equivalent to the following steps:\r\n *\r\n * 1. Reshape `x` to `reshaped` of shape: `[blockShape[0], ...,\r\n * blockShape[M-1], batch / prod(blockShape), x.shape[1], ...,\r\n * x.shape[N-1]]`\r\n *\r\n * 2. Permute dimensions of `reshaped`to produce `permuted` of shape `[batch /\r\n * prod(blockShape),x.shape[1], blockShape[0], ..., x.shape[M],\r\n * blockShape[M-1],x.shape[M+1], ..., x.shape[N-1]]`\r\n *\r\n * 3. Reshape `permuted` to produce `reshapedPermuted` of shape `[batch /\r\n * prod(blockShape),x.shape[1] * blockShape[0], ..., x.shape[M] *\r\n * blockShape[M-1],x.shape[M+1], ..., x.shape[N-1]]`\r\n *\r\n * 4. Crop the start and end of dimensions `[1, ..., M]` of `reshapedPermuted`\r\n * according to `crops` to produce the output of shape: `[batch /\r\n * prod(blockShape),x.shape[1] * blockShape[0] - crops[0,0] - crops[0,1],\r\n * ..., x.shape[M] * blockShape[M-1] - crops[M-1,0] -\r\n * crops[M-1,1],x.shape[M+1], ..., x.shape[N-1]]`\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\r\n */\r\nfunction batchToSpaceND_(x, blockShape, crops) {\r\n    const $x = convertToTensor(x, 'x', 'batchToSpaceND');\r\n    const prod = blockShape.reduce((a, b) => a * b);\r\n    util.assert($x.rank >= 1 + blockShape.length, () => `input rank is ${$x.rank} but should be > than blockShape.length ${blockShape.length}`);\r\n    util.assert(crops.length === blockShape.length, () => `crops.length is ${crops.length} but should be equal to blockShape.length  ${blockShape.length}`);\r\n    util.assert($x.shape[0] % prod === 0, () => `input tensor batch is ${$x.shape[0]} but is not divisible by the product of ` +\r\n        `the elements of blockShape ${blockShape.join(' * ')} === ${prod}`);\r\n    const forward = backend => {\r\n        return backend.batchToSpaceND($x, blockShape, crops);\r\n    };\r\n    const inputs = { x: $x };\r\n    const attrs = { blockShape, crops };\r\n    return ENGINE.runKernelFunc(forward, inputs, null /* gradient */, BatchToSpaceND, attrs);\r\n}\r\nexport const batchToSpaceND = op({ batchToSpaceND_ });\r\n//# sourceMappingURL=batch_to_space_nd.js.map"]},"metadata":{},"sourceType":"module"}