{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { buffer } from './buffer';\nimport { op } from './operation';\nimport { MPRandGauss } from './rand_util';\n/**\r\n * Creates a `tf.Tensor` with values sampled from a truncated normal\r\n * distribution.\r\n *\r\n * ```js\r\n * tf.truncatedNormal([2, 2]).print();\r\n * ```\r\n *\r\n * The generated values follow a normal distribution with specified mean and\r\n * standard deviation, except that values whose magnitude is more than 2\r\n * standard deviations from the mean are dropped and re-picked.\r\n *\r\n * @param shape An array of integers defining the output tensor shape.\r\n * @param mean The mean of the normal distribution.\r\n * @param stdDev The standard deviation of the normal distribution.\r\n * @param dtype The data type of the output tensor.\r\n * @param seed The seed for the random number generator.\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Creation'}\r\n */\n\nfunction truncatedNormal_(shape) {\n  var mean = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var stdDev = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  var dtype = arguments.length > 3 ? arguments[3] : undefined;\n  var seed = arguments.length > 4 ? arguments[4] : undefined;\n\n  if (dtype != null && dtype === 'bool') {\n    throw new Error(\"Unsupported data type $ { dtype }\");\n  }\n\n  var randGauss = new MPRandGauss(mean, stdDev, dtype, true\n  /* truncated */\n  , seed);\n  var res = buffer(shape, dtype);\n\n  for (var i = 0; i < res.values.length; i++) {\n    res.values[i] = randGauss.nextValue();\n  }\n\n  return res.toTensor();\n}\n\nexport var truncatedNormal = op({\n  truncatedNormal_: truncatedNormal_\n});","map":{"version":3,"sources":["../../src/ops/truncated_normal.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAKH,SAAQ,MAAR,QAAqB,UAArB;AACA,SAAQ,EAAR,QAAiB,aAAjB;AACA,SAAQ,WAAR,QAA0B,aAA1B;AAEA;;;;;;;;;;;;;;;;;;;AAmBG;;AACH,SAAS,gBAAT,CACI,KADJ,EAEiB;AAAA,MADO,IACP,uEADc,CACd;AAAA,MADiB,MACjB,uEAD0B,CAC1B;AAAA,MAD6B,KAC7B;AAAA,MAAb,IAAa;;AACf,MAAI,KAAK,IAAI,IAAT,IAAkB,KAAkB,KAAK,MAA7C,EAAqD;AACnD,UAAM,IAAI,KAAJ,qCAAN;AACD;;AACD,MAAM,SAAS,GACX,IAAI,WAAJ,CAAgB,IAAhB,EAAsB,MAAtB,EAA8B,KAA9B,EAAqC;AAAK;AAA1C,IAA2D,IAA3D,CADJ;AAEA,MAAM,GAAG,GAAG,MAAM,CAAC,KAAD,EAAQ,KAAR,CAAlB;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,GAAG,CAAC,MAAJ,CAAW,MAA/B,EAAuC,CAAC,EAAxC,EAA4C;AAC1C,IAAA,GAAG,CAAC,MAAJ,CAAW,CAAX,IAAgB,SAAS,CAAC,SAAV,EAAhB;AACD;;AACD,SAAO,GAAG,CAAC,QAAJ,EAAP;AACD;;AAED,OAAO,IAAM,eAAe,GAAG,EAAE,CAAC;AAAC,EAAA,gBAAgB,EAAhB;AAAD,CAAD,CAA1B","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { buffer } from './buffer';\r\nimport { op } from './operation';\r\nimport { MPRandGauss } from './rand_util';\r\n/**\r\n * Creates a `tf.Tensor` with values sampled from a truncated normal\r\n * distribution.\r\n *\r\n * ```js\r\n * tf.truncatedNormal([2, 2]).print();\r\n * ```\r\n *\r\n * The generated values follow a normal distribution with specified mean and\r\n * standard deviation, except that values whose magnitude is more than 2\r\n * standard deviations from the mean are dropped and re-picked.\r\n *\r\n * @param shape An array of integers defining the output tensor shape.\r\n * @param mean The mean of the normal distribution.\r\n * @param stdDev The standard deviation of the normal distribution.\r\n * @param dtype The data type of the output tensor.\r\n * @param seed The seed for the random number generator.\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Creation'}\r\n */\r\nfunction truncatedNormal_(shape, mean = 0, stdDev = 1, dtype, seed) {\r\n    if (dtype != null && dtype === 'bool') {\r\n        throw new Error(`Unsupported data type $ { dtype }`);\r\n    }\r\n    const randGauss = new MPRandGauss(mean, stdDev, dtype, true /* truncated */, seed);\r\n    const res = buffer(shape, dtype);\r\n    for (let i = 0; i < res.values.length; i++) {\r\n        res.values[i] = randGauss.nextValue();\r\n    }\r\n    return res.toTensor();\r\n}\r\nexport const truncatedNormal = op({ truncatedNormal_ });\r\n//# sourceMappingURL=truncated_normal.js.map"]},"metadata":{},"sourceType":"module"}