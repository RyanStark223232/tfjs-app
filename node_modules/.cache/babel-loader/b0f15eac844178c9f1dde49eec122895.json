{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { Cast } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\r\n * Casts a `tf.Tensor` to a new dtype.\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([1.5, 2.5, 3]);\r\n * tf.cast(x, 'int32').print();\r\n * ```\r\n * @param x The input tensor to be casted.\r\n * @param dtype The dtype to cast the input tensor to.\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\r\n */\n\nfunction cast_(x, dtype) {\n  const $x = convertToTensor(x, 'x', 'cast'); // Sanity checks.\n\n  if (!util.isValidDtype(dtype)) {\n    throw new Error(`Failed to cast to unknown dtype ${dtype}`);\n  }\n\n  if (dtype === 'string' && $x.dtype !== 'string' || dtype !== 'string' && $x.dtype === 'string') {\n    throw new Error('Only strings can be casted to strings');\n  }\n\n  const inputs = {\n    x: $x\n  };\n  const attrs = {\n    dtype\n  };\n  return ENGINE.runKernelFunc(backend => backend.cast($x, dtype), inputs, null\n  /* grad */\n  , Cast, attrs);\n}\n\nexport const cast = op({\n  cast_\n});","map":{"version":3,"sources":["../../src/ops/cast.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AACH,SAAQ,MAAR,QAAqB,WAArB;AACA,SAAQ,IAAR,QAA0C,iBAA1C;AAIA,SAAQ,eAAR,QAA8B,oBAA9B;AAEA,OAAO,KAAK,IAAZ,MAAsB,SAAtB;AAEA,SAAQ,EAAR,QAAiB,aAAjB;AAEA;;;;;;;;;;;AAWG;;AACH,SAAS,KAAT,CAAiC,CAAjC,EAAkD,KAAlD,EAAiE;AAC/D,QAAM,EAAE,GAAG,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,MAAT,CAA1B,CAD+D,CAG/D;;AACA,MAAI,CAAC,IAAI,CAAC,YAAL,CAAkB,KAAlB,CAAL,EAA+B;AAC7B,UAAM,IAAI,KAAJ,CAAU,mCAAmC,KAAK,EAAlD,CAAN;AACD;;AACD,MAAI,KAAK,KAAK,QAAV,IAAsB,EAAE,CAAC,KAAH,KAAa,QAAnC,IACA,KAAK,KAAK,QAAV,IAAsB,EAAE,CAAC,KAAH,KAAa,QADvC,EACiD;AAC/C,UAAM,IAAI,KAAJ,CAAU,uCAAV,CAAN;AACD;;AAED,QAAM,MAAM,GAAe;AAAC,IAAA,CAAC,EAAE;AAAJ,GAA3B;AACA,QAAM,KAAK,GAAc;AAAC,IAAA;AAAD,GAAzB;AAEA,SAAO,MAAM,CAAC,aAAP,CACH,OAAO,IAAI,OAAO,CAAC,IAAR,CAAa,EAAb,EAAiB,KAAjB,CADR,EACiC,MADjC,EAEH;AAAK;AAFF,IAEc,IAFd,EAEoB,KAFpB,CAAP;AAGD;;AAED,OAAO,MAAM,IAAI,GAAG,EAAE,CAAC;AAAC,EAAA;AAAD,CAAD,CAAf","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { ENGINE } from '../engine';\r\nimport { Cast } from '../kernel_names';\r\nimport { convertToTensor } from '../tensor_util_env';\r\nimport * as util from '../util';\r\nimport { op } from './operation';\r\n/**\r\n * Casts a `tf.Tensor` to a new dtype.\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([1.5, 2.5, 3]);\r\n * tf.cast(x, 'int32').print();\r\n * ```\r\n * @param x The input tensor to be casted.\r\n * @param dtype The dtype to cast the input tensor to.\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\r\n */\r\nfunction cast_(x, dtype) {\r\n    const $x = convertToTensor(x, 'x', 'cast');\r\n    // Sanity checks.\r\n    if (!util.isValidDtype(dtype)) {\r\n        throw new Error(`Failed to cast to unknown dtype ${dtype}`);\r\n    }\r\n    if (dtype === 'string' && $x.dtype !== 'string' ||\r\n        dtype !== 'string' && $x.dtype === 'string') {\r\n        throw new Error('Only strings can be casted to strings');\r\n    }\r\n    const inputs = { x: $x };\r\n    const attrs = { dtype };\r\n    return ENGINE.runKernelFunc(backend => backend.cast($x, dtype), inputs, null /* grad */, Cast, attrs);\r\n}\r\nexport const cast = op({ cast_ });\r\n//# sourceMappingURL=cast.js.map"]},"metadata":{},"sourceType":"module"}