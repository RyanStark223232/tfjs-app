{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { customGrad } from '../gradients';\nimport { Mean } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { parseAxisParam, sizeFromShape } from '../util';\nimport { computeOutAndReduceShapes } from './axis_util';\nimport { cast } from './cast';\nimport { div } from './div';\nimport { mul } from './mul';\nimport { ones } from './ones';\nimport { op } from './operation';\nimport { reshape } from './reshape';\nimport { scalar } from './scalar';\nimport { sum } from './sum';\n/**\r\n * Computes the mean of elements across dimensions of a `tf.Tensor`.\r\n *\r\n * Reduces `x` along the dimensions given in `axis`. Unless `keepDims` is\r\n * true, the rank of the `tf.Tensor` is reduced by 1 for each entry in `axis`.\r\n * If `keepDims` is true, the reduced dimensions are retained with length 1.\r\n * If `axis` has no entries, all dimensions are reduced, and a `tf.Tensor` with\r\n * a single element is returned.\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([1, 2, 3]);\r\n *\r\n * x.mean().print();  // or tf.mean(a)\r\n * ```\r\n *\r\n * ```js\r\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\r\n *\r\n * const axis = 1;\r\n * x.mean(axis).print();  // or tf.mean(x, axis)\r\n * ```\r\n *\r\n * @param x The input tensor.\r\n * @param axis The dimension(s) to reduce. By default it reduces\r\n *     all dimensions.\r\n * @param keepDims If true, retains reduced dimensions with size 1.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Reduction'}\r\n */\n\nfunction mean_(x) {\n  var axis = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var keepDims = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var $x = convertToTensor(x, 'x', 'mean');\n  var axes = parseAxisParam(axis, $x.shape);\n  var shapes = computeOutAndReduceShapes($x.shape, axes);\n  var reduceShape = shapes[1];\n  var reduceSize = sizeFromShape(reduceShape);\n  var inputs = {\n    x: $x\n  };\n  var attrs = {\n    axis: axis,\n    keepDims: keepDims\n  };\n\n  var forward = function forward() {\n    var reduceSizeScalar = scalar(reduceSize); // Cast if needed.\n\n    var xReduce = reduceSizeScalar.dtype === $x.dtype ? $x : cast($x, reduceSizeScalar.dtype);\n    var res = div(xReduce, reduceSizeScalar);\n    return sum(res, axis, keepDims);\n  }; // Use a custom gradient to bypass 2 gradient backprops since mean is used\n  // extremely often.\n\n\n  var customOp = customGrad(function (x) {\n    var value = ENGINE.runKernelFunc(forward, inputs, null\n    /* grad */\n    , Mean, attrs);\n\n    var gradFunc = function gradFunc(dy) {\n      var expandedDyShape = x.shape.slice();\n      axes.forEach(function (axis) {\n        expandedDyShape[axis] = 1;\n      });\n      var expandedDy = reshape(dy, expandedDyShape);\n      var derX = div(mul(expandedDy, ones(x.shape, 'float32')), reduceSize);\n      return derX;\n    };\n\n    return {\n      value: value,\n      gradFunc: gradFunc\n    };\n  });\n  return customOp($x);\n}\n\nexport var mean = op({\n  mean_: mean_\n});","map":{"version":3,"sources":["../../src/ops/mean.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { ENGINE } from '../engine';\r\nimport { customGrad } from '../gradients';\r\nimport { Mean } from '../kernel_names';\r\nimport { convertToTensor } from '../tensor_util_env';\r\nimport { parseAxisParam, sizeFromShape } from '../util';\r\nimport { computeOutAndReduceShapes } from './axis_util';\r\nimport { cast } from './cast';\r\nimport { div } from './div';\r\nimport { mul } from './mul';\r\nimport { ones } from './ones';\r\nimport { op } from './operation';\r\nimport { reshape } from './reshape';\r\nimport { scalar } from './scalar';\r\nimport { sum } from './sum';\r\n/**\r\n * Computes the mean of elements across dimensions of a `tf.Tensor`.\r\n *\r\n * Reduces `x` along the dimensions given in `axis`. Unless `keepDims` is\r\n * true, the rank of the `tf.Tensor` is reduced by 1 for each entry in `axis`.\r\n * If `keepDims` is true, the reduced dimensions are retained with length 1.\r\n * If `axis` has no entries, all dimensions are reduced, and a `tf.Tensor` with\r\n * a single element is returned.\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([1, 2, 3]);\r\n *\r\n * x.mean().print();  // or tf.mean(a)\r\n * ```\r\n *\r\n * ```js\r\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\r\n *\r\n * const axis = 1;\r\n * x.mean(axis).print();  // or tf.mean(x, axis)\r\n * ```\r\n *\r\n * @param x The input tensor.\r\n * @param axis The dimension(s) to reduce. By default it reduces\r\n *     all dimensions.\r\n * @param keepDims If true, retains reduced dimensions with size 1.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Reduction'}\r\n */\r\nfunction mean_(x, axis = null, keepDims = false) {\r\n    const $x = convertToTensor(x, 'x', 'mean');\r\n    const axes = parseAxisParam(axis, $x.shape);\r\n    const shapes = computeOutAndReduceShapes($x.shape, axes);\r\n    const reduceShape = shapes[1];\r\n    const reduceSize = sizeFromShape(reduceShape);\r\n    const inputs = { x: $x };\r\n    const attrs = { axis, keepDims };\r\n    const forward = () => {\r\n        const reduceSizeScalar = scalar(reduceSize);\r\n        // Cast if needed.\r\n        const xReduce = reduceSizeScalar.dtype === $x.dtype ?\r\n            $x :\r\n            cast($x, reduceSizeScalar.dtype);\r\n        const res = div(xReduce, reduceSizeScalar);\r\n        return sum(res, axis, keepDims);\r\n    };\r\n    // Use a custom gradient to bypass 2 gradient backprops since mean is used\r\n    // extremely often.\r\n    const customOp = customGrad((x) => {\r\n        const value = ENGINE.runKernelFunc(forward, inputs, null /* grad */, Mean, attrs);\r\n        const gradFunc = (dy) => {\r\n            const expandedDyShape = x.shape.slice();\r\n            axes.forEach(axis => {\r\n                expandedDyShape[axis] = 1;\r\n            });\r\n            const expandedDy = reshape(dy, expandedDyShape);\r\n            const derX = div(mul(expandedDy, ones(x.shape, 'float32')), reduceSize);\r\n            return derX;\r\n        };\r\n        return { value, gradFunc };\r\n    });\r\n    return customOp($x);\r\n}\r\nexport const mean = op({ mean_ });\r\n//# sourceMappingURL=mean.js.map"]},"metadata":{},"sourceType":"module"}