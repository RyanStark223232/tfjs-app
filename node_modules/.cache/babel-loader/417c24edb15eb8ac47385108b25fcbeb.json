{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { Sum } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { parseAxisParam } from '../util';\nimport { expandShapeToKeepDim, getAxesPermutation, getInnerMostAxes } from './axis_util';\nimport { cast } from './cast';\nimport { op } from './operation';\nimport { reshape } from './reshape';\nimport { transpose } from './transpose';\n/**\r\n * Computes the sum of elements across dimensions of a `tf.Tensor`.\r\n *\r\n * Reduces the input along the dimensions given in `axes`. Unless `keepDims`\r\n * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in\r\n * `axes`. If `keepDims` is true, the reduced dimensions are retained with\r\n * length 1. If axes has no entries, all dimensions are reduced, and a\r\n * `tf.Tensor` with a single element is returned.\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([1, 2, 3]);\r\n *\r\n * x.sum().print();  // or tf.sum(x)\r\n * ```\r\n *\r\n * ```js\r\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\r\n *\r\n * const axis = 1;\r\n * x.sum(axis).print();  // or tf.sum(x, axis)\r\n * ```\r\n *\r\n * @param x The input tensor to compute the sum over. If the dtype is `bool`\r\n *   it will be converted to `int32` and the output dtype will be `int32`.\r\n * @param axis The dimension(s) to reduce. By default it reduces\r\n *     all dimensions.\r\n * @param keepDims If true, retains reduced dimensions with size 1.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Reduction'}\r\n */\n\nfunction sum_(x) {\n  var axis = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var keepDims = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var $x = convertToTensor(x, 'x', 'sum');\n\n  if ($x.dtype === 'bool') {\n    $x = cast($x, 'int32');\n  }\n\n  var forward = function forward(backend, save) {\n    save([$x]);\n    var axes = parseAxisParam(axis, $x.shape);\n    var permutation = getAxesPermutation(axes, $x.rank);\n    var reductionAxes = axes;\n    var permutedX = $x;\n\n    if (permutation != null) {\n      permutedX = transpose($x, permutation);\n      reductionAxes = getInnerMostAxes(reductionAxes.length, $x.rank);\n    }\n\n    var value = backend.sum(permutedX, reductionAxes);\n\n    if (keepDims) {\n      var newShape = expandShapeToKeepDim(value.shape, axes);\n      value = reshape(value, newShape);\n    }\n\n    return value;\n  };\n\n  var inputs = {\n    x: $x\n  };\n  var attrs = {\n    axis: axis,\n    keepDims: keepDims\n  };\n  return ENGINE.runKernelFunc(forward, inputs, null\n  /* grad */\n  , Sum, attrs);\n}\n\nexport var sum = op({\n  sum_: sum_\n});","map":{"version":3,"sources":["../../src/ops/sum.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AACH,SAAQ,MAAR,QAAkC,WAAlC;AACA,SAAQ,GAAR,QAAuC,iBAAvC;AAIA,SAAQ,eAAR,QAA8B,oBAA9B;AAEA,SAAQ,cAAR,QAA6B,SAA7B;AAEA,SAAQ,oBAAR,EAA8B,kBAA9B,EAAkD,gBAAlD,QAAyE,aAAzE;AACA,SAAQ,IAAR,QAAmB,QAAnB;AACA,SAAQ,EAAR,QAAiB,aAAjB;AACA,SAAQ,OAAR,QAAsB,WAAtB;AACA,SAAQ,SAAR,QAAwB,aAAxB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BG;;AACH,SAAS,IAAT,CACI,CADJ,EACwE;AAAA,MAA9C,IAA8C,uEAAtB,IAAsB;AAAA,MAAhB,QAAgB,uEAAL,KAAK;AACtE,MAAI,EAAE,GAAG,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,KAAT,CAAxB;;AACA,MAAI,EAAE,CAAC,KAAH,KAAa,MAAjB,EAAyB;AACvB,IAAA,EAAE,GAAG,IAAI,CAAC,EAAD,EAAK,OAAL,CAAT;AACD;;AAED,MAAM,OAAO,GAAwB,SAA/B,OAA+B,CAAC,OAAD,EAAU,IAAV,EAAkB;AACrD,IAAA,IAAI,CAAC,CAAC,EAAD,CAAD,CAAJ;AACA,QAAM,IAAI,GAAG,cAAc,CAAC,IAAD,EAAO,EAAE,CAAC,KAAV,CAA3B;AAEA,QAAM,WAAW,GAAG,kBAAkB,CAAC,IAAD,EAAO,EAAE,CAAC,IAAV,CAAtC;AACA,QAAI,aAAa,GAAG,IAApB;AACA,QAAI,SAAS,GAAG,EAAhB;;AACA,QAAI,WAAW,IAAI,IAAnB,EAAyB;AACvB,MAAA,SAAS,GAAG,SAAS,CAAC,EAAD,EAAK,WAAL,CAArB;AACA,MAAA,aAAa,GAAG,gBAAgB,CAAC,aAAa,CAAC,MAAf,EAAuB,EAAE,CAAC,IAA1B,CAAhC;AACD;;AACD,QAAI,KAAK,GAAG,OAAO,CAAC,GAAR,CAAY,SAAZ,EAAuB,aAAvB,CAAZ;;AACA,QAAI,QAAJ,EAAc;AACZ,UAAM,QAAQ,GAAG,oBAAoB,CAAC,KAAK,CAAC,KAAP,EAAc,IAAd,CAArC;AACA,MAAA,KAAK,GAAG,OAAO,CAAC,KAAD,EAAQ,QAAR,CAAf;AACD;;AACD,WAAO,KAAP;AACD,GAjBD;;AAmBA,MAAM,MAAM,GAAc;AAAC,IAAA,CAAC,EAAE;AAAJ,GAA1B;AACA,MAAM,KAAK,GAAa;AAAC,IAAA,IAAI,EAAJ,IAAD;AAAO,IAAA,QAAQ,EAAR;AAAP,GAAxB;AAEA,SAAO,MAAM,CAAC,aAAP,CACI,OADJ,EACa,MADb,EAC6C;AAAK;AADlD,IAC8D,GAD9D,EAEI,KAFJ,CAAP;AAGD;;AAED,OAAO,IAAM,GAAG,GAAG,EAAE,CAAC;AAAC,EAAA,IAAI,EAAJ;AAAD,CAAD,CAAd","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { ENGINE } from '../engine';\r\nimport { Sum } from '../kernel_names';\r\nimport { convertToTensor } from '../tensor_util_env';\r\nimport { parseAxisParam } from '../util';\r\nimport { expandShapeToKeepDim, getAxesPermutation, getInnerMostAxes } from './axis_util';\r\nimport { cast } from './cast';\r\nimport { op } from './operation';\r\nimport { reshape } from './reshape';\r\nimport { transpose } from './transpose';\r\n/**\r\n * Computes the sum of elements across dimensions of a `tf.Tensor`.\r\n *\r\n * Reduces the input along the dimensions given in `axes`. Unless `keepDims`\r\n * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in\r\n * `axes`. If `keepDims` is true, the reduced dimensions are retained with\r\n * length 1. If axes has no entries, all dimensions are reduced, and a\r\n * `tf.Tensor` with a single element is returned.\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([1, 2, 3]);\r\n *\r\n * x.sum().print();  // or tf.sum(x)\r\n * ```\r\n *\r\n * ```js\r\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\r\n *\r\n * const axis = 1;\r\n * x.sum(axis).print();  // or tf.sum(x, axis)\r\n * ```\r\n *\r\n * @param x The input tensor to compute the sum over. If the dtype is `bool`\r\n *   it will be converted to `int32` and the output dtype will be `int32`.\r\n * @param axis The dimension(s) to reduce. By default it reduces\r\n *     all dimensions.\r\n * @param keepDims If true, retains reduced dimensions with size 1.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Reduction'}\r\n */\r\nfunction sum_(x, axis = null, keepDims = false) {\r\n    let $x = convertToTensor(x, 'x', 'sum');\r\n    if ($x.dtype === 'bool') {\r\n        $x = cast($x, 'int32');\r\n    }\r\n    const forward = (backend, save) => {\r\n        save([$x]);\r\n        const axes = parseAxisParam(axis, $x.shape);\r\n        const permutation = getAxesPermutation(axes, $x.rank);\r\n        let reductionAxes = axes;\r\n        let permutedX = $x;\r\n        if (permutation != null) {\r\n            permutedX = transpose($x, permutation);\r\n            reductionAxes = getInnerMostAxes(reductionAxes.length, $x.rank);\r\n        }\r\n        let value = backend.sum(permutedX, reductionAxes);\r\n        if (keepDims) {\r\n            const newShape = expandShapeToKeepDim(value.shape, axes);\r\n            value = reshape(value, newShape);\r\n        }\r\n        return value;\r\n    };\r\n    const inputs = { x: $x };\r\n    const attrs = { axis, keepDims };\r\n    return ENGINE.runKernelFunc(forward, inputs, null /* grad */, Sum, attrs);\r\n}\r\nexport const sum = op({ sum_ });\r\n//# sourceMappingURL=sum.js.map"]},"metadata":{},"sourceType":"module"}