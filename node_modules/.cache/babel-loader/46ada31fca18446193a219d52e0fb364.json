{"ast":null,"code":"import { deepForEach } from '../../utils/collection';\nimport { factory } from '../../utils/factory';\nvar name = 'multinomial';\nvar dependencies = ['typed', 'add', 'divide', 'multiply', 'factorial', 'isInteger', 'isPositive'];\nexport var createMultinomial = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      add = _ref.add,\n      divide = _ref.divide,\n      multiply = _ref.multiply,\n      factorial = _ref.factorial,\n      isInteger = _ref.isInteger,\n      isPositive = _ref.isPositive;\n  /**\r\n   * Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities.\r\n   *\r\n   * multinomial takes one array of integers as an argument.\r\n   * The following condition must be enforced: every ai <= 0\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.multinomial(a) // a is an array type\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.multinomial([1,2,1]) // returns 12\r\n   *\r\n   * See also:\r\n   *\r\n   *    combinations, factorial\r\n   *\r\n   * @param {number[] | BigNumber[]} a    Integer numbers of objects in the subset\r\n   * @return {Number | BigNumber}         Multinomial coefficient.\r\n   */\n\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(a) {\n      var sum = 0;\n      var denom = 1;\n      deepForEach(a, function (ai) {\n        if (!isInteger(ai) || !isPositive(ai)) {\n          throw new TypeError('Positive integer value expected in function multinomial');\n        }\n\n        sum = add(sum, ai);\n        denom = multiply(denom, factorial(ai));\n      });\n      return divide(factorial(sum), denom);\n    }\n  });\n});","map":{"version":3,"sources":["C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/mathjs/es/function/probability/multinomial.js"],"names":["deepForEach","factory","name","dependencies","createMultinomial","_ref","typed","add","divide","multiply","factorial","isInteger","isPositive","ArrayMatrix","a","sum","denom","ai","TypeError"],"mappings":"AAAA,SAASA,WAAT,QAA4B,wBAA5B;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,IAAIC,IAAI,GAAG,aAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,KAAV,EAAiB,QAAjB,EAA2B,UAA3B,EAAuC,WAAvC,EAAoD,WAApD,EAAiE,YAAjE,CAAnB;AACA,OAAO,IAAIC,iBAAiB,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AACxF,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAAA,MACIC,GAAG,GAAGF,IAAI,CAACE,GADf;AAAA,MAEIC,MAAM,GAAGH,IAAI,CAACG,MAFlB;AAAA,MAGIC,QAAQ,GAAGJ,IAAI,CAACI,QAHpB;AAAA,MAIIC,SAAS,GAAGL,IAAI,CAACK,SAJrB;AAAA,MAKIC,SAAS,GAAGN,IAAI,CAACM,SALrB;AAAA,MAMIC,UAAU,GAAGP,IAAI,CAACO,UANtB;AAQA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAON,KAAK,CAACJ,IAAD,EAAO;AACjB,sBAAkB,SAASW,WAAT,CAAqBC,CAArB,EAAwB;AACxC,UAAIC,GAAG,GAAG,CAAV;AACA,UAAIC,KAAK,GAAG,CAAZ;AACAhB,MAAAA,WAAW,CAACc,CAAD,EAAI,UAAUG,EAAV,EAAc;AAC3B,YAAI,CAACN,SAAS,CAACM,EAAD,CAAV,IAAkB,CAACL,UAAU,CAACK,EAAD,CAAjC,EAAuC;AACrC,gBAAM,IAAIC,SAAJ,CAAc,yDAAd,CAAN;AACD;;AAEDH,QAAAA,GAAG,GAAGR,GAAG,CAACQ,GAAD,EAAME,EAAN,CAAT;AACAD,QAAAA,KAAK,GAAGP,QAAQ,CAACO,KAAD,EAAQN,SAAS,CAACO,EAAD,CAAjB,CAAhB;AACD,OAPU,CAAX;AAQA,aAAOT,MAAM,CAACE,SAAS,CAACK,GAAD,CAAV,EAAiBC,KAAjB,CAAb;AACD;AAbgB,GAAP,CAAZ;AAeD,CA7CoD,CAA9C","sourcesContent":["import { deepForEach } from '../../utils/collection';\r\nimport { factory } from '../../utils/factory';\r\nvar name = 'multinomial';\r\nvar dependencies = ['typed', 'add', 'divide', 'multiply', 'factorial', 'isInteger', 'isPositive'];\r\nexport var createMultinomial = /* #__PURE__ */factory(name, dependencies, function (_ref) {\r\n  var typed = _ref.typed,\r\n      add = _ref.add,\r\n      divide = _ref.divide,\r\n      multiply = _ref.multiply,\r\n      factorial = _ref.factorial,\r\n      isInteger = _ref.isInteger,\r\n      isPositive = _ref.isPositive;\r\n\r\n  /**\r\n   * Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities.\r\n   *\r\n   * multinomial takes one array of integers as an argument.\r\n   * The following condition must be enforced: every ai <= 0\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.multinomial(a) // a is an array type\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.multinomial([1,2,1]) // returns 12\r\n   *\r\n   * See also:\r\n   *\r\n   *    combinations, factorial\r\n   *\r\n   * @param {number[] | BigNumber[]} a    Integer numbers of objects in the subset\r\n   * @return {Number | BigNumber}         Multinomial coefficient.\r\n   */\r\n  return typed(name, {\r\n    'Array | Matrix': function ArrayMatrix(a) {\r\n      var sum = 0;\r\n      var denom = 1;\r\n      deepForEach(a, function (ai) {\r\n        if (!isInteger(ai) || !isPositive(ai)) {\r\n          throw new TypeError('Positive integer value expected in function multinomial');\r\n        }\r\n\r\n        sum = add(sum, ai);\r\n        denom = multiply(denom, factorial(ai));\r\n      });\r\n      return divide(factorial(sum), denom);\r\n    }\r\n  });\r\n});"]},"metadata":{},"sourceType":"module"}