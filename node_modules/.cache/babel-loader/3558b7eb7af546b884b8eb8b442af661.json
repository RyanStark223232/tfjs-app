{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { DepthwiseConv2dNativeBackpropInput } from '../kernel_names';\nimport * as conv_util from './conv_util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n\nfunction depthwiseConv2dNativeBackpropInput_(xShape, dy, filter, strides, pad) {\n  var dilations = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [1, 1];\n  var dimRoundingMode = arguments.length > 6 ? arguments[6] : undefined;\n  var dy4D = dy;\n  var reshapedTo4D = false;\n\n  if (dy.rank === 3) {\n    reshapedTo4D = true;\n    dy4D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2]]);\n  }\n\n  var forward = function forward(backend) {\n    var convInfo = conv_util.computeConv2DInfo(xShape, filter.shape, strides, dilations, pad, dimRoundingMode, true\n    /* depthwise */\n    );\n    return backend.depthwiseConv2DDerInput(dy4D, filter, convInfo);\n  };\n\n  var inputs = {\n    dy: dy4D,\n    filter: filter\n  };\n  var attrs = {\n    strides: strides,\n    pad: pad,\n    dimRoundingMode: dimRoundingMode,\n    dilations: dilations,\n    inputShape: xShape\n  };\n  var res = ENGINE.runKernelFunc(forward, inputs, null, DepthwiseConv2dNativeBackpropInput, attrs);\n\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n  }\n\n  return res;\n}\n\nexport var depthwiseConv2dNativeBackpropInput = op({\n  depthwiseConv2dNativeBackpropInput_: depthwiseConv2dNativeBackpropInput_\n});","map":{"version":3,"sources":["../../src/ops/depthwise_conv2d_native_backprop_input.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AACH,SAAQ,MAAR,QAAkC,WAAlC;AACA,SAAQ,kCAAR,QAAoI,iBAApI;AAKA,OAAO,KAAK,SAAZ,MAA2B,aAA3B;AACA,SAAQ,EAAR,QAAiB,aAAjB;AACA,SAAQ,OAAR,QAAsB,WAAtB;;AAEA,SAAS,mCAAT,CACI,MADJ,EAC8C,EAD9C,EACqD,MADrD,EAEI,OAFJ,EAEsC,GAFtC,EAI4C;AAAA,MADxC,SACwC,uEADH,CAAC,CAAD,EAAI,CAAJ,CACG;AAAA,MAAxC,eAAwC;AAC1C,MAAI,IAAI,GAAG,EAAX;AACA,MAAI,YAAY,GAAG,KAAnB;;AACA,MAAI,EAAE,CAAC,IAAH,KAAY,CAAhB,EAAmB;AACjB,IAAA,YAAY,GAAG,IAAf;AACA,IAAA,IAAI,GAAG,OAAO,CAAC,EAAD,EAAK,CAAC,CAAD,EAAI,EAAE,CAAC,KAAH,CAAS,CAAT,CAAJ,EAAiB,EAAE,CAAC,KAAH,CAAS,CAAT,CAAjB,EAA8B,EAAE,CAAC,KAAH,CAAS,CAAT,CAA9B,CAAL,CAAd;AACD;;AAED,MAAM,OAAO,GAAwB,SAA/B,OAA+B,CAAA,OAAO,EAAG;AAC7C,QAAM,QAAQ,GAAG,SAAS,CAAC,iBAAV,CACb,MADa,EACL,MAAM,CAAC,KADF,EACS,OADT,EACkB,SADlB,EAC6B,GAD7B,EACkC,eADlC,EAEb;AAAK;AAFQ,KAAjB;AAIA,WAAO,OAAO,CAAC,uBAAR,CAAgC,IAAhC,EAAsC,MAAtC,EAA8C,QAA9C,CAAP;AACD,GAND;;AAQA,MAAM,MAAM,GAA6C;AAAC,IAAA,EAAE,EAAE,IAAL;AAAW,IAAA,MAAM,EAAN;AAAX,GAAzD;AACA,MAAM,KAAK,GACP;AAAC,IAAA,OAAO,EAAP,OAAD;AAAU,IAAA,GAAG,EAAH,GAAV;AAAe,IAAA,eAAe,EAAf,eAAf;AAAgC,IAAA,SAAS,EAAT,SAAhC;AAA2C,IAAA,UAAU,EAAE;AAAvD,GADJ;AAEA,MAAM,GAAG,GAAG,MAAM,CAAC,aAAP,CACR,OADQ,EACC,MADD,EACiC,IADjC,EAER,kCAFQ,EAE4B,KAF5B,CAAZ;;AAIA,MAAI,YAAJ,EAAkB;AAChB,WAAO,OAAO,CAAC,GAAD,EAAM,CAAC,GAAG,CAAC,KAAJ,CAAU,CAAV,CAAD,EAAe,GAAG,CAAC,KAAJ,CAAU,CAAV,CAAf,EAA6B,GAAG,CAAC,KAAJ,CAAU,CAAV,CAA7B,CAAN,CAAd;AACD;;AACD,SAAO,GAAP;AACD;;AAED,OAAO,IAAM,kCAAkC,GAC3C,EAAE,CAAC;AAAC,EAAA,mCAAmC,EAAnC;AAAD,CAAD,CADC","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { ENGINE } from '../engine';\r\nimport { DepthwiseConv2dNativeBackpropInput } from '../kernel_names';\r\nimport * as conv_util from './conv_util';\r\nimport { op } from './operation';\r\nimport { reshape } from './reshape';\r\nfunction depthwiseConv2dNativeBackpropInput_(xShape, dy, filter, strides, pad, dilations = [1, 1], dimRoundingMode) {\r\n    let dy4D = dy;\r\n    let reshapedTo4D = false;\r\n    if (dy.rank === 3) {\r\n        reshapedTo4D = true;\r\n        dy4D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2]]);\r\n    }\r\n    const forward = backend => {\r\n        const convInfo = conv_util.computeConv2DInfo(xShape, filter.shape, strides, dilations, pad, dimRoundingMode, true /* depthwise */);\r\n        return backend.depthwiseConv2DDerInput(dy4D, filter, convInfo);\r\n    };\r\n    const inputs = { dy: dy4D, filter };\r\n    const attrs = { strides, pad, dimRoundingMode, dilations, inputShape: xShape };\r\n    const res = ENGINE.runKernelFunc(forward, inputs, null, DepthwiseConv2dNativeBackpropInput, attrs);\r\n    if (reshapedTo4D) {\r\n        return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\r\n    }\r\n    return res;\r\n}\r\nexport const depthwiseConv2dNativeBackpropInput = op({ depthwiseConv2dNativeBackpropInput_ });\r\n//# sourceMappingURL=depthwise_conv2d_native_backprop_input.js.map"]},"metadata":{},"sourceType":"module"}