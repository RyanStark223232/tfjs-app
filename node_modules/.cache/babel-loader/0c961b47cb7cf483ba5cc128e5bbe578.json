{"ast":null,"code":"import { isBigNumber, isNumber } from '../../utils/is';\nimport { errorTransform } from './utils/errorTransform';\nimport { factory } from '../../utils/factory';\nimport { createConcat } from '../../function/matrix/concat';\nvar name = 'concat';\nvar dependencies = ['typed', 'matrix', 'isInteger'];\nexport var createConcatTransform = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      isInteger = _ref.isInteger;\n  var concat = createConcat({\n    typed: typed,\n    matrix: matrix,\n    isInteger: isInteger\n  });\n  /**\r\n   * Attach a transform function to math.range\r\n   * Adds a property transform containing the transform function.\r\n   *\r\n   * This transform changed the last `dim` parameter of function concat\r\n   * from one-based to zero based\r\n   */\n\n  return typed('concat', {\n    '...any': function any(args) {\n      // change last argument from one-based to zero-based\n      var lastIndex = args.length - 1;\n      var last = args[lastIndex];\n\n      if (isNumber(last)) {\n        args[lastIndex] = last - 1;\n      } else if (isBigNumber(last)) {\n        args[lastIndex] = last.minus(1);\n      }\n\n      try {\n        return concat.apply(null, args);\n      } catch (err) {\n        throw errorTransform(err);\n      }\n    }\n  });\n}, {\n  isTransformFunction: true\n});","map":{"version":3,"sources":["C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/mathjs/es/expression/transform/concat.transform.js"],"names":["isBigNumber","isNumber","errorTransform","factory","createConcat","name","dependencies","createConcatTransform","_ref","typed","matrix","isInteger","concat","any","args","lastIndex","length","last","minus","apply","err","isTransformFunction"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,gBAAtC;AACA,SAASC,cAAT,QAA+B,wBAA/B;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,SAASC,YAAT,QAA6B,8BAA7B;AACA,IAAIC,IAAI,GAAG,QAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,WAApB,CAAnB;AACA,OAAO,IAAIC,qBAAqB,GAAG,eAAeJ,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AAC5F,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAAA,MACIC,MAAM,GAAGF,IAAI,CAACE,MADlB;AAAA,MAEIC,SAAS,GAAGH,IAAI,CAACG,SAFrB;AAGA,MAAIC,MAAM,GAAGR,YAAY,CAAC;AACxBK,IAAAA,KAAK,EAAEA,KADiB;AAExBC,IAAAA,MAAM,EAAEA,MAFgB;AAGxBC,IAAAA,SAAS,EAAEA;AAHa,GAAD,CAAzB;AAKA;AACF;AACA;AACA;AACA;AACA;AACA;;AAEE,SAAOF,KAAK,CAAC,QAAD,EAAW;AACrB,cAAU,SAASI,GAAT,CAAaC,IAAb,EAAmB;AAC3B;AACA,UAAIC,SAAS,GAAGD,IAAI,CAACE,MAAL,GAAc,CAA9B;AACA,UAAIC,IAAI,GAAGH,IAAI,CAACC,SAAD,CAAf;;AAEA,UAAId,QAAQ,CAACgB,IAAD,CAAZ,EAAoB;AAClBH,QAAAA,IAAI,CAACC,SAAD,CAAJ,GAAkBE,IAAI,GAAG,CAAzB;AACD,OAFD,MAEO,IAAIjB,WAAW,CAACiB,IAAD,CAAf,EAAuB;AAC5BH,QAAAA,IAAI,CAACC,SAAD,CAAJ,GAAkBE,IAAI,CAACC,KAAL,CAAW,CAAX,CAAlB;AACD;;AAED,UAAI;AACF,eAAON,MAAM,CAACO,KAAP,CAAa,IAAb,EAAmBL,IAAnB,CAAP;AACD,OAFD,CAEE,OAAOM,GAAP,EAAY;AACZ,cAAMlB,cAAc,CAACkB,GAAD,CAApB;AACD;AACF;AAjBoB,GAAX,CAAZ;AAmBD,CApCwD,EAoCtD;AACDC,EAAAA,mBAAmB,EAAE;AADpB,CApCsD,CAAlD","sourcesContent":["import { isBigNumber, isNumber } from '../../utils/is';\r\nimport { errorTransform } from './utils/errorTransform';\r\nimport { factory } from '../../utils/factory';\r\nimport { createConcat } from '../../function/matrix/concat';\r\nvar name = 'concat';\r\nvar dependencies = ['typed', 'matrix', 'isInteger'];\r\nexport var createConcatTransform = /* #__PURE__ */factory(name, dependencies, function (_ref) {\r\n  var typed = _ref.typed,\r\n      matrix = _ref.matrix,\r\n      isInteger = _ref.isInteger;\r\n  var concat = createConcat({\r\n    typed: typed,\r\n    matrix: matrix,\r\n    isInteger: isInteger\r\n  });\r\n  /**\r\n   * Attach a transform function to math.range\r\n   * Adds a property transform containing the transform function.\r\n   *\r\n   * This transform changed the last `dim` parameter of function concat\r\n   * from one-based to zero based\r\n   */\r\n\r\n  return typed('concat', {\r\n    '...any': function any(args) {\r\n      // change last argument from one-based to zero-based\r\n      var lastIndex = args.length - 1;\r\n      var last = args[lastIndex];\r\n\r\n      if (isNumber(last)) {\r\n        args[lastIndex] = last - 1;\r\n      } else if (isBigNumber(last)) {\r\n        args[lastIndex] = last.minus(1);\r\n      }\r\n\r\n      try {\r\n        return concat.apply(null, args);\r\n      } catch (err) {\r\n        throw errorTransform(err);\r\n      }\r\n    }\r\n  });\r\n}, {\r\n  isTransformFunction: true\r\n});"]},"metadata":{},"sourceType":"module"}