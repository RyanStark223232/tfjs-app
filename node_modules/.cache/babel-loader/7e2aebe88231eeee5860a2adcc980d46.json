{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { nonMaxSuppressionV3Impl } from '../../backends/non_max_suppression_impl';\nimport { convertToTensor } from '../../tensor_util_env';\nimport { nonMaxSuppSanityCheck } from '../nonmax_util';\n/**\r\n * Performs non maximum suppression of bounding boxes based on\r\n * iou (intersection over union).\r\n *\r\n * This is the async version of `nonMaxSuppression`\r\n *\r\n * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is\r\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of\r\n *     the bounding box.\r\n * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.\r\n * @param maxOutputSize The maximum number of boxes to be selected.\r\n * @param iouThreshold A float representing the threshold for deciding whether\r\n *     boxes overlap too much with respect to IOU. Must be between [0, 1].\r\n *     Defaults to 0.5 (50% box overlap).\r\n * @param scoreThreshold A threshold for deciding when to remove boxes based\r\n *     on score. Defaults to -inf, which means any score is accepted.\r\n * @return A 1D tensor with the selected box indices.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\r\n */\n\nasync function nonMaxSuppressionAsync_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY) {\n  const $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppressionAsync');\n  const $scores = convertToTensor(scores, 'scores', 'nonMaxSuppressionAsync');\n  const inputs = nonMaxSuppSanityCheck($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold);\n  maxOutputSize = inputs.maxOutputSize;\n  iouThreshold = inputs.iouThreshold;\n  scoreThreshold = inputs.scoreThreshold;\n  const boxesAndScores = await Promise.all([$boxes.data(), $scores.data()]);\n  const boxesVals = boxesAndScores[0];\n  const scoresVals = boxesAndScores[1]; // We call a cpu based impl directly with the typedarray data  here rather\n  // than a kernel because all kernels are synchronous (and thus cannot await\n  // .data()).\n\n  const res = nonMaxSuppressionV3Impl(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n\n  if ($boxes !== boxes) {\n    $boxes.dispose();\n  }\n\n  if ($scores !== scores) {\n    $scores.dispose();\n  }\n\n  return res;\n}\n\nexport const nonMaxSuppressionAsync = nonMaxSuppressionAsync_;","map":{"version":3,"sources":["../../../src/ops/image/non_max_suppression_async.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,uBAAR,QAAsC,yCAAtC;AAEA,SAAQ,eAAR,QAA8B,uBAA9B;AAEA,SAAQ,qBAAR,QAAoC,gBAApC;AAEA;;;;;;;;;;;;;;;;;;;AAmBG;;AACH,eAAe,uBAAf,CACI,KADJ,EACgC,MADhC,EAEI,aAFJ,EAE2B,YAAY,GAAG,GAF1C,EAGI,cAAc,GAAG,MAAM,CAAC,iBAH5B,EAG6C;AAC3C,QAAM,MAAM,GAAG,eAAe,CAAC,KAAD,EAAQ,OAAR,EAAiB,wBAAjB,CAA9B;AACA,QAAM,OAAO,GAAG,eAAe,CAAC,MAAD,EAAS,QAAT,EAAmB,wBAAnB,CAA/B;AAEA,QAAM,MAAM,GAAG,qBAAqB,CAChC,MADgC,EACxB,OADwB,EACf,aADe,EACA,YADA,EACc,cADd,CAApC;AAEA,EAAA,aAAa,GAAG,MAAM,CAAC,aAAvB;AACA,EAAA,YAAY,GAAG,MAAM,CAAC,YAAtB;AACA,EAAA,cAAc,GAAG,MAAM,CAAC,cAAxB;AAEA,QAAM,cAAc,GAAG,MAAM,OAAO,CAAC,GAAR,CAAY,CAAC,MAAM,CAAC,IAAP,EAAD,EAAgB,OAAO,CAAC,IAAR,EAAhB,CAAZ,CAA7B;AACA,QAAM,SAAS,GAAG,cAAc,CAAC,CAAD,CAAhC;AACA,QAAM,UAAU,GAAG,cAAc,CAAC,CAAD,CAAjC,CAZ2C,CAc3C;AACA;AACA;;AACA,QAAM,GAAG,GAAG,uBAAuB,CAC/B,SAD+B,EACpB,UADoB,EACR,aADQ,EACO,YADP,EACqB,cADrB,CAAnC;;AAEA,MAAI,MAAM,KAAK,KAAf,EAAsB;AACpB,IAAA,MAAM,CAAC,OAAP;AACD;;AACD,MAAI,OAAO,KAAK,MAAhB,EAAwB;AACtB,IAAA,OAAO,CAAC,OAAR;AACD;;AACD,SAAO,GAAP;AACD;;AAED,OAAO,MAAM,sBAAsB,GAAG,uBAA/B","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { nonMaxSuppressionV3Impl } from '../../backends/non_max_suppression_impl';\r\nimport { convertToTensor } from '../../tensor_util_env';\r\nimport { nonMaxSuppSanityCheck } from '../nonmax_util';\r\n/**\r\n * Performs non maximum suppression of bounding boxes based on\r\n * iou (intersection over union).\r\n *\r\n * This is the async version of `nonMaxSuppression`\r\n *\r\n * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is\r\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of\r\n *     the bounding box.\r\n * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.\r\n * @param maxOutputSize The maximum number of boxes to be selected.\r\n * @param iouThreshold A float representing the threshold for deciding whether\r\n *     boxes overlap too much with respect to IOU. Must be between [0, 1].\r\n *     Defaults to 0.5 (50% box overlap).\r\n * @param scoreThreshold A threshold for deciding when to remove boxes based\r\n *     on score. Defaults to -inf, which means any score is accepted.\r\n * @return A 1D tensor with the selected box indices.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\r\n */\r\nasync function nonMaxSuppressionAsync_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY) {\r\n    const $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppressionAsync');\r\n    const $scores = convertToTensor(scores, 'scores', 'nonMaxSuppressionAsync');\r\n    const inputs = nonMaxSuppSanityCheck($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold);\r\n    maxOutputSize = inputs.maxOutputSize;\r\n    iouThreshold = inputs.iouThreshold;\r\n    scoreThreshold = inputs.scoreThreshold;\r\n    const boxesAndScores = await Promise.all([$boxes.data(), $scores.data()]);\r\n    const boxesVals = boxesAndScores[0];\r\n    const scoresVals = boxesAndScores[1];\r\n    // We call a cpu based impl directly with the typedarray data  here rather\r\n    // than a kernel because all kernels are synchronous (and thus cannot await\r\n    // .data()).\r\n    const res = nonMaxSuppressionV3Impl(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\r\n    if ($boxes !== boxes) {\r\n        $boxes.dispose();\r\n    }\r\n    if ($scores !== scores) {\r\n        $scores.dispose();\r\n    }\r\n    return res;\r\n}\r\nexport const nonMaxSuppressionAsync = nonMaxSuppressionAsync_;\r\n//# sourceMappingURL=non_max_suppression_async.js.map"]},"metadata":{},"sourceType":"module"}