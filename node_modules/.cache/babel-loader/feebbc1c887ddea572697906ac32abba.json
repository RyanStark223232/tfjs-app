{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { GatherNd } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\r\n * Gather slices from input tensor into a Tensor with shape specified by\r\n * `indices`.\r\n *\r\n * `indices` is an K-dimensional integer tensor, best thought of as a\r\n * (K-1)-dimensional tensor of indices into input, where each element defines a\r\n * slice of input:\r\n * output[\\\\(i_0, ..., i_{K-2}\\\\)] = input[indices[\\\\(i_0, ..., i_{K-2}\\\\)]]\r\n *\r\n * Whereas in `tf.gather`, `indices` defines slices into the first dimension of\r\n * input, in `tf.gatherND`, `indices` defines slices into the first N dimensions\r\n * of input, where N = indices.shape[-1].\r\n *\r\n * The last dimension of indices can be at most the rank of input:\r\n * indices.shape[-1] <= input.rank\r\n *\r\n * The last dimension of `indices` corresponds to elements\r\n * (if indices.shape[-1] == input.rank) or slices\r\n * (if indices.shape[-1] < input.rank) along dimension indices.shape[-1] of\r\n * input.\r\n * The output tensor has shape\r\n * indices.shape[:-1] + input.shape[indices.shape[-1]:]\r\n *\r\n * Note that on CPU, if an out of bound index is found, an error is returned. On\r\n * GPU, if an out of bound index is found, a 0 is stored in the corresponding\r\n * output value.\r\n *\r\n * ```js\r\n * const indices = tf.tensor2d([0, 1, 1, 0], [2,2], 'int32');\r\n * const input = tf.tensor2d([9, 10, 11, 12], [2, 2]);\r\n * tf.gatherND(input, indices).print() // [10, 11]\r\n * ```\r\n *\r\n * @param x The tensor from which to gather values.\r\n * @param indices Index tensor, must be of type int32.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Slicing and Joining'}\r\n */\n\nfunction gatherND_(x, indices) {\n  var $indices = convertToTensor(indices, 'indices', 'gatherND', 'int32');\n  var $x = convertToTensor(x, 'x', 'gatherND');\n\n  var forward = function forward(backend) {\n    return backend.gatherND($x, $indices);\n  };\n\n  var inputs = {\n    params: $x,\n    indices: $indices\n  };\n  return ENGINE.runKernelFunc(forward, inputs, null\n  /* gradient */\n  , GatherNd);\n}\n\nexport var gatherND = op({\n  gatherND_: gatherND_\n});","map":{"version":3,"sources":["../../src/ops/gather_nd.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AACH,SAAQ,MAAR,QAAkC,WAAlC;AACA,SAAQ,QAAR,QAAuC,iBAAvC;AAGA,SAAQ,eAAR,QAA8B,oBAA9B;AAEA,SAAQ,EAAR,QAAiB,aAAjB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCG;;AACH,SAAS,SAAT,CAAmB,CAAnB,EAAyC,OAAzC,EAAmE;AACjE,MAAM,QAAQ,GAAG,eAAe,CAAC,OAAD,EAAU,SAAV,EAAqB,UAArB,EAAiC,OAAjC,CAAhC;AACA,MAAM,EAAE,GAAG,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,UAAT,CAA1B;;AAEA,MAAM,OAAO,GAAwB,SAA/B,OAA+B,CAAC,OAAD,EAAY;AAC/C,WAAO,OAAO,CAAC,QAAR,CAAiB,EAAjB,EAAqB,QAArB,CAAP;AACD,GAFD;;AAIA,MAAM,MAAM,GAAmB;AAAC,IAAA,MAAM,EAAE,EAAT;AAAa,IAAA,OAAO,EAAE;AAAtB,GAA/B;AAEA,SAAO,MAAM,CAAC,aAAP,CACH,OADG,EACM,MADN,EACsC;AAAK;AAD3C,IAC2D,QAD3D,CAAP;AAED;;AAED,OAAO,IAAM,QAAQ,GAAG,EAAE,CAAC;AAAC,EAAA,SAAS,EAAT;AAAD,CAAD,CAAnB","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { ENGINE } from '../engine';\r\nimport { GatherNd } from '../kernel_names';\r\nimport { convertToTensor } from '../tensor_util_env';\r\nimport { op } from './operation';\r\n/**\r\n * Gather slices from input tensor into a Tensor with shape specified by\r\n * `indices`.\r\n *\r\n * `indices` is an K-dimensional integer tensor, best thought of as a\r\n * (K-1)-dimensional tensor of indices into input, where each element defines a\r\n * slice of input:\r\n * output[\\\\(i_0, ..., i_{K-2}\\\\)] = input[indices[\\\\(i_0, ..., i_{K-2}\\\\)]]\r\n *\r\n * Whereas in `tf.gather`, `indices` defines slices into the first dimension of\r\n * input, in `tf.gatherND`, `indices` defines slices into the first N dimensions\r\n * of input, where N = indices.shape[-1].\r\n *\r\n * The last dimension of indices can be at most the rank of input:\r\n * indices.shape[-1] <= input.rank\r\n *\r\n * The last dimension of `indices` corresponds to elements\r\n * (if indices.shape[-1] == input.rank) or slices\r\n * (if indices.shape[-1] < input.rank) along dimension indices.shape[-1] of\r\n * input.\r\n * The output tensor has shape\r\n * indices.shape[:-1] + input.shape[indices.shape[-1]:]\r\n *\r\n * Note that on CPU, if an out of bound index is found, an error is returned. On\r\n * GPU, if an out of bound index is found, a 0 is stored in the corresponding\r\n * output value.\r\n *\r\n * ```js\r\n * const indices = tf.tensor2d([0, 1, 1, 0], [2,2], 'int32');\r\n * const input = tf.tensor2d([9, 10, 11, 12], [2, 2]);\r\n * tf.gatherND(input, indices).print() // [10, 11]\r\n * ```\r\n *\r\n * @param x The tensor from which to gather values.\r\n * @param indices Index tensor, must be of type int32.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Slicing and Joining'}\r\n */\r\nfunction gatherND_(x, indices) {\r\n    const $indices = convertToTensor(indices, 'indices', 'gatherND', 'int32');\r\n    const $x = convertToTensor(x, 'x', 'gatherND');\r\n    const forward = (backend) => {\r\n        return backend.gatherND($x, $indices);\r\n    };\r\n    const inputs = { params: $x, indices: $indices };\r\n    return ENGINE.runKernelFunc(forward, inputs, null /* gradient */, GatherNd);\r\n}\r\nexport const gatherND = op({ gatherND_ });\r\n//# sourceMappingURL=gather_nd.js.map"]},"metadata":{},"sourceType":"module"}