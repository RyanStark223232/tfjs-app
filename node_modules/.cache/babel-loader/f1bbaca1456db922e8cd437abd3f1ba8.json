{"ast":null,"code":"import _classCallCheck from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nexport var DepthToSpaceProgram = /*#__PURE__*/function () {\n  function DepthToSpaceProgram(outputShape, blockSize, dataFormat) {\n    _classCallCheck(this, DepthToSpaceProgram);\n\n    this.variableNames = ['x'];\n    this.outputShape = [];\n    this.outputShape = outputShape;\n    this.blockSize = blockSize;\n    this.dataFormat = dataFormat;\n    this.userCode = \"\\n    void main() {\\n      ivec4 coords = getOutputCoords();\\n      int b = coords[0];\\n      int h = \".concat(this.getHeightCoordString(), \";\\n      int w = \").concat(this.getWidthCoordString(), \";\\n      int d = \").concat(this.getDepthCoordString(), \";\\n\\n      int in_h = h / \").concat(blockSize, \";\\n      int offset_h = imod(h, \").concat(blockSize, \");\\n      int in_w = w / \").concat(blockSize, \";\\n      int offset_w = imod(w, \").concat(blockSize, \");\\n      int offset_d = (offset_h * \").concat(blockSize, \" + offset_w) *\\n        \").concat(this.getOutputDepthSize(), \";\\n      int in_d = d + offset_d;\\n\\n      float result = \").concat(this.getInputSamplingString(), \";\\n      setOutput(result);\\n    }\\n  \");\n  }\n\n  _createClass(DepthToSpaceProgram, [{\n    key: \"getHeightCoordString\",\n    value: function getHeightCoordString() {\n      if (this.dataFormat === 'NHWC') {\n        return \"coords[1]\";\n      } else {\n        return \"coords[2]\";\n      }\n    }\n  }, {\n    key: \"getWidthCoordString\",\n    value: function getWidthCoordString() {\n      if (this.dataFormat === 'NHWC') {\n        return \"coords[2]\";\n      } else {\n        return \"coords[3]\";\n      }\n    }\n  }, {\n    key: \"getDepthCoordString\",\n    value: function getDepthCoordString() {\n      if (this.dataFormat === 'NHWC') {\n        return \"coords[3]\";\n      } else {\n        return \"coords[1]\";\n      }\n    }\n  }, {\n    key: \"getOutputDepthSize\",\n    value: function getOutputDepthSize() {\n      if (this.dataFormat === 'NHWC') {\n        return this.outputShape[3];\n      } else {\n        return this.outputShape[1];\n      }\n    }\n  }, {\n    key: \"getInputSamplingString\",\n    value: function getInputSamplingString() {\n      if (this.dataFormat === 'NHWC') {\n        return \"getX(b, in_h, in_w, in_d)\";\n      } else {\n        return \"getX(b, in_d, in_h, in_w)\";\n      }\n    }\n  }]);\n\n  return DepthToSpaceProgram;\n}();","map":{"version":3,"sources":["../src/depth_to_space_gpu.ts"],"names":[],"mappings":";;;AAAA;;;;;;;;;;;;;;;AAeG;AAIH,WAAa,mBAAb;AAOE,+BACI,WADJ,EAC2B,SAD3B,EAC8C,UAD9C,EACuE;AAAA;;AAPvE,SAAA,aAAA,GAAgB,CAAC,GAAD,CAAhB;AACA,SAAA,WAAA,GAAwB,EAAxB;AAOE,SAAK,WAAL,GAAmB,WAAnB;AACA,SAAK,SAAL,GAAiB,SAAjB;AACA,SAAK,UAAL,GAAkB,UAAlB;AACA,SAAK,QAAL,mHAIY,KAAK,oBAAL,EAJZ,8BAKY,KAAK,mBAAL,EALZ,8BAMY,KAAK,mBAAL,EANZ,uCAQmB,SARnB,6CAS2B,SAT3B,sCAUmB,SAVnB,6CAW2B,SAX3B,kDAY+B,SAZ/B,qCAaM,KAAK,kBAAL,EAbN,uEAgBmB,KAAK,sBAAL,EAhBnB;AAoBD;;AAhCH;AAAA;AAAA,2CAkC8B;AAC1B,UAAI,KAAK,UAAL,KAAoB,MAAxB,EAAgC;AAC9B;AACD,OAFD,MAEO;AACL;AACD;AACF;AAxCH;AAAA;AAAA,0CA0C6B;AACzB,UAAI,KAAK,UAAL,KAAoB,MAAxB,EAAgC;AAC9B;AACD,OAFD,MAEO;AACL;AACD;AACF;AAhDH;AAAA;AAAA,0CAkD6B;AACzB,UAAI,KAAK,UAAL,KAAoB,MAAxB,EAAgC;AAC9B;AACD,OAFD,MAEO;AACL;AACD;AACF;AAxDH;AAAA;AAAA,yCA0D4B;AACxB,UAAI,KAAK,UAAL,KAAoB,MAAxB,EAAgC;AAC9B,eAAO,KAAK,WAAL,CAAiB,CAAjB,CAAP;AACD,OAFD,MAEO;AACL,eAAO,KAAK,WAAL,CAAiB,CAAjB,CAAP;AACD;AACF;AAhEH;AAAA;AAAA,6CAkEgC;AAC5B,UAAI,KAAK,UAAL,KAAoB,MAAxB,EAAgC;AAC9B;AACD,OAFD,MAEO;AACL;AACD;AACF;AAxEH;;AAAA;AAAA","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nexport class DepthToSpaceProgram {\r\n    constructor(outputShape, blockSize, dataFormat) {\r\n        this.variableNames = ['x'];\r\n        this.outputShape = [];\r\n        this.outputShape = outputShape;\r\n        this.blockSize = blockSize;\r\n        this.dataFormat = dataFormat;\r\n        this.userCode = `\r\n    void main() {\r\n      ivec4 coords = getOutputCoords();\r\n      int b = coords[0];\r\n      int h = ${this.getHeightCoordString()};\r\n      int w = ${this.getWidthCoordString()};\r\n      int d = ${this.getDepthCoordString()};\r\n\r\n      int in_h = h / ${blockSize};\r\n      int offset_h = imod(h, ${blockSize});\r\n      int in_w = w / ${blockSize};\r\n      int offset_w = imod(w, ${blockSize});\r\n      int offset_d = (offset_h * ${blockSize} + offset_w) *\r\n        ${this.getOutputDepthSize()};\r\n      int in_d = d + offset_d;\r\n\r\n      float result = ${this.getInputSamplingString()};\r\n      setOutput(result);\r\n    }\r\n  `;\r\n    }\r\n    getHeightCoordString() {\r\n        if (this.dataFormat === 'NHWC') {\r\n            return `coords[1]`;\r\n        }\r\n        else {\r\n            return `coords[2]`;\r\n        }\r\n    }\r\n    getWidthCoordString() {\r\n        if (this.dataFormat === 'NHWC') {\r\n            return `coords[2]`;\r\n        }\r\n        else {\r\n            return `coords[3]`;\r\n        }\r\n    }\r\n    getDepthCoordString() {\r\n        if (this.dataFormat === 'NHWC') {\r\n            return `coords[3]`;\r\n        }\r\n        else {\r\n            return `coords[1]`;\r\n        }\r\n    }\r\n    getOutputDepthSize() {\r\n        if (this.dataFormat === 'NHWC') {\r\n            return this.outputShape[3];\r\n        }\r\n        else {\r\n            return this.outputShape[1];\r\n        }\r\n    }\r\n    getInputSamplingString() {\r\n        if (this.dataFormat === 'NHWC') {\r\n            return `getX(b, in_h, in_w, in_d)`;\r\n        }\r\n        else {\r\n            return `getX(b, in_d, in_h, in_w)`;\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=depth_to_space_gpu.js.map"]},"metadata":{},"sourceType":"module"}