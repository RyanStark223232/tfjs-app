{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2017 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nexport class AvgPool2DBackpropProgram {\n  constructor(convInfo) {\n    this.variableNames = ['dy'];\n    this.outputShape = convInfo.inShape;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n    const avgMultiplier = 1 / (filterHeight * filterWidth);\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float avgMultiplier = float(${avgMultiplier});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${effectiveFilterWidth};\n            wC+= ${dilationWidth}) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n\n}\nexport class AvgPool3DBackpropProgram {\n  constructor(convInfo) {\n    this.variableNames = ['dy'];\n    this.outputShape = convInfo.inShape;\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n    const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);\n    this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n      const float avgMultiplier = float(${avgMultiplier});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n            wD += ${dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n\n}","map":{"version":3,"sources":["../src/avg_pool_backprop_gpu.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAKH,OAAM,MAAO,wBAAP,CAA+B;AAKnC,EAAA,WAAA,CAAY,QAAZ,EAA6C;AAJ7C,SAAA,aAAA,GAAgB,CAAC,IAAD,CAAhB;AAKE,SAAK,WAAL,GAAmB,QAAQ,CAAC,OAA5B;AACA,UAAM,YAAY,GAAG,QAAQ,CAAC,YAA9B;AACA,UAAM,WAAW,GAAG,QAAQ,CAAC,WAA7B;AACA,UAAM,YAAY,GAAG,QAAQ,CAAC,YAA9B;AACA,UAAM,WAAW,GAAG,QAAQ,CAAC,WAA7B;AACA,UAAM,cAAc,GAAG,QAAQ,CAAC,cAAhC;AACA,UAAM,aAAa,GAAG,QAAQ,CAAC,aAA/B;AACA,UAAM,qBAAqB,GAAG,QAAQ,CAAC,qBAAvC;AACA,UAAM,oBAAoB,GAAG,QAAQ,CAAC,oBAAtC;AAEA,UAAM,MAAM,GAAG,qBAAqB,GAAG,CAAxB,GAA4B,QAAQ,CAAC,OAAT,CAAiB,GAA5D;AACA,UAAM,OAAO,GAAG,oBAAoB,GAAG,CAAvB,GAA2B,QAAQ,CAAC,OAAT,CAAiB,IAA5D;AAEA,UAAM,aAAa,GAAG,KAAK,YAAY,GAAG,WAApB,CAAtB;AAEA,SAAK,QAAL,GAAgB;iCACa,MAAM,KAAK,OAAO;0CACT,aAAa;;;;;;;;;;;;;;gCAcvB,qBAAqB;oBACjC,cAAc;gDACc,YAAY;;oCAExB,QAAQ,CAAC,SAAS;;;;;kCAKpB,oBAAoB;mBACnC,aAAa;kDACkB,WAAW;;sCAEvB,QAAQ,CAAC,QAAQ;;;;;;;;;;;;;AAalD,KA1CD;AA2CD;;AAhEkC;AAmErC,OAAM,MAAO,wBAAP,CAA+B;AAKnC,EAAA,WAAA,CAAY,QAAZ,EAA6C;AAJ7C,SAAA,aAAA,GAAgB,CAAC,IAAD,CAAhB;AAKE,SAAK,WAAL,GAAmB,QAAQ,CAAC,OAA5B;AACA,UAAM,WAAW,GAAG,QAAQ,CAAC,WAA7B;AACA,UAAM,YAAY,GAAG,QAAQ,CAAC,YAA9B;AACA,UAAM,WAAW,GAAG,QAAQ,CAAC,WAA7B;AACA,UAAM,WAAW,GAAG,QAAQ,CAAC,WAA7B;AACA,UAAM,YAAY,GAAG,QAAQ,CAAC,YAA9B;AACA,UAAM,WAAW,GAAG,QAAQ,CAAC,WAA7B;AACA,UAAM,aAAa,GAAG,QAAQ,CAAC,aAA/B;AACA,UAAM,cAAc,GAAG,QAAQ,CAAC,cAAhC;AACA,UAAM,aAAa,GAAG,QAAQ,CAAC,aAA/B;AACA,UAAM,oBAAoB,GAAG,QAAQ,CAAC,oBAAtC;AACA,UAAM,qBAAqB,GAAG,QAAQ,CAAC,qBAAvC;AACA,UAAM,oBAAoB,GAAG,QAAQ,CAAC,oBAAtC;AAEA,UAAM,QAAQ,GAAG,oBAAoB,GAAG,CAAvB,GAA2B,QAAQ,CAAC,OAAT,CAAiB,KAA7D;AACA,UAAM,MAAM,GAAG,qBAAqB,GAAG,CAAxB,GAA4B,QAAQ,CAAC,OAAT,CAAiB,GAA5D;AACA,UAAM,OAAO,GAAG,oBAAoB,GAAG,CAAvB,GAA2B,QAAQ,CAAC,OAAT,CAAiB,IAA5D;AAEA,UAAM,aAAa,GAAG,KAAK,WAAW,GAAG,YAAd,GAA6B,WAAlC,CAAtB;AAEA,SAAK,QAAL,GAAgB;iCACa,QAAQ,KAAK,MAAM,KAAK,OAAO;0CACtB,aAAa;;;;;;;;;;;;;;;;;gCAiBvB,oBAAoB;oBAChC,aAAa;gDACe,WAAW;;oCAEvB,QAAQ,CAAC,QAAQ;;;;;kCAKnB,qBAAqB;sBACjC,cAAc;kDACc,YAAY;;sCAExB,QAAQ,CAAC,SAAS;;;;;;oCAMpB,oBAAoB;wBAChC,aAAa;oDACe,WAAW;;wCAEvB,QAAQ,CAAC,QAAQ;;;;;;;;;;;;;;AAcpD,KAxDD;AAyDD;;AAnFkC","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2017 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nexport class AvgPool2DBackpropProgram {\r\n    constructor(convInfo) {\r\n        this.variableNames = ['dy'];\r\n        this.outputShape = convInfo.inShape;\r\n        const filterHeight = convInfo.filterHeight;\r\n        const filterWidth = convInfo.filterWidth;\r\n        const strideHeight = convInfo.strideHeight;\r\n        const strideWidth = convInfo.strideWidth;\r\n        const dilationHeight = convInfo.dilationHeight;\r\n        const dilationWidth = convInfo.dilationWidth;\r\n        const effectiveFilterHeight = convInfo.effectiveFilterHeight;\r\n        const effectiveFilterWidth = convInfo.effectiveFilterWidth;\r\n        const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\r\n        const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\r\n        const avgMultiplier = 1 / (filterHeight * filterWidth);\r\n        this.userCode = `\r\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\r\n      const float avgMultiplier = float(${avgMultiplier});\r\n\r\n      void main() {\r\n        ivec4 coords = getOutputCoords();\r\n        int b = coords[0];\r\n        int d = coords[3];\r\n\r\n        ivec2 dyRCCorner = coords.yz - pads;\r\n        int dyRCorner = dyRCCorner.x;\r\n        int dyCCorner = dyRCCorner.y;\r\n\r\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\r\n        // ? = to be determined. : = across all values in that axis.\r\n        float dotProd = 0.0;\r\n        for (int wR = 0; wR < ${effectiveFilterHeight};\r\n            wR += ${dilationHeight}) {\r\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\r\n\r\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\r\n            continue;\r\n          }\r\n          int idyR = int(dyR);\r\n\r\n          for (int wC = 0; wC < ${effectiveFilterWidth};\r\n            wC+= ${dilationWidth}) {\r\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\r\n\r\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\r\n                fract(dyC) > 0.0) {\r\n              continue;\r\n            }\r\n            int idyC = int(dyC);\r\n\r\n            float dyValue = getDy(b, idyR, idyC, d);\r\n\r\n            dotProd += dyValue * avgMultiplier;\r\n          }\r\n        }\r\n        setOutput(dotProd);\r\n      }\r\n    `;\r\n    }\r\n}\r\nexport class AvgPool3DBackpropProgram {\r\n    constructor(convInfo) {\r\n        this.variableNames = ['dy'];\r\n        this.outputShape = convInfo.inShape;\r\n        const filterDepth = convInfo.filterDepth;\r\n        const filterHeight = convInfo.filterHeight;\r\n        const filterWidth = convInfo.filterWidth;\r\n        const strideDepth = convInfo.strideDepth;\r\n        const strideHeight = convInfo.strideHeight;\r\n        const strideWidth = convInfo.strideWidth;\r\n        const dilationDepth = convInfo.dilationDepth;\r\n        const dilationHeight = convInfo.dilationHeight;\r\n        const dilationWidth = convInfo.dilationWidth;\r\n        const effectiveFilterDepth = convInfo.effectiveFilterDepth;\r\n        const effectiveFilterHeight = convInfo.effectiveFilterHeight;\r\n        const effectiveFilterWidth = convInfo.effectiveFilterWidth;\r\n        const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\r\n        const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\r\n        const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\r\n        const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);\r\n        this.userCode = `\r\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\r\n      const float avgMultiplier = float(${avgMultiplier});\r\n\r\n      void main() {\r\n        ivec5 coords = getOutputCoords();\r\n        int batch = coords.x;\r\n        int ch = coords.u;\r\n\r\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\r\n        int dyDCorner = dyCorner.x;\r\n        int dyRCorner = dyCorner.y;\r\n        int dyCCorner = dyCorner.z;\r\n\r\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\r\n        // dx(xD, xR, xC, ch).\r\n        // ? = to be determined. : = across all values in that axis.\r\n        float dotProd = 0.0;\r\n\r\n        for (int wD = 0; wD < ${effectiveFilterDepth};\r\n            wD += ${dilationDepth}) {\r\n          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;\r\n\r\n          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {\r\n            continue;\r\n          }\r\n          int idyD = int(dyD);\r\n\r\n          for (int wR = 0; wR < ${effectiveFilterHeight};\r\n              wR += ${dilationHeight}) {\r\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\r\n\r\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\r\n                fract(dyR) > 0.0) {\r\n              continue;\r\n            }\r\n            int idyR = int(dyR);\r\n\r\n            for (int wC = 0; wC < ${effectiveFilterWidth};\r\n                wC += ${dilationWidth}) {\r\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\r\n\r\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\r\n                  fract(dyC) > 0.0) {\r\n                continue;\r\n              }\r\n              int idyC = int(dyC);\r\n\r\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\r\n\r\n              dotProd += dyValue * avgMultiplier;\r\n            }\r\n          }\r\n        }\r\n        setOutput(dotProd);\r\n      }\r\n    `;\r\n    }\r\n}\r\n//# sourceMappingURL=avg_pool_backprop_gpu.js.map"]},"metadata":{},"sourceType":"module"}