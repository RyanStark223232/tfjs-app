{"ast":null,"code":"import { isBigNumber, isCollection, isNumber } from '../../utils/is';\nimport { factory } from '../../utils/factory';\nimport { errorTransform } from './utils/errorTransform';\nimport { createMean } from '../../function/statistics/mean';\nvar name = 'mean';\nvar dependencies = ['typed', 'add', 'divide'];\nexport var createMeanTransform = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      add = _ref.add,\n      divide = _ref.divide;\n  var mean = createMean({\n    typed: typed,\n    add: add,\n    divide: divide\n  });\n  /**\r\n   * Attach a transform function to math.mean\r\n   * Adds a property transform containing the transform function.\r\n   *\r\n   * This transform changed the last `dim` parameter of function mean\r\n   * from one-based to zero based\r\n   */\n\n  return typed('mean', {\n    '...any': function any(args) {\n      // change last argument dim from one-based to zero-based\n      if (args.length === 2 && isCollection(args[0])) {\n        var dim = args[1];\n\n        if (isNumber(dim)) {\n          args[1] = dim - 1;\n        } else if (isBigNumber(dim)) {\n          args[1] = dim.minus(1);\n        }\n      }\n\n      try {\n        return mean.apply(null, args);\n      } catch (err) {\n        throw errorTransform(err);\n      }\n    }\n  });\n}, {\n  isTransformFunction: true\n});","map":{"version":3,"sources":["C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/mathjs/es/expression/transform/mean.transform.js"],"names":["isBigNumber","isCollection","isNumber","factory","errorTransform","createMean","name","dependencies","createMeanTransform","_ref","typed","add","divide","mean","any","args","length","dim","minus","apply","err","isTransformFunction"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,YAAtB,EAAoCC,QAApC,QAAoD,gBAApD;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,SAASC,cAAT,QAA+B,wBAA/B;AACA,SAASC,UAAT,QAA2B,gCAA3B;AACA,IAAIC,IAAI,GAAG,MAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,KAAV,EAAiB,QAAjB,CAAnB;AACA,OAAO,IAAIC,mBAAmB,GAAG,eAAeL,OAAO,CAACG,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AAC1F,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAAA,MACIC,GAAG,GAAGF,IAAI,CAACE,GADf;AAAA,MAEIC,MAAM,GAAGH,IAAI,CAACG,MAFlB;AAGA,MAAIC,IAAI,GAAGR,UAAU,CAAC;AACpBK,IAAAA,KAAK,EAAEA,KADa;AAEpBC,IAAAA,GAAG,EAAEA,GAFe;AAGpBC,IAAAA,MAAM,EAAEA;AAHY,GAAD,CAArB;AAKA;AACF;AACA;AACA;AACA;AACA;AACA;;AAEE,SAAOF,KAAK,CAAC,MAAD,EAAS;AACnB,cAAU,SAASI,GAAT,CAAaC,IAAb,EAAmB;AAC3B;AACA,UAAIA,IAAI,CAACC,MAAL,KAAgB,CAAhB,IAAqBf,YAAY,CAACc,IAAI,CAAC,CAAD,CAAL,CAArC,EAAgD;AAC9C,YAAIE,GAAG,GAAGF,IAAI,CAAC,CAAD,CAAd;;AAEA,YAAIb,QAAQ,CAACe,GAAD,CAAZ,EAAmB;AACjBF,UAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUE,GAAG,GAAG,CAAhB;AACD,SAFD,MAEO,IAAIjB,WAAW,CAACiB,GAAD,CAAf,EAAsB;AAC3BF,UAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUE,GAAG,CAACC,KAAJ,CAAU,CAAV,CAAV;AACD;AACF;;AAED,UAAI;AACF,eAAOL,IAAI,CAACM,KAAL,CAAW,IAAX,EAAiBJ,IAAjB,CAAP;AACD,OAFD,CAEE,OAAOK,GAAP,EAAY;AACZ,cAAMhB,cAAc,CAACgB,GAAD,CAApB;AACD;AACF;AAlBkB,GAAT,CAAZ;AAoBD,CArCsD,EAqCpD;AACDC,EAAAA,mBAAmB,EAAE;AADpB,CArCoD,CAAhD","sourcesContent":["import { isBigNumber, isCollection, isNumber } from '../../utils/is';\r\nimport { factory } from '../../utils/factory';\r\nimport { errorTransform } from './utils/errorTransform';\r\nimport { createMean } from '../../function/statistics/mean';\r\nvar name = 'mean';\r\nvar dependencies = ['typed', 'add', 'divide'];\r\nexport var createMeanTransform = /* #__PURE__ */factory(name, dependencies, function (_ref) {\r\n  var typed = _ref.typed,\r\n      add = _ref.add,\r\n      divide = _ref.divide;\r\n  var mean = createMean({\r\n    typed: typed,\r\n    add: add,\r\n    divide: divide\r\n  });\r\n  /**\r\n   * Attach a transform function to math.mean\r\n   * Adds a property transform containing the transform function.\r\n   *\r\n   * This transform changed the last `dim` parameter of function mean\r\n   * from one-based to zero based\r\n   */\r\n\r\n  return typed('mean', {\r\n    '...any': function any(args) {\r\n      // change last argument dim from one-based to zero-based\r\n      if (args.length === 2 && isCollection(args[0])) {\r\n        var dim = args[1];\r\n\r\n        if (isNumber(dim)) {\r\n          args[1] = dim - 1;\r\n        } else if (isBigNumber(dim)) {\r\n          args[1] = dim.minus(1);\r\n        }\r\n      }\r\n\r\n      try {\r\n        return mean.apply(null, args);\r\n      } catch (err) {\r\n        throw errorTransform(err);\r\n      }\r\n    }\r\n  });\r\n}, {\r\n  isTransformFunction: true\r\n});"]},"metadata":{},"sourceType":"module"}