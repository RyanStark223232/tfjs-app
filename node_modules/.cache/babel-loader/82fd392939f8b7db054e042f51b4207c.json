{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\wongh\\\\finger\\\\src\\\\App.js\";\nimport React from \"react\";\nimport * as handpose from \"@tensorflow-models/handpose\";\nimport * as tf from '@tensorflow/tfjs';\nimport Webcam from \"react-webcam\";\nimport \"./App.css\";\nimport { drawHand } from \"./utilities\";\nimport { sqrt, pow } from \"mathjs\";\nimport { Line } from 'react-chartjs-2';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.sleep = milliseconds => {\n      return new Promise(resolve => setTimeout(resolve, milliseconds));\n    };\n\n    this.state = {\n      ID: 0,\n      count: 0,\n      rcount: 0,\n      index_passed: 0,\n      rotate_passed: 0,\n      last_pressed: 0,\n      real_time_inferencing: false,\n      recording: false,\n      button_mode: false,\n      chart_ready: false,\n      finger_done: false,\n      rotate_done: false,\n      fist_down: false,\n      record: [],\n      dist_time_array: [],\n      dist_array: [],\n      rotate_time_array: [],\n      rotate_array: [],\n      fist_time_array: [],\n      fist_array: [],\n      chart_data: null,\n      startAt: Date.now(),\n      dead_frame: 0\n    };\n    this.webcamRef = /*#__PURE__*/React.createRef(null);\n    this.canvasRef = /*#__PURE__*/React.createRef(null);\n    this.runHandpose = this.runHandpose.bind(this);\n    this.stop_real_time_inference = this.stop_real_time_inference.bind(this);\n    this.stop_record = this.stop_record.bind(this);\n    this.record_video = this.record_video.bind(this);\n    this.concat_frame = this.concat_frame.bind(this);\n    this.inference = this.inference.bind(this);\n    this.reset_counter = this.reset_counter.bind(this);\n    this.increment_tap1 = this.increment_tap1.bind(this);\n    this.increment_tap2 = this.increment_tap2.bind(this);\n    this.switch_button = this.switch_button.bind(this);\n    this.compose_chart = this.compose_chart.bind(this);\n    this.net = this.handpose_setup();\n  }\n\n  async handpose_setup() {\n    require('@tensorflow/tfjs-backend-webgl'); //const uploadJSONInput = document.getElementById('upload-json');\n    //const uploadWeightsInput = document.getElementById('upload-weights');\n    //const model = await tf.loadLayersModel(tf.io.browserFiles([uploadJSONInput.files[0], uploadWeightsInput.files[0]]));\n\n\n    const net = await handpose.load();\n    console.log(\"Handpose model loaded.\");\n    return net;\n  }\n\n  compose_chart() {\n    const data = {\n      labels: this.state.time_array,\n      datasets: [{\n        label: 'Tapping',\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: 'rgba(75,192,192,0.4)',\n        borderColor: 'rgba(75,192,192,1)',\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: 'rgba(75,192,192,1)',\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: this.state.dist_array\n      }, {\n        label: 'Rotation',\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: 'rgba(192,75,192,0.4)',\n        borderColor: 'rgba(192,75,192,1)',\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: 'rgba(192,75,192,1)',\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'rgba(192,75,192,1)',\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: this.state.rotate_array\n      }, {\n        label: 'Fist',\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: 'rgba(192,192,75,0.4)',\n        borderColor: 'rgba(192,192,75,1)',\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: 'rgba(192,192,75,1)',\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'rgba(192,192,75,1)',\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: this.state.fist_array\n      }]\n    };\n    this.setState({\n      chart_data: data\n    });\n    this.setState({\n      chart_ready: true\n    });\n  }\n\n  switch_button() {\n    if (this.state.button_mode === true) {\n      this.setState({\n        button_mode: false\n      });\n    } else {\n      this.setState({\n        button_mode: true\n      });\n    }\n  }\n\n  increment_tap1() {\n    if (this.state.last_pressed !== 1) {\n      this.setState({\n        last_pressed: 1\n      });\n      this.setState({\n        count: this.state.count + 1\n      });\n    }\n  }\n\n  increment_tap2() {\n    if (this.state.last_pressed !== 2) {\n      this.setState({\n        last_pressed: 2\n      });\n      this.setState({\n        count: this.state.count + 1\n      });\n    }\n  }\n\n  norm(lm1, lm2) {\n    return sqrt(pow(lm1[0] - lm2[0], 2) + pow(lm1[1] - lm2[1], 2));\n  }\n\n  reset_counter() {\n    this.setState({\n      count: 0\n    });\n    this.setState({\n      rcount: 0\n    });\n    this.setState({\n      chart_ready: false\n    });\n    this.setState({\n      record: []\n    });\n    this.setState({\n      time_array: []\n    });\n    this.setState({\n      dist_array: []\n    });\n    this.setState({\n      chart_data: null\n    });\n  }\n\n  async runHandpose() {\n    await this.sleep(3000);\n    this.setState({\n      startAt: Date.now()\n    });\n    const Interval_ID = setInterval(() => {\n      this.read_time_inference();\n    }, 50);\n    this.setState({\n      ID: Interval_ID\n    });\n    this.setState({\n      real_time_inferencing: true\n    });\n  }\n\n  async read_time_inference() {\n    console.log(this.state.dead_frame);\n\n    if (typeof this.webcamRef.current !== \"undefined\" && this.webcamRef.current !== null && this.webcamRef.current.video.readyState === 4) {\n      const video = this.webcamRef.current.video;\n      const videoWidth = this.webcamRef.current.video.videoWidth;\n      const videoHeight = this.webcamRef.current.video.videoHeight;\n      this.webcamRef.current.video.width = videoWidth;\n      this.webcamRef.current.video.height = videoHeight;\n      this.canvasRef.current.width = videoWidth;\n      this.canvasRef.current.height = videoHeight;\n      const hand = await this.net.estimateHands(video);\n\n      if (hand.length > 0) {\n        hand.forEach(prediction => {\n          this.setState({\n            dead_frame: 0\n          });\n          const landmarks = prediction.landmarks;\n          let pawn_dist = this.norm(landmarks[0], landmarks[2]);\n\n          if (this.state.finger_done == false) {\n            let index_dist = this.norm(landmarks[4], landmarks[8]);\n            index_dist = index_dist / pawn_dist;\n            this.setState({\n              dist_array: [...this.state.dist_array, index_dist]\n            });\n            this.setState({\n              dist_time_array: [...this.state.dist_time_array, (Date.now() - this.state.startAt) / 1000]\n            });\n\n            if (index_dist >= 0.5) {\n              this.setState({\n                index_passed: 1\n              });\n            }\n\n            if (index_dist < 0.5 && this.state.index_passed === 1) {\n              this.setState({\n                index_passed: 0\n              });\n              this.setState({\n                count: this.state.count + 1\n              });\n            }\n          }\n\n          if (this.state.finger_done == true && this.state.rotate_done == false) {\n            let rotate_dist = (landmarks[2][0] - landmarks[17][0]) / pawn_dist;\n            this.setState({\n              rotate_array: [...this.state.rotate_array, rotate_dist]\n            });\n            this.setState({\n              rotate_time_array: [...this.state.rotate_time_array, (Date.now() - this.state.startAt) / 1000]\n            });\n\n            if (this.state.rotate_passed === 0) {\n              if (rotate_dist >= 0.5) this.setState({\n                rotate_passed: 1\n              });\n              if (rotate_dist <= -0.5) this.setState({\n                rotate_passed: -1\n              });\n            }\n\n            if (this.state.rotate_passed === 1 && rotate_dist <= -0.5) {\n              this.setState({\n                rotate_passed: -1\n              });\n            }\n\n            if (this.state.rotate_passed === -1 && rotate_dist >= 0.5) {\n              this.setState({\n                rotate_passed: 1\n              });\n              this.setState({\n                rcount: this.state.rcount + 1\n              });\n            }\n          }\n\n          if (this.state.rotate_done == true && this.state.fist_done == false) {\n            let fist_dist = (landmarks[8][1] - landmarks[5][1] + (landmarks[12][1] - landmarks[9][1]) + (landmarks[16][1] - landmarks[13][1]) + (landmarks[20][1] - landmarks[17][1])) / (4 * pawn_dist);\n            this.setState({\n              fist_array: [...this.state.fist_array, fist_dist]\n            });\n            this.setState({\n              fist_time_array: [...this.state.fist_time_array, (Date.now() - this.state.startAt) / 1000]\n            });\n          }\n\n          const ctx = this.canvasRef.current.getContext(\"2d\");\n          this.setState({\n            context: ctx\n          });\n          drawHand(hand, ctx);\n        });\n      }\n      /*\n      else{\n        if (this.state.dist_array.length !== 0){\n          this.setState({dead_frame: this.state.dead_frame+1});\n          if (this.state.dead_frame >= 10) this.stop_real_time_inference();\n        }\n      }\n      */\n\n    }\n  }\n\n  async stop_tapping() {\n    clearInterval(this.state.ID);\n    this.setState({\n      finger_done: true\n    });\n    console.log(this.state.dist_array);\n    await this.sleep(3000); //this.compose_chart();\n  }\n\n  async stop_rotating() {\n    clearInterval(this.state.ID);\n    this.setState({\n      rotate_done: true\n    });\n    console.log(this.state.rotate_array);\n    await this.sleep(3000); //this.compose_chart();\n  }\n\n  async stop_gripping() {\n    clearInterval(this.state.ID);\n    this.setState({\n      fist_done: true\n    });\n    console.log(this.state.fist_array);\n    await this.sleep(3000); //this.compose_chart();\n  }\n\n  stop_real_time_inference() {\n    clearInterval(this.state.ID);\n    this.setState({\n      real_time_inferencing: false\n    });\n    this.compose_chart();\n  }\n\n  async record_video() {\n    this.setState({\n      startAt: Date.now()\n    });\n    const Interval_ID = setInterval(() => {\n      this.concat_frame();\n    }, 50);\n    this.setState({\n      ID: Interval_ID\n    });\n    this.setState({\n      recording: true\n    });\n  }\n\n  async concat_frame() {\n    this.setState({\n      time_array: [...this.state.time_array, (Date.now() - this.state.startAt) / 1000]\n    });\n\n    if (typeof this.webcamRef.current !== \"undefined\" && this.webcamRef.current !== null && this.webcamRef.current.video.readyState === 4) {\n      const image = this.webcamRef.current.getScreenshot();\n      var img = document.createElement(\"img\");\n\n      img.onload = function () {\n        this.setState({\n          record: [...this.state.record, img]\n        }); //console.log(this.state.record, this.state.recording);\n      }.bind(this);\n\n      img.src = image;\n    }\n  }\n\n  async inference() {\n    require('@tensorflow/tfjs-backend-webgl');\n\n    const net = await handpose.load();\n    console.log(\"Handpose model loaded.\");\n    var i;\n\n    for (i = 0; i < this.state.record.length; i++) {\n      const hand = await net.estimateHands(this.state.record[i]);\n      console.log(hand);\n\n      if (hand.length > 0) {\n        hand.forEach(prediction => {\n          const landmarks = prediction.landmarks;\n          let pawn_dist = this.norm(landmarks[0], landmarks[2]); //sqrt(pow(landmarks[0][0]-landmarks[2][0], 2)+pow(landmarks[0][1]-landmarks[2][1], 2))\n\n          let index_dist = this.norm(landmarks[4], landmarks[8]); //sqrt(pow(landmarks[8][0]-landmarks[4][0], 2)+pow(landmarks[8][1]-landmarks[4][1], 2))\n\n          index_dist = index_dist / pawn_dist;\n          this.setState({\n            dist_array: [...this.state.dist_array, index_dist]\n          });\n\n          if (index_dist >= 0.5) {\n            this.setState({\n              index_passed: 1\n            });\n          }\n\n          if (index_dist < 0.5 && this.state.index_passed === 1) {\n            this.setState({\n              index_passed: 0\n            });\n            this.setState({\n              count: this.state.count + 1\n            });\n          }\n\n          let rotate_dist = (landmarks[2][0] - landmarks[17][0]) / pawn_dist;\n\n          if (this.state.rotate_passed === 0) {\n            if (rotate_dist >= 0.5) this.setState({\n              rotate_passed: 1\n            });\n            if (rotate_dist <= -0.5) this.setState({\n              rotate_passed: -1\n            });\n          }\n\n          if (this.state.rotate_passed === 1 && rotate_dist <= -0.5) {\n            this.setState({\n              rotate_passed: -1\n            });\n          }\n\n          if (this.state.rotate_passed === -1 && rotate_dist >= 0.5) {\n            this.setState({\n              rotate_passed: 1\n            });\n            this.setState({\n              rcount: this.state.rcount + 1\n            });\n          }\n        });\n      }\n    }\n\n    this.setState({\n      record: []\n    });\n  }\n\n  stop_record() {\n    clearInterval(this.state.ID);\n    this.inference();\n    this.setState({\n      recording: false\n    });\n    this.compose_chart();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"App-header\",\n        children: [/*#__PURE__*/_jsxDEV(Webcam, {\n          ref: this.webcamRef,\n          style: {\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 9,\n            width: \"auto\",\n            height: \"auto\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: this.canvasRef,\n          style: {\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 9,\n            width: \"auto\",\n            height: \"auto\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 9\n      }, this), this.state.button_mode ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.increment_tap1,\n          id: \"button1\",\n          children: \"Index Finger\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.increment_tap2,\n          id: \"button2\",\n          children: \"Middle Finger\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 13\n      }, this), this.state.real_time_inferencing ? this.state.finger_done ? this.state.rotate_done ? this.state.fist_done ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.stop_real_time_inference,\n        children: \"Calculate Result\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 19\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.stop_real_time_inference,\n        children: \"Finish Gripping\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 19\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.stop_real_time_inference,\n        children: \"Finish Rotating\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.stop_real_time_inference,\n        children: \"Finish Tapping\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 15\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.runHandpose,\n        children: \"Starting Real Time Inference\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 11\n      }, this), this.state.recording ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.stop_record,\n        children: \"Stopping Recording\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.record_video,\n        children: \"Starting Recording\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.reset_counter,\n        children: \"Reset Counter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.switch_button,\n        children: \"Switch On/Off Button\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Finger Tapping Count: \", this.state.count]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Rotate Count: \", this.state.rcount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [this.state.chart_ready ? /*#__PURE__*/_jsxDEV(Line, {\n          data: this.state.chart_data\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 439,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \" \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 441,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            id: \"upload-json\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 444,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            id: \"upload-weights\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 447,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 446,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/wongh/finger/src/App.js"],"names":["React","handpose","tf","Webcam","drawHand","sqrt","pow","Line","App","Component","constructor","props","sleep","milliseconds","Promise","resolve","setTimeout","state","ID","count","rcount","index_passed","rotate_passed","last_pressed","real_time_inferencing","recording","button_mode","chart_ready","finger_done","rotate_done","fist_down","record","dist_time_array","dist_array","rotate_time_array","rotate_array","fist_time_array","fist_array","chart_data","startAt","Date","now","dead_frame","webcamRef","createRef","canvasRef","runHandpose","bind","stop_real_time_inference","stop_record","record_video","concat_frame","inference","reset_counter","increment_tap1","increment_tap2","switch_button","compose_chart","net","handpose_setup","require","load","console","log","data","labels","time_array","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","setState","norm","lm1","lm2","Interval_ID","setInterval","read_time_inference","current","video","readyState","videoWidth","videoHeight","width","height","hand","estimateHands","length","forEach","prediction","landmarks","pawn_dist","index_dist","rotate_dist","fist_done","fist_dist","ctx","getContext","context","stop_tapping","clearInterval","stop_rotating","stop_gripping","image","getScreenshot","img","document","createElement","onload","src","i","render","position","marginLeft","marginRight","left","right","textAlign","zindex"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport * as handpose from \"@tensorflow-models/handpose\";\nimport * as tf from '@tensorflow/tfjs';\nimport Webcam from \"react-webcam\";\nimport \"./App.css\";\nimport { drawHand } from \"./utilities\";\nimport { sqrt, pow } from \"mathjs\"\nimport {Line} from 'react-chartjs-2';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      ID : 0,\n      count : 0,\n      rcount : 0,\n      index_passed : 0,\n      rotate_passed : 0,\n      last_pressed:0,\n      real_time_inferencing:false,\n      recording:false,\n      button_mode:false,\n      chart_ready:false,\n      finger_done : false,\n      rotate_done : false,\n      fist_down : false,\n      record : [],\n      dist_time_array : [],\n      dist_array : [],\n      rotate_time_array : [],\n      rotate_array : [],\n      fist_time_array : [],\n      fist_array : [],\n      chart_data : null,\n      startAt: Date.now(),\n      dead_frame: 0,\n    };\n    this.webcamRef = React.createRef(null);\n    this.canvasRef = React.createRef(null);\n    this.runHandpose = this.runHandpose.bind(this);\n    this.stop_real_time_inference = this.stop_real_time_inference.bind(this);\n    this.stop_record = this.stop_record.bind(this);\n    this.record_video = this.record_video.bind(this);\n    this.concat_frame = this.concat_frame.bind(this);\n    this.inference = this.inference.bind(this);\n    this.reset_counter = this.reset_counter.bind(this);\n    this.increment_tap1 = this.increment_tap1.bind(this);\n    this.increment_tap2 = this.increment_tap2.bind(this);\n    this.switch_button = this.switch_button.bind(this);\n    this.compose_chart = this.compose_chart.bind(this);\n    this.net = this.handpose_setup();\n  }\n\n  async handpose_setup(){\n    require('@tensorflow/tfjs-backend-webgl');\n    //const uploadJSONInput = document.getElementById('upload-json');\n    //const uploadWeightsInput = document.getElementById('upload-weights');\n    //const model = await tf.loadLayersModel(tf.io.browserFiles([uploadJSONInput.files[0], uploadWeightsInput.files[0]]));\n    const net = await handpose.load();\n    console.log(\"Handpose model loaded.\");\n    return net;\n  }\n\n  compose_chart(){\n    const data = {\n      labels: this.state.time_array,\n      datasets: [        \n        {\n          label: 'Tapping',\n          fill: false,\n          lineTension: 0.1,\n          backgroundColor: 'rgba(75,192,192,0.4)',\n          borderColor: 'rgba(75,192,192,1)',\n          borderCapStyle: 'butt',\n          borderDash: [],\n          borderDashOffset: 0.0,\n          borderJoinStyle: 'miter',\n          pointBorderColor: 'rgba(75,192,192,1)',\n          pointBackgroundColor: '#fff',\n          pointBorderWidth: 1,\n          pointHoverRadius: 5,\n          pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n          pointHoverBorderColor: 'rgba(220,220,220,1)',\n          pointHoverBorderWidth: 2,\n          pointRadius: 1,\n          pointHitRadius: 10,\n          data: this.state.dist_array\n        },\n        {\n          label: 'Rotation',\n          fill: false,\n          lineTension: 0.1,\n          backgroundColor: 'rgba(192,75,192,0.4)',\n          borderColor: 'rgba(192,75,192,1)',\n          borderCapStyle: 'butt',\n          borderDash: [],\n          borderDashOffset: 0.0,\n          borderJoinStyle: 'miter',\n          pointBorderColor: 'rgba(192,75,192,1)',\n          pointBackgroundColor: '#fff',\n          pointBorderWidth: 1,\n          pointHoverRadius: 5,\n          pointHoverBackgroundColor: 'rgba(192,75,192,1)',\n          pointHoverBorderColor: 'rgba(220,220,220,1)',\n          pointHoverBorderWidth: 2,\n          pointRadius: 1,\n          pointHitRadius: 10,\n          data: this.state.rotate_array\n        },\n        {\n          label: 'Fist',\n          fill: false,\n          lineTension: 0.1,\n          backgroundColor: 'rgba(192,192,75,0.4)',\n          borderColor: 'rgba(192,192,75,1)',\n          borderCapStyle: 'butt',\n          borderDash: [],\n          borderDashOffset: 0.0,\n          borderJoinStyle: 'miter',\n          pointBorderColor: 'rgba(192,192,75,1)',\n          pointBackgroundColor: '#fff',\n          pointBorderWidth: 1,\n          pointHoverRadius: 5,\n          pointHoverBackgroundColor: 'rgba(192,192,75,1)',\n          pointHoverBorderColor: 'rgba(220,220,220,1)',\n          pointHoverBorderWidth: 2,\n          pointRadius: 1,\n          pointHitRadius: 10,\n          data: this.state.fist_array\n        }\n      ]\n    };\n    this.setState({chart_data:data});\n    this.setState({chart_ready:true});\n  }\n\n  switch_button(){\n    if (this.state.button_mode === true){\n      this.setState({button_mode:false})\n    }\n    else{\n      this.setState({button_mode:true})\n    }\n  }\n\n  increment_tap1(){\n    if (this.state.last_pressed !== 1){\n      this.setState({last_pressed:1})\n      this.setState({count:this.state.count+1});\n    }\n  }\n\n  increment_tap2(){\n    if (this.state.last_pressed !== 2){\n      this.setState({last_pressed:2})\n      this.setState({count:this.state.count+1});\n    }\n  }\n\n  norm(lm1, lm2){\n    return sqrt(pow(lm1[0]-lm2[0], 2)+pow(lm1[1]-lm2[1], 2))\n  }\n\n  reset_counter(){\n    this.setState({count:0});\n    this.setState({rcount:0});\n    this.setState({chart_ready:false});\n    this.setState({record : []});\n    this.setState({time_array : []});\n    this.setState({dist_array : []});\n    this.setState({chart_data : null});\n  }\n\n  sleep = (milliseconds) => {\n    return new Promise(resolve => setTimeout(resolve, milliseconds))\n  }\n\n  async runHandpose() {    \n    await this.sleep(3000);\n    this.setState({startAt:Date.now()});    \n    const Interval_ID = setInterval(() => {\n      this.read_time_inference();\n    }, 50);\n    this.setState({ID:Interval_ID});\n    this.setState({real_time_inferencing:true});\n  };\n\n  async read_time_inference() {    \n    console.log(this.state.dead_frame);\n    if (\n      typeof this.webcamRef.current !== \"undefined\" &&\n      this.webcamRef.current !== null &&\n      this.webcamRef.current.video.readyState === 4\n    ) {\n      const video = this.webcamRef.current.video;\n      const videoWidth = this.webcamRef.current.video.videoWidth;\n      const videoHeight = this.webcamRef.current.video.videoHeight;\n      this.webcamRef.current.video.width = videoWidth;\n      this.webcamRef.current.video.height = videoHeight;\n      this.canvasRef.current.width = videoWidth;\n      this.canvasRef.current.height = videoHeight;\n      const hand = await this.net.estimateHands(video);\n      if (hand.length > 0){\n        hand.forEach((prediction) => {\n          \n          this.setState({dead_frame: 0});\n          const landmarks = prediction.landmarks\n\n          let pawn_dist = this.norm(landmarks[0], landmarks[2]);\n\n          if (this.state.finger_done == false){\n            let index_dist = this.norm(landmarks[4], landmarks[8]);\n            index_dist = index_dist/pawn_dist\n            this.setState({dist_array:[...this.state.dist_array, index_dist]});\n            this.setState({dist_time_array:[...this.state.dist_time_array, (Date.now() - this.state.startAt)/1000]});\n            if (index_dist >= 0.5){this.setState({index_passed:1})}\n            if (index_dist < 0.5 && this.state.index_passed === 1){\n              this.setState({index_passed:0});\n              this.setState({count:this.state.count+1});\n            }\n          }\n          \n          if (this.state.finger_done == true && this.state.rotate_done == false){\n            let rotate_dist = (landmarks[2][0] - landmarks[17][0]) / pawn_dist;\n            this.setState({rotate_array:[...this.state.rotate_array, rotate_dist]});\n            this.setState({rotate_time_array:[...this.state.rotate_time_array, (Date.now() - this.state.startAt)/1000]});\n            if (this.state.rotate_passed === 0){\n              if (rotate_dist >= 0.5) this.setState({rotate_passed:1});\n              if (rotate_dist <= -0.5) this.setState({rotate_passed:-1});\n            }\n            if (this.state.rotate_passed === 1 && rotate_dist <= -0.5){\n              this.setState({rotate_passed:-1});\n            }\n            if (this.state.rotate_passed === -1 && rotate_dist >= 0.5){\n              this.setState({rotate_passed:1});\n              this.setState({rcount:this.state.rcount+1});\n            }\n          }\n\n          if (this.state.rotate_done == true && this.state.fist_done == false){\n            let fist_dist =  ((landmarks[8][1] - landmarks[5][1])+\n                              (landmarks[12][1] - landmarks[9][1])+\n                              (landmarks[16][1] - landmarks[13][1])+\n                              (landmarks[20][1] - landmarks[17][1]))/\n                              (4*pawn_dist)\n            this.setState({fist_array:[...this.state.fist_array, fist_dist]});\n            this.setState({fist_time_array:[...this.state.fist_time_array, (Date.now() - this.state.startAt)/1000]});\n          }          \n\n          const ctx = this.canvasRef.current.getContext(\"2d\");\n          this.setState({context:ctx});\n          drawHand(hand, ctx);\n        });\n      }\n      /*\n      else{\n        if (this.state.dist_array.length !== 0){\n          this.setState({dead_frame: this.state.dead_frame+1});\n          if (this.state.dead_frame >= 10) this.stop_real_time_inference();\n        }\n      }\n      */\n    }\n  };\n\n  async stop_tapping() {\n    clearInterval(this.state.ID);\n    this.setState({finger_done:true});\n    console.log(this.state.dist_array);\n    await this.sleep(3000);\n    //this.compose_chart();\n  }\n\n  async stop_rotating() {\n    clearInterval(this.state.ID);\n    this.setState({rotate_done:true});\n    console.log(this.state.rotate_array);\n    await this.sleep(3000);\n    //this.compose_chart();\n  }\n\n  async stop_gripping() {\n    clearInterval(this.state.ID);\n    this.setState({fist_done:true});\n    console.log(this.state.fist_array);\n    await this.sleep(3000);\n    //this.compose_chart();\n  }\n\n  stop_real_time_inference() {\n    clearInterval(this.state.ID);\n    this.setState({real_time_inferencing:false});\n    this.compose_chart();\n  }\n\n  async record_video(){\n    this.setState({startAt:Date.now()});\n    const Interval_ID = setInterval(() => {\n      this.concat_frame();\n    }, 50);\n    this.setState({ID:Interval_ID});\n    this.setState({recording:true});\n  }\n\n  async concat_frame() {\n    this.setState({time_array:[...this.state.time_array, (Date.now() - this.state.startAt)/1000]});\n    if (\n      typeof this.webcamRef.current !== \"undefined\" &&\n      this.webcamRef.current !== null &&\n      this.webcamRef.current.video.readyState === 4\n    ) {\n      const image = this.webcamRef.current.getScreenshot();      \n      var img = document.createElement(\"img\");\n      img.onload = function(){\n        this.setState({record:[...this.state.record, img]});\n        //console.log(this.state.record, this.state.recording);\n      }.bind(this)\n      img.src = image;\n    }\n  }\n\n  async inference() {\n    require('@tensorflow/tfjs-backend-webgl');\n    const net = await handpose.load();\n    console.log(\"Handpose model loaded.\");\n    var i;\n    for (i = 0; i<this.state.record.length; i++){\n      const hand = await net.estimateHands(this.state.record[i]);\n      console.log(hand);\n      if (hand.length > 0){\n        hand.forEach((prediction) => {\n          const landmarks = prediction.landmarks\n\n          let pawn_dist = this.norm(landmarks[0], landmarks[2]); //sqrt(pow(landmarks[0][0]-landmarks[2][0], 2)+pow(landmarks[0][1]-landmarks[2][1], 2))\n          let index_dist = this.norm(landmarks[4], landmarks[8]); //sqrt(pow(landmarks[8][0]-landmarks[4][0], 2)+pow(landmarks[8][1]-landmarks[4][1], 2))\n          index_dist = index_dist/pawn_dist\n          this.setState({dist_array:[...this.state.dist_array, index_dist]});\n          if (index_dist >= 0.5){this.setState({index_passed:1})}\n          if (index_dist < 0.5 && this.state.index_passed === 1){\n            this.setState({index_passed:0});\n            this.setState({count:this.state.count+1});\n          }\n\n          let rotate_dist = (landmarks[2][0] - landmarks[17][0]) / pawn_dist;\n          if (this.state.rotate_passed === 0){\n            if (rotate_dist >= 0.5) this.setState({rotate_passed:1});\n            if (rotate_dist <= -0.5) this.setState({rotate_passed:-1});\n          }\n          if (this.state.rotate_passed === 1 && rotate_dist <= -0.5){\n            this.setState({rotate_passed:-1});\n          }\n          if (this.state.rotate_passed === -1 && rotate_dist >= 0.5){\n            this.setState({rotate_passed:1});\n            this.setState({rcount:this.state.rcount+1});\n          }\n        });\n      }\n    }\n    this.setState({record:[]});\n  }\n\n  stop_record() {\n    clearInterval(this.state.ID);\n    this.inference();\n    this.setState({recording:false});\n    this.compose_chart();\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n        <Webcam\n          ref={this.webcamRef}\n          style={{\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 9,\n            width: \"auto\",\n            height: \"auto\",\n          }}\n        />\n        <canvas\n          ref={this.canvasRef}\n          style={{\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 9,\n            width: \"auto\",\n            height: \"auto\",\n          }}\n        />\n        </header>\n          {this.state.button_mode ? (\n            <div>\n              <button onClick={this.increment_tap1} id=\"button1\">Index Finger</button>\n              <button onClick={this.increment_tap2} id=\"button2\">Middle Finger</button>\n            </div>\n          ) : (\n            <div></div>\n          )}     \n          {this.state.real_time_inferencing ? (\n            this.state.finger_done ? (\n              this.state.rotate_done ? (\n                this.state.fist_done ? (\n                  <button onClick={this.stop_real_time_inference}>Calculate Result</button>\n                ):(\n                  <button onClick={this.stop_real_time_inference}>Finish Gripping</button>\n                )\n              ):(\n                <button onClick={this.stop_real_time_inference}>Finish Rotating</button>\n              )\n            ):(\n              <button onClick={this.stop_real_time_inference}>Finish Tapping</button>\n            )            \n          ) : (\n          <button onClick={this.runHandpose}>Starting Real Time Inference</button>\n          )}\n\n          {this.state.recording ? (\n          <button onClick={this.stop_record}>Stopping Recording</button>\n          ) : (\n          <button onClick={this.record_video}>Starting Recording</button>\n          )}\n          <button onClick={this.reset_counter}>Reset Counter</button>\n          <button onClick={this.switch_button}>Switch On/Off Button</button>       \n          <h4>Finger Tapping Count: {this.state.count}</h4>\n          <h4>Rotate Count: {this.state.rcount}</h4>\n          <div>\n            {this.state.chart_ready ? (\n              <Line data={this.state.chart_data} />\n            ) : (\n              <div> </div>\n            )}\n            <div>\n            <input type=\"file\" id=\"upload-json\"></input>\n            </div>\n            <div>\n            <input type=\"file\" id=\"upload-weights\"></input>\n            </div>\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}