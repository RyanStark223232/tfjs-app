{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { env } from './environment';\nimport { getGlobal } from './global_util';\nconst kernelRegistry = getGlobal('kernelRegistry', () => new Map());\nconst gradRegistry = getGlobal('gradRegistry', () => new Map());\n/**\r\n * Returns the kernel function (code) associated with the provided names.\r\n *\r\n * @param kernelName The official name of the kernel.\r\n * @param backendName The official name of the backend.\r\n */\n\nexport function getKernel(kernelName, backendName) {\n  const key = makeKey(kernelName, backendName);\n  return kernelRegistry.get(key);\n}\n/**\r\n * Returns the registered gradient info associated with the provided kernel.\r\n * @param kernelName The official TF kernel name.\r\n */\n\nexport function getGradient(kernelName) {\n  return gradRegistry.get(kernelName);\n}\nexport function getKernelsForBackend(backendName) {\n  const it = kernelRegistry.entries();\n  const result = [];\n\n  while (true) {\n    const {\n      done,\n      value\n    } = it.next();\n\n    if (done) {\n      break;\n    }\n\n    const [key, config] = value;\n    const [backend] = key.split('_');\n\n    if (backend === backendName) {\n      result.push(config);\n    }\n  }\n\n  return result;\n}\n/**\r\n * Registers the function (forward pass) for the kernel in a global registry.\r\n *\r\n * @param config A config object with the following properties:\r\n * - `kernelName` The official name of the kernel.\r\n * - `backendName` The official name of the backend.\r\n * - `kernelFunc` The function to run during the forward pass of the kernel.\r\n * - `setupFunc` Optional. Gets called once, after the backend initializes.\r\n * - `disposeFunc` Optional. Gets called once, right before the backend is\r\n * disposed.\r\n */\n\nexport function registerKernel(config) {\n  const {\n    kernelName,\n    backendName\n  } = config;\n  const key = makeKey(kernelName, backendName);\n\n  if (kernelRegistry.has(key)) {\n    console.warn(`The kernel '${kernelName}' for backend ` + `'${backendName}' is already registered`);\n  }\n\n  kernelRegistry.set(key, config);\n}\n/**\r\n * Registers a gradient function for a given kernel in the global registry,\r\n * to be used during the back-propagation of that kernel.\r\n *\r\n * @param config An object with the following properties:\r\n * - `kernelName` The name of the kernel that the gradient function is for.\r\n * - `gradFunc` The function to run during back-propagation.\r\n */\n\nexport function registerGradient(config) {\n  const {\n    kernelName\n  } = config;\n\n  if (gradRegistry.has(kernelName)) {\n    // TODO (yassogba) after 3.0 assess whether we need to keep this gated\n    // to debug mode.\n    if (env().getBool('DEBUG')) {\n      console.warn(`Overriding the gradient for '${kernelName}'`);\n    }\n  }\n\n  gradRegistry.set(kernelName, config);\n}\n/**\r\n * Removes the kernel function from the registry.\r\n *\r\n * @param kernelName The official name of the kernel.\r\n * @param backendName The official name of the backend.\r\n *\r\n */\n\nexport function unregisterKernel(kernelName, backendName) {\n  const key = makeKey(kernelName, backendName);\n\n  if (!kernelRegistry.has(key)) {\n    throw new Error(`The kernel '${kernelName}' for backend ` + `'${backendName}' is not registered`);\n  }\n\n  kernelRegistry.delete(key);\n}\n/** Removes the registered gradient from the global registry. */\n\nexport function unregisterGradient(kernelName) {\n  if (!gradRegistry.has(kernelName)) {\n    throw new Error(`The gradient '${kernelName}' for backend is not registered`);\n  }\n\n  gradRegistry.delete(kernelName);\n}\n/**\r\n * Finds kernels that have already been registered to a backend and re-registers\r\n * them for a new backend. Useful for registering custom backends.\r\n * @param registeredBackendName Already registered backend.\r\n * @param newBackendName New backend.\r\n */\n\nexport function copyRegisteredKernels(registeredBackendName, newBackendName) {\n  const kernels = getKernelsForBackend(registeredBackendName);\n  kernels.forEach(kernelConfig => {\n    const newKernelConfig = Object.assign({}, kernelConfig, {\n      backendName: newBackendName\n    });\n    registerKernel(newKernelConfig);\n  });\n}\n\nfunction makeKey(kernelName, backendName) {\n  return `${backendName}_${kernelName}`;\n}","map":{"version":3,"sources":["../src/kernel_registry.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { env } from './environment';\r\nimport { getGlobal } from './global_util';\r\nconst kernelRegistry = getGlobal('kernelRegistry', () => new Map());\r\nconst gradRegistry = getGlobal('gradRegistry', () => new Map());\r\n/**\r\n * Returns the kernel function (code) associated with the provided names.\r\n *\r\n * @param kernelName The official name of the kernel.\r\n * @param backendName The official name of the backend.\r\n */\r\nexport function getKernel(kernelName, backendName) {\r\n    const key = makeKey(kernelName, backendName);\r\n    return kernelRegistry.get(key);\r\n}\r\n/**\r\n * Returns the registered gradient info associated with the provided kernel.\r\n * @param kernelName The official TF kernel name.\r\n */\r\nexport function getGradient(kernelName) {\r\n    return gradRegistry.get(kernelName);\r\n}\r\nexport function getKernelsForBackend(backendName) {\r\n    const it = kernelRegistry.entries();\r\n    const result = [];\r\n    while (true) {\r\n        const { done, value } = it.next();\r\n        if (done) {\r\n            break;\r\n        }\r\n        const [key, config] = value;\r\n        const [backend,] = key.split('_');\r\n        if (backend === backendName) {\r\n            result.push(config);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Registers the function (forward pass) for the kernel in a global registry.\r\n *\r\n * @param config A config object with the following properties:\r\n * - `kernelName` The official name of the kernel.\r\n * - `backendName` The official name of the backend.\r\n * - `kernelFunc` The function to run during the forward pass of the kernel.\r\n * - `setupFunc` Optional. Gets called once, after the backend initializes.\r\n * - `disposeFunc` Optional. Gets called once, right before the backend is\r\n * disposed.\r\n */\r\nexport function registerKernel(config) {\r\n    const { kernelName, backendName } = config;\r\n    const key = makeKey(kernelName, backendName);\r\n    if (kernelRegistry.has(key)) {\r\n        console.warn(`The kernel '${kernelName}' for backend ` +\r\n            `'${backendName}' is already registered`);\r\n    }\r\n    kernelRegistry.set(key, config);\r\n}\r\n/**\r\n * Registers a gradient function for a given kernel in the global registry,\r\n * to be used during the back-propagation of that kernel.\r\n *\r\n * @param config An object with the following properties:\r\n * - `kernelName` The name of the kernel that the gradient function is for.\r\n * - `gradFunc` The function to run during back-propagation.\r\n */\r\nexport function registerGradient(config) {\r\n    const { kernelName } = config;\r\n    if (gradRegistry.has(kernelName)) {\r\n        // TODO (yassogba) after 3.0 assess whether we need to keep this gated\r\n        // to debug mode.\r\n        if (env().getBool('DEBUG')) {\r\n            console.warn(`Overriding the gradient for '${kernelName}'`);\r\n        }\r\n    }\r\n    gradRegistry.set(kernelName, config);\r\n}\r\n/**\r\n * Removes the kernel function from the registry.\r\n *\r\n * @param kernelName The official name of the kernel.\r\n * @param backendName The official name of the backend.\r\n *\r\n */\r\nexport function unregisterKernel(kernelName, backendName) {\r\n    const key = makeKey(kernelName, backendName);\r\n    if (!kernelRegistry.has(key)) {\r\n        throw new Error(`The kernel '${kernelName}' for backend ` +\r\n            `'${backendName}' is not registered`);\r\n    }\r\n    kernelRegistry.delete(key);\r\n}\r\n/** Removes the registered gradient from the global registry. */\r\nexport function unregisterGradient(kernelName) {\r\n    if (!gradRegistry.has(kernelName)) {\r\n        throw new Error(`The gradient '${kernelName}' for backend is not registered`);\r\n    }\r\n    gradRegistry.delete(kernelName);\r\n}\r\n/**\r\n * Finds kernels that have already been registered to a backend and re-registers\r\n * them for a new backend. Useful for registering custom backends.\r\n * @param registeredBackendName Already registered backend.\r\n * @param newBackendName New backend.\r\n */\r\nexport function copyRegisteredKernels(registeredBackendName, newBackendName) {\r\n    const kernels = getKernelsForBackend(registeredBackendName);\r\n    kernels.forEach(kernelConfig => {\r\n        const newKernelConfig = Object.assign({}, kernelConfig, { backendName: newBackendName });\r\n        registerKernel(newKernelConfig);\r\n    });\r\n}\r\nfunction makeKey(kernelName, backendName) {\r\n    return `${backendName}_${kernelName}`;\r\n}\r\n//# sourceMappingURL=kernel_registry.js.map"]},"metadata":{},"sourceType":"module"}