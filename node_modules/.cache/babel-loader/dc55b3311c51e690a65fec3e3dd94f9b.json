{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nexport const COMPLEX_FFT = {\n  REAL: 'return real * expR - imag * expI;',\n  IMAG: 'return real * expI + imag * expR;'\n};\nexport class FFTProgram {\n  constructor(op, inputShape, inverse) {\n    this.variableNames = ['real', 'imag'];\n    const innerDim = inputShape[1];\n    this.outputShape = inputShape;\n    const exponentMultiplierSnippet = inverse ? `2.0 * ${Math.PI}` : `-2.0 * ${Math.PI}`;\n    const resultDenominator = inverse ? `${innerDim}.0` : '1.0';\n    this.userCode = `\n      const float exponentMultiplier = ${exponentMultiplierSnippet};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${op}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${innerDim});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${innerDim}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${resultDenominator};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `;\n  }\n\n}","map":{"version":3,"sources":["../src/fft_gpu.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAIH,OAAO,MAAM,WAAW,GAAG;AACzB,EAAA,IAAI,EAAE,mCADmB;AAEzB,EAAA,IAAI,EAAE;AAFmB,CAApB;AAKP,OAAM,MAAO,UAAP,CAAiB;AAKrB,EAAA,WAAA,CAAY,EAAZ,EAAwB,UAAxB,EAAsD,OAAtD,EAAsE;AAJtE,SAAA,aAAA,GAAgB,CAAC,MAAD,EAAS,MAAT,CAAhB;AAKE,UAAM,QAAQ,GAAG,UAAU,CAAC,CAAD,CAA3B;AACA,SAAK,WAAL,GAAmB,UAAnB;AAEA,UAAM,yBAAyB,GAC3B,OAAO,GAAG,SAAS,IAAI,CAAC,EAAE,EAAnB,GAAwB,UAAU,IAAI,CAAC,EAAE,EADpD;AAEA,UAAM,iBAAiB,GAAG,OAAO,GAAG,GAAG,QAAQ,IAAd,GAAqB,KAAtD;AAEA,SAAK,QAAL,GAAgB;yCACqB,yBAAyB;;;UAGxD,EAAE;;;;kDAIsC,QAAQ;;;;;;8BAM5B,QAAQ;;;;;;;;;yDASmB,iBAAiB;;;;;;;;;;AAUrE,KAjCD;AAkCD;;AA/CoB","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nexport const COMPLEX_FFT = {\r\n    REAL: 'return real * expR - imag * expI;',\r\n    IMAG: 'return real * expI + imag * expR;'\r\n};\r\nexport class FFTProgram {\r\n    constructor(op, inputShape, inverse) {\r\n        this.variableNames = ['real', 'imag'];\r\n        const innerDim = inputShape[1];\r\n        this.outputShape = inputShape;\r\n        const exponentMultiplierSnippet = inverse ? `2.0 * ${Math.PI}` : `-2.0 * ${Math.PI}`;\r\n        const resultDenominator = inverse ? `${innerDim}.0` : '1.0';\r\n        this.userCode = `\r\n      const float exponentMultiplier = ${exponentMultiplierSnippet};\r\n\r\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\r\n        ${op}\r\n      }\r\n\r\n      float mulMatDFT(int batch, int index) {\r\n        float indexRatio = float(index) / float(${innerDim});\r\n        float exponentMultiplierTimesIndexRatio =\r\n            exponentMultiplier * indexRatio;\r\n\r\n        float result = 0.0;\r\n\r\n        for (int i = 0; i < ${innerDim}; i++) {\r\n          // x = (-2|2 * PI / N) * index * i;\r\n          float x = exponentMultiplierTimesIndexRatio * float(i);\r\n          float expR = cos(x);\r\n          float expI = sin(x);\r\n          float real = getReal(batch, i);\r\n          float imag = getImag(batch, i);\r\n\r\n          result +=\r\n              unaryOpComplex(real, expR, imag, expI) / ${resultDenominator};\r\n        }\r\n\r\n        return result;\r\n      }\r\n\r\n      void main() {\r\n        ivec2 coords = getOutputCoords();\r\n        setOutput(mulMatDFT(coords[0], coords[1]));\r\n      }\r\n    `;\r\n    }\r\n}\r\n//# sourceMappingURL=fft_gpu.js.map"]},"metadata":{},"sourceType":"module"}