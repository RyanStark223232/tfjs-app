{"ast":null,"code":"import _slicedToArray from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nexport var RotateProgram = function RotateProgram(imageShape, radians, fillValue, center) {\n  _classCallCheck(this, RotateProgram);\n\n  this.variableNames = ['Image'];\n  this.outputShape = [];\n  var imageHeight = imageShape[1];\n  var imageWidth = imageShape[2];\n  var sinFactor = Math.sin(radians).toFixed(3);\n  var cosFactor = Math.cos(radians).toFixed(3);\n  this.outputShape = imageShape;\n\n  var _backend_util$getImag = backend_util.getImageCenter(center, imageHeight, imageWidth),\n      _backend_util$getImag2 = _slicedToArray(_backend_util$getImag, 2),\n      centerX = _backend_util$getImag2[0],\n      centerY = _backend_util$getImag2[1];\n\n  var centerXString = centerX.toFixed(3);\n  var centerYString = centerY.toFixed(3);\n  var fillSnippet = '';\n\n  if (typeof fillValue === 'number') {\n    fillSnippet = \"float outputValue = \".concat(fillValue.toFixed(2), \";\");\n  } else {\n    fillSnippet = \"\\n        vec3 fill = vec3(\".concat(fillValue.join(','), \");\\n        float outputValue = fill[coords[3]];\");\n  }\n\n  this.userCode = \"\\n        void main() {\\n          ivec4 coords = getOutputCoords();\\n          int x = coords[2];\\n          int y = coords[1];\\n          float coordXFloat = (float(x) - \".concat(centerXString, \") * \").concat(cosFactor, \" - (float(y) - \").concat(centerYString, \") * \").concat(sinFactor, \";\\n          float coordYFloat = (float(x) - \").concat(centerXString, \") * \").concat(sinFactor, \" + (float(y) - \").concat(centerYString, \") * \").concat(cosFactor, \";\\n          int coordX = int(round(coordXFloat + \").concat(centerXString, \"));\\n          int coordY = int(round(coordYFloat + \").concat(centerYString, \"));\\n          \").concat(fillSnippet, \"\\n          if(coordX >= 0 && coordX < \").concat(imageWidth, \" && coordY >= 0 && coordY < \").concat(imageHeight, \") {\\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\\n          }\\n          setOutput(outputValue);\\n        }\\n    \");\n};","map":{"version":3,"sources":["../src/rotate_gpu.ts"],"names":[],"mappings":";;;AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,YAAR,QAA2B,uBAA3B;AAIA,WAAa,aAAb,GAKE,uBACI,UADJ,EACkD,OADlD,EAEI,SAFJ,EAGI,MAHJ,EAGmC;AAAA;;AAPnC,OAAA,aAAA,GAAgB,CAAC,OAAD,CAAhB;AACA,OAAA,WAAA,GAAwB,EAAxB;AAOE,MAAM,WAAW,GAAG,UAAU,CAAC,CAAD,CAA9B;AACA,MAAM,UAAU,GAAG,UAAU,CAAC,CAAD,CAA7B;AACA,MAAM,SAAS,GAAG,IAAI,CAAC,GAAL,CAAS,OAAT,EAAkB,OAAlB,CAA0B,CAA1B,CAAlB;AACA,MAAM,SAAS,GAAG,IAAI,CAAC,GAAL,CAAS,OAAT,EAAkB,OAAlB,CAA0B,CAA1B,CAAlB;AACA,OAAK,WAAL,GAAmB,UAAnB;;AALiC,8BAQ7B,YAAY,CAAC,cAAb,CAA4B,MAA5B,EAAoC,WAApC,EAAiD,UAAjD,CAR6B;AAAA;AAAA,MAO1B,OAP0B;AAAA,MAOjB,OAPiB;;AASjC,MAAM,aAAa,GAAG,OAAO,CAAC,OAAR,CAAgB,CAAhB,CAAtB;AACA,MAAM,aAAa,GAAG,OAAO,CAAC,OAAR,CAAgB,CAAhB,CAAtB;AAEA,MAAI,WAAW,GAAG,EAAlB;;AACA,MAAI,OAAO,SAAP,KAAqB,QAAzB,EAAmC;AACjC,IAAA,WAAW,iCAA0B,SAAS,CAAC,OAAV,CAAkB,CAAlB,CAA1B,MAAX;AACD,GAFD,MAEO;AACL,IAAA,WAAW,wCACU,SAAS,CAAC,IAAV,CAAe,GAAf,CADV,qDAAX;AAGD;;AAED,OAAK,QAAL,yLAKwC,aALxC,iBAMI,SANJ,4BAM+B,aAN/B,iBAMmD,SANnD,0DAOwC,aAPxC,iBAQI,SARJ,4BAQ+B,aAR/B,iBAQmD,SARnD,+DAS6C,aAT7C,iEAU6C,aAV7C,4BAWQ,WAXR,oDAYmC,UAZnC,yCAaI,WAbJ;AAmBD,CAhDH","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { backend_util } from '@tensorflow/tfjs-core';\r\nexport class RotateProgram {\r\n    constructor(imageShape, radians, fillValue, center) {\r\n        this.variableNames = ['Image'];\r\n        this.outputShape = [];\r\n        const imageHeight = imageShape[1];\r\n        const imageWidth = imageShape[2];\r\n        const sinFactor = Math.sin(radians).toFixed(3);\r\n        const cosFactor = Math.cos(radians).toFixed(3);\r\n        this.outputShape = imageShape;\r\n        const [centerX, centerY] = backend_util.getImageCenter(center, imageHeight, imageWidth);\r\n        const centerXString = centerX.toFixed(3);\r\n        const centerYString = centerY.toFixed(3);\r\n        let fillSnippet = '';\r\n        if (typeof fillValue === 'number') {\r\n            fillSnippet = `float outputValue = ${fillValue.toFixed(2)};`;\r\n        }\r\n        else {\r\n            fillSnippet = `\r\n        vec3 fill = vec3(${fillValue.join(',')});\r\n        float outputValue = fill[coords[3]];`;\r\n        }\r\n        this.userCode = `\r\n        void main() {\r\n          ivec4 coords = getOutputCoords();\r\n          int x = coords[2];\r\n          int y = coords[1];\r\n          float coordXFloat = (float(x) - ${centerXString}) * ${cosFactor} - (float(y) - ${centerYString}) * ${sinFactor};\r\n          float coordYFloat = (float(x) - ${centerXString}) * ${sinFactor} + (float(y) - ${centerYString}) * ${cosFactor};\r\n          int coordX = int(round(coordXFloat + ${centerXString}));\r\n          int coordY = int(round(coordYFloat + ${centerYString}));\r\n          ${fillSnippet}\r\n          if(coordX >= 0 && coordX < ${imageWidth} && coordY >= 0 && coordY < ${imageHeight}) {\r\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\r\n          }\r\n          setOutput(outputValue);\r\n        }\r\n    `;\r\n    }\r\n}\r\n//# sourceMappingURL=rotate_gpu.js.map"]},"metadata":{},"sourceType":"module"}