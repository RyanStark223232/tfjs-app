{"ast":null,"code":"import { deepMap } from '../../utils/collection';\nimport { factory } from '../../utils/factory';\nimport { notNumber } from '../../plain/number';\nvar name = 'not';\nvar dependencies = ['typed'];\nexport var createNot = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n  /**\r\n   * Logical `not`. Flips boolean value of a given parameter.\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.not(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.not(2)      // returns false\r\n   *    math.not(0)      // returns true\r\n   *    math.not(true)   // returns false\r\n   *\r\n   *    a = [2, -7, 0]\r\n   *    math.not(a)      // returns [false, false, true]\r\n   *\r\n   * See also:\r\n   *\r\n   *    and, or, xor\r\n   *\r\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\r\n   * @return {boolean | Array | Matrix}\r\n   *            Returns true when input is a zero or empty value.\r\n   */\n\n  return typed(name, {\n    number: notNumber,\n    Complex: function Complex(x) {\n      return x.re === 0 && x.im === 0;\n    },\n    BigNumber: function BigNumber(x) {\n      return x.isZero() || x.isNaN();\n    },\n    Unit: function Unit(x) {\n      return x.value !== null ? this(x.value) : true;\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, this);\n    }\n  });\n});","map":{"version":3,"sources":["C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/mathjs/es/function/logical/not.js"],"names":["deepMap","factory","notNumber","name","dependencies","createNot","_ref","typed","number","Complex","x","re","im","BigNumber","isZero","isNaN","Unit","value","ArrayMatrix"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,IAAIC,IAAI,GAAG,KAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,CAAnB;AACA,OAAO,IAAIC,SAAS,GAAG,eAAeJ,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AAChF,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOA,KAAK,CAACJ,IAAD,EAAO;AACjBK,IAAAA,MAAM,EAAEN,SADS;AAEjBO,IAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBC,CAAjB,EAAoB;AAC3B,aAAOA,CAAC,CAACC,EAAF,KAAS,CAAT,IAAcD,CAAC,CAACE,EAAF,KAAS,CAA9B;AACD,KAJgB;AAKjBC,IAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBH,CAAnB,EAAsB;AAC/B,aAAOA,CAAC,CAACI,MAAF,MAAcJ,CAAC,CAACK,KAAF,EAArB;AACD,KAPgB;AAQjBC,IAAAA,IAAI,EAAE,SAASA,IAAT,CAAcN,CAAd,EAAiB;AACrB,aAAOA,CAAC,CAACO,KAAF,KAAY,IAAZ,GAAmB,KAAKP,CAAC,CAACO,KAAP,CAAnB,GAAmC,IAA1C;AACD,KAVgB;AAWjB,sBAAkB,SAASC,WAAT,CAAqBR,CAArB,EAAwB;AACxC,aAAOV,OAAO,CAACU,CAAD,EAAI,IAAJ,CAAd;AACD;AAbgB,GAAP,CAAZ;AAeD,CA3C4C,CAAtC","sourcesContent":["import { deepMap } from '../../utils/collection';\r\nimport { factory } from '../../utils/factory';\r\nimport { notNumber } from '../../plain/number';\r\nvar name = 'not';\r\nvar dependencies = ['typed'];\r\nexport var createNot = /* #__PURE__ */factory(name, dependencies, function (_ref) {\r\n  var typed = _ref.typed;\r\n\r\n  /**\r\n   * Logical `not`. Flips boolean value of a given parameter.\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.not(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.not(2)      // returns false\r\n   *    math.not(0)      // returns true\r\n   *    math.not(true)   // returns false\r\n   *\r\n   *    a = [2, -7, 0]\r\n   *    math.not(a)      // returns [false, false, true]\r\n   *\r\n   * See also:\r\n   *\r\n   *    and, or, xor\r\n   *\r\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\r\n   * @return {boolean | Array | Matrix}\r\n   *            Returns true when input is a zero or empty value.\r\n   */\r\n  return typed(name, {\r\n    number: notNumber,\r\n    Complex: function Complex(x) {\r\n      return x.re === 0 && x.im === 0;\r\n    },\r\n    BigNumber: function BigNumber(x) {\r\n      return x.isZero() || x.isNaN();\r\n    },\r\n    Unit: function Unit(x) {\r\n      return x.value !== null ? this(x.value) : true;\r\n    },\r\n    'Array | Matrix': function ArrayMatrix(x) {\r\n      return deepMap(x, this);\r\n    }\r\n  });\r\n});"]},"metadata":{},"sourceType":"module"}