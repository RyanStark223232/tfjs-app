{"ast":null,"code":"import _slicedToArray from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nexport var ResizeNearestNeighborProgram = function ResizeNearestNeighborProgram(inputShape, newHeight, newWidth, alignCorners) {\n  _classCallCheck(this, ResizeNearestNeighborProgram);\n\n  this.variableNames = ['A'];\n  this.outputShape = [];\n\n  var _inputShape = _slicedToArray(inputShape, 4),\n      batch = _inputShape[0],\n      oldHeight = _inputShape[1],\n      oldWidth = _inputShape[2],\n      depth = _inputShape[3];\n\n  this.outputShape = [batch, newHeight, newWidth, depth];\n  var effectiveInSize = [alignCorners && newHeight > 1 ? oldHeight - 1 : oldHeight, alignCorners && newWidth > 1 ? oldWidth - 1 : oldWidth];\n  var effectiveOutSize = [alignCorners && newHeight > 1 ? newHeight - 1 : newHeight, alignCorners && newWidth > 1 ? newWidth - 1 : newWidth]; // When align corners is false, we rounds the value with floor.\n\n  var roundBase = alignCorners ? '0.5' : '0.0';\n  this.userCode = \"\\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\\n          \".concat(effectiveInSize[0] / effectiveOutSize[0], \",\\n          \").concat(effectiveInSize[1] / effectiveOutSize[1], \");\\n      const vec2 inputShapeRC = vec2(\").concat(oldHeight, \".0, \").concat(oldWidth, \".0);\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n        ivec2 yRC = coords.yz;\\n\\n        // Fractional source index.\\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\\n\\n        // Compute the coordinators of nearest neighbor point.\\n        ivec2 sourceNearestRC = ivec2(\\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + \").concat(roundBase, \")));\\n\\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\\n\\n        setOutput(newValue);\\n      }\\n    \");\n};","map":{"version":3,"sources":["../src/resize_nearest_neighbor_gpu.ts"],"names":[],"mappings":";;;AAAA;;;;;;;;;;;;;;;AAeG;AAIH,WAAa,4BAAb,GAKE,sCACI,UADJ,EACkD,SADlD,EAEI,QAFJ,EAEsB,YAFtB,EAE2C;AAAA;;AAN3C,OAAA,aAAA,GAAgB,CAAC,GAAD,CAAhB;AACA,OAAA,WAAA,GAAwB,EAAxB;;AAK2C,mCACG,UADH;AAAA,MAClC,KADkC;AAAA,MAC3B,SAD2B;AAAA,MAChB,QADgB;AAAA,MACN,KADM;;AAEzC,OAAK,WAAL,GAAmB,CAAC,KAAD,EAAQ,SAAR,EAAmB,QAAnB,EAA6B,KAA7B,CAAnB;AAEA,MAAM,eAAe,GAAqB,CACvC,YAAY,IAAI,SAAS,GAAG,CAA7B,GAAkC,SAAS,GAAG,CAA9C,GAAkD,SADV,EAEvC,YAAY,IAAI,QAAQ,GAAG,CAA5B,GAAiC,QAAQ,GAAG,CAA5C,GAAgD,QAFR,CAA1C;AAKA,MAAM,gBAAgB,GAAqB,CACxC,YAAY,IAAI,SAAS,GAAG,CAA7B,GAAkC,SAAS,GAAG,CAA9C,GAAkD,SADT,EAExC,YAAY,IAAI,QAAQ,GAAG,CAA5B,GAAiC,QAAQ,GAAG,CAA5C,GAAgD,QAFP,CAA3C,CATyC,CAczC;;AACA,MAAM,SAAS,GAAG,YAAY,GAAG,KAAH,GAAW,KAAzC;AAEA,OAAK,QAAL,mFAEQ,eAAe,CAAC,CAAD,CAAf,GAAqB,gBAAgB,CAAC,CAAD,CAF7C,0BAGQ,eAAe,CAAC,CAAD,CAAf,GAAqB,gBAAgB,CAAC,CAAD,CAH7C,sDAImC,SAJnC,iBAImD,QAJnD,ycAiB0D,SAjB1D;AAwBD,CAhDH","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nexport class ResizeNearestNeighborProgram {\r\n    constructor(inputShape, newHeight, newWidth, alignCorners) {\r\n        this.variableNames = ['A'];\r\n        this.outputShape = [];\r\n        const [batch, oldHeight, oldWidth, depth] = inputShape;\r\n        this.outputShape = [batch, newHeight, newWidth, depth];\r\n        const effectiveInSize = [\r\n            (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\r\n            (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\r\n        ];\r\n        const effectiveOutSize = [\r\n            (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\r\n            (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\r\n        ];\r\n        // When align corners is false, we rounds the value with floor.\r\n        const roundBase = alignCorners ? '0.5' : '0.0';\r\n        this.userCode = `\r\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\r\n          ${effectiveInSize[0] / effectiveOutSize[0]},\r\n          ${effectiveInSize[1] / effectiveOutSize[1]});\r\n      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);\r\n\r\n      void main() {\r\n        ivec4 coords = getOutputCoords();\r\n        int b = coords[0];\r\n        int d = coords[3];\r\n        ivec2 yRC = coords.yz;\r\n\r\n        // Fractional source index.\r\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\r\n\r\n        // Compute the coordinators of nearest neighbor point.\r\n        ivec2 sourceNearestRC = ivec2(\r\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${roundBase})));\r\n\r\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\r\n\r\n        setOutput(newValue);\r\n      }\r\n    `;\r\n    }\r\n}\r\n//# sourceMappingURL=resize_nearest_neighbor_gpu.js.map"]},"metadata":{},"sourceType":"module"}