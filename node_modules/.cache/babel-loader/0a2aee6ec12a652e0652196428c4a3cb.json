{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { Any } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { parseAxisParam } from '../util';\nimport { expandShapeToKeepDim, getAxesPermutation, getInnerMostAxes } from './axis_util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\nimport { transpose } from './transpose';\n/**\r\n * Computes the logical or of elements across dimensions of a `tf.Tensor`.\r\n *\r\n * Reduces the input along the dimensions given in `axes`. Unless `keepDims`\r\n * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in\r\n * `axes`. If `keepDims` is true, the reduced dimensions are retained with\r\n * length 1. If `axes` has no entries, all dimensions are reduced, and an\r\n * `tf.Tensor` with a single element is returned.\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([1, 1, 1], 'bool');\r\n *\r\n * x.any().print();  // or tf.any(x)\r\n * ```\r\n *\r\n * ```js\r\n * const x = tf.tensor2d([1, 1, 0, 0], [2, 2], 'bool');\r\n *\r\n * const axis = 1;\r\n * x.any(axis).print();  // or tf.any(x, axis)\r\n * ```\r\n *\r\n * @param x The input tensor. Must be of dtype bool.\r\n * @param axis The dimension(s) to reduce. By default it reduces\r\n *     all dimensions.\r\n * @param keepDims If true, retains reduced dimensions with size 1.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Reduction'}\r\n */\n\nfunction any_(x, axis = null, keepDims = false) {\n  let $x = convertToTensor(x, 'x', 'any', 'bool');\n\n  const forward = backend => {\n    const origAxes = parseAxisParam(axis, $x.shape);\n    let axes = origAxes;\n    const permutedAxes = getAxesPermutation(axes, $x.rank);\n\n    if (permutedAxes != null) {\n      $x = transpose($x, permutedAxes);\n      axes = getInnerMostAxes(axes.length, $x.rank);\n    }\n\n    const res = backend.any($x, axes);\n\n    if (keepDims) {\n      const newShape = expandShapeToKeepDim(res.shape, origAxes);\n      return reshape(res, newShape);\n    }\n\n    return res;\n  };\n\n  const inputs = {\n    x: $x\n  };\n  const attrs = {\n    axis,\n    keepDims\n  };\n  return ENGINE.runKernelFunc(forward, inputs, null\n  /* grad */\n  , Any, attrs);\n} // tslint:disable-next-line:variable-name\n\n\nexport const any = op({\n  any_\n});","map":{"version":3,"sources":["../../src/ops/any.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,MAAR,QAAkC,WAAlC;AACA,SAAQ,GAAR,QAAuC,iBAAvC;AAIA,SAAQ,eAAR,QAA8B,oBAA9B;AAEA,SAAQ,cAAR,QAA6B,SAA7B;AAEA,SAAQ,oBAAR,EAA8B,kBAA9B,EAAkD,gBAAlD,QAAyE,aAAzE;AACA,SAAQ,EAAR,QAAiB,aAAjB;AACA,SAAQ,OAAR,QAAsB,WAAtB;AACA,SAAQ,SAAR,QAAwB,aAAxB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BG;;AACH,SAAS,IAAT,CACI,CADJ,EAC0B,IAAA,GAAwB,IADlD,EACwD,QAAQ,GAAG,KADnE,EACwE;AACtE,MAAI,EAAE,GAAG,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,KAAT,EAAgB,MAAhB,CAAxB;;AAEA,QAAM,OAAO,GAAyB,OAAD,IAAY;AAC/C,UAAM,QAAQ,GAAG,cAAc,CAAC,IAAD,EAAO,EAAE,CAAC,KAAV,CAA/B;AACA,QAAI,IAAI,GAAG,QAAX;AACA,UAAM,YAAY,GAAG,kBAAkB,CAAC,IAAD,EAAO,EAAE,CAAC,IAAV,CAAvC;;AACA,QAAI,YAAY,IAAI,IAApB,EAA0B;AACxB,MAAA,EAAE,GAAG,SAAS,CAAC,EAAD,EAAK,YAAL,CAAd;AACA,MAAA,IAAI,GAAG,gBAAgB,CAAC,IAAI,CAAC,MAAN,EAAc,EAAE,CAAC,IAAjB,CAAvB;AACD;;AACD,UAAM,GAAG,GAAG,OAAO,CAAC,GAAR,CAAY,EAAZ,EAAgB,IAAhB,CAAZ;;AACA,QAAI,QAAJ,EAAc;AACZ,YAAM,QAAQ,GAAG,oBAAoB,CAAC,GAAG,CAAC,KAAL,EAAY,QAAZ,CAArC;AACA,aAAO,OAAO,CAAC,GAAD,EAAM,QAAN,CAAd;AACD;;AACD,WAAO,GAAP;AACD,GAdD;;AAgBA,QAAM,MAAM,GAAc;AAAC,IAAA,CAAC,EAAE;AAAJ,GAA1B;AACA,QAAM,KAAK,GAAa;AAAC,IAAA,IAAD;AAAO,IAAA;AAAP,GAAxB;AAEA,SAAO,MAAM,CAAC,aAAP,CACI,OADJ,EACa,MADb,EAC6C;AAAK;AADlD,IAC8D,GAD9D,EAEI,KAFJ,CAAP;AAGD,C,CAED;;;AACA,OAAO,MAAM,GAAG,GAAG,EAAE,CAAC;AAAC,EAAA;AAAD,CAAD,CAAd","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { ENGINE } from '../engine';\r\nimport { Any } from '../kernel_names';\r\nimport { convertToTensor } from '../tensor_util_env';\r\nimport { parseAxisParam } from '../util';\r\nimport { expandShapeToKeepDim, getAxesPermutation, getInnerMostAxes } from './axis_util';\r\nimport { op } from './operation';\r\nimport { reshape } from './reshape';\r\nimport { transpose } from './transpose';\r\n/**\r\n * Computes the logical or of elements across dimensions of a `tf.Tensor`.\r\n *\r\n * Reduces the input along the dimensions given in `axes`. Unless `keepDims`\r\n * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in\r\n * `axes`. If `keepDims` is true, the reduced dimensions are retained with\r\n * length 1. If `axes` has no entries, all dimensions are reduced, and an\r\n * `tf.Tensor` with a single element is returned.\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([1, 1, 1], 'bool');\r\n *\r\n * x.any().print();  // or tf.any(x)\r\n * ```\r\n *\r\n * ```js\r\n * const x = tf.tensor2d([1, 1, 0, 0], [2, 2], 'bool');\r\n *\r\n * const axis = 1;\r\n * x.any(axis).print();  // or tf.any(x, axis)\r\n * ```\r\n *\r\n * @param x The input tensor. Must be of dtype bool.\r\n * @param axis The dimension(s) to reduce. By default it reduces\r\n *     all dimensions.\r\n * @param keepDims If true, retains reduced dimensions with size 1.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Reduction'}\r\n */\r\nfunction any_(x, axis = null, keepDims = false) {\r\n    let $x = convertToTensor(x, 'x', 'any', 'bool');\r\n    const forward = (backend) => {\r\n        const origAxes = parseAxisParam(axis, $x.shape);\r\n        let axes = origAxes;\r\n        const permutedAxes = getAxesPermutation(axes, $x.rank);\r\n        if (permutedAxes != null) {\r\n            $x = transpose($x, permutedAxes);\r\n            axes = getInnerMostAxes(axes.length, $x.rank);\r\n        }\r\n        const res = backend.any($x, axes);\r\n        if (keepDims) {\r\n            const newShape = expandShapeToKeepDim(res.shape, origAxes);\r\n            return reshape(res, newShape);\r\n        }\r\n        return res;\r\n    };\r\n    const inputs = { x: $x };\r\n    const attrs = { axis, keepDims };\r\n    return ENGINE.runKernelFunc(forward, inputs, null /* grad */, Any, attrs);\r\n}\r\n// tslint:disable-next-line:variable-name\r\nexport const any = op({ any_ });\r\n//# sourceMappingURL=any.js.map"]},"metadata":{},"sourceType":"module"}