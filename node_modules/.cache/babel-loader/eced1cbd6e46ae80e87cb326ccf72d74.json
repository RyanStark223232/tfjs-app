{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nexport class LRNPackedProgram {\n  constructor(xShape, radius, bias, alpha, beta) {\n    this.variableNames = ['x'];\n    this.outputShape = [];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    const rad = radius;\n    const maxD = xShape[3] - 1;\n    this.outputShape = xShape; // optimize pow(bias + alpha * sum, -beta)\n    // src: https://github.com/tensorflow/tensorflow/..\n    // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..\n    // tensorflow/core/kernels/mkl_lrn_op.cc#L320\n\n    let powOperator;\n    const basis = `float(${bias}) + float(${alpha}) * sum`;\n\n    if (beta === 0.5) {\n      powOperator = `inversesqrt(${basis})`;\n    } else if (beta === 1.0) {\n      powOperator = `1.0/(${basis})`;\n    } else {\n      powOperator = `exp(log(${basis}) * float(-${beta}));`;\n    }\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${rad};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${rad}; j <= ${rad}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${maxD}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${powOperator};\n        setOutput(result);\n      }\n    `;\n  }\n\n}","map":{"version":3,"sources":["../src/lrn_packed_gpu.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAIH,OAAM,MAAO,gBAAP,CAAuB;AAO3B,EAAA,WAAA,CACI,MADJ,EACsB,MADtB,EACsC,IADtC,EACoD,KADpD,EAEI,IAFJ,EAEgB;AARhB,SAAA,aAAA,GAAgB,CAAC,GAAD,CAAhB;AACA,SAAA,WAAA,GAAwB,EAAxB;AAEA,SAAA,YAAA,GAAe,IAAf;AACA,SAAA,YAAA,GAAe,IAAf;AAKE,UAAM,GAAG,GAAG,MAAZ;AACA,UAAM,IAAI,GAAG,MAAM,CAAC,CAAD,CAAN,GAAY,CAAzB;AACA,SAAK,WAAL,GAAmB,MAAnB,CAHc,CAKd;AACA;AACA;AACA;;AACA,QAAI,WAAJ;AACA,UAAM,KAAK,GAAG,SAAS,IAAI,aAAa,KAAK,SAA7C;;AACA,QAAI,IAAI,KAAK,GAAb,EAAkB;AAChB,MAAA,WAAW,GAAG,eAAe,KAAK,GAAlC;AACD,KAFD,MAEO,IAAI,IAAI,KAAK,GAAb,EAAkB;AACvB,MAAA,WAAW,GAAG,QAAQ,KAAK,GAA3B;AACD,KAFM,MAEA;AACL,MAAA,WAAW,GAAG,WAAW,KAAK,cAAc,IAAI,KAAhD;AACD;;AAED,SAAK,QAAL,GAAgB;;;;;;;;gCAQY,KAAK,WAAL,CAAiB,CAAjB,CAAmB;gCACnB,KAAK,WAAL,CAAiB,CAAjB,CAAmB;;;;;;;;;;;;;;;iCAelB,GAAG;;;;;;;;;;;yBAWX,GAAG,UAAU,GAAG;;;6DAGoB,IAAI;;;;;;;;;;;;;;;;;;;;;0CAqBvB,WAAW;;;AAGhD,KA9DD;AA+DD;;AA3F0B","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nexport class LRNPackedProgram {\r\n    constructor(xShape, radius, bias, alpha, beta) {\r\n        this.variableNames = ['x'];\r\n        this.outputShape = [];\r\n        this.packedInputs = true;\r\n        this.packedOutput = true;\r\n        const rad = radius;\r\n        const maxD = xShape[3] - 1;\r\n        this.outputShape = xShape;\r\n        // optimize pow(bias + alpha * sum, -beta)\r\n        // src: https://github.com/tensorflow/tensorflow/..\r\n        // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..\r\n        // tensorflow/core/kernels/mkl_lrn_op.cc#L320\r\n        let powOperator;\r\n        const basis = `float(${bias}) + float(${alpha}) * sum`;\r\n        if (beta === 0.5) {\r\n            powOperator = `inversesqrt(${basis})`;\r\n        }\r\n        else if (beta === 1.0) {\r\n            powOperator = `1.0/(${basis})`;\r\n        }\r\n        else {\r\n            powOperator = `exp(log(${basis}) * float(-${beta}));`;\r\n        }\r\n        this.userCode = `\r\n      void main() {\r\n        ivec4 coords = getOutputCoords();\r\n        int b = coords.x;\r\n        int r = coords.y;\r\n        int c = coords.z;\r\n        int d = coords.w;\r\n\r\n        bool hasNextCol = d < ${this.outputShape[3]};\r\n        bool hasNextRow = c < ${this.outputShape[2]};\r\n\r\n        vec4 sum = vec4(0.);\r\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\r\n\r\n        vec4 xAtOutputCoords = vec4(\r\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\r\n          hasNextCol ?\r\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\r\n          hasNextRow ?\r\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\r\n          (hasNextRow && hasNextCol) ?\r\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\r\n        );\r\n\r\n        int firstChannel = d - ${rad};\r\n        vec2 cache = vec2(0.);\r\n        if(firstChannel >= 0){\r\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\r\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\r\n            if(hasNextRow){\r\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\r\n            }\r\n        }\r\n\r\n        ivec2 depth = ivec2(d, d + 1);\r\n        for (int j = - ${rad}; j <= ${rad}; j++) {\r\n          ivec2 idx = depth + j;\r\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\r\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${maxD}));\r\n\r\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\r\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\r\n\r\n          if(depthInRange || depthPlusOneInRange){\r\n            vec4 z = vec4(0.);\r\n            vec4 xFragAtCurrentDepth;\r\n            z.xz = cache.xy;\r\n            if(depthPlusOneInRange && hasNextCol){\r\n              xFragAtCurrentDepth = idx.y != d ?\r\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\r\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\r\n              if(hasNextRow){\r\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\r\n              }\r\n            }\r\n            cache.xy = z.yw;\r\n            sum += z * z;\r\n          }\r\n        }\r\n        vec4 result = xAtOutputCoords * ${powOperator};\r\n        setOutput(result);\r\n      }\r\n    `;\r\n    }\r\n}\r\n//# sourceMappingURL=lrn_packed_gpu.js.map"]},"metadata":{},"sourceType":"module"}