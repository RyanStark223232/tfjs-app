{"ast":null,"code":"import { factory } from '../../../utils/factory';\nimport { isBigNumber, isMatrix } from '../../../utils/is';\nvar name = 'index';\nvar dependencies = ['typed', 'Index'];\nexport var createIndex = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      Index = _ref.Index;\n  /**\r\n   * Create an index. An Index can store ranges having start, step, and end\r\n   * for multiple dimensions.\r\n   * Matrix.get, Matrix.set, and math.subset accept an Index as input.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.index(range1, range2, ...)\r\n   *\r\n   * Where each range can be any of:\r\n   *\r\n   * - A number\r\n   * - A string for getting/setting an object property\r\n   * - An instance of `Range`\r\n   * - A one-dimensional Array or a Matrix with numbers\r\n   *\r\n   * Indexes must be zero-based, integer numbers.\r\n   *\r\n   * Examples:\r\n   *\r\n   *    const b = [1, 2, 3, 4, 5]\r\n   *    math.subset(b, math.index([1, 2, 3]))     // returns [2, 3, 4]\r\n   *\r\n   *    const a = math.matrix([[1, 2], [3, 4]])\r\n   *    a.subset(math.index(0, 1))             // returns 2\r\n   *\r\n   * See also:\r\n   *\r\n   *    bignumber, boolean, complex, matrix, number, string, unit\r\n   *\r\n   * @param {...*} ranges   Zero or more ranges or numbers.\r\n   * @return {Index}        Returns the created index\r\n   */\n\n  return typed(name, {\n    '...number | string | BigNumber | Range | Array | Matrix': function numberStringBigNumberRangeArrayMatrix(args) {\n      var ranges = args.map(function (arg) {\n        if (isBigNumber(arg)) {\n          return arg.toNumber(); // convert BigNumber to Number\n        } else if (Array.isArray(arg) || isMatrix(arg)) {\n          return arg.map(function (elem) {\n            // convert BigNumber to Number\n            return isBigNumber(elem) ? elem.toNumber() : elem;\n          });\n        } else {\n          return arg;\n        }\n      });\n      var res = new Index();\n      Index.apply(res, ranges);\n      return res;\n    }\n  });\n});","map":{"version":3,"sources":["C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/mathjs/es/type/matrix/function/index.js"],"names":["factory","isBigNumber","isMatrix","name","dependencies","createIndex","_ref","typed","Index","numberStringBigNumberRangeArrayMatrix","args","ranges","map","arg","toNumber","Array","isArray","elem","res","apply"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,mBAAtC;AACA,IAAIC,IAAI,GAAG,OAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,OAAV,CAAnB;AACA,OAAO,IAAIC,WAAW,GAAG,eAAeL,OAAO,CAACG,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AAClF,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAAA,MACIC,KAAK,GAAGF,IAAI,CAACE,KADjB;AAGA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOD,KAAK,CAACJ,IAAD,EAAO;AACjB,+DAA2D,SAASM,qCAAT,CAA+CC,IAA/C,EAAqD;AAC9G,UAAIC,MAAM,GAAGD,IAAI,CAACE,GAAL,CAAS,UAAUC,GAAV,EAAe;AACnC,YAAIZ,WAAW,CAACY,GAAD,CAAf,EAAsB;AACpB,iBAAOA,GAAG,CAACC,QAAJ,EAAP,CADoB,CACG;AACxB,SAFD,MAEO,IAAIC,KAAK,CAACC,OAAN,CAAcH,GAAd,KAAsBX,QAAQ,CAACW,GAAD,CAAlC,EAAyC;AAC9C,iBAAOA,GAAG,CAACD,GAAJ,CAAQ,UAAUK,IAAV,EAAgB;AAC7B;AACA,mBAAOhB,WAAW,CAACgB,IAAD,CAAX,GAAoBA,IAAI,CAACH,QAAL,EAApB,GAAsCG,IAA7C;AACD,WAHM,CAAP;AAID,SALM,MAKA;AACL,iBAAOJ,GAAP;AACD;AACF,OAXY,CAAb;AAYA,UAAIK,GAAG,GAAG,IAAIV,KAAJ,EAAV;AACAA,MAAAA,KAAK,CAACW,KAAN,CAAYD,GAAZ,EAAiBP,MAAjB;AACA,aAAOO,GAAP;AACD;AAjBgB,GAAP,CAAZ;AAmBD,CAxD8C,CAAxC","sourcesContent":["import { factory } from '../../../utils/factory';\r\nimport { isBigNumber, isMatrix } from '../../../utils/is';\r\nvar name = 'index';\r\nvar dependencies = ['typed', 'Index'];\r\nexport var createIndex = /* #__PURE__ */factory(name, dependencies, function (_ref) {\r\n  var typed = _ref.typed,\r\n      Index = _ref.Index;\r\n\r\n  /**\r\n   * Create an index. An Index can store ranges having start, step, and end\r\n   * for multiple dimensions.\r\n   * Matrix.get, Matrix.set, and math.subset accept an Index as input.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.index(range1, range2, ...)\r\n   *\r\n   * Where each range can be any of:\r\n   *\r\n   * - A number\r\n   * - A string for getting/setting an object property\r\n   * - An instance of `Range`\r\n   * - A one-dimensional Array or a Matrix with numbers\r\n   *\r\n   * Indexes must be zero-based, integer numbers.\r\n   *\r\n   * Examples:\r\n   *\r\n   *    const b = [1, 2, 3, 4, 5]\r\n   *    math.subset(b, math.index([1, 2, 3]))     // returns [2, 3, 4]\r\n   *\r\n   *    const a = math.matrix([[1, 2], [3, 4]])\r\n   *    a.subset(math.index(0, 1))             // returns 2\r\n   *\r\n   * See also:\r\n   *\r\n   *    bignumber, boolean, complex, matrix, number, string, unit\r\n   *\r\n   * @param {...*} ranges   Zero or more ranges or numbers.\r\n   * @return {Index}        Returns the created index\r\n   */\r\n  return typed(name, {\r\n    '...number | string | BigNumber | Range | Array | Matrix': function numberStringBigNumberRangeArrayMatrix(args) {\r\n      var ranges = args.map(function (arg) {\r\n        if (isBigNumber(arg)) {\r\n          return arg.toNumber(); // convert BigNumber to Number\r\n        } else if (Array.isArray(arg) || isMatrix(arg)) {\r\n          return arg.map(function (elem) {\r\n            // convert BigNumber to Number\r\n            return isBigNumber(elem) ? elem.toNumber() : elem;\r\n          });\r\n        } else {\r\n          return arg;\r\n        }\r\n      });\r\n      var res = new Index();\r\n      Index.apply(res, ranges);\r\n      return res;\r\n    }\r\n  });\r\n});"]},"metadata":{},"sourceType":"module"}