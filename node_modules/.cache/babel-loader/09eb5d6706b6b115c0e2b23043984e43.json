{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nexport class ResizeBilinearPackedProgram {\n  constructor(inputShape, newHeight, newWidth, alignCorners) {\n    this.variableNames = ['A'];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    this.outputShape = [];\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n    const effectiveInSize = [alignCorners && newHeight > 1 ? oldHeight - 1 : oldHeight, alignCorners && newWidth > 1 ? oldWidth - 1 : oldWidth];\n    const effectiveOutSize = [alignCorners && newHeight > 1 ? newHeight - 1 : newHeight, alignCorners && newWidth > 1 ? newWidth - 1 : newWidth];\n    this.userCode = `\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec3 inputShapeRC = vec3(${oldHeight}.0, ${oldWidth}.0,\n                                     ${oldWidth}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = vec3(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(sourceFracIndexRC);\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${depth - 1};\n        bool hasNextRow = coords.z < ${newWidth - 1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `;\n  }\n\n}","map":{"version":3,"sources":["../src/resize_bilinear_packed_gpu.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAIH,OAAM,MAAO,2BAAP,CAAkC;AAOtC,EAAA,WAAA,CACI,UADJ,EACkD,SADlD,EAEI,QAFJ,EAEsB,YAFtB,EAE2C;AAR3C,SAAA,aAAA,GAAgB,CAAC,GAAD,CAAhB;AACA,SAAA,YAAA,GAAe,IAAf;AACA,SAAA,YAAA,GAAe,IAAf;AACA,SAAA,WAAA,GAAwB,EAAxB;AAME,UAAM,CAAC,KAAD,EAAQ,SAAR,EAAmB,QAAnB,EAA6B,KAA7B,IAAsC,UAA5C;AACA,SAAK,WAAL,GAAmB,CAAC,KAAD,EAAQ,SAAR,EAAmB,QAAnB,EAA6B,KAA7B,CAAnB;AAEA,UAAM,eAAe,GAAqB,CACvC,YAAY,IAAI,SAAS,GAAG,CAA7B,GAAkC,SAAS,GAAG,CAA9C,GAAkD,SADV,EAEvC,YAAY,IAAI,QAAQ,GAAG,CAA5B,GAAiC,QAAQ,GAAG,CAA5C,GAAgD,QAFR,CAA1C;AAKA,UAAM,gBAAgB,GAAqB,CACxC,YAAY,IAAI,SAAS,GAAG,CAA7B,GAAkC,SAAS,GAAG,CAA9C,GAAkD,SADT,EAExC,YAAY,IAAI,QAAQ,GAAG,CAA5B,GAAiC,QAAQ,GAAG,CAA5C,GAAgD,QAFP,CAA3C;AAKA,SAAK,QAAL,GAAgB;;YAER,eAAe,CAAC,CAAD,CAAf,GAAqB,gBAAgB,CAAC,CAAD,CAAG;YACxC,eAAe,CAAC,CAAD,CAAf,GAAqB,gBAAgB,CAAC,CAAD,CAAG;YACxC,eAAe,CAAC,CAAD,CAAf,GAAqB,gBAAgB,CAAC,CAAD,CAAG;uCACb,SAAS,OAAO,QAAQ;uCACxB,QAAQ;;;;;;;;;;;;;;;;;;;;;;gCAsBf,KAAK,GAAG,CAAC;uCACF,QAAQ,GAAG,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgD9C,KA7ED;AA8ED;;AArGqC","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nexport class ResizeBilinearPackedProgram {\r\n    constructor(inputShape, newHeight, newWidth, alignCorners) {\r\n        this.variableNames = ['A'];\r\n        this.packedInputs = true;\r\n        this.packedOutput = true;\r\n        this.outputShape = [];\r\n        const [batch, oldHeight, oldWidth, depth] = inputShape;\r\n        this.outputShape = [batch, newHeight, newWidth, depth];\r\n        const effectiveInSize = [\r\n            (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\r\n            (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\r\n        ];\r\n        const effectiveOutSize = [\r\n            (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\r\n            (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\r\n        ];\r\n        this.userCode = `\r\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\r\n          ${effectiveInSize[0] / effectiveOutSize[0]},\r\n          ${effectiveInSize[1] / effectiveOutSize[1]},\r\n          ${effectiveInSize[1] / effectiveOutSize[1]});\r\n      const vec3 inputShapeRC = vec3(${oldHeight}.0, ${oldWidth}.0,\r\n                                     ${oldWidth}.0);\r\n\r\n      float getAValue(int b, int r, int c, int d) {\r\n        return getChannel(getA(b, r, c, d), vec2(c, d));\r\n      }\r\n\r\n      void main() {\r\n        ivec4 coords = getOutputCoords();\r\n        int b = coords[0];\r\n        int d = coords[3];\r\n        // Calculate values for next column in yRC.z.\r\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\r\n\r\n        // Fractional source index.\r\n        vec3 sourceFracIndexRC = vec3(yRC) * effectiveInputOverOutputRatioRC;\r\n\r\n        // Compute the four integer indices.\r\n        ivec3 sourceFloorRC = ivec3(sourceFracIndexRC);\r\n        ivec3 sourceCeilRC = ivec3(\r\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\r\n\r\n        // Should we calculate next column and row elements in 2x2 packed cell.\r\n        bool hasNextCol = d < ${depth - 1};\r\n        bool hasNextRow = coords.z < ${newWidth - 1};\r\n\r\n        // In parallel, construct four corners for all four components in\r\n        // packed 2x2 cell.\r\n        vec4 topLeft = vec4(\r\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\r\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\r\n                     : 0.0,\r\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\r\n                     : 0.0,\r\n          (hasNextRow && hasNextCol) ?\r\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\r\n\r\n        vec4 bottomLeft = vec4(\r\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\r\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\r\n                     : 0.0,\r\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\r\n                     : 0.0,\r\n          (hasNextRow && hasNextCol) ?\r\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\r\n\r\n        vec4 topRight = vec4(\r\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\r\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\r\n                     : 0.0,\r\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\r\n                     : 0.0,\r\n          (hasNextRow && hasNextCol) ?\r\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\r\n\r\n        vec4 bottomRight = vec4(\r\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\r\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\r\n                     : 0.0,\r\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\r\n                     : 0.0,\r\n          (hasNextRow && hasNextCol) ?\r\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\r\n\r\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\r\n\r\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\r\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\r\n        vec4 newValue = mix(top, bottom, fracRC.x);\r\n\r\n        setOutput(newValue);\r\n      }\r\n    `;\r\n    }\r\n}\r\n//# sourceMappingURL=resize_bilinear_packed_gpu.js.map"]},"metadata":{},"sourceType":"module"}