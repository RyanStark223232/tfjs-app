{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../../engine';\nimport { RotateWithOffset } from '../../kernel_names';\nimport { convertToTensor } from '../../tensor_util_env';\nimport * as util from '../../util';\nimport { op } from '../operation';\n/**\r\n * Rotates the input image tensor counter-clockwise with an optional offset\r\n * center of rotation. Currently available in the CPU, WebGL, and WASM backends.\r\n *\r\n * @param image 4d tensor of shape `[batch, imageHeight, imageWidth, depth]`.\r\n * @param radians The amount of rotation.\r\n * @param fillValue The value to fill in the empty space leftover\r\n *     after rotation. Can be either a single grayscale value (0-255), or an\r\n *     array of three numbers `[red, green, blue]` specifying the red, green,\r\n *     and blue channels. Defaults to `0` (black).\r\n * @param center The center of rotation. Can be either a single value (0-1), or\r\n *     an array of two numbers `[centerX, centerY]`. Defaults to `0.5` (rotates\r\n *     the image around its center).\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\r\n */\n\nfunction rotateWithOffset_(image, radians) {\n  var fillValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var center = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0.5;\n  var $image = convertToTensor(image, 'image', 'rotateWithOffset', 'float32');\n  util.assert($image.rank === 4, function () {\n    return 'Error in rotateWithOffset: image must be rank 4,' + \"but got rank \".concat($image.rank, \".\");\n  });\n  var inputs = {\n    image: $image\n  };\n  var attrs = {\n    radians: radians,\n    fillValue: fillValue,\n    center: center\n  };\n  var res = ENGINE.runKernel(RotateWithOffset, inputs, attrs);\n  return res;\n}\n\nexport var rotateWithOffset = op({\n  rotateWithOffset_: rotateWithOffset_\n});","map":{"version":3,"sources":["../../../src/ops/image/rotate_with_offset.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,MAAR,QAAqB,cAArB;AACA,SAAQ,gBAAR,QAA8E,oBAA9E;AAIA,SAAQ,eAAR,QAA8B,uBAA9B;AAEA,OAAO,KAAK,IAAZ,MAAsB,YAAtB;AAEA,SAAQ,EAAR,QAAiB,cAAjB;AAEA;;;;;;;;;;;;;;;AAeG;;AACH,SAAS,iBAAT,CACI,KADJ,EACgC,OADhC,EAGyC;AAAA,MADrC,SACqC,uEADQ,CACR;AAAA,MAArC,MAAqC,uEAAH,GAAG;AACvC,MAAM,MAAM,GAAG,eAAe,CAAC,KAAD,EAAQ,OAAR,EAAiB,kBAAjB,EAAqC,SAArC,CAA9B;AAEA,EAAA,IAAI,CAAC,MAAL,CACI,MAAM,CAAC,IAAP,KAAgB,CADpB,EAEI;AAAA,WAAM,4EACc,MAAM,CAAC,IADrB,MAAN;AAAA,GAFJ;AAKA,MAAM,MAAM,GAA2B;AAAC,IAAA,KAAK,EAAE;AAAR,GAAvC;AACA,MAAM,KAAK,GAA0B;AAAC,IAAA,OAAO,EAAP,OAAD;AAAU,IAAA,SAAS,EAAT,SAAV;AAAqB,IAAA,MAAM,EAAN;AAArB,GAArC;AACA,MAAM,GAAG,GAAG,MAAM,CAAC,SAAP,CACR,gBADQ,EACU,MADV,EAER,KAFQ,CAAZ;AAGA,SAAO,GAAP;AACD;;AAED,OAAO,IAAM,gBAAgB,GAAG,EAAE,CAAC;AAAC,EAAA,iBAAiB,EAAjB;AAAD,CAAD,CAA3B","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { ENGINE } from '../../engine';\r\nimport { RotateWithOffset } from '../../kernel_names';\r\nimport { convertToTensor } from '../../tensor_util_env';\r\nimport * as util from '../../util';\r\nimport { op } from '../operation';\r\n/**\r\n * Rotates the input image tensor counter-clockwise with an optional offset\r\n * center of rotation. Currently available in the CPU, WebGL, and WASM backends.\r\n *\r\n * @param image 4d tensor of shape `[batch, imageHeight, imageWidth, depth]`.\r\n * @param radians The amount of rotation.\r\n * @param fillValue The value to fill in the empty space leftover\r\n *     after rotation. Can be either a single grayscale value (0-255), or an\r\n *     array of three numbers `[red, green, blue]` specifying the red, green,\r\n *     and blue channels. Defaults to `0` (black).\r\n * @param center The center of rotation. Can be either a single value (0-1), or\r\n *     an array of two numbers `[centerX, centerY]`. Defaults to `0.5` (rotates\r\n *     the image around its center).\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\r\n */\r\nfunction rotateWithOffset_(image, radians, fillValue = 0, center = 0.5) {\r\n    const $image = convertToTensor(image, 'image', 'rotateWithOffset', 'float32');\r\n    util.assert($image.rank === 4, () => 'Error in rotateWithOffset: image must be rank 4,' +\r\n        `but got rank ${$image.rank}.`);\r\n    const inputs = { image: $image };\r\n    const attrs = { radians, fillValue, center };\r\n    const res = ENGINE.runKernel(RotateWithOffset, inputs, attrs);\r\n    return res;\r\n}\r\nexport const rotateWithOffset = op({ rotateWithOffset_ });\r\n//# sourceMappingURL=rotate_with_offset.js.map"]},"metadata":{},"sourceType":"module"}