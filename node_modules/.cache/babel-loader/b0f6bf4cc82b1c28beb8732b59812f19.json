{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2017 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nconst delayCallback = (() => {\n  if (typeof requestAnimationFrame !== 'undefined') {\n    return requestAnimationFrame;\n  } else if (typeof setImmediate !== 'undefined') {\n    return setImmediate;\n  }\n\n  return f => f(); // no delays\n})();\n/**\r\n * Returns a promise that resolve when a requestAnimationFrame has completed.\r\n *\r\n * On Node.js this uses setImmediate instead of requestAnimationFrame.\r\n *\r\n * This is simply a sugar method so that users can do the following:\r\n * `await tf.nextFrame();`\r\n *\r\n * @doc {heading: 'Performance', subheading: 'Timing'}\r\n */\n\n\nfunction nextFrame() {\n  return new Promise(resolve => delayCallback(() => resolve()));\n}\n\nexport { nextFrame };","map":{"version":3,"sources":["../src/browser_util.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,MAAM,aAAa,GAAa,CAAC,MAAK;AACpC,MAAI,OAAO,qBAAP,KAAiC,WAArC,EAAkD;AAChD,WAAO,qBAAP;AACD,GAFD,MAEO,IAAI,OAAO,YAAP,KAAwB,WAA5B,EAAyC;AAC9C,WAAO,YAAP;AACD;;AACD,SAAQ,CAAD,IAAiB,CAAC,EAAzB,CANoC,CAMN;AAC/B,CAP+B,GAAhC;AASA;;;;;;;;;AASG;;;AACH,SAAS,SAAT,GAAkB;AAChB,SAAO,IAAI,OAAJ,CAAkB,OAAO,IAAI,aAAa,CAAC,MAAM,OAAO,EAAd,CAA1C,CAAP;AACD;;AAED,SAAQ,SAAR","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2017 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nconst delayCallback = (() => {\r\n    if (typeof requestAnimationFrame !== 'undefined') {\r\n        return requestAnimationFrame;\r\n    }\r\n    else if (typeof setImmediate !== 'undefined') {\r\n        return setImmediate;\r\n    }\r\n    return (f) => f(); // no delays\r\n})();\r\n/**\r\n * Returns a promise that resolve when a requestAnimationFrame has completed.\r\n *\r\n * On Node.js this uses setImmediate instead of requestAnimationFrame.\r\n *\r\n * This is simply a sugar method so that users can do the following:\r\n * `await tf.nextFrame();`\r\n *\r\n * @doc {heading: 'Performance', subheading: 'Timing'}\r\n */\r\nfunction nextFrame() {\r\n    return new Promise(resolve => delayCallback(() => resolve()));\r\n}\r\nexport { nextFrame };\r\n//# sourceMappingURL=browser_util.js.map"]},"metadata":{},"sourceType":"module"}