{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\wongh\\\\Documents\\\\GitHub\\\\tfjs-app\\\\src\\\\App.js\";\nimport React from \"react\";\nimport Button from '@material-ui/core/Button';\nimport * as handpose from \"@tensorflow-models/handpose\";\nimport * as posenet from \"@tensorflow-models/posenet\";\nimport * as facemesh from \"@tensorflow-models/facemesh\"; //import * as tf from '@tensorflow/tfjs-core';\n\nimport Webcam from \"react-webcam\";\nimport \"./App.css\";\nimport { drawHand_tap, drawHand_rotate, drawHand_fist, writeText, drawKeypoints, drawSkeleton, drawMesh } from \"./utilities\";\nimport { sqrt, pow } from \"mathjs\";\nimport { Line } from 'react-chartjs-2';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.sleep = milliseconds => {\n      return new Promise(resolve => setTimeout(resolve, milliseconds));\n    };\n\n    this.state = {\n      ID: 0,\n      tap_count: [],\n      rotate_count: [],\n      fist_count: [],\n      index_passed: 0,\n      min_dist: 0,\n      max_dist: 5.0,\n      rotate_passed: 0,\n      last_pressed: 0,\n      real_time_inferencing: false,\n      recording: false,\n      button_mode: false,\n      chart_ready: false,\n      finger_done: false,\n      rotate_done: false,\n      fist_done: false,\n      dist_array: [],\n      dist_time_array: [],\n      dist_record: [],\n      dist_time_record: [],\n      rotate_array: [],\n      rotate_time_array: [],\n      rotate_record: [],\n      rotate_time_record: [],\n      fist_array: [],\n      fist_time_array: [],\n      fist_record: [],\n      fist_time_record: [],\n      gait_record: [],\n      gait_time_record: [],\n      chart_data1: null,\n      chart_data2: null,\n      chart_data3: null,\n      wait: false,\n      wait_till: 0,\n      startAt: Date.now(),\n      dead_frame: 0,\n      ctx: null,\n      raw: true,\n      facingMode: \"user\"\n    };\n    this.webcamRef = /*#__PURE__*/React.createRef(null);\n    this.canvasRef = /*#__PURE__*/React.createRef(null);\n    this.videoConstraints = {\n      facingMode: \"user\"\n    };\n    this.runHandpose = this.runHandpose.bind(this);\n    this.stop_real_time_inference = this.stop_real_time_inference.bind(this);\n    this.stop_tapping = this.stop_tapping.bind(this);\n    this.stop_rotating = this.stop_rotating.bind(this);\n    this.stop_record = this.stop_record.bind(this);\n    this.record_video = this.record_video.bind(this);\n    this.concat_frame = this.concat_frame.bind(this);\n    this.inference = this.inference.bind(this);\n    this.reset_counter = this.reset_counter.bind(this);\n    this.increment_tap1 = this.increment_tap1.bind(this);\n    this.increment_tap2 = this.increment_tap2.bind(this);\n    this.switch_button = this.switch_button.bind(this);\n    this.compose_chart = this.compose_chart.bind(this);\n    this.runPosenet = this.runPosenet.bind(this);\n    this.read_time_posenet = this.read_time_posenet.bind(this);\n    this.runFacemesh = this.runFacemesh.bind(this);\n    this.read_time_facemesh = this.read_time_facemesh.bind(this);\n    this.switch_style = this.switch_style.bind(this);\n    this.switch_cam = this.switch_cam.bind(this);\n  }\n\n  switch_cam() {\n    if (this.state.facingMode === \"user\") this.setState({\n      facingMode: \"environment\"\n    });else if (this.state.facingMode === \"environment\") this.setState({\n      facingMode: \"user\"\n    });\n  }\n\n  async runFacemesh() {\n    require('@tensorflow/tfjs-backend-webgl');\n\n    const net = await facemesh.load();\n    console.log(\"Facemesh model loaded.\");\n    this.setState({\n      startAt: Date.now()\n    });\n    const Interval_ID = setInterval(() => {\n      this.read_time_facemesh(net);\n    }, 50);\n    this.setState({\n      ID: Interval_ID\n    });\n    this.setState({\n      real_time_inferencing: true\n    });\n  }\n\n  async read_time_facemesh(net) {\n    if (this.state.wait) {\n      this.setState({\n        wait_till: Date.now() + 3000\n      }); //await this.sleep(3000);\n\n      this.setState({\n        wait: false\n      });\n    }\n\n    if (typeof this.webcamRef.current !== \"undefined\" && this.webcamRef.current !== null && this.webcamRef.current.video.readyState === 4) {\n      const video = this.webcamRef.current.video;\n      const videoWidth = this.webcamRef.current.video.videoWidth;\n      const videoHeight = this.webcamRef.current.video.videoHeight;\n      this.webcamRef.current.video.width = videoWidth;\n      this.webcamRef.current.video.height = videoHeight;\n      this.canvasRef.current.width = videoWidth;\n      this.canvasRef.current.height = videoHeight;\n      const face = await net.estimateFaces(video);\n      const ctx = this.canvasRef.current.getContext(\"2d\");\n      drawMesh(face, ctx);\n    }\n  }\n\n  async runPosenet() {\n    require('@tensorflow/tfjs-backend-webgl');\n\n    const net = await posenet.load();\n    console.log(\"PoseNet model loaded.\");\n    this.setState({\n      startAt: Date.now()\n    });\n    const Interval_ID = setInterval(() => {\n      this.read_time_posenet(net);\n    }, 50);\n    this.setState({\n      ID: Interval_ID\n    });\n    this.setState({\n      real_time_inferencing: true\n    });\n  }\n\n  async read_time_posenet(net) {\n    if (this.state.wait) {\n      this.setState({\n        wait_till: Date.now() + 3000\n      }); //await this.sleep(3000);\n\n      this.setState({\n        wait: false\n      });\n    }\n\n    if (typeof this.webcamRef.current !== \"undefined\" && this.webcamRef.current !== null && this.webcamRef.current.video.readyState === 4) {\n      const video = this.webcamRef.current.video;\n      const videoWidth = this.webcamRef.current.video.videoWidth;\n      const videoHeight = this.webcamRef.current.video.videoHeight;\n      this.webcamRef.current.video.width = videoWidth;\n      this.webcamRef.current.video.height = videoHeight;\n      this.canvasRef.current.width = videoWidth;\n      this.canvasRef.current.height = videoHeight;\n      const pose = await net.estimateSinglePose(video);\n      const ctx = this.canvasRef.current.getContext(\"2d\");\n      drawKeypoints(pose[\"keypoints\"], 0.6, ctx);\n      drawSkeleton(pose[\"keypoints\"], 0.7, ctx);\n    }\n  }\n\n  async switch_style() {\n    await this.setState({\n      raw: !this.state.raw\n    });\n    this.compose_chart();\n  }\n\n  compose_chart() {\n    let time_array_1 = [];\n    let count_array_1 = [];\n    let time_array_2 = [];\n    let count_array_2 = [];\n    let time_array_3 = [];\n    let count_array_3 = [];\n    let real_dist = document.getElementById(\"real_measurement\").value; // change to real life measurement\n\n    if (this.state.raw) {\n      time_array_1 = [...this.state.dist_time_array];\n      count_array_1 = [...this.state.dist_array];\n      time_array_2 = [...this.state.rotate_time_array];\n      count_array_2 = [...this.state.rotate_array];\n      time_array_3 = [...this.state.fist_time_array];\n      count_array_3 = [...this.state.fist_array];\n\n      if (real_dist > 0.0001) {\n        let i = 0;\n        let tmp = 0;\n\n        for (i = 0; i < count_array_1.length; i++) {\n          tmp = count_array_1[i];\n          count_array_1[i] = tmp * real_dist;\n        }\n\n        for (i = 0; i < count_array_2.length; i++) {\n          tmp = count_array_2[i];\n          count_array_2[i] = tmp * real_dist;\n        }\n\n        for (i = 0; i < count_array_3.length; i++) {\n          tmp = count_array_3[i];\n          count_array_3[i] = tmp * real_dist;\n        }\n      }\n    } else {\n      // Recalculate Tapping Data\n      let start = this.state.dist_time_array[0];\n      let end = this.state.dist_time_array[this.state.dist_time_array.length - 1];\n\n      while (start + 1.0 < end) {\n        time_array_1 = [...time_array_1, start];\n        let count = 0,\n            temp_max = 0;\n\n        for (let i = 0; i < this.state.dist_array.length; i++) {\n          if (this.state.dist_time_array[i] >= start && this.state.dist_time_array[i] < start + 1.0) {\n            if (temp_max < this.state.dist_array[i]) temp_max = this.state.dist_array[i];\n\n            if (this.state.tap_count.includes(this.state.dist_time_array[i])) {\n              count += temp_max;\n              temp_max = 0;\n            }\n          }\n        }\n\n        count_array_1 = [...count_array_1, count];\n        start += 0.1;\n      } // Recalculate Rotate Data\n\n\n      start = this.state.rotate_time_array[0];\n      end = this.state.rotate_time_array[this.state.rotate_time_array.length - 1];\n\n      while (start + 5.0 < end) {\n        time_array_2 = [...time_array_2, start + 2.5];\n        let count = 0.0;\n        let time_value = 0;\n\n        for (let tc in this.state.rotate_count) {\n          time_value = this.state.rotate_count[tc];\n\n          if (time_value >= start && time_value < start + 5.0) {\n            count += 1.0;\n          }\n        }\n\n        count_array_2 = [...count_array_2, count];\n        start += 0.1;\n      } // Recalculate Gripping Data\n\n\n      start = this.state.fist_time_array[0];\n      end = this.state.fist_time_array[this.state.fist_time_array.length - 1];\n\n      while (start + 5.0 < end) {\n        time_array_3 = [...time_array_3, start + 2.5];\n        let count = 0.0;\n        let time_value = 0;\n\n        for (let tc in this.state.fist_count) {\n          time_value = this.state.fist_count[tc];\n\n          if (time_value >= start && time_value < start + 5.0) {\n            count += 1.0;\n          }\n        }\n\n        count_array_3 = [...count_array_3, count];\n        start += 0.1;\n      }\n    }\n\n    const data1 = {\n      labels: time_array_1,\n      datasets: [{\n        label: 'Tapping',\n        fill: false,\n        lineTension: 0.3,\n        backgroundColor: 'rgba(75,192,192,0.4)',\n        borderColor: 'rgba(75,192,192,1)',\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: 'rgba(75,192,192,1)',\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: count_array_1\n      }]\n    };\n    const data2 = {\n      labels: time_array_2,\n      datasets: [{\n        label: 'Rotation',\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: 'rgba(192,75,192,0.4)',\n        borderColor: 'rgba(192,75,192,1)',\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: 'rgba(192,75,192,1)',\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'rgba(192,75,192,1)',\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: count_array_2\n      }]\n    };\n    const data3 = {\n      labels: time_array_3,\n      datasets: [{\n        label: 'Fist',\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: 'rgba(192,192,75,0.4)',\n        borderColor: 'rgba(192,192,75,1)',\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: 'rgba(192,192,75,1)',\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'rgba(192,192,75,1)',\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: count_array_3\n      }]\n    };\n    this.setState({\n      chart_data1: data1\n    });\n    this.setState({\n      chart_data2: data2\n    });\n    this.setState({\n      chart_data3: data3\n    });\n    this.setState({\n      chart_ready: true\n    });\n  }\n\n  switch_button() {\n    if (this.state.button_mode === true) {\n      this.setState({\n        button_mode: false\n      });\n      this.compose_chart();\n    } else {\n      this.setState({\n        button_mode: true\n      });\n    }\n  }\n\n  increment_tap1() {\n    if (this.state.last_pressed !== 1) {\n      let current_moment = (Date.now() - this.state.startAt) / 1000;\n      this.setState({\n        last_pressed: 1\n      });\n      this.setState({\n        dist_array: [...this.state.dist_array, 1.0]\n      });\n      this.setState({\n        dist_time_array: [...this.state.dist_time_array, current_moment]\n      });\n      this.setState({\n        tap_count: [...this.state.tap_count, current_moment]\n      });\n    }\n  }\n\n  increment_tap2() {\n    if (this.state.last_pressed !== 2) {\n      let current_moment = (Date.now() - this.state.startAt) / 1000;\n      this.setState({\n        last_pressed: 2\n      });\n      this.setState({\n        dist_array: [...this.state.dist_array, 1.0]\n      });\n      this.setState({\n        dist_time_array: [...this.state.dist_time_array, current_moment]\n      });\n      this.setState({\n        tap_count: [...this.state.tap_count, current_moment]\n      });\n    }\n  }\n\n  norm(lm1, lm2) {\n    return sqrt(pow(lm1[0] - lm2[0], 2) + pow(lm1[1] - lm2[1], 2));\n  }\n\n  reset_counter() {\n    clearInterval(this.state.ID);\n    if (this.state.ctx != null) this.state.ctx.clearRect(0, 0, this.canvasRef.current.width, this.canvasRef.current.height);\n    this.setState({\n      ID: 0,\n      tap_count: [],\n      rotate_count: [],\n      fist_count: [],\n      index_passed: 0,\n      rotate_passed: 0,\n      last_pressed: 0,\n      real_time_inferencing: false,\n      recording: false,\n      button_mode: false,\n      chart_ready: false,\n      finger_done: false,\n      rotate_done: false,\n      fist_done: false,\n      dist_array: [],\n      dist_time_array: [],\n      dist_record: [],\n      dist_time_record: [],\n      rotate_array: [],\n      rotate_time_array: [],\n      rotate_record: [],\n      rotate_time_record: [],\n      fist_array: [],\n      fist_time_array: [],\n      fist_record: [],\n      fist_time_record: [],\n      gait_record: [],\n      gait_time_record: [],\n      chart_data1: null,\n      chart_data2: null,\n      chart_data3: null,\n      wait: false,\n      wait_till: 0,\n      startAt: Date.now(),\n      dead_frame: 0\n    });\n  }\n\n  async runHandpose() {\n    const ctx = this.canvasRef.current.getContext(\"2d\");\n    writeText(ctx, {\n      text: 'Loading',\n      x: 180,\n      y: 70\n    });\n\n    require('@tensorflow/tfjs-backend-webgl');\n\n    const net = await handpose.load();\n    ctx.clearRect(0, 0, this.canvasRef.current.width, this.canvasRef.current.height); //const uploadJSONInput = document.getElementById('upload-json');\n    //const uploadWeightsInput = document.getElementById('upload-weights');\n    //const model = await tf.loadLayersModel(tf.io.browserFiles([uploadJSONInput.files[0], uploadWeightsInput.files[0]]));\n\n    console.log(\"Handpose model loaded.\");\n    this.setState({\n      startAt: Date.now()\n    });\n    const Interval_ID = setInterval(() => {\n      this.read_time_inference(net);\n    }, 50);\n    this.setState({\n      ID: Interval_ID\n    });\n    this.setState({\n      real_time_inferencing: true\n    });\n  }\n\n  async read_time_inference(net) {\n    if (this.state.wait) {\n      this.setState({\n        wait_till: Date.now() + 3000\n      }); //await this.sleep(3000);\n\n      this.setState({\n        wait: false\n      });\n    }\n\n    if (typeof this.webcamRef.current !== \"undefined\" && this.webcamRef.current !== null && this.webcamRef.current.video.readyState === 4) {\n      const video = this.webcamRef.current.video;\n      const videoWidth = this.webcamRef.current.video.videoWidth;\n      const videoHeight = this.webcamRef.current.video.videoHeight;\n      this.webcamRef.current.video.width = videoWidth;\n      this.webcamRef.current.video.height = videoHeight;\n      this.canvasRef.current.width = videoWidth;\n      this.canvasRef.current.height = videoHeight;\n      const hand = await net.estimateHands(video);\n      const ctx = this.canvasRef.current.getContext(\"2d\");\n      this.setState({\n        ctx: ctx\n      }); //check if waiting\n\n      if (Date.now() < this.state.wait_till) {\n        console.log(\"Waiting till \", this.state.wait_till);\n        if (hand.length > 0) drawHand_tap(hand, ctx); //count down 3, 2, 1\n\n        if (this.state.wait_till - Date.now() < 1000) writeText(ctx, {\n          text: '1',\n          x: 180,\n          y: 70\n        });else if (this.state.wait_till - Date.now() < 2000) writeText(ctx, {\n          text: '2',\n          x: 180,\n          y: 70\n        });else if (this.state.wait_till - Date.now() < 3000) writeText(ctx, {\n          text: '3',\n          x: 180,\n          y: 70\n        });\n      } else {\n        if (hand.length > 0) {\n          hand.forEach(prediction => {\n            this.setState({\n              dead_frame: 0\n            });\n            const landmarks = prediction.landmarks;\n            let pawn_dist = this.norm(landmarks[0], landmarks[2]);\n            let current_moment = (Date.now() - this.state.startAt) / 1000;\n\n            if (this.state.finger_done === false) {\n              drawHand_tap(hand, ctx); // Calculate relative distance\n\n              let index_dist = this.norm(landmarks[4], landmarks[8]);\n              let current_dist = index_dist / pawn_dist; // Record distance\n\n              this.setState({\n                dist_array: [...this.state.dist_array, current_dist],\n                dist_time_array: [...this.state.dist_time_array, current_moment]\n              }); // Perform counting\n\n              if (this.state.index_passed === 0 && current_dist - this.state.min_dist > 0.05) {\n                this.setState({\n                  index_passed: 1,\n                  max_dist: current_dist\n                });\n                console.log(1);\n              }\n\n              if (this.state.index_passed === 1 && current_dist > this.state.max_dist) {\n                this.setState({\n                  max_dist: current_dist\n                });\n                console.log(2);\n              }\n\n              if (this.state.index_passed === 1 && this.state.max_dist - current_dist > 0.05) {\n                this.setState({\n                  index_passed: 0,\n                  min_dist: current_dist,\n                  tap_count: [...this.state.tap_count, current_moment]\n                });\n                console.log(3);\n              }\n\n              if (this.state.index_passed === 0 && current_dist < this.state.min_dist) {\n                this.setState({\n                  min_dist: current_dist\n                });\n                console.log(4);\n              }\n            }\n\n            if (this.state.finger_done === true && this.state.rotate_done === false) {\n              drawHand_rotate(hand, ctx, this.state.rotate_passed); // Calculate relative distance\n\n              let rotate_dist = (landmarks[2][0] - landmarks[17][0]) / pawn_dist; // Record distance\n\n              this.setState({\n                rotate_array: [...this.state.rotate_array, rotate_dist],\n                rotate_time_array: [...this.state.rotate_time_array, current_moment]\n              }); // Perform counting\n\n              if (this.state.rotate_passed === 0) {\n                if (rotate_dist >= 0.25) this.setState({\n                  rotate_passed: 1\n                });\n                if (rotate_dist <= -0.25) this.setState({\n                  rotate_passed: -1\n                });\n              }\n\n              if (this.state.rotate_passed === 1 && rotate_dist <= -0.5) {\n                this.setState({\n                  rotate_passed: -1\n                });\n              }\n\n              if (this.state.rotate_passed === -1 && rotate_dist >= 0.5) {\n                this.setState({\n                  rotate_passed: 1\n                });\n                this.setState({\n                  rotate_count: [...this.state.rotate_count, current_moment]\n                });\n              }\n            }\n\n            if (this.state.rotate_done === true && this.state.fist_done === false) {\n              drawHand_rotate(hand, ctx, this.state.fist_passed); // Calculate relative distance\n\n              let fist_dist = (landmarks[8][1] - landmarks[5][1] + (landmarks[12][1] - landmarks[9][1]) + (landmarks[16][1] - landmarks[13][1]) + (landmarks[20][1] - landmarks[17][1])) / (4 * pawn_dist); // Record distance\n\n              this.setState({\n                fist_array: [...this.state.fist_array, fist_dist],\n                fist_time_array: [...this.state.fist_time_array, current_moment]\n              }); // Perform counting\n\n              if (fist_dist >= 0.0) {\n                this.setState({\n                  fist_passed: 1\n                });\n              }\n\n              if (fist_dist < -0.4 && this.state.fist_passed === 1) {\n                this.setState({\n                  fist_passed: 0\n                });\n                this.setState({\n                  fist_count: [...this.state.fist_count, current_moment]\n                });\n              }\n            }\n          });\n        } else {\n          // Warning message for hand off screen\n          if (this.state.dead_frame > 9) writeText(ctx, {\n            text: 'Hand Off Screen',\n            x: 180,\n            y: 70\n          });\n          this.setState({\n            dead_frame: this.state.dead_frame + 1\n          });\n        }\n      }\n    }\n  }\n\n  async stop_tapping() {\n    this.setState({\n      finger_done: true\n    });\n    this.setState({\n      wait: true\n    });\n  }\n\n  async stop_rotating() {\n    this.setState({\n      rotate_done: true\n    });\n    this.setState({\n      wait: true\n    });\n  }\n\n  stop_real_time_inference() {\n    clearInterval(this.state.ID);\n    this.setState({\n      real_time_inferencing: false,\n      finger_done: false,\n      rotate_done: false,\n      fist_done: false\n    });\n    this.compose_chart();\n  }\n\n  async record_video() {\n    this.setState({\n      startAt: Date.now()\n    });\n    console.log(\"Handpose model loaded.\");\n    const Interval_ID = setInterval(() => {\n      this.concat_frame();\n    }, 50);\n    this.setState({\n      ID: Interval_ID\n    });\n    this.setState({\n      recording: true\n    });\n  }\n\n  async concat_frame() {\n    if (this.state.wait) {\n      this.setState({\n        wait_till: Date.now() + 3000\n      }); //await this.sleep(3000);\n\n      this.setState({\n        wait: false\n      });\n    }\n\n    if (typeof this.webcamRef.current !== \"undefined\" && this.webcamRef.current !== null && this.webcamRef.current.video.readyState === 4) {\n      if (Date.now() < this.state.wait_till) {\n        console.log(\"Waiting till \", this.state.wait_till); //count down 3, 2, 1\n\n        const ctx = this.canvasRef.current.getContext(\"2d\");\n        if (this.state.wait_till - Date.now() < 1000) writeText(ctx, {\n          text: '1',\n          x: 180,\n          y: 70\n        });else if (this.state.wait_till - Date.now() < 2000) writeText(ctx, {\n          text: '2',\n          x: 180,\n          y: 70\n        });else if (this.state.wait_till - Date.now() < 3000) writeText(ctx, {\n          text: '3',\n          x: 180,\n          y: 70\n        });\n      } else {\n        let current_moment = (Date.now() - this.state.startAt) / 1000;\n        const image = this.webcamRef.current.getScreenshot();\n        var img = document.createElement(\"img\");\n        img.src = image;\n\n        img.onload = function () {\n          if (this.state.finger_done === false) {\n            this.setState({\n              dist_record: [...this.state.dist_record, img]\n            });\n            this.setState({\n              dist_time_record: [...this.state.dist_time_record, current_moment]\n            });\n          } else if (this.state.finger_done === true && this.state.rotate_done === false) {\n            this.setState({\n              rotate_record: [...this.state.rotate_record, img]\n            });\n            this.setState({\n              rotate_time_record: [...this.state.rotate_time_record, current_moment]\n            });\n          } else if (this.state.rotate_done === true && this.state.fist_done === false) {\n            this.setState({\n              fist_record: [...this.state.fist_record, img]\n            });\n            this.setState({\n              fist_time_record: [...this.state.fist_time_record, current_moment]\n            });\n          }\n        }.bind(this);\n      }\n    }\n  }\n\n  async inference() {\n    require('@tensorflow/tfjs-backend-webgl');\n\n    const net = await handpose.load();\n    console.log(\"Handpose model loaded.\"); // Run prediction on recorded tapping data\n\n    for (let i = 0; i < this.state.dist_record.length; i++) {\n      const hand = await net.estimateHands(this.state.dist_record[i]);\n\n      if (hand.length > 0) {\n        hand.forEach(prediction => {\n          const landmarks = prediction.landmarks;\n          let pawn_dist = this.norm(landmarks[0], landmarks[2]);\n          let index_dist = this.norm(landmarks[4], landmarks[8]);\n          index_dist = index_dist / pawn_dist;\n          let threshold = 0.51;\n          /*\r\n          if (this.state.dist_array.length > 20){\r\n            let j = 1;\r\n            let avg = 0.0;\r\n            for (j = 1; j <= 20; j++) avg += this.state.dist_array[this.state.dist_array.length - j];\r\n            threshold = avg/40.0 + threshold/2.0;\r\n            console.log(threshold);\r\n          }*/\n          //this.setState({pawn_dist_array:[...this.state.pawn_dist_array, pawn_dist]});\n\n          this.setState({\n            dist_array: [...this.state.dist_array, index_dist]\n          });\n          this.setState({\n            dist_time_array: [...this.state.dist_time_array, this.state.dist_time_record[i]]\n          });\n\n          if (index_dist >= threshold + 0.01) {\n            this.setState({\n              index_passed: 1\n            });\n          }\n\n          if (index_dist < threshold - 0.01 && this.state.index_passed === 1) {\n            this.setState({\n              index_passed: 0\n            });\n            this.setState({\n              tap_count: [...this.state.tap_count, this.state.dist_time_record[i]]\n            });\n          }\n\n          console.log(\"INDEX COUNT:\", this.state.tap_count);\n        });\n      }\n    } // Run prediction on recorded rotation data\n\n\n    for (let i = 0; i < this.state.rotate_record.length; i++) {\n      const hand = await net.estimateHands(this.state.rotate_record[i]);\n\n      if (hand.length > 0) {\n        hand.forEach(prediction => {\n          const landmarks = prediction.landmarks;\n          let pawn_dist = this.norm(landmarks[0], landmarks[2]);\n          let rotate_dist = (landmarks[2][0] - landmarks[17][0]) / pawn_dist; //this.setState({pawn_rotate_array:[...this.state.pawn_rotate_array, pawn_dist]});\n\n          this.setState({\n            rotate_array: [...this.state.rotate_array, rotate_dist]\n          });\n          this.setState({\n            rotate_time_array: [...this.state.rotate_time_array, this.state.rotate_time_record[i]]\n          });\n\n          if (this.state.rotate_passed === 0) {\n            if (rotate_dist >= 0.5) this.setState({\n              rotate_passed: 1\n            });\n            if (rotate_dist <= -0.5) this.setState({\n              rotate_passed: -1\n            });\n          }\n\n          if (this.state.rotate_passed === 1 && rotate_dist <= -0.5) {\n            this.setState({\n              rotate_passed: -1\n            });\n          }\n\n          if (this.state.rotate_passed === -1 && rotate_dist >= 0.5) {\n            this.setState({\n              rotate_passed: 1\n            });\n            this.setState({\n              rotate_count: [...this.state.rotate_count, this.state.rotate_time_record[i]]\n            });\n          }\n\n          console.log(\"ROTATE COUNT:\", this.state.rotate_count);\n        });\n      }\n    } // Run prediction on recorded gripping data\n\n\n    for (let i = 0; i < this.state.fist_record.length; i++) {\n      const hand = await net.estimateHands(this.state.fist_record[i]);\n\n      if (hand.length > 0) {\n        hand.forEach(prediction => {\n          const landmarks = prediction.landmarks;\n          let pawn_dist = this.norm(landmarks[0], landmarks[2]);\n          let fist_dist = (landmarks[8][1] - landmarks[5][1] + (landmarks[12][1] - landmarks[9][1]) + (landmarks[16][1] - landmarks[13][1]) + (landmarks[20][1] - landmarks[17][1])) / (4 * pawn_dist); //this.setState({pawn_fist_array:[...this.state.pawn_fist_array, pawn_dist]});\n\n          this.setState({\n            fist_array: [...this.state.fist_array, fist_dist]\n          });\n          this.setState({\n            fist_time_array: [...this.state.fist_time_array, this.state.fist_time_record[i]]\n          });\n\n          if (fist_dist >= 0.0) {\n            this.setState({\n              fist_passed: 1\n            });\n          }\n\n          if (fist_dist < -0.4 && this.state.fist_passed === 1) {\n            this.setState({\n              fist_passed: 0\n            });\n            this.setState({\n              fist_count: [...this.state.fist_count, this.state.fist_time_record[i]]\n            });\n          }\n\n          console.log(\"FIST COUNT:\", this.state.fist_count);\n        });\n      }\n    }\n\n    this.setState({\n      record: []\n    });\n  }\n\n  async stop_record() {\n    clearInterval(this.state.ID);\n    await this.inference();\n    this.setState({\n      recording: false,\n      finger_done: false,\n      rotate_done: false,\n      fist_done: false\n    });\n    this.compose_chart();\n  }\n\n  render() {\n    const videoConstraints = {\n      facingMode: this.state.facingMode\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"App-header\",\n        children: [/*#__PURE__*/_jsxDEV(Webcam, {\n          ref: this.webcamRef,\n          videoConstraints: videoConstraints,\n          style: {\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 9,\n            width: \"auto\",\n            height: \"auto\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 747,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: this.canvasRef,\n          style: {\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 9,\n            width: \"auto\",\n            height: \"auto\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 762,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 746,\n        columnNumber: 9\n      }, this), this.state.button_mode ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.increment_tap1,\n          id: \"button1\",\n          children: \"Index Finger\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 779,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.increment_tap2,\n          id: \"button2\",\n          children: \"Middle Finger\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 780,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 778,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 783,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [this.state.real_time_inferencing ? this.state.finger_done ? this.state.rotate_done ? /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: this.stop_real_time_inference,\n          children: \"Calculate Result\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 790,\n          columnNumber: 19\n        }, this) : /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: this.stop_rotating,\n          children: \"Finish Rotating\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 792,\n          columnNumber: 19\n        }, this) : /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: this.stop_tapping,\n          children: \"Finish Tapping\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 795,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(Button, {\n          disabled: this.state.recording,\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: this.runHandpose,\n          children: \"Starting Real Time Inference\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 798,\n          columnNumber: 13\n        }, this), this.state.recording ? this.state.finger_done ? this.state.rotate_done ? /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"secondary\",\n          onClick: this.stop_record,\n          children: \"Calculate Result\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 804,\n          columnNumber: 19\n        }, this) : /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"secondary\",\n          onClick: this.stop_rotating,\n          children: \"Finish Rotating\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 806,\n          columnNumber: 19\n        }, this) : /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"secondary\",\n          onClick: this.stop_tapping,\n          children: \"Finish Tapping\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 809,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(Button, {\n          disabled: this.state.real_time_inferencing,\n          variant: \"contained\",\n          color: \"secondary\",\n          onClick: this.record_video,\n          children: \"Starting Recording\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 812,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          disabled: this.state.recording || this.state.real_time_inferencing,\n          variant: \"outlined\",\n          color: \"secondary\",\n          onClick: this.reset_counter,\n          children: \"Reset All\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 815,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 786,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        id: \"real_measurement\",\n        onChange: this.compose_chart,\n        step: \"0.001\",\n        min: \"0\",\n        max: \"20\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 820,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !this.state.chart_ready,\n        onClick: this.switch_style,\n        children: \"Switch Chart Style\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 821,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.switch_cam,\n        children: \"Switch Camera\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 822,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: this.state.recording || this.state.real_time_inferencing,\n        onClick: this.runPosenet,\n        children: \"PoseNet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 823,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: this.state.recording || this.state.real_time_inferencing,\n        onClick: this.runFacemesh,\n        children: \"Facemesh\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 824,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: this.state.recording || this.state.real_time_inferencing,\n        onClick: this.switch_button,\n        children: \"Switch On/Off Button\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 825,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: [\"Finger Tapping Count:\", this.state.tap_count.length, \"\\xA0\\xA0\\xA0\\xA0 Rotate Count:\", this.state.rotate_count.length, \"\\xA0\\xA0\\xA0\\xA0 Gripping Count: \", this.state.fist_count.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 826,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [this.state.chart_ready ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Line, {\n            data: this.state.chart_data1\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 834,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            data: this.state.chart_data2\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 835,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            data: this.state.chart_data3\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 836,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 833,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 839,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            id: \"upload-json\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 842,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 841,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            id: \"upload-weights\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 845,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 844,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 831,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 745,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/wongh/Documents/GitHub/tfjs-app/src/App.js"],"names":["React","Button","handpose","posenet","facemesh","Webcam","drawHand_tap","drawHand_rotate","drawHand_fist","writeText","drawKeypoints","drawSkeleton","drawMesh","sqrt","pow","Line","App","Component","constructor","props","sleep","milliseconds","Promise","resolve","setTimeout","state","ID","tap_count","rotate_count","fist_count","index_passed","min_dist","max_dist","rotate_passed","last_pressed","real_time_inferencing","recording","button_mode","chart_ready","finger_done","rotate_done","fist_done","dist_array","dist_time_array","dist_record","dist_time_record","rotate_array","rotate_time_array","rotate_record","rotate_time_record","fist_array","fist_time_array","fist_record","fist_time_record","gait_record","gait_time_record","chart_data1","chart_data2","chart_data3","wait","wait_till","startAt","Date","now","dead_frame","ctx","raw","facingMode","webcamRef","createRef","canvasRef","videoConstraints","runHandpose","bind","stop_real_time_inference","stop_tapping","stop_rotating","stop_record","record_video","concat_frame","inference","reset_counter","increment_tap1","increment_tap2","switch_button","compose_chart","runPosenet","read_time_posenet","runFacemesh","read_time_facemesh","switch_style","switch_cam","setState","require","net","load","console","log","Interval_ID","setInterval","current","video","readyState","videoWidth","videoHeight","width","height","face","estimateFaces","getContext","pose","estimateSinglePose","time_array_1","count_array_1","time_array_2","count_array_2","time_array_3","count_array_3","real_dist","document","getElementById","value","i","tmp","length","start","end","count","temp_max","includes","time_value","tc","data1","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","data","data2","data3","current_moment","norm","lm1","lm2","clearInterval","clearRect","text","x","y","read_time_inference","hand","estimateHands","forEach","prediction","landmarks","pawn_dist","index_dist","current_dist","rotate_dist","fist_passed","fist_dist","image","getScreenshot","img","createElement","src","onload","threshold","record","render","position","marginLeft","marginRight","left","right","textAlign","zindex"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Button from '@material-ui/core/Button';\r\nimport * as handpose from \"@tensorflow-models/handpose\";\r\nimport * as posenet from \"@tensorflow-models/posenet\";\r\nimport * as facemesh from \"@tensorflow-models/facemesh\";\r\n//import * as tf from '@tensorflow/tfjs-core';\r\nimport Webcam from \"react-webcam\";\r\nimport \"./App.css\";\r\nimport { drawHand_tap, drawHand_rotate, drawHand_fist, writeText, drawKeypoints, drawSkeleton, drawMesh } from \"./utilities\";\r\nimport { sqrt, pow } from \"mathjs\"\r\nimport {Line} from 'react-chartjs-2';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      ID : 0,\r\n      tap_count : [],\r\n      rotate_count : [],\r\n      fist_count : [],\r\n      index_passed : 0,\r\n      min_dist: 0,\r\n      max_dist: 5.0,\r\n      rotate_passed : 0,\r\n      last_pressed:0,\r\n      real_time_inferencing:false,\r\n      recording:false,\r\n      button_mode:false,\r\n      chart_ready:false,\r\n      finger_done : false,\r\n      rotate_done : false,\r\n      fist_done : false,\r\n      dist_array : [],\r\n      dist_time_array : [],\r\n      dist_record : [],\r\n      dist_time_record : [],\r\n      rotate_array : [],\r\n      rotate_time_array : [],\r\n      rotate_record : [],\r\n      rotate_time_record : [],\r\n      fist_array : [],\r\n      fist_time_array : [],\r\n      fist_record : [],\r\n      fist_time_record : [],\r\n      gait_record : [],\r\n      gait_time_record : [],\r\n      chart_data1 : null,\r\n      chart_data2 : null,\r\n      chart_data3 : null,\r\n      wait : false,\r\n      wait_till : 0,\r\n      startAt: Date.now(),\r\n      dead_frame: 0,\r\n      ctx: null,\r\n      raw: true,\r\n      facingMode: \"user\",\r\n    };\r\n    this.webcamRef = React.createRef(null);\r\n    this.canvasRef = React.createRef(null);\r\n    this.videoConstraints = {facingMode: \"user\"};\r\n    this.runHandpose = this.runHandpose.bind(this);\r\n    this.stop_real_time_inference = this.stop_real_time_inference.bind(this);\r\n    this.stop_tapping = this.stop_tapping.bind(this);\r\n    this.stop_rotating = this.stop_rotating.bind(this);\r\n    this.stop_record = this.stop_record.bind(this);\r\n    this.record_video = this.record_video.bind(this);\r\n    this.concat_frame = this.concat_frame.bind(this);\r\n    this.inference = this.inference.bind(this);\r\n    this.reset_counter = this.reset_counter.bind(this);\r\n    this.increment_tap1 = this.increment_tap1.bind(this);\r\n    this.increment_tap2 = this.increment_tap2.bind(this);\r\n    this.switch_button = this.switch_button.bind(this);\r\n    this.compose_chart = this.compose_chart.bind(this);\r\n    this.runPosenet = this.runPosenet.bind(this);\r\n    this.read_time_posenet = this.read_time_posenet.bind(this);\r\n    this.runFacemesh = this.runFacemesh.bind(this);\r\n    this.read_time_facemesh = this.read_time_facemesh.bind(this);\r\n    this.switch_style = this.switch_style.bind(this);\r\n    this.switch_cam = this.switch_cam.bind(this);\r\n  }\r\n\r\n  switch_cam(){\r\n    if (this.state.facingMode === \"user\") this.setState({facingMode: \"environment\"});\r\n    else if (this.state.facingMode === \"environment\") this.setState({facingMode: \"user\"});\r\n  }\r\n\r\n  async runFacemesh(){\r\n    require('@tensorflow/tfjs-backend-webgl');\r\n    const net = await facemesh.load();\r\n    console.log(\"Facemesh model loaded.\");\r\n    this.setState({startAt:Date.now()});\r\n    const Interval_ID = setInterval(() => {\r\n      this.read_time_facemesh(net);\r\n    }, 50);\r\n    this.setState({ID:Interval_ID});\r\n    this.setState({real_time_inferencing:true});\r\n  }\r\n\r\n  async read_time_facemesh(net) {\r\n    if (this.state.wait){\r\n      this.setState({wait_till:Date.now()+3000});\r\n      //await this.sleep(3000);\r\n      this.setState({wait:false});\r\n    }\r\n    if (\r\n      typeof this.webcamRef.current !== \"undefined\" &&\r\n      this.webcamRef.current !== null &&\r\n      this.webcamRef.current.video.readyState === 4\r\n    ) {\r\n      const video = this.webcamRef.current.video;\r\n      const videoWidth = this.webcamRef.current.video.videoWidth;\r\n      const videoHeight = this.webcamRef.current.video.videoHeight;\r\n      this.webcamRef.current.video.width = videoWidth;\r\n      this.webcamRef.current.video.height = videoHeight;\r\n      this.canvasRef.current.width = videoWidth;\r\n      this.canvasRef.current.height = videoHeight;\r\n      const face = await net.estimateFaces(video);\r\n      const ctx = this.canvasRef.current.getContext(\"2d\");\r\n      drawMesh(face, ctx);\r\n    }\r\n  }\r\n\r\n  async runPosenet(){\r\n    require('@tensorflow/tfjs-backend-webgl');\r\n    const net = await posenet.load();\r\n    console.log(\"PoseNet model loaded.\");\r\n    this.setState({startAt:Date.now()});\r\n    const Interval_ID = setInterval(() => {\r\n      this.read_time_posenet(net);\r\n    }, 50);\r\n    this.setState({ID:Interval_ID});\r\n    this.setState({real_time_inferencing:true});\r\n  }\r\n\r\n  async read_time_posenet(net) {\r\n    if (this.state.wait){\r\n      this.setState({wait_till:Date.now()+3000});\r\n      //await this.sleep(3000);\r\n      this.setState({wait:false});\r\n    }\r\n    if (\r\n      typeof this.webcamRef.current !== \"undefined\" &&\r\n      this.webcamRef.current !== null &&\r\n      this.webcamRef.current.video.readyState === 4\r\n    ) {\r\n      const video = this.webcamRef.current.video;\r\n      const videoWidth = this.webcamRef.current.video.videoWidth;\r\n      const videoHeight = this.webcamRef.current.video.videoHeight;\r\n      this.webcamRef.current.video.width = videoWidth;\r\n      this.webcamRef.current.video.height = videoHeight;\r\n      this.canvasRef.current.width = videoWidth;\r\n      this.canvasRef.current.height = videoHeight;\r\n      const pose = await net.estimateSinglePose(video);\r\n      const ctx = this.canvasRef.current.getContext(\"2d\");\r\n      drawKeypoints(pose[\"keypoints\"], 0.6, ctx);\r\n      drawSkeleton(pose[\"keypoints\"], 0.7, ctx);\r\n    }\r\n  }\r\n\r\n  async switch_style(){\r\n    await this.setState({raw: !this.state.raw});\r\n    this.compose_chart();\r\n  }\r\n\r\n  compose_chart(){\r\n    let time_array_1 = [];\r\n    let count_array_1 = [];\r\n    let time_array_2 = [];\r\n    let count_array_2 = [];\r\n    let time_array_3 = [];\r\n    let count_array_3 = [];\r\n\r\n    let real_dist = document.getElementById(\"real_measurement\").value;\r\n    // change to real life measurement\r\n\r\n    if (this.state.raw){\r\n      time_array_1 = [...this.state.dist_time_array];\r\n      count_array_1 = [...this.state.dist_array];\r\n      time_array_2 = [...this.state.rotate_time_array];\r\n      count_array_2 = [...this.state.rotate_array];\r\n      time_array_3 = [...this.state.fist_time_array];\r\n      count_array_3 = [...this.state.fist_array];\r\n      if (real_dist > 0.0001){\r\n        let i = 0;\r\n        let tmp = 0;\r\n        for (i = 0; i < count_array_1.length; i++){\r\n          tmp = count_array_1[i];\r\n          count_array_1[i] = tmp*real_dist;\r\n        }\r\n        for (i = 0; i < count_array_2.length; i++){\r\n          tmp = count_array_2[i];\r\n          count_array_2[i] = tmp*real_dist;\r\n        }\r\n        for (i = 0; i < count_array_3.length; i++){\r\n          tmp = count_array_3[i];\r\n          count_array_3[i] = tmp*real_dist;\r\n        }\r\n      }\r\n    }\r\n    else{\r\n      // Recalculate Tapping Data\r\n      let start = this.state.dist_time_array[0];\r\n      let end = this.state.dist_time_array[this.state.dist_time_array.length - 1];\r\n      while (start + 1.0 < end){\r\n        time_array_1 = [...time_array_1, start];\r\n        let count = 0, temp_max = 0;\r\n        for (let i = 0; i < this.state.dist_array.length; i++){        \r\n          if (this.state.dist_time_array[i] >= start && this.state.dist_time_array[i] < (start + 1.0)){\r\n            if (temp_max < this.state.dist_array[i]) temp_max = this.state.dist_array[i];\r\n            if (this.state.tap_count.includes(this.state.dist_time_array[i])){\r\n              count += temp_max;\r\n              temp_max = 0;\r\n            }\r\n          }\r\n        }\r\n        count_array_1 = [...count_array_1, count];\r\n        start += 0.1;\r\n      }\r\n\r\n      // Recalculate Rotate Data\r\n      start = this.state.rotate_time_array[0];\r\n      end = this.state.rotate_time_array[this.state.rotate_time_array.length - 1];\r\n      while (start + 5.0 < end){\r\n        time_array_2 = [...time_array_2, start + 2.5];\r\n        let count = 0.0;\r\n        let time_value = 0;\r\n        for (let tc in this.state.rotate_count){\r\n          time_value = this.state.rotate_count[tc];\r\n          if (time_value >= start && time_value < (start + 5.0)){\r\n            count += 1.0;\r\n          }\r\n        }\r\n        count_array_2 = [...count_array_2, count];\r\n        start += 0.1;\r\n      }\r\n\r\n      // Recalculate Gripping Data\r\n      start = this.state.fist_time_array[0];\r\n      end = this.state.fist_time_array[this.state.fist_time_array.length - 1];\r\n      while (start + 5.0 < end){\r\n        time_array_3 = [...time_array_3, start + 2.5];\r\n        let count = 0.0;\r\n        let time_value = 0;\r\n        for (let tc in this.state.fist_count){\r\n          time_value = this.state.fist_count[tc];\r\n          if (time_value >= start && time_value < (start + 5.0)){\r\n            count += 1.0;\r\n          }\r\n        }\r\n        count_array_3 = [...count_array_3, count];\r\n        start += 0.1;\r\n      }\r\n    }\r\n      \r\n    const data1 = {\r\n      labels: time_array_1,\r\n      datasets: [        \r\n        {\r\n          label: 'Tapping',\r\n          fill: false,\r\n          lineTension: 0.3,\r\n          backgroundColor: 'rgba(75,192,192,0.4)',\r\n          borderColor: 'rgba(75,192,192,1)',\r\n          borderCapStyle: 'butt',\r\n          borderDash: [],\r\n          borderDashOffset: 0.0,\r\n          borderJoinStyle: 'miter',\r\n          pointBorderColor: 'rgba(75,192,192,1)',\r\n          pointBackgroundColor: '#fff',\r\n          pointBorderWidth: 1,\r\n          pointHoverRadius: 5,\r\n          pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n          pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n          pointHoverBorderWidth: 2,\r\n          pointRadius: 1,\r\n          pointHitRadius: 10,\r\n          data: count_array_1\r\n        }\r\n      ]\r\n    };\r\n    const data2 = {\r\n      labels: time_array_2,\r\n      datasets: [        \r\n        {\r\n          label: 'Rotation',\r\n          fill: false,\r\n          lineTension: 0.1,\r\n          backgroundColor: 'rgba(192,75,192,0.4)',\r\n          borderColor: 'rgba(192,75,192,1)',\r\n          borderCapStyle: 'butt',\r\n          borderDash: [],\r\n          borderDashOffset: 0.0,\r\n          borderJoinStyle: 'miter',\r\n          pointBorderColor: 'rgba(192,75,192,1)',\r\n          pointBackgroundColor: '#fff',\r\n          pointBorderWidth: 1,\r\n          pointHoverRadius: 5,\r\n          pointHoverBackgroundColor: 'rgba(192,75,192,1)',\r\n          pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n          pointHoverBorderWidth: 2,\r\n          pointRadius: 1,\r\n          pointHitRadius: 10,\r\n          data: count_array_2 \r\n        },\r\n      ]\r\n    };\r\n    const data3 = {\r\n      labels: time_array_3,\r\n      datasets: [        \r\n        {\r\n          label: 'Fist',\r\n          fill: false,\r\n          lineTension: 0.1,\r\n          backgroundColor: 'rgba(192,192,75,0.4)',\r\n          borderColor: 'rgba(192,192,75,1)',\r\n          borderCapStyle: 'butt',\r\n          borderDash: [],\r\n          borderDashOffset: 0.0,\r\n          borderJoinStyle: 'miter',\r\n          pointBorderColor: 'rgba(192,192,75,1)',\r\n          pointBackgroundColor: '#fff',\r\n          pointBorderWidth: 1,\r\n          pointHoverRadius: 5,\r\n          pointHoverBackgroundColor: 'rgba(192,192,75,1)',\r\n          pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n          pointHoverBorderWidth: 2,\r\n          pointRadius: 1,\r\n          pointHitRadius: 10,\r\n          data: count_array_3\r\n        }\r\n      ]\r\n    };\r\n\r\n    this.setState({chart_data1:data1});\r\n    this.setState({chart_data2:data2});\r\n    this.setState({chart_data3:data3});\r\n    this.setState({chart_ready:true});\r\n  }\r\n\r\n  switch_button(){\r\n    if (this.state.button_mode === true){\r\n      this.setState({button_mode:false});\r\n      this.compose_chart();\r\n    }\r\n    else{\r\n      this.setState({button_mode:true})\r\n    }\r\n  }\r\n\r\n  increment_tap1(){\r\n    if (this.state.last_pressed !== 1){\r\n      let current_moment = (Date.now() - this.state.startAt)/1000\r\n      this.setState({last_pressed:1})\r\n      this.setState({dist_array:[...this.state.dist_array, 1.0]});\r\n      this.setState({dist_time_array:[...this.state.dist_time_array, current_moment]});\r\n      this.setState({tap_count:[...this.state.tap_count, current_moment]});\r\n    }\r\n  }\r\n\r\n  increment_tap2(){\r\n    if (this.state.last_pressed !== 2){\r\n      let current_moment = (Date.now() - this.state.startAt)/1000\r\n      this.setState({last_pressed:2})\r\n      this.setState({dist_array:[...this.state.dist_array, 1.0]});\r\n      this.setState({dist_time_array:[...this.state.dist_time_array, current_moment]});\r\n      this.setState({tap_count:[...this.state.tap_count, current_moment]});\r\n    }\r\n  }\r\n\r\n  norm(lm1, lm2){\r\n    return sqrt(pow(lm1[0]-lm2[0], 2)+pow(lm1[1]-lm2[1], 2))\r\n  }\r\n\r\n  reset_counter(){\r\n    clearInterval(this.state.ID);\r\n    if (this.state.ctx != null) this.state.ctx.clearRect(0,0, this.canvasRef.current.width, this.canvasRef.current.height);\r\n    this.setState({\r\n      ID : 0,\r\n      tap_count : [],\r\n      rotate_count : [],\r\n      fist_count : [],\r\n      index_passed : 0,\r\n      rotate_passed : 0,\r\n      last_pressed:0,\r\n      real_time_inferencing:false,\r\n      recording:false,\r\n      button_mode:false,\r\n      chart_ready:false,\r\n      finger_done : false,\r\n      rotate_done : false,\r\n      fist_done : false,\r\n      dist_array : [],\r\n      dist_time_array : [],\r\n      dist_record : [],\r\n      dist_time_record : [],\r\n      rotate_array : [],\r\n      rotate_time_array : [],\r\n      rotate_record : [],\r\n      rotate_time_record : [],\r\n      fist_array : [],\r\n      fist_time_array : [],\r\n      fist_record : [],\r\n      fist_time_record : [],\r\n      gait_record : [],\r\n      gait_time_record : [],\r\n      chart_data1 : null,\r\n      chart_data2 : null,\r\n      chart_data3 : null,\r\n      wait : false,\r\n      wait_till : 0,\r\n      startAt: Date.now(),\r\n      dead_frame: 0,\r\n    });\r\n  }\r\n\r\n  sleep = (milliseconds) => {\r\n    return new Promise(resolve => setTimeout(resolve, milliseconds))\r\n  }\r\n\r\n  async runHandpose() {\r\n    const ctx = this.canvasRef.current.getContext(\"2d\");\r\n    writeText(ctx, { text: 'Loading', x: 180, y: 70 });\r\n    require('@tensorflow/tfjs-backend-webgl');\r\n    const net = await handpose.load();\r\n    ctx.clearRect(0,0, this.canvasRef.current.width, this.canvasRef.current.height);\r\n    //const uploadJSONInput = document.getElementById('upload-json');\r\n    //const uploadWeightsInput = document.getElementById('upload-weights');\r\n    //const model = await tf.loadLayersModel(tf.io.browserFiles([uploadJSONInput.files[0], uploadWeightsInput.files[0]]));\r\n    console.log(\"Handpose model loaded.\");\r\n    this.setState({startAt:Date.now()});\r\n    const Interval_ID = setInterval(() => {\r\n      this.read_time_inference(net);\r\n    }, 50);\r\n    this.setState({ID:Interval_ID});\r\n    this.setState({real_time_inferencing:true});\r\n  };\r\n\r\n  async read_time_inference(net) {\r\n    if (this.state.wait){\r\n      this.setState({wait_till:Date.now()+3000});\r\n      //await this.sleep(3000);\r\n      this.setState({wait:false});\r\n    }\r\n    if (\r\n      typeof this.webcamRef.current !== \"undefined\" &&\r\n      this.webcamRef.current !== null &&\r\n      this.webcamRef.current.video.readyState === 4\r\n    ) {\r\n      const video = this.webcamRef.current.video;\r\n      const videoWidth = this.webcamRef.current.video.videoWidth;\r\n      const videoHeight = this.webcamRef.current.video.videoHeight;\r\n      this.webcamRef.current.video.width = videoWidth;\r\n      this.webcamRef.current.video.height = videoHeight;\r\n      this.canvasRef.current.width = videoWidth;\r\n      this.canvasRef.current.height = videoHeight;\r\n      const hand = await net.estimateHands(video);\r\n      const ctx = this.canvasRef.current.getContext(\"2d\");\r\n      this.setState({ctx:ctx});\r\n      \r\n      //check if waiting\r\n      if (Date.now() < this.state.wait_till){\r\n        console.log(\"Waiting till \", this.state.wait_till);\r\n        if (hand.length > 0) drawHand_tap (hand, ctx);\r\n        //count down 3, 2, 1\r\n        if (this.state.wait_till - Date.now() < 1000) writeText(ctx, { text: '1', x: 180, y: 70 });\r\n        else if (this.state.wait_till - Date.now() < 2000) writeText(ctx, { text: '2', x: 180, y: 70 });\r\n        else if (this.state.wait_till - Date.now() < 3000) writeText(ctx, { text: '3', x: 180, y: 70 });\r\n      }\r\n      else {\r\n        if (hand.length > 0){\r\n          hand.forEach((prediction) => {\r\n            this.setState({dead_frame: 0});\r\n            const landmarks = prediction.landmarks\r\n\r\n            let pawn_dist = this.norm(landmarks[0], landmarks[2]);\r\n            let current_moment = (Date.now() - this.state.startAt)/1000\r\n\r\n            if (this.state.finger_done === false){\r\n              drawHand_tap (hand, ctx);\r\n              // Calculate relative distance\r\n              let index_dist = this.norm(landmarks[4], landmarks[8]);\r\n              let current_dist = index_dist/pawn_dist;\r\n\r\n              // Record distance\r\n              this.setState({dist_array:[...this.state.dist_array, current_dist],\r\n                dist_time_array:[...this.state.dist_time_array, current_moment]});\r\n              \r\n              // Perform counting\r\n              if (this.state.index_passed === 0 && (current_dist - this.state.min_dist) > 0.05){\r\n                this.setState({index_passed:1,\r\n                  max_dist: current_dist});\r\n                console.log(1);\r\n              }\r\n              if (this.state.index_passed === 1 && current_dist > this.state.max_dist){\r\n                this.setState({max_dist: current_dist});\r\n                console.log(2);\r\n              }\r\n              if (this.state.index_passed === 1 && (this.state.max_dist - current_dist) > 0.05){\r\n                this.setState({index_passed:0,\r\n                  min_dist: current_dist,\r\n                  tap_count:[...this.state.tap_count, current_moment]});\r\n                console.log(3);\r\n              }\r\n              if (this.state.index_passed === 0 && current_dist < this.state.min_dist){\r\n                this.setState({min_dist: current_dist});\r\n                console.log(4);\r\n              }\r\n            }\r\n            \r\n            if (this.state.finger_done === true && this.state.rotate_done === false){\r\n              drawHand_rotate (hand, ctx, this.state.rotate_passed);\r\n              // Calculate relative distance\r\n              let rotate_dist = (landmarks[2][0] - landmarks[17][0]) / pawn_dist;\r\n\r\n              // Record distance\r\n              this.setState({rotate_array:[...this.state.rotate_array, rotate_dist],\r\n                rotate_time_array:[...this.state.rotate_time_array, current_moment]});\r\n\r\n              // Perform counting\r\n              if (this.state.rotate_passed === 0){\r\n                if (rotate_dist >= 0.25) this.setState({rotate_passed:1});\r\n                if (rotate_dist <= -0.25) this.setState({rotate_passed:-1});\r\n              }\r\n              if (this.state.rotate_passed === 1 && rotate_dist <= -0.5){\r\n                this.setState({rotate_passed:-1});\r\n              }\r\n              if (this.state.rotate_passed === -1 && rotate_dist >= 0.5){\r\n                this.setState({rotate_passed:1});\r\n                this.setState({rotate_count:[...this.state.rotate_count, current_moment]});\r\n              }\r\n            }\r\n\r\n            if (this.state.rotate_done === true && this.state.fist_done === false){\r\n              drawHand_rotate (hand, ctx, this.state.fist_passed);\r\n              // Calculate relative distance\r\n              let fist_dist =  ((landmarks[8][1] - landmarks[5][1])+\r\n                                (landmarks[12][1] - landmarks[9][1])+\r\n                                (landmarks[16][1] - landmarks[13][1])+\r\n                                (landmarks[20][1] - landmarks[17][1]))/\r\n                                (4*pawn_dist)\r\n\r\n              // Record distance\r\n              this.setState({fist_array:[...this.state.fist_array, fist_dist],\r\n                fist_time_array:[...this.state.fist_time_array, current_moment]});\r\n\r\n              // Perform counting\r\n              if (fist_dist >= 0.0){this.setState({fist_passed:1})}\r\n              if (fist_dist < -0.4 && this.state.fist_passed === 1){\r\n                this.setState({fist_passed:0});\r\n                this.setState({fist_count:[...this.state.fist_count, current_moment]});\r\n              }\r\n            }                  \r\n          });\r\n        }\r\n        else {\r\n          // Warning message for hand off screen\r\n          if (this.state.dead_frame > 9) writeText(ctx, { text: 'Hand Off Screen', x: 180, y: 70 });\r\n          this.setState({dead_frame: this.state.dead_frame + 1});\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  async stop_tapping() {\r\n    this.setState({finger_done:true});\r\n    this.setState({wait:true});\r\n  }\r\n\r\n  async stop_rotating() {\r\n    this.setState({rotate_done:true});\r\n    this.setState({wait:true});\r\n  }\r\n\r\n  stop_real_time_inference() {\r\n    clearInterval(this.state.ID);\r\n    this.setState({real_time_inferencing:false,\r\n                   finger_done:false,\r\n                   rotate_done:false,\r\n                   fist_done:false});\r\n    this.compose_chart();\r\n  }\r\n\r\n  async record_video(){\r\n    this.setState({startAt:Date.now()});\r\n    console.log(\"Handpose model loaded.\");\r\n    const Interval_ID = setInterval(() => {\r\n      this.concat_frame();\r\n    }, 50);\r\n    this.setState({ID:Interval_ID});\r\n    this.setState({recording:true});\r\n  }\r\n\r\n  async concat_frame() {\r\n    if (this.state.wait){\r\n      this.setState({wait_till:Date.now()+3000});\r\n      //await this.sleep(3000);\r\n      this.setState({wait:false});\r\n    }\r\n    if (\r\n      typeof this.webcamRef.current !== \"undefined\" &&\r\n      this.webcamRef.current !== null &&\r\n      this.webcamRef.current.video.readyState === 4\r\n    ) {\r\n      if (Date.now() < this.state.wait_till){\r\n        console.log(\"Waiting till \", this.state.wait_till);\r\n        //count down 3, 2, 1\r\n        const ctx = this.canvasRef.current.getContext(\"2d\");\r\n        if (this.state.wait_till - Date.now() < 1000) writeText(ctx, { text: '1', x: 180, y: 70 });\r\n        else if (this.state.wait_till - Date.now() < 2000) writeText(ctx, { text: '2', x: 180, y: 70 });\r\n        else if (this.state.wait_till - Date.now() < 3000) writeText(ctx, { text: '3', x: 180, y: 70 });\r\n        \r\n      }\r\n      else {\r\n        let current_moment = (Date.now() - this.state.startAt)/1000;\r\n        const image = this.webcamRef.current.getScreenshot();      \r\n        var img = document.createElement(\"img\");\r\n        img.src = image;\r\n        img.onload = function(){\r\n          if (this.state.finger_done === false){\r\n            this.setState({dist_record:[...this.state.dist_record, img]});\r\n            this.setState({dist_time_record:[...this.state.dist_time_record, current_moment]});\r\n          }\r\n\r\n          else if (this.state.finger_done === true && this.state.rotate_done === false){\r\n            this.setState({rotate_record:[...this.state.rotate_record, img]});\r\n            this.setState({rotate_time_record:[...this.state.rotate_time_record, current_moment]});\r\n          }\r\n\r\n          else if (this.state.rotate_done === true && this.state.fist_done === false){\r\n            this.setState({fist_record:[...this.state.fist_record, img]});\r\n            this.setState({fist_time_record:[...this.state.fist_time_record, current_moment]});\r\n          }\r\n        }.bind(this)\r\n      }\r\n    }\r\n  }\r\n\r\n  async inference() {\r\n    require('@tensorflow/tfjs-backend-webgl');\r\n    const net = await handpose.load();\r\n    console.log(\"Handpose model loaded.\");\r\n\r\n    // Run prediction on recorded tapping data\r\n    for (let i = 0; i<this.state.dist_record.length; i++){\r\n      const hand = await net.estimateHands(this.state.dist_record[i]);\r\n      if (hand.length > 0){\r\n        hand.forEach((prediction) => {\r\n          const landmarks = prediction.landmarks\r\n          let pawn_dist = this.norm(landmarks[0], landmarks[2]);\r\n          let index_dist = this.norm(landmarks[4], landmarks[8]);\r\n          index_dist = index_dist/pawn_dist\r\n          let threshold = 0.51;\r\n          /*\r\n          if (this.state.dist_array.length > 20){\r\n            let j = 1;\r\n            let avg = 0.0;\r\n            for (j = 1; j <= 20; j++) avg += this.state.dist_array[this.state.dist_array.length - j];\r\n            threshold = avg/40.0 + threshold/2.0;\r\n            console.log(threshold);\r\n          }*/\r\n          //this.setState({pawn_dist_array:[...this.state.pawn_dist_array, pawn_dist]});\r\n          this.setState({dist_array:[...this.state.dist_array, index_dist]});\r\n          this.setState({dist_time_array:[...this.state.dist_time_array, this.state.dist_time_record[i]]});\r\n          if (index_dist >= (threshold + 0.01)){this.setState({index_passed:1})}\r\n          if (index_dist < (threshold - 0.01) && this.state.index_passed === 1){\r\n            this.setState({index_passed:0});\r\n            this.setState({tap_count:[...this.state.tap_count, this.state.dist_time_record[i]]});\r\n          }\r\n          console.log(\"INDEX COUNT:\", this.state.tap_count);\r\n        });\r\n      }\r\n    }\r\n\r\n    // Run prediction on recorded rotation data\r\n    for (let i = 0; i<this.state.rotate_record.length; i++){\r\n      const hand = await net.estimateHands(this.state.rotate_record[i]);\r\n      if (hand.length > 0){\r\n        hand.forEach((prediction) => {\r\n          const landmarks = prediction.landmarks\r\n          let pawn_dist = this.norm(landmarks[0], landmarks[2]);\r\n          let rotate_dist = (landmarks[2][0] - landmarks[17][0]) / pawn_dist;\r\n          //this.setState({pawn_rotate_array:[...this.state.pawn_rotate_array, pawn_dist]});\r\n          this.setState({rotate_array:[...this.state.rotate_array, rotate_dist]});\r\n          this.setState({rotate_time_array:[...this.state.rotate_time_array, this.state.rotate_time_record[i]]});\r\n          if (this.state.rotate_passed === 0){\r\n            if (rotate_dist >= 0.5) this.setState({rotate_passed:1});\r\n            if (rotate_dist <= -0.5) this.setState({rotate_passed:-1});\r\n          }\r\n          if (this.state.rotate_passed === 1 && rotate_dist <= -0.5){\r\n            this.setState({rotate_passed:-1});\r\n          }\r\n          if (this.state.rotate_passed === -1 && rotate_dist >= 0.5){\r\n            this.setState({rotate_passed:1});\r\n            this.setState({rotate_count:[...this.state.rotate_count, this.state.rotate_time_record[i]]});\r\n          }\r\n          console.log(\"ROTATE COUNT:\", this.state.rotate_count);\r\n        });\r\n      }\r\n    }\r\n\r\n    // Run prediction on recorded gripping data\r\n    for (let i = 0; i<this.state.fist_record.length; i++){\r\n      const hand = await net.estimateHands(this.state.fist_record[i]);\r\n      if (hand.length > 0){\r\n        hand.forEach((prediction) => {\r\n          const landmarks = prediction.landmarks\r\n          let pawn_dist = this.norm(landmarks[0], landmarks[2]);\r\n          let fist_dist =  ((landmarks[8][1] - landmarks[5][1])+\r\n            (landmarks[12][1] - landmarks[9][1])+\r\n            (landmarks[16][1] - landmarks[13][1])+\r\n            (landmarks[20][1] - landmarks[17][1]))/\r\n            (4*pawn_dist)\r\n          //this.setState({pawn_fist_array:[...this.state.pawn_fist_array, pawn_dist]});\r\n          this.setState({fist_array:[...this.state.fist_array, fist_dist]});\r\n          this.setState({fist_time_array:[...this.state.fist_time_array, this.state.fist_time_record[i]]});\r\n          if (fist_dist >= 0.0){this.setState({fist_passed:1})}\r\n          if (fist_dist < -0.4 && this.state.fist_passed === 1){\r\n            this.setState({fist_passed:0});\r\n            this.setState({fist_count:[...this.state.fist_count, this.state.fist_time_record[i]]});\r\n          }\r\n          console.log(\"FIST COUNT:\", this.state.fist_count);\r\n        });\r\n      }\r\n    }\r\n    this.setState({record:[]});\r\n  }\r\n\r\n  async stop_record() {\r\n    clearInterval(this.state.ID);\r\n    await this.inference();\r\n    this.setState({recording:false,\r\n      finger_done:false,\r\n      rotate_done:false,\r\n      fist_done:false});\r\n    this.compose_chart();\r\n  }\r\n\r\n  \r\n\r\n  render(){\r\n    const videoConstraints = {\r\n      facingMode: this.state.facingMode\r\n    };\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n        <Webcam\r\n          ref={this.webcamRef}\r\n          videoConstraints={videoConstraints}\r\n          style={{\r\n            position: \"absolute\",\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            left: 0,\r\n            right: 0,\r\n            textAlign: \"center\",\r\n            zindex: 9,\r\n            width: \"auto\",\r\n            height: \"auto\",\r\n          }}\r\n        />\r\n        <canvas\r\n          ref={this.canvasRef}\r\n          style={{\r\n            position: \"absolute\",\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            left: 0,\r\n            right: 0,\r\n            textAlign: \"center\",\r\n            zindex: 9,\r\n            width: \"auto\",\r\n            height: \"auto\",\r\n          }}\r\n        />\r\n        </header>\r\n          {this.state.button_mode ? (\r\n            <div>\r\n              <button onClick={this.increment_tap1} id=\"button1\">Index Finger</button>\r\n              <button onClick={this.increment_tap2} id=\"button2\">Middle Finger</button>\r\n            </div>\r\n          ) : (\r\n            <div></div>\r\n          )}\r\n\r\n          <div>\r\n            {this.state.real_time_inferencing ? (\r\n              this.state.finger_done ? (\r\n                this.state.rotate_done ? (\r\n                  <Button variant=\"contained\" color=\"primary\"  onClick={this.stop_real_time_inference}>Calculate Result</Button>\r\n                ):(\r\n                  <Button variant=\"contained\" color=\"primary\"  onClick={this.stop_rotating}>Finish Rotating</Button>\r\n                )\r\n              ):(\r\n                <Button variant=\"contained\" color=\"primary\"  onClick={this.stop_tapping}>Finish Tapping</Button>\r\n              )            \r\n            ) : (\r\n            <Button disabled={this.state.recording} variant=\"contained\" color=\"primary\"  onClick={this.runHandpose}>Starting Real Time Inference</Button>\r\n            )}\r\n\r\n            {this.state.recording ? (\r\n              this.state.finger_done ? (\r\n                this.state.rotate_done ? (\r\n                  <Button variant=\"contained\" color=\"secondary\" onClick={this.stop_record}>Calculate Result</Button>\r\n                ):(\r\n                  <Button variant=\"contained\" color=\"secondary\" onClick={this.stop_rotating}>Finish Rotating</Button>\r\n                )\r\n              ):(\r\n                <Button variant=\"contained\" color=\"secondary\" onClick={this.stop_tapping}>Finish Tapping</Button>\r\n              )            \r\n            ) : (\r\n            <Button disabled={this.state.real_time_inferencing} variant=\"contained\" color=\"secondary\" onClick={this.record_video}>Starting Recording</Button>\r\n            )}\r\n\r\n            <Button disabled={this.state.recording||this.state.real_time_inferencing} variant=\"outlined\" color=\"secondary\" onClick={this.reset_counter}>\r\n              Reset All\r\n            </Button>\r\n          </div>\r\n          \r\n          <input type=\"number\" id=\"real_measurement\" onChange={this.compose_chart} step=\"0.001\" min='0' max='20'></input>\r\n          <button disabled={!this.state.chart_ready} onClick={this.switch_style}>Switch Chart Style</button>\r\n          <button onClick={this.switch_cam}>Switch Camera</button>\r\n          <button disabled={this.state.recording||this.state.real_time_inferencing} onClick={this.runPosenet}>PoseNet</button>\r\n          <button disabled={this.state.recording||this.state.real_time_inferencing} onClick={this.runFacemesh}>Facemesh</button>\r\n          <button disabled={this.state.recording||this.state.real_time_inferencing} onClick={this.switch_button}>Switch On/Off Button</button>       \r\n            <h5>\r\n              Finger Tapping Count:{this.state.tap_count.length}&nbsp;&nbsp;&nbsp;&nbsp;\r\n              Rotate Count:{this.state.rotate_count.length}&nbsp;&nbsp;&nbsp;&nbsp;\r\n              Gripping Count: {this.state.fist_count.length}\r\n            </h5>\r\n          <div>\r\n            {this.state.chart_ready ? (\r\n              <div>\r\n                <Line data={this.state.chart_data1} />\r\n                <Line data={this.state.chart_data2} />\r\n                <Line data={this.state.chart_data3} />\r\n              </div>\r\n            ) : (\r\n              <div/>\r\n            )}\r\n            <div>\r\n              <input type=\"file\" id=\"upload-json\"></input>\r\n            </div>\r\n            <div>\r\n              <input type=\"file\" id=\"upload-weights\"></input>\r\n            </div>\r\n          </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}