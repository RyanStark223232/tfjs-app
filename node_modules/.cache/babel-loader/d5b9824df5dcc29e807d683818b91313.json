{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context) => {\n  switch (node.op) {\n    case 'Max':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        const keepDims = getParamValue('keepDims', node, tensorMap, context);\n        return [tfOps.max(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n      }\n\n    case 'Mean':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        const keepDims = getParamValue('keepDims', node, tensorMap, context);\n        return [tfOps.mean(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n      }\n\n    case 'Min':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        const keepDims = getParamValue('keepDims', node, tensorMap, context);\n        return [tfOps.min(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n      }\n\n    case 'Sum':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        const keepDims = getParamValue('keepDims', node, tensorMap, context);\n        return [tfOps.sum(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n      }\n\n    case 'All':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        const keepDims = getParamValue('keepDims', node, tensorMap, context);\n        return [tfOps.all(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n      }\n\n    case 'Any':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        const keepDims = getParamValue('keepDims', node, tensorMap, context);\n        return [tfOps.any(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n      }\n\n    case 'ArgMax':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        return [tfOps.argMax(getParamValue('x', node, tensorMap, context), axis)];\n      }\n\n    case 'ArgMin':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        return [tfOps.argMin(getParamValue('x', node, tensorMap, context), axis)];\n      }\n\n    case 'Prod':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        const keepDims = getParamValue('keepDims', node, tensorMap, context);\n        return [tfOps.prod(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n      }\n\n    case 'Cumsum':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        const exclusive = getParamValue('exclusive', node, tensorMap, context);\n        const reverse = getParamValue('reverse', node, tensorMap, context);\n        return [tfOps.cumsum(getParamValue('x', node, tensorMap, context), axis, exclusive, reverse)];\n      }\n\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'reduction';","map":{"version":3,"sources":["../../../src/operations/executors/reduction_executor.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\n// tslint:disable-next-line: no-imports-from-dist\r\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\r\nimport { getParamValue } from './utils';\r\nexport const executeOp = (node, tensorMap, context) => {\r\n    switch (node.op) {\r\n        case 'Max': {\r\n            const axis = getParamValue('axis', node, tensorMap, context);\r\n            const keepDims = getParamValue('keepDims', node, tensorMap, context);\r\n            return [tfOps.max(getParamValue('x', node, tensorMap, context), axis, keepDims)];\r\n        }\r\n        case 'Mean': {\r\n            const axis = getParamValue('axis', node, tensorMap, context);\r\n            const keepDims = getParamValue('keepDims', node, tensorMap, context);\r\n            return [tfOps.mean(getParamValue('x', node, tensorMap, context), axis, keepDims)];\r\n        }\r\n        case 'Min': {\r\n            const axis = getParamValue('axis', node, tensorMap, context);\r\n            const keepDims = getParamValue('keepDims', node, tensorMap, context);\r\n            return [tfOps.min(getParamValue('x', node, tensorMap, context), axis, keepDims)];\r\n        }\r\n        case 'Sum': {\r\n            const axis = getParamValue('axis', node, tensorMap, context);\r\n            const keepDims = getParamValue('keepDims', node, tensorMap, context);\r\n            return [tfOps.sum(getParamValue('x', node, tensorMap, context), axis, keepDims)];\r\n        }\r\n        case 'All': {\r\n            const axis = getParamValue('axis', node, tensorMap, context);\r\n            const keepDims = getParamValue('keepDims', node, tensorMap, context);\r\n            return [tfOps.all(getParamValue('x', node, tensorMap, context), axis, keepDims)];\r\n        }\r\n        case 'Any': {\r\n            const axis = getParamValue('axis', node, tensorMap, context);\r\n            const keepDims = getParamValue('keepDims', node, tensorMap, context);\r\n            return [tfOps.any(getParamValue('x', node, tensorMap, context), axis, keepDims)];\r\n        }\r\n        case 'ArgMax': {\r\n            const axis = getParamValue('axis', node, tensorMap, context);\r\n            return [tfOps.argMax(getParamValue('x', node, tensorMap, context), axis)];\r\n        }\r\n        case 'ArgMin': {\r\n            const axis = getParamValue('axis', node, tensorMap, context);\r\n            return [tfOps.argMin(getParamValue('x', node, tensorMap, context), axis)];\r\n        }\r\n        case 'Prod': {\r\n            const axis = getParamValue('axis', node, tensorMap, context);\r\n            const keepDims = getParamValue('keepDims', node, tensorMap, context);\r\n            return [tfOps.prod(getParamValue('x', node, tensorMap, context), axis, keepDims)];\r\n        }\r\n        case 'Cumsum': {\r\n            const axis = getParamValue('axis', node, tensorMap, context);\r\n            const exclusive = getParamValue('exclusive', node, tensorMap, context);\r\n            const reverse = getParamValue('reverse', node, tensorMap, context);\r\n            return [tfOps.cumsum(getParamValue('x', node, tensorMap, context), axis, exclusive, reverse)];\r\n        }\r\n        default:\r\n            throw TypeError(`Node type ${node.op} is not implemented`);\r\n    }\r\n};\r\nexport const CATEGORY = 'reduction';\r\n//# sourceMappingURL=reduction_executor.js.map"]},"metadata":{},"sourceType":"module"}