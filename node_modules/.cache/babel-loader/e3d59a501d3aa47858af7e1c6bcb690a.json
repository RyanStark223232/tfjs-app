{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { Prelu } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\r\n * Computes leaky rectified linear element-wise with parametric alphas.\r\n *\r\n * `x < 0 ? alpha * x : f(x) = x`\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([-1, 2, -3, 4]);\r\n * const alpha = tf.scalar(0.1);\r\n *\r\n * x.prelu(alpha).print();  // or tf.prelu(x, alpha)\r\n * ```\r\n * @param x The input tensor.\r\n * @param alpha Scaling factor for negative values.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Basic math'}\r\n */\n\nfunction prelu_(x, alpha) {\n  const $x = convertToTensor(x, 'x', 'prelu');\n  const $alpha = convertToTensor(alpha, 'alpha', 'prelu');\n\n  const forward = (backend, save) => {\n    const res = backend.prelu($x, $alpha);\n    save([$x, $alpha]);\n    return res;\n  };\n\n  const inputs = {\n    x: $x,\n    alpha: $alpha\n  };\n  return ENGINE.runKernelFunc(forward, inputs, null\n  /* grad */\n  , Prelu);\n}\n\nexport const prelu = op({\n  prelu_\n});","map":{"version":3,"sources":["../../src/ops/prelu.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,MAAR,QAAkC,WAAlC;AACA,SAAQ,KAAR,QAAiC,iBAAjC;AAGA,SAAQ,eAAR,QAA8B,oBAA9B;AAGA,SAAQ,EAAR,QAAiB,aAAjB;AAEA;;;;;;;;;;;;;;;AAeG;;AACH,SAAS,MAAT,CAAkC,CAAlC,EAAmD,KAAnD,EAAsE;AACpE,QAAM,EAAE,GAAG,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,OAAT,CAA1B;AACA,QAAM,MAAM,GAAG,eAAe,CAAC,KAAD,EAAQ,OAAR,EAAiB,OAAjB,CAA9B;;AAEA,QAAM,OAAO,GAAwB,CAAC,OAAD,EAAU,IAAV,KAAkB;AACrD,UAAM,GAAG,GAAG,OAAO,CAAC,KAAR,CAAc,EAAd,EAAkB,MAAlB,CAAZ;AACA,IAAA,IAAI,CAAC,CAAC,EAAD,EAAK,MAAL,CAAD,CAAJ;AACA,WAAO,GAAP;AACD,GAJD;;AAMA,QAAM,MAAM,GAAgB;AAAC,IAAA,CAAC,EAAE,EAAJ;AAAQ,IAAA,KAAK,EAAE;AAAf,GAA5B;AACA,SAAO,MAAM,CAAC,aAAP,CACI,OADJ,EACa,MADb,EAC6C;AAAK;AADlD,IAC8D,KAD9D,CAAP;AAGD;;AAED,OAAO,MAAM,KAAK,GAAG,EAAE,CAAC;AAAC,EAAA;AAAD,CAAD,CAAhB","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { ENGINE } from '../engine';\r\nimport { Prelu } from '../kernel_names';\r\nimport { convertToTensor } from '../tensor_util_env';\r\nimport { op } from './operation';\r\n/**\r\n * Computes leaky rectified linear element-wise with parametric alphas.\r\n *\r\n * `x < 0 ? alpha * x : f(x) = x`\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([-1, 2, -3, 4]);\r\n * const alpha = tf.scalar(0.1);\r\n *\r\n * x.prelu(alpha).print();  // or tf.prelu(x, alpha)\r\n * ```\r\n * @param x The input tensor.\r\n * @param alpha Scaling factor for negative values.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Basic math'}\r\n */\r\nfunction prelu_(x, alpha) {\r\n    const $x = convertToTensor(x, 'x', 'prelu');\r\n    const $alpha = convertToTensor(alpha, 'alpha', 'prelu');\r\n    const forward = (backend, save) => {\r\n        const res = backend.prelu($x, $alpha);\r\n        save([$x, $alpha]);\r\n        return res;\r\n    };\r\n    const inputs = { x: $x, alpha: $alpha };\r\n    return ENGINE.runKernelFunc(forward, inputs, null /* grad */, Prelu);\r\n}\r\nexport const prelu = op({ prelu_ });\r\n//# sourceMappingURL=prelu.js.map"]},"metadata":{},"sourceType":"module"}