{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { Real } from '@tensorflow/tfjs-core';\nexport function real(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    input\n  } = inputs;\n  const real = backend.data.get(input.dataId).complexTensorInfos.real;\n  const realVal = backend.data.get(real.dataId).values; // When complex tensor is disposed, its underlying parts will be disposed too.\n  // Make new tensor out of the real value of the complex. This makes sure the\n  // value is still accessible even if complex tensor is disposed.\n\n  return backend.makeTensorInfo(real.shape, real.dtype, realVal);\n}\nexport const realConfig = {\n  kernelName: Real,\n  backendName: 'cpu',\n  kernelFunc: real\n};","map":{"version":3,"sources":["../../src/kernels/Real.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAkC,IAAlC,QAAqE,uBAArE;AAIA,OAAM,SAAU,IAAV,CAAe,IAAf,EAAkE;AAEtE,QAAM;AAAC,IAAA,MAAD;AAAS,IAAA;AAAT,MAAoB,IAA1B;AACA,QAAM;AAAC,IAAA;AAAD,MAAU,MAAhB;AAEA,QAAM,IAAI,GAAG,OAAO,CAAC,IAAR,CAAa,GAAb,CAAiB,KAAK,CAAC,MAAvB,EAA+B,kBAA/B,CAAkD,IAA/D;AACA,QAAM,OAAO,GAAG,OAAO,CAAC,IAAR,CAAa,GAAb,CAAiB,IAAI,CAAC,MAAtB,EAA8B,MAA9C,CANsE,CAQtE;AACA;AACA;;AACA,SAAO,OAAO,CAAC,cAAR,CAAuB,IAAI,CAAC,KAA5B,EAAmC,IAAI,CAAC,KAAxC,EAA+C,OAA/C,CAAP;AACD;AAED,OAAO,MAAM,UAAU,GAAiB;AACtC,EAAA,UAAU,EAAE,IAD0B;AAEtC,EAAA,WAAW,EAAE,KAFyB;AAGtC,EAAA,UAAU,EAAE;AAH0B,CAAjC","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { Real } from '@tensorflow/tfjs-core';\r\nexport function real(args) {\r\n    const { inputs, backend } = args;\r\n    const { input } = inputs;\r\n    const real = backend.data.get(input.dataId).complexTensorInfos.real;\r\n    const realVal = backend.data.get(real.dataId).values;\r\n    // When complex tensor is disposed, its underlying parts will be disposed too.\r\n    // Make new tensor out of the real value of the complex. This makes sure the\r\n    // value is still accessible even if complex tensor is disposed.\r\n    return backend.makeTensorInfo(real.shape, real.dtype, realVal);\r\n}\r\nexport const realConfig = {\r\n    kernelName: Real,\r\n    backendName: 'cpu',\r\n    kernelFunc: real\r\n};\r\n//# sourceMappingURL=Real.js.map"]},"metadata":{},"sourceType":"module"}