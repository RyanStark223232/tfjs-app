{"ast":null,"code":"import _slicedToArray from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { getGlslDifferences } from './glsl_version';\nimport * as shader_util from './shader_compiler_util';\n/*\r\nThis is how the shader encodes a tensor with shape = [2, 3, 5]\r\n(indices are [batch, row, col]).\r\n\r\n000|001   002|003   004|xxx   020|021   022|023   024|xxx\r\n-------   -------   -------   -------   -------   -------\r\n010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx\r\n\r\n100|101   102|103   104|xxx   120|121   122|123   124|xxx\r\n-------   -------   -------   -------   -------   -------\r\n110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx\r\n\r\nSingle texels contain only values from the same batch, and from adjacent rows\r\nand columns.\r\n */\n\nexport var EncodeMatrixPackedProgram = function EncodeMatrixPackedProgram(outputShape, texShape) {\n  var inputIsUnsignedByte = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  _classCallCheck(this, EncodeMatrixPackedProgram);\n\n  this.variableNames = ['A'];\n  this.packedInputs = false;\n  this.packedOutput = true;\n  var glsl = getGlslDifferences();\n\n  var _texShape = _slicedToArray(texShape, 2),\n      height = _texShape[0],\n      width = _texShape[1];\n\n  this.outputShape = outputShape;\n  var mainLoop = '';\n  var output = 'result';\n\n  if (inputIsUnsignedByte) {\n    output = 'floor(result * 255. + 0.5)';\n  }\n\n  for (var row = 0; row <= 1; row++) {\n    for (var col = 0; col <= 1; col++) {\n      var channel = row * 2 + col;\n      mainLoop += \"\\n          localCoords = coords;\\n          if(localCoords[2] + \".concat(col, \" < \").concat(outputShape[2], \") {\\n            localCoords[2] += \").concat(col, \";\\n            if(localCoords[1] + \").concat(row, \" < \").concat(outputShape[1], \") {\\n              localCoords[1] += \").concat(row, \";\\n\\n              flatIndex = getFlatIndex(localCoords);\\n              offset = imod(flatIndex, 4);\\n\\n              flatIndex = idiv(flatIndex, 4, 1.);\\n\\n              r = flatIndex / \").concat(width, \";\\n              c = imod(flatIndex, \").concat(width, \");\\n              uv = (vec2(c, r) + halfCR) / vec2(\").concat(width, \".0, \").concat(height, \".0);\\n              values = \").concat(glsl.texture2D, \"(A, uv);\\n\\n              if(offset == 0) {\\n                result[\").concat(channel, \"] = values[0];\\n              } else if(offset == 1) {\\n                result[\").concat(channel, \"] = values[1];\\n              } else if(offset == 2) {\\n                result[\").concat(channel, \"] = values[2];\\n              } else {\\n                result[\").concat(channel, \"] = values[3];\\n              }\\n            }\\n          }\\n        \");\n    }\n  }\n\n  this.userCode = \"\\n      \".concat(shader_util.getFlatIndexFrom3D(outputShape), \"\\n\\n      void main() {\\n        ivec3 coords = getOutputCoords();\\n\\n        vec4 result = vec4(0.);\\n        int flatIndex, r, c, offset;\\n        ivec3 localCoords;\\n        vec2 uv;\\n        vec4 values;\\n\\n        \").concat(mainLoop, \"\\n\\n        \").concat(glsl.output, \" = \").concat(output, \";\\n      }\\n    \");\n};","map":{"version":3,"sources":["../src/encode_matrix_packed_gpu.ts"],"names":[],"mappings":";;;AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,kBAAR,QAAiC,gBAAjC;AAEA,OAAO,KAAK,WAAZ,MAA6B,wBAA7B;AAEA;;;;;;;;;;;;;;AAcG;;AAEH,WAAa,yBAAb,GAOE,mCACI,WADJ,EAC2C,QAD3C,EAE+B;AAAA,MAA3B,mBAA2B,uEAAL,KAAK;;AAAA;;AAR/B,OAAA,aAAA,GAAgB,CAAC,GAAD,CAAhB;AAGA,OAAA,YAAA,GAAe,KAAf;AACA,OAAA,YAAA,GAAe,IAAf;AAKE,MAAM,IAAI,GAAG,kBAAkB,EAA/B;;AAD6B,iCAEL,QAFK;AAAA,MAEtB,MAFsB;AAAA,MAEd,KAFc;;AAG7B,OAAK,WAAL,GAAmB,WAAnB;AAEA,MAAI,QAAQ,GAAG,EAAf;AACA,MAAI,MAAM,GAAG,QAAb;;AACA,MAAI,mBAAJ,EAAyB;AACvB,IAAA,MAAM,GAAG,4BAAT;AACD;;AAED,OAAK,IAAI,GAAG,GAAG,CAAf,EAAkB,GAAG,IAAI,CAAzB,EAA4B,GAAG,EAA/B,EAAmC;AACjC,SAAK,IAAI,GAAG,GAAG,CAAf,EAAkB,GAAG,IAAI,CAAzB,EAA4B,GAAG,EAA/B,EAAmC;AACjC,UAAM,OAAO,GAAG,GAAG,GAAG,CAAN,GAAU,GAA1B;AAEA,MAAA,QAAQ,+EAEgB,GAFhB,gBAEyB,WAAW,CAAC,CAAD,CAFpC,gDAGgB,GAHhB,gDAIkB,GAJlB,gBAI2B,WAAW,CAAC,CAAD,CAJtC,kDAKkB,GALlB,yMAYgB,KAZhB,kDAaoB,KAbpB,iEAckC,KAdlC,iBAc8C,MAd9C,0CAeS,IAAI,CAAC,SAfd,iFAkBS,OAlBT,4FAoBS,OApBT,4FAsBS,OAtBT,4EAwBS,OAxBT,0EAAR;AA6BD;AACF;;AAED,OAAK,QAAL,qBACI,WAAW,CAAC,kBAAZ,CAA+B,WAA/B,CADJ,wOAYM,QAZN,yBAcM,IAAI,CAAC,MAdX,gBAcuB,MAdvB;AAiBD,CAzEH","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { getGlslDifferences } from './glsl_version';\r\nimport * as shader_util from './shader_compiler_util';\r\n/*\r\nThis is how the shader encodes a tensor with shape = [2, 3, 5]\r\n(indices are [batch, row, col]).\r\n\r\n000|001   002|003   004|xxx   020|021   022|023   024|xxx\r\n-------   -------   -------   -------   -------   -------\r\n010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx\r\n\r\n100|101   102|103   104|xxx   120|121   122|123   124|xxx\r\n-------   -------   -------   -------   -------   -------\r\n110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx\r\n\r\nSingle texels contain only values from the same batch, and from adjacent rows\r\nand columns.\r\n */\r\nexport class EncodeMatrixPackedProgram {\r\n    constructor(outputShape, texShape, inputIsUnsignedByte = false) {\r\n        this.variableNames = ['A'];\r\n        this.packedInputs = false;\r\n        this.packedOutput = true;\r\n        const glsl = getGlslDifferences();\r\n        const [height, width] = texShape;\r\n        this.outputShape = outputShape;\r\n        let mainLoop = '';\r\n        let output = 'result';\r\n        if (inputIsUnsignedByte) {\r\n            output = 'floor(result * 255. + 0.5)';\r\n        }\r\n        for (let row = 0; row <= 1; row++) {\r\n            for (let col = 0; col <= 1; col++) {\r\n                const channel = row * 2 + col;\r\n                mainLoop += `\r\n          localCoords = coords;\r\n          if(localCoords[2] + ${col} < ${outputShape[2]}) {\r\n            localCoords[2] += ${col};\r\n            if(localCoords[1] + ${row} < ${outputShape[1]}) {\r\n              localCoords[1] += ${row};\r\n\r\n              flatIndex = getFlatIndex(localCoords);\r\n              offset = imod(flatIndex, 4);\r\n\r\n              flatIndex = idiv(flatIndex, 4, 1.);\r\n\r\n              r = flatIndex / ${width};\r\n              c = imod(flatIndex, ${width});\r\n              uv = (vec2(c, r) + halfCR) / vec2(${width}.0, ${height}.0);\r\n              values = ${glsl.texture2D}(A, uv);\r\n\r\n              if(offset == 0) {\r\n                result[${channel}] = values[0];\r\n              } else if(offset == 1) {\r\n                result[${channel}] = values[1];\r\n              } else if(offset == 2) {\r\n                result[${channel}] = values[2];\r\n              } else {\r\n                result[${channel}] = values[3];\r\n              }\r\n            }\r\n          }\r\n        `;\r\n            }\r\n        }\r\n        this.userCode = `\r\n      ${shader_util.getFlatIndexFrom3D(outputShape)}\r\n\r\n      void main() {\r\n        ivec3 coords = getOutputCoords();\r\n\r\n        vec4 result = vec4(0.);\r\n        int flatIndex, r, c, offset;\r\n        ivec3 localCoords;\r\n        vec2 uv;\r\n        vec4 values;\r\n\r\n        ${mainLoop}\r\n\r\n        ${glsl.output} = ${output};\r\n      }\r\n    `;\r\n    }\r\n}\r\n//# sourceMappingURL=encode_matrix_packed_gpu.js.map"]},"metadata":{},"sourceType":"module"}