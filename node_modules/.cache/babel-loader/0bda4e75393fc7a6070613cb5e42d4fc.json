{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { complex } from '../ops/complex';\nimport { tensor } from '../ops/tensor';\nimport { sizeFromShape } from '../util';\nimport { DTYPE_VALUE_SIZE_MAP } from './types';\n/** Number of bytes reserved for the length of the string. (32bit integer). */\n\nconst NUM_BYTES_STRING_LENGTH = 4;\n/**\r\n * Encode a map from names to weight values as an ArrayBuffer, along with an\r\n * `Array` of `WeightsManifestEntry` as specification of the encoded weights.\r\n *\r\n * This function does not perform sharding.\r\n *\r\n * This function is the reverse of `decodeWeights`.\r\n *\r\n * @param tensors A map (\"dict\") from names to tensors.\r\n * @param group Group to which the weights belong (optional).\r\n * @returns A `Promise` of\r\n *   - A flat `ArrayBuffer` with all the binary values of the `Tensor`s\r\n *     concatenated.\r\n *   - An `Array` of `WeightManifestEntry`s, carrying information including\r\n *     tensor names, `dtype`s and shapes.\r\n * @throws Error: on unsupported tensor `dtype`.\r\n */\n\nexport async function encodeWeights(tensors, group) {\n  // TODO(adarob, cais): Support quantization.\n  const specs = [];\n  const dataPromises = [];\n  const names = Array.isArray(tensors) ? tensors.map(tensor => tensor.name) : Object.keys(tensors);\n\n  for (let i = 0; i < names.length; ++i) {\n    const name = names[i];\n    const t = Array.isArray(tensors) ? tensors[i].tensor : tensors[name];\n\n    if (t.dtype !== 'float32' && t.dtype !== 'int32' && t.dtype !== 'bool' && t.dtype !== 'string' && t.dtype !== 'complex64') {\n      throw new Error(`Unsupported dtype in weight '${name}': ${t.dtype}`);\n    }\n\n    const spec = {\n      name,\n      shape: t.shape,\n      dtype: t.dtype\n    };\n\n    if (t.dtype === 'string') {\n      const utf8bytes = new Promise(async resolve => {\n        const vals = await t.bytes();\n        const totalNumBytes = vals.reduce((p, c) => p + c.length, 0) + NUM_BYTES_STRING_LENGTH * vals.length;\n        const bytes = new Uint8Array(totalNumBytes);\n        let offset = 0;\n\n        for (let i = 0; i < vals.length; i++) {\n          const val = vals[i];\n          const bytesOfLength = new Uint8Array(new Uint32Array([val.length]).buffer);\n          bytes.set(bytesOfLength, offset);\n          offset += NUM_BYTES_STRING_LENGTH;\n          bytes.set(val, offset);\n          offset += val.length;\n        }\n\n        resolve(bytes);\n      });\n      dataPromises.push(utf8bytes);\n    } else {\n      dataPromises.push(t.data());\n    }\n\n    if (group != null) {\n      spec.group = group;\n    }\n\n    specs.push(spec);\n  }\n\n  const tensorValues = await Promise.all(dataPromises);\n  return {\n    data: concatenateTypedArrays(tensorValues),\n    specs\n  };\n}\n/**\r\n * Decode flat ArrayBuffer as weights.\r\n *\r\n * This function does not handle sharding.\r\n *\r\n * This function is the reverse of `encodeWeights`.\r\n *\r\n * @param buffer A flat ArrayBuffer carrying the binary values of the tensors\r\n *   concatenated in the order specified in `specs`.\r\n * @param specs Specifications of the names, dtypes and shapes of the tensors\r\n *   whose value are encoded by `buffer`.\r\n * @return A map from tensor name to tensor value, with the names corresponding\r\n *   to names in `specs`.\r\n * @throws Error, if any of the tensors has unsupported dtype.\r\n */\n\nexport function decodeWeights(buffer, specs) {\n  // TODO(adarob, cais): Support quantization.\n  const out = {};\n  let float16Decode;\n  let offset = 0;\n\n  for (const spec of specs) {\n    const name = spec.name;\n    const dtype = spec.dtype;\n    const shape = spec.shape;\n    const size = sizeFromShape(shape);\n    let values;\n\n    if ('quantization' in spec) {\n      const quantization = spec.quantization;\n\n      if (quantization.dtype === 'uint8' || quantization.dtype === 'uint16') {\n        if (!('min' in quantization && 'scale' in quantization)) {\n          throw new Error(`Weight ${spec.name} with quantization ${quantization.dtype} ` + `doesn't have corresponding metadata min and scale.`);\n        }\n      } else if (quantization.dtype === 'float16') {\n        if (dtype !== 'float32') {\n          throw new Error(`Weight ${spec.name} is quantized with ${quantization.dtype} ` + `which only supports weights of type float32 not ${dtype}.`);\n        }\n      } else {\n        throw new Error(`Weight ${spec.name} has unknown ` + `quantization dtype ${quantization.dtype}. ` + `Supported quantization dtypes are: ` + `'uint8', 'uint16', and 'float16'.`);\n      }\n\n      const quantizationSizeFactor = DTYPE_VALUE_SIZE_MAP[quantization.dtype];\n      const byteBuffer = buffer.slice(offset, offset + size * quantizationSizeFactor);\n      const quantizedArray = quantization.dtype === 'uint8' ? new Uint8Array(byteBuffer) : new Uint16Array(byteBuffer);\n\n      if (dtype === 'float32') {\n        if (quantization.dtype === 'uint8' || quantization.dtype === 'uint16') {\n          values = new Float32Array(quantizedArray.length);\n\n          for (let i = 0; i < quantizedArray.length; i++) {\n            const v = quantizedArray[i];\n            values[i] = v * quantization.scale + quantization.min;\n          }\n        } else if (quantization.dtype === 'float16') {\n          if (float16Decode === undefined) {\n            float16Decode = getFloat16Decoder();\n          }\n\n          values = float16Decode(quantizedArray);\n        } else {\n          throw new Error(`Unsupported quantization type ${quantization.dtype} ` + `for weight type float32.`);\n        }\n      } else if (dtype === 'int32') {\n        if (quantization.dtype !== 'uint8' && quantization.dtype !== 'uint16') {\n          throw new Error(`Unsupported quantization type ${quantization.dtype} ` + `for weight type int32.`);\n        }\n\n        values = new Int32Array(quantizedArray.length);\n\n        for (let i = 0; i < quantizedArray.length; i++) {\n          const v = quantizedArray[i];\n          values[i] = Math.round(v * quantization.scale + quantization.min);\n        }\n      } else {\n        throw new Error(`Unsupported dtype in weight '${name}': ${dtype}`);\n      }\n\n      offset += size * quantizationSizeFactor;\n    } else if (dtype === 'string') {\n      const size = sizeFromShape(spec.shape);\n      values = [];\n\n      for (let i = 0; i < size; i++) {\n        const byteLength = new Uint32Array(buffer.slice(offset, offset + NUM_BYTES_STRING_LENGTH))[0];\n        offset += NUM_BYTES_STRING_LENGTH;\n        const bytes = new Uint8Array(buffer.slice(offset, offset + byteLength));\n        values.push(bytes);\n        offset += byteLength;\n      }\n    } else {\n      const dtypeFactor = DTYPE_VALUE_SIZE_MAP[dtype];\n      const byteBuffer = buffer.slice(offset, offset + size * dtypeFactor);\n\n      if (dtype === 'float32') {\n        values = new Float32Array(byteBuffer);\n      } else if (dtype === 'int32') {\n        values = new Int32Array(byteBuffer);\n      } else if (dtype === 'bool') {\n        values = new Uint8Array(byteBuffer);\n      } else if (dtype === 'complex64') {\n        values = new Float32Array(byteBuffer);\n        const real = new Float32Array(values.length / 2);\n        const image = new Float32Array(values.length / 2);\n\n        for (let i = 0; i < real.length; i++) {\n          real[i] = values[i * 2];\n          image[i] = values[i * 2 + 1];\n        }\n\n        const realTensor = tensor(real, shape, 'float32');\n        const imageTensor = tensor(image, shape, 'float32');\n        out[name] = complex(realTensor, imageTensor);\n        realTensor.dispose();\n        imageTensor.dispose();\n      } else {\n        throw new Error(`Unsupported dtype in weight '${name}': ${dtype}`);\n      }\n\n      offset += size * dtypeFactor;\n    }\n\n    if (dtype !== 'complex64') {\n      out[name] = tensor(values, shape, dtype);\n    }\n  }\n\n  return out;\n}\n/**\r\n * Concatenate TypedArrays into an ArrayBuffer.\r\n */\n\nexport function concatenateTypedArrays(xs) {\n  // TODO(adarob, cais): Support quantization.\n  if (xs === null) {\n    throw new Error(`Invalid input value: ${JSON.stringify(xs)}`);\n  }\n\n  let totalByteLength = 0; // `normalizedXs` is here for this reason: a `TypedArray`'s `buffer'\n  // can have a different byte length from that of the `TypedArray` itself,\n  // for example, when the `TypedArray` is created from an offset in an\n  // `ArrayBuffer`. `normliazedXs` holds `TypedArray`s whose `buffer`s match\n  // the `TypedArray` in byte length. If an element of `xs` does not show\n  // this property, a new `TypedArray` that satisfy this property will be\n  // constructed and pushed into `normalizedXs`.\n\n  const normalizedXs = [];\n  xs.forEach(x => {\n    totalByteLength += x.byteLength; // tslint:disable:no-any\n\n    normalizedXs.push(x.byteLength === x.buffer.byteLength ? x : new x.constructor(x));\n\n    if (!(x instanceof Float32Array || x instanceof Int32Array || x instanceof Uint8Array)) {\n      throw new Error(`Unsupported TypedArray subtype: ${x.constructor.name}`);\n    } // tslint:enable:no-any\n\n  });\n  const y = new Uint8Array(totalByteLength);\n  let offset = 0;\n  normalizedXs.forEach(x => {\n    y.set(new Uint8Array(x.buffer), offset);\n    offset += x.byteLength;\n  });\n  return y.buffer;\n} // Use Buffer on Node.js instead of Blob/atob/btoa\n\nconst useNodeBuffer = typeof Buffer !== 'undefined' && (typeof Blob === 'undefined' || typeof atob === 'undefined' || typeof btoa === 'undefined');\n/**\r\n * Calculate the byte length of a JavaScript string.\r\n *\r\n * Note that a JavaScript string can contain wide characters, therefore the\r\n * length of the string is not necessarily equal to the byte length.\r\n *\r\n * @param str Input string.\r\n * @returns Byte length.\r\n */\n\nexport function stringByteLength(str) {\n  if (useNodeBuffer) {\n    return Buffer.byteLength(str);\n  }\n\n  return new Blob([str]).size;\n}\n/**\r\n * Encode an ArrayBuffer as a base64 encoded string.\r\n *\r\n * @param buffer `ArrayBuffer` to be converted.\r\n * @returns A string that base64-encodes `buffer`.\r\n */\n\nexport function arrayBufferToBase64String(buffer) {\n  if (useNodeBuffer) {\n    return Buffer.from(buffer).toString('base64');\n  }\n\n  const buf = new Uint8Array(buffer);\n  let s = '';\n\n  for (let i = 0, l = buf.length; i < l; i++) {\n    s += String.fromCharCode(buf[i]);\n  }\n\n  return btoa(s);\n}\n/**\r\n * Decode a base64 string as an ArrayBuffer.\r\n *\r\n * @param str Base64 string.\r\n * @returns Decoded `ArrayBuffer`.\r\n */\n\nexport function base64StringToArrayBuffer(str) {\n  if (useNodeBuffer) {\n    const buf = Buffer.from(str, 'base64');\n    return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\n  }\n\n  const s = atob(str);\n  const buffer = new Uint8Array(s.length);\n\n  for (let i = 0; i < s.length; ++i) {\n    buffer.set([s.charCodeAt(i)], i);\n  }\n\n  return buffer.buffer;\n}\n/**\r\n * Concatenate a number of ArrayBuffers into one.\r\n *\r\n * @param buffers A number of array buffers to concatenate.\r\n * @returns Result of concatenating `buffers` in order.\r\n */\n\nexport function concatenateArrayBuffers(buffers) {\n  if (buffers.length === 1) {\n    return buffers[0];\n  }\n\n  let totalByteLength = 0;\n  buffers.forEach(buffer => {\n    totalByteLength += buffer.byteLength;\n  });\n  const temp = new Uint8Array(totalByteLength);\n  let offset = 0;\n  buffers.forEach(buffer => {\n    temp.set(new Uint8Array(buffer), offset);\n    offset += buffer.byteLength;\n  });\n  return temp.buffer;\n}\n/**\r\n * Get the basename of a path.\r\n *\r\n * Behaves in a way analogous to Linux's basename command.\r\n *\r\n * @param path\r\n */\n\nexport function basename(path) {\n  const SEPARATOR = '/';\n  path = path.trim();\n\n  while (path.endsWith(SEPARATOR)) {\n    path = path.slice(0, path.length - 1);\n  }\n\n  const items = path.split(SEPARATOR);\n  return items[items.length - 1];\n}\n/**\r\n * Populate ModelArtifactsInfo fields for a model with JSON topology.\r\n * @param modelArtifacts\r\n * @returns A ModelArtifactsInfo object.\r\n */\n\nexport function getModelArtifactsInfoForJSON(modelArtifacts) {\n  if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n    throw new Error('Expected JSON model topology, received ArrayBuffer.');\n  }\n\n  return {\n    dateSaved: new Date(),\n    modelTopologyType: 'JSON',\n    modelTopologyBytes: modelArtifacts.modelTopology == null ? 0 : stringByteLength(JSON.stringify(modelArtifacts.modelTopology)),\n    weightSpecsBytes: modelArtifacts.weightSpecs == null ? 0 : stringByteLength(JSON.stringify(modelArtifacts.weightSpecs)),\n    weightDataBytes: modelArtifacts.weightData == null ? 0 : modelArtifacts.weightData.byteLength\n  };\n}\n/**\r\n * Computes mantisa table for casting Float16 to Float32\r\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\r\n *\r\n * @returns Uint32Array, 2048 mantissa lookup values.\r\n */\n\nfunction computeFloat16MantisaTable() {\n  const convertMantissa = i => {\n    let m = i << 13;\n    let e = 0;\n\n    while ((m & 0x00800000) === 0) {\n      e -= 0x00800000;\n      m <<= 1;\n    }\n\n    m &= ~0x00800000;\n    e += 0x38800000;\n    return m | e;\n  };\n\n  const mantisaTable = new Uint32Array(2048);\n  mantisaTable[0] = 0;\n\n  for (let i = 1; i < 1024; i++) {\n    mantisaTable[i] = convertMantissa(i);\n  }\n\n  for (let i = 1024; i < 2048; i++) {\n    mantisaTable[i] = 0x38000000 + (i - 1024 << 13);\n  }\n\n  return mantisaTable;\n}\n/**\r\n * Computes exponent table for casting Float16 to Float32\r\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\r\n *\r\n * @returns Uint32Array, 64 exponent lookup values.\r\n */\n\n\nfunction computeFloat16ExponentTable() {\n  const exponentTable = new Uint32Array(64);\n  exponentTable[0] = 0;\n  exponentTable[31] = 0x47800000;\n  exponentTable[32] = 0x80000000;\n  exponentTable[63] = 0xc7800000;\n\n  for (let i = 1; i < 31; i++) {\n    exponentTable[i] = i << 23;\n  }\n\n  for (let i = 33; i < 63; i++) {\n    exponentTable[i] = 0x80000000 + (i - 32 << 23);\n  }\n\n  return exponentTable;\n}\n/**\r\n * Computes offset table for casting Float16 to Float32\r\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\r\n *\r\n * @returns Uint32Array, 6d offset values.\r\n */\n\n\nfunction computeFloat16OffsetTable() {\n  const offsetTable = new Uint32Array(64);\n\n  for (let i = 0; i < 64; i++) {\n    offsetTable[i] = 1024;\n  }\n\n  offsetTable[0] = offsetTable[32] = 0;\n  return offsetTable;\n}\n/**\r\n * Retrieve a Float16 decoder which will decode a ByteArray of Float16 values\r\n * to a Float32Array.\r\n *\r\n * @returns Function (buffer: Uint16Array) => Float32Array which decodes\r\n *          the Uint16Array of Float16 bytes to a Float32Array.\r\n */\n\n\nexport function getFloat16Decoder() {\n  // Algorithm is based off of\n  // http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n  // Cache lookup tables\n  const mantisaTable = computeFloat16MantisaTable();\n  const exponentTable = computeFloat16ExponentTable();\n  const offsetTable = computeFloat16OffsetTable();\n  return quantizedArray => {\n    const buffer = new ArrayBuffer(4 * quantizedArray.length);\n    const bufferUint32View = new Uint32Array(buffer);\n\n    for (let index = 0; index < quantizedArray.length; index++) {\n      const float16Bits = quantizedArray[index];\n      const float32Bits = mantisaTable[offsetTable[float16Bits >> 10] + (float16Bits & 0x3ff)] + exponentTable[float16Bits >> 10];\n      bufferUint32View[index] = float32Bits;\n    }\n\n    return new Float32Array(buffer);\n  };\n}","map":{"version":3,"sources":["../../src/io/io_utils.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { complex } from '../ops/complex';\r\nimport { tensor } from '../ops/tensor';\r\nimport { sizeFromShape } from '../util';\r\nimport { DTYPE_VALUE_SIZE_MAP } from './types';\r\n/** Number of bytes reserved for the length of the string. (32bit integer). */\r\nconst NUM_BYTES_STRING_LENGTH = 4;\r\n/**\r\n * Encode a map from names to weight values as an ArrayBuffer, along with an\r\n * `Array` of `WeightsManifestEntry` as specification of the encoded weights.\r\n *\r\n * This function does not perform sharding.\r\n *\r\n * This function is the reverse of `decodeWeights`.\r\n *\r\n * @param tensors A map (\"dict\") from names to tensors.\r\n * @param group Group to which the weights belong (optional).\r\n * @returns A `Promise` of\r\n *   - A flat `ArrayBuffer` with all the binary values of the `Tensor`s\r\n *     concatenated.\r\n *   - An `Array` of `WeightManifestEntry`s, carrying information including\r\n *     tensor names, `dtype`s and shapes.\r\n * @throws Error: on unsupported tensor `dtype`.\r\n */\r\nexport async function encodeWeights(tensors, group) {\r\n    // TODO(adarob, cais): Support quantization.\r\n    const specs = [];\r\n    const dataPromises = [];\r\n    const names = Array.isArray(tensors) ?\r\n        tensors.map(tensor => tensor.name) :\r\n        Object.keys(tensors);\r\n    for (let i = 0; i < names.length; ++i) {\r\n        const name = names[i];\r\n        const t = Array.isArray(tensors) ? tensors[i].tensor : tensors[name];\r\n        if (t.dtype !== 'float32' && t.dtype !== 'int32' && t.dtype !== 'bool' &&\r\n            t.dtype !== 'string' && t.dtype !== 'complex64') {\r\n            throw new Error(`Unsupported dtype in weight '${name}': ${t.dtype}`);\r\n        }\r\n        const spec = { name, shape: t.shape, dtype: t.dtype };\r\n        if (t.dtype === 'string') {\r\n            const utf8bytes = new Promise(async (resolve) => {\r\n                const vals = await t.bytes();\r\n                const totalNumBytes = vals.reduce((p, c) => p + c.length, 0) +\r\n                    NUM_BYTES_STRING_LENGTH * vals.length;\r\n                const bytes = new Uint8Array(totalNumBytes);\r\n                let offset = 0;\r\n                for (let i = 0; i < vals.length; i++) {\r\n                    const val = vals[i];\r\n                    const bytesOfLength = new Uint8Array(new Uint32Array([val.length]).buffer);\r\n                    bytes.set(bytesOfLength, offset);\r\n                    offset += NUM_BYTES_STRING_LENGTH;\r\n                    bytes.set(val, offset);\r\n                    offset += val.length;\r\n                }\r\n                resolve(bytes);\r\n            });\r\n            dataPromises.push(utf8bytes);\r\n        }\r\n        else {\r\n            dataPromises.push(t.data());\r\n        }\r\n        if (group != null) {\r\n            spec.group = group;\r\n        }\r\n        specs.push(spec);\r\n    }\r\n    const tensorValues = await Promise.all(dataPromises);\r\n    return { data: concatenateTypedArrays(tensorValues), specs };\r\n}\r\n/**\r\n * Decode flat ArrayBuffer as weights.\r\n *\r\n * This function does not handle sharding.\r\n *\r\n * This function is the reverse of `encodeWeights`.\r\n *\r\n * @param buffer A flat ArrayBuffer carrying the binary values of the tensors\r\n *   concatenated in the order specified in `specs`.\r\n * @param specs Specifications of the names, dtypes and shapes of the tensors\r\n *   whose value are encoded by `buffer`.\r\n * @return A map from tensor name to tensor value, with the names corresponding\r\n *   to names in `specs`.\r\n * @throws Error, if any of the tensors has unsupported dtype.\r\n */\r\nexport function decodeWeights(buffer, specs) {\r\n    // TODO(adarob, cais): Support quantization.\r\n    const out = {};\r\n    let float16Decode;\r\n    let offset = 0;\r\n    for (const spec of specs) {\r\n        const name = spec.name;\r\n        const dtype = spec.dtype;\r\n        const shape = spec.shape;\r\n        const size = sizeFromShape(shape);\r\n        let values;\r\n        if ('quantization' in spec) {\r\n            const quantization = spec.quantization;\r\n            if (quantization.dtype === 'uint8' || quantization.dtype === 'uint16') {\r\n                if (!('min' in quantization && 'scale' in quantization)) {\r\n                    throw new Error(`Weight ${spec.name} with quantization ${quantization.dtype} ` +\r\n                        `doesn't have corresponding metadata min and scale.`);\r\n                }\r\n            }\r\n            else if (quantization.dtype === 'float16') {\r\n                if (dtype !== 'float32') {\r\n                    throw new Error(`Weight ${spec.name} is quantized with ${quantization.dtype} ` +\r\n                        `which only supports weights of type float32 not ${dtype}.`);\r\n                }\r\n            }\r\n            else {\r\n                throw new Error(`Weight ${spec.name} has unknown ` +\r\n                    `quantization dtype ${quantization.dtype}. ` +\r\n                    `Supported quantization dtypes are: ` +\r\n                    `'uint8', 'uint16', and 'float16'.`);\r\n            }\r\n            const quantizationSizeFactor = DTYPE_VALUE_SIZE_MAP[quantization.dtype];\r\n            const byteBuffer = buffer.slice(offset, offset + size * quantizationSizeFactor);\r\n            const quantizedArray = (quantization.dtype === 'uint8') ?\r\n                new Uint8Array(byteBuffer) :\r\n                new Uint16Array(byteBuffer);\r\n            if (dtype === 'float32') {\r\n                if (quantization.dtype === 'uint8' || quantization.dtype === 'uint16') {\r\n                    values = new Float32Array(quantizedArray.length);\r\n                    for (let i = 0; i < quantizedArray.length; i++) {\r\n                        const v = quantizedArray[i];\r\n                        values[i] = v * quantization.scale + quantization.min;\r\n                    }\r\n                }\r\n                else if (quantization.dtype === 'float16') {\r\n                    if (float16Decode === undefined) {\r\n                        float16Decode = getFloat16Decoder();\r\n                    }\r\n                    values = float16Decode(quantizedArray);\r\n                }\r\n                else {\r\n                    throw new Error(`Unsupported quantization type ${quantization.dtype} ` +\r\n                        `for weight type float32.`);\r\n                }\r\n            }\r\n            else if (dtype === 'int32') {\r\n                if (quantization.dtype !== 'uint8' && quantization.dtype !== 'uint16') {\r\n                    throw new Error(`Unsupported quantization type ${quantization.dtype} ` +\r\n                        `for weight type int32.`);\r\n                }\r\n                values = new Int32Array(quantizedArray.length);\r\n                for (let i = 0; i < quantizedArray.length; i++) {\r\n                    const v = quantizedArray[i];\r\n                    values[i] = Math.round(v * quantization.scale + quantization.min);\r\n                }\r\n            }\r\n            else {\r\n                throw new Error(`Unsupported dtype in weight '${name}': ${dtype}`);\r\n            }\r\n            offset += size * quantizationSizeFactor;\r\n        }\r\n        else if (dtype === 'string') {\r\n            const size = sizeFromShape(spec.shape);\r\n            values = [];\r\n            for (let i = 0; i < size; i++) {\r\n                const byteLength = new Uint32Array(buffer.slice(offset, offset + NUM_BYTES_STRING_LENGTH))[0];\r\n                offset += NUM_BYTES_STRING_LENGTH;\r\n                const bytes = new Uint8Array(buffer.slice(offset, offset + byteLength));\r\n                values.push(bytes);\r\n                offset += byteLength;\r\n            }\r\n        }\r\n        else {\r\n            const dtypeFactor = DTYPE_VALUE_SIZE_MAP[dtype];\r\n            const byteBuffer = buffer.slice(offset, offset + size * dtypeFactor);\r\n            if (dtype === 'float32') {\r\n                values = new Float32Array(byteBuffer);\r\n            }\r\n            else if (dtype === 'int32') {\r\n                values = new Int32Array(byteBuffer);\r\n            }\r\n            else if (dtype === 'bool') {\r\n                values = new Uint8Array(byteBuffer);\r\n            }\r\n            else if (dtype === 'complex64') {\r\n                values = new Float32Array(byteBuffer);\r\n                const real = new Float32Array(values.length / 2);\r\n                const image = new Float32Array(values.length / 2);\r\n                for (let i = 0; i < real.length; i++) {\r\n                    real[i] = values[i * 2];\r\n                    image[i] = values[i * 2 + 1];\r\n                }\r\n                const realTensor = tensor(real, shape, 'float32');\r\n                const imageTensor = tensor(image, shape, 'float32');\r\n                out[name] = complex(realTensor, imageTensor);\r\n                realTensor.dispose();\r\n                imageTensor.dispose();\r\n            }\r\n            else {\r\n                throw new Error(`Unsupported dtype in weight '${name}': ${dtype}`);\r\n            }\r\n            offset += size * dtypeFactor;\r\n        }\r\n        if (dtype !== 'complex64') {\r\n            out[name] = tensor(values, shape, dtype);\r\n        }\r\n    }\r\n    return out;\r\n}\r\n/**\r\n * Concatenate TypedArrays into an ArrayBuffer.\r\n */\r\nexport function concatenateTypedArrays(xs) {\r\n    // TODO(adarob, cais): Support quantization.\r\n    if (xs === null) {\r\n        throw new Error(`Invalid input value: ${JSON.stringify(xs)}`);\r\n    }\r\n    let totalByteLength = 0;\r\n    // `normalizedXs` is here for this reason: a `TypedArray`'s `buffer'\r\n    // can have a different byte length from that of the `TypedArray` itself,\r\n    // for example, when the `TypedArray` is created from an offset in an\r\n    // `ArrayBuffer`. `normliazedXs` holds `TypedArray`s whose `buffer`s match\r\n    // the `TypedArray` in byte length. If an element of `xs` does not show\r\n    // this property, a new `TypedArray` that satisfy this property will be\r\n    // constructed and pushed into `normalizedXs`.\r\n    const normalizedXs = [];\r\n    xs.forEach((x) => {\r\n        totalByteLength += x.byteLength;\r\n        // tslint:disable:no-any\r\n        normalizedXs.push(x.byteLength === x.buffer.byteLength ? x :\r\n            new x.constructor(x));\r\n        if (!(x instanceof Float32Array || x instanceof Int32Array ||\r\n            x instanceof Uint8Array)) {\r\n            throw new Error(`Unsupported TypedArray subtype: ${x.constructor.name}`);\r\n        }\r\n        // tslint:enable:no-any\r\n    });\r\n    const y = new Uint8Array(totalByteLength);\r\n    let offset = 0;\r\n    normalizedXs.forEach((x) => {\r\n        y.set(new Uint8Array(x.buffer), offset);\r\n        offset += x.byteLength;\r\n    });\r\n    return y.buffer;\r\n}\r\n// Use Buffer on Node.js instead of Blob/atob/btoa\r\nconst useNodeBuffer = typeof Buffer !== 'undefined' &&\r\n    (typeof Blob === 'undefined' || typeof atob === 'undefined' ||\r\n        typeof btoa === 'undefined');\r\n/**\r\n * Calculate the byte length of a JavaScript string.\r\n *\r\n * Note that a JavaScript string can contain wide characters, therefore the\r\n * length of the string is not necessarily equal to the byte length.\r\n *\r\n * @param str Input string.\r\n * @returns Byte length.\r\n */\r\nexport function stringByteLength(str) {\r\n    if (useNodeBuffer) {\r\n        return Buffer.byteLength(str);\r\n    }\r\n    return new Blob([str]).size;\r\n}\r\n/**\r\n * Encode an ArrayBuffer as a base64 encoded string.\r\n *\r\n * @param buffer `ArrayBuffer` to be converted.\r\n * @returns A string that base64-encodes `buffer`.\r\n */\r\nexport function arrayBufferToBase64String(buffer) {\r\n    if (useNodeBuffer) {\r\n        return Buffer.from(buffer).toString('base64');\r\n    }\r\n    const buf = new Uint8Array(buffer);\r\n    let s = '';\r\n    for (let i = 0, l = buf.length; i < l; i++) {\r\n        s += String.fromCharCode(buf[i]);\r\n    }\r\n    return btoa(s);\r\n}\r\n/**\r\n * Decode a base64 string as an ArrayBuffer.\r\n *\r\n * @param str Base64 string.\r\n * @returns Decoded `ArrayBuffer`.\r\n */\r\nexport function base64StringToArrayBuffer(str) {\r\n    if (useNodeBuffer) {\r\n        const buf = Buffer.from(str, 'base64');\r\n        return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\r\n    }\r\n    const s = atob(str);\r\n    const buffer = new Uint8Array(s.length);\r\n    for (let i = 0; i < s.length; ++i) {\r\n        buffer.set([s.charCodeAt(i)], i);\r\n    }\r\n    return buffer.buffer;\r\n}\r\n/**\r\n * Concatenate a number of ArrayBuffers into one.\r\n *\r\n * @param buffers A number of array buffers to concatenate.\r\n * @returns Result of concatenating `buffers` in order.\r\n */\r\nexport function concatenateArrayBuffers(buffers) {\r\n    if (buffers.length === 1) {\r\n        return buffers[0];\r\n    }\r\n    let totalByteLength = 0;\r\n    buffers.forEach((buffer) => {\r\n        totalByteLength += buffer.byteLength;\r\n    });\r\n    const temp = new Uint8Array(totalByteLength);\r\n    let offset = 0;\r\n    buffers.forEach((buffer) => {\r\n        temp.set(new Uint8Array(buffer), offset);\r\n        offset += buffer.byteLength;\r\n    });\r\n    return temp.buffer;\r\n}\r\n/**\r\n * Get the basename of a path.\r\n *\r\n * Behaves in a way analogous to Linux's basename command.\r\n *\r\n * @param path\r\n */\r\nexport function basename(path) {\r\n    const SEPARATOR = '/';\r\n    path = path.trim();\r\n    while (path.endsWith(SEPARATOR)) {\r\n        path = path.slice(0, path.length - 1);\r\n    }\r\n    const items = path.split(SEPARATOR);\r\n    return items[items.length - 1];\r\n}\r\n/**\r\n * Populate ModelArtifactsInfo fields for a model with JSON topology.\r\n * @param modelArtifacts\r\n * @returns A ModelArtifactsInfo object.\r\n */\r\nexport function getModelArtifactsInfoForJSON(modelArtifacts) {\r\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\r\n        throw new Error('Expected JSON model topology, received ArrayBuffer.');\r\n    }\r\n    return {\r\n        dateSaved: new Date(),\r\n        modelTopologyType: 'JSON',\r\n        modelTopologyBytes: modelArtifacts.modelTopology == null ?\r\n            0 :\r\n            stringByteLength(JSON.stringify(modelArtifacts.modelTopology)),\r\n        weightSpecsBytes: modelArtifacts.weightSpecs == null ?\r\n            0 :\r\n            stringByteLength(JSON.stringify(modelArtifacts.weightSpecs)),\r\n        weightDataBytes: modelArtifacts.weightData == null ?\r\n            0 :\r\n            modelArtifacts.weightData.byteLength,\r\n    };\r\n}\r\n/**\r\n * Computes mantisa table for casting Float16 to Float32\r\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\r\n *\r\n * @returns Uint32Array, 2048 mantissa lookup values.\r\n */\r\nfunction computeFloat16MantisaTable() {\r\n    const convertMantissa = (i) => {\r\n        let m = i << 13;\r\n        let e = 0;\r\n        while ((m & 0x00800000) === 0) {\r\n            e -= 0x00800000;\r\n            m <<= 1;\r\n        }\r\n        m &= ~0x00800000;\r\n        e += 0x38800000;\r\n        return m | e;\r\n    };\r\n    const mantisaTable = new Uint32Array(2048);\r\n    mantisaTable[0] = 0;\r\n    for (let i = 1; i < 1024; i++) {\r\n        mantisaTable[i] = convertMantissa(i);\r\n    }\r\n    for (let i = 1024; i < 2048; i++) {\r\n        mantisaTable[i] = 0x38000000 + ((i - 1024) << 13);\r\n    }\r\n    return mantisaTable;\r\n}\r\n/**\r\n * Computes exponent table for casting Float16 to Float32\r\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\r\n *\r\n * @returns Uint32Array, 64 exponent lookup values.\r\n */\r\nfunction computeFloat16ExponentTable() {\r\n    const exponentTable = new Uint32Array(64);\r\n    exponentTable[0] = 0;\r\n    exponentTable[31] = 0x47800000;\r\n    exponentTable[32] = 0x80000000;\r\n    exponentTable[63] = 0xc7800000;\r\n    for (let i = 1; i < 31; i++) {\r\n        exponentTable[i] = i << 23;\r\n    }\r\n    for (let i = 33; i < 63; i++) {\r\n        exponentTable[i] = 0x80000000 + ((i - 32) << 23);\r\n    }\r\n    return exponentTable;\r\n}\r\n/**\r\n * Computes offset table for casting Float16 to Float32\r\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\r\n *\r\n * @returns Uint32Array, 6d offset values.\r\n */\r\nfunction computeFloat16OffsetTable() {\r\n    const offsetTable = new Uint32Array(64);\r\n    for (let i = 0; i < 64; i++) {\r\n        offsetTable[i] = 1024;\r\n    }\r\n    offsetTable[0] = offsetTable[32] = 0;\r\n    return offsetTable;\r\n}\r\n/**\r\n * Retrieve a Float16 decoder which will decode a ByteArray of Float16 values\r\n * to a Float32Array.\r\n *\r\n * @returns Function (buffer: Uint16Array) => Float32Array which decodes\r\n *          the Uint16Array of Float16 bytes to a Float32Array.\r\n */\r\nexport function getFloat16Decoder() {\r\n    // Algorithm is based off of\r\n    // http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\r\n    // Cache lookup tables\r\n    const mantisaTable = computeFloat16MantisaTable();\r\n    const exponentTable = computeFloat16ExponentTable();\r\n    const offsetTable = computeFloat16OffsetTable();\r\n    return (quantizedArray) => {\r\n        const buffer = new ArrayBuffer(4 * quantizedArray.length);\r\n        const bufferUint32View = new Uint32Array(buffer);\r\n        for (let index = 0; index < quantizedArray.length; index++) {\r\n            const float16Bits = quantizedArray[index];\r\n            const float32Bits = mantisaTable[offsetTable[float16Bits >> 10] + (float16Bits & 0x3ff)] +\r\n                exponentTable[float16Bits >> 10];\r\n            bufferUint32View[index] = float32Bits;\r\n        }\r\n        return new Float32Array(buffer);\r\n    };\r\n}\r\n//# sourceMappingURL=io_utils.js.map"]},"metadata":{},"sourceType":"module"}