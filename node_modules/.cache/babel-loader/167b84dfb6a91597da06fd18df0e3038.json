{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { Tensor } from './tensor';\nimport { upcastType } from './types';\nimport { assert } from './util';\nexport function makeTypesMatch(a, b) {\n  if (a.dtype === b.dtype) {\n    return [a, b];\n  }\n\n  var dtype = upcastType(a.dtype, b.dtype);\n  return [a.cast(dtype), b.cast(dtype)];\n}\nexport function assertTypesMatch(a, b) {\n  assert(a.dtype === b.dtype, function () {\n    return \"The dtypes of the first(\".concat(a.dtype, \") and\") + \" second(\".concat(b.dtype, \") input must match\");\n  });\n}\nexport function isTensorInList(tensor, tensorList) {\n  return tensorList.some(function (x) {\n    return x.id === tensor.id;\n  });\n}\n/**\r\n * Extracts any `Tensor`s found within the provided object.\r\n *\r\n * @param container an object that may be a `Tensor` or may directly contain\r\n *   `Tensor`s, such as a `Tensor[]` or `{key: Tensor, ...}`. In general it\r\n *   is safe to pass any object here, except that `Promise`s are not\r\n *   supported.\r\n * @returns An array of `Tensors` found within the passed object. If the\r\n *   argument is simply a `Tensor', a list containing that `Tensor` is\r\n *   returned. If the object is not a `Tensor` or does not\r\n *   contain `Tensors`, an empty list is returned.\r\n */\n\nexport function getTensorsInContainer(result) {\n  var list = [];\n  var seen = new Set();\n  walkTensorContainer(result, list, seen);\n  return list;\n}\n\nfunction walkTensorContainer(container, list, seen) {\n  if (container == null) {\n    return;\n  }\n\n  if (container instanceof Tensor) {\n    list.push(container);\n    return;\n  }\n\n  if (!isIterable(container)) {\n    return;\n  } // Iteration over keys works also for arrays.\n\n\n  var iterable = container;\n\n  for (var k in iterable) {\n    var val = iterable[k];\n\n    if (!seen.has(val)) {\n      seen.add(val);\n      walkTensorContainer(val, list, seen);\n    }\n  }\n} // tslint:disable-next-line:no-any\n\n\nfunction isIterable(obj) {\n  return Array.isArray(obj) || typeof obj === 'object';\n}","map":{"version":3,"sources":["../src/tensor_util.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,MAAR,QAAqB,UAArB;AAEA,SAAQ,UAAR,QAAyB,SAAzB;AACA,SAAQ,MAAR,QAAqB,QAArB;AAEA,OAAM,SAAU,cAAV,CAA2C,CAA3C,EAAiD,CAAjD,EAAqD;AACzD,MAAI,CAAC,CAAC,KAAF,KAAY,CAAC,CAAC,KAAlB,EAAyB;AACvB,WAAO,CAAC,CAAD,EAAI,CAAJ,CAAP;AACD;;AACD,MAAM,KAAK,GAAG,UAAU,CAAC,CAAC,CAAC,KAAH,EAAU,CAAC,CAAC,KAAZ,CAAxB;AACA,SAAO,CAAC,CAAC,CAAC,IAAF,CAAO,KAAP,CAAD,EAAgB,CAAC,CAAC,IAAF,CAAO,KAAP,CAAhB,CAAP;AACD;AAED,OAAM,SAAU,gBAAV,CAA2B,CAA3B,EAAsC,CAAtC,EAA+C;AACnD,EAAA,MAAM,CACF,CAAC,CAAC,KAAF,KAAY,CAAC,CAAC,KADZ,EAEF;AAAA,WAAM,kCAA2B,CAAC,CAAC,KAA7B,+BACS,CAAC,CAAC,KADX,uBAAN;AAAA,GAFE,CAAN;AAID;AAED,OAAM,SAAU,cAAV,CAAyB,MAAzB,EAAyC,UAAzC,EAA6D;AACjE,SAAO,UAAU,CAAC,IAAX,CAAgB,UAAA,CAAC;AAAA,WAAI,CAAC,CAAC,EAAF,KAAS,MAAM,CAAC,EAApB;AAAA,GAAjB,CAAP;AACD;AAED;;;;;;;;;;;AAWG;;AACH,OAAM,SAAU,qBAAV,CAAgC,MAAhC,EAAuD;AAC3D,MAAM,IAAI,GAAa,EAAvB;AACA,MAAM,IAAI,GAAG,IAAI,GAAJ,EAAb;AACA,EAAA,mBAAmB,CAAC,MAAD,EAAS,IAAT,EAAe,IAAf,CAAnB;AACA,SAAO,IAAP;AACD;;AAED,SAAS,mBAAT,CACI,SADJ,EACgC,IADhC,EACgD,IADhD,EACkE;AAChE,MAAI,SAAS,IAAI,IAAjB,EAAuB;AACrB;AACD;;AACD,MAAI,SAAS,YAAY,MAAzB,EAAiC;AAC/B,IAAA,IAAI,CAAC,IAAL,CAAU,SAAV;AACA;AACD;;AACD,MAAI,CAAC,UAAU,CAAC,SAAD,CAAf,EAA4B;AAC1B;AACD,GAV+D,CAWhE;;;AACA,MAAM,QAAQ,GAAG,SAAjB;;AACA,OAAK,IAAM,CAAX,IAAgB,QAAhB,EAA0B;AACxB,QAAM,GAAG,GAAG,QAAQ,CAAC,CAAD,CAApB;;AACA,QAAI,CAAC,IAAI,CAAC,GAAL,CAAS,GAAT,CAAL,EAAoB;AAClB,MAAA,IAAI,CAAC,GAAL,CAAS,GAAT;AACA,MAAA,mBAAmB,CAAC,GAAD,EAAM,IAAN,EAAY,IAAZ,CAAnB;AACD;AACF;AACF,C,CAED;;;AACA,SAAS,UAAT,CAAoB,GAApB,EAA4B;AAC1B,SAAO,KAAK,CAAC,OAAN,CAAc,GAAd,KAAsB,OAAO,GAAP,KAAe,QAA5C;AACD","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { Tensor } from './tensor';\r\nimport { upcastType } from './types';\r\nimport { assert } from './util';\r\nexport function makeTypesMatch(a, b) {\r\n    if (a.dtype === b.dtype) {\r\n        return [a, b];\r\n    }\r\n    const dtype = upcastType(a.dtype, b.dtype);\r\n    return [a.cast(dtype), b.cast(dtype)];\r\n}\r\nexport function assertTypesMatch(a, b) {\r\n    assert(a.dtype === b.dtype, () => `The dtypes of the first(${a.dtype}) and` +\r\n        ` second(${b.dtype}) input must match`);\r\n}\r\nexport function isTensorInList(tensor, tensorList) {\r\n    return tensorList.some(x => x.id === tensor.id);\r\n}\r\n/**\r\n * Extracts any `Tensor`s found within the provided object.\r\n *\r\n * @param container an object that may be a `Tensor` or may directly contain\r\n *   `Tensor`s, such as a `Tensor[]` or `{key: Tensor, ...}`. In general it\r\n *   is safe to pass any object here, except that `Promise`s are not\r\n *   supported.\r\n * @returns An array of `Tensors` found within the passed object. If the\r\n *   argument is simply a `Tensor', a list containing that `Tensor` is\r\n *   returned. If the object is not a `Tensor` or does not\r\n *   contain `Tensors`, an empty list is returned.\r\n */\r\nexport function getTensorsInContainer(result) {\r\n    const list = [];\r\n    const seen = new Set();\r\n    walkTensorContainer(result, list, seen);\r\n    return list;\r\n}\r\nfunction walkTensorContainer(container, list, seen) {\r\n    if (container == null) {\r\n        return;\r\n    }\r\n    if (container instanceof Tensor) {\r\n        list.push(container);\r\n        return;\r\n    }\r\n    if (!isIterable(container)) {\r\n        return;\r\n    }\r\n    // Iteration over keys works also for arrays.\r\n    const iterable = container;\r\n    for (const k in iterable) {\r\n        const val = iterable[k];\r\n        if (!seen.has(val)) {\r\n            seen.add(val);\r\n            walkTensorContainer(val, list, seen);\r\n        }\r\n    }\r\n}\r\n// tslint:disable-next-line:no-any\r\nfunction isIterable(obj) {\r\n    return Array.isArray(obj) || typeof obj === 'object';\r\n}\r\n//# sourceMappingURL=tensor_util.js.map"]},"metadata":{},"sourceType":"module"}