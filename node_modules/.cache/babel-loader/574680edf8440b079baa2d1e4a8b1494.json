{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2017 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { tensorToString } from './tensor_format';\nimport * as util from './util';\nimport { computeStrides, toNestedArray } from './util';\n/**\r\n * A mutable object, similar to `tf.Tensor`, that allows users to set values\r\n * at locations before converting to an immutable `tf.Tensor`.\r\n *\r\n * See `tf.buffer` for creating a tensor buffer.\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n */\n\nexport class TensorBuffer {\n  constructor(shape, dtype, values) {\n    this.dtype = dtype;\n    this.shape = shape.slice();\n    this.size = util.sizeFromShape(shape);\n\n    if (values != null) {\n      const n = values.length;\n      util.assert(n === this.size, () => `Length of values '${n}' does not match the size ` + `inferred by the shape '${this.size}'.`);\n    }\n\n    if (dtype === 'complex64') {\n      throw new Error(`complex64 dtype TensorBuffers are not supported. Please create ` + `a TensorBuffer for the real and imaginary parts separately and ` + `call tf.complex(real, imag).`);\n    }\n\n    this.values = values || util.getArrayFromDType(dtype, this.size);\n    this.strides = computeStrides(shape);\n  }\n  /**\r\n   * Sets a value in the buffer at a given location.\r\n   *\r\n   * @param value The value to set.\r\n   * @param locs  The location indices.\r\n   *\r\n   * @doc {heading: 'Tensors', subheading: 'Creation'}\r\n   */\n\n\n  set(value, ...locs) {\n    if (locs.length === 0) {\n      locs = [0];\n    }\n\n    util.assert(locs.length === this.rank, () => `The number of provided coordinates (${locs.length}) must ` + `match the rank (${this.rank})`);\n    const index = this.locToIndex(locs);\n    this.values[index] = value;\n  }\n  /**\r\n   * Returns the value in the buffer at the provided location.\r\n   *\r\n   * @param locs The location indices.\r\n   *\r\n   * @doc {heading: 'Tensors', subheading: 'Creation'}\r\n   */\n\n\n  get(...locs) {\n    if (locs.length === 0) {\n      locs = [0];\n    }\n\n    let i = 0;\n\n    for (const loc of locs) {\n      if (loc < 0 || loc >= this.shape[i]) {\n        const msg = `Requested out of range element at ${locs}. ` + `  Buffer shape=${this.shape}`;\n        throw new Error(msg);\n      }\n\n      i++;\n    }\n\n    let index = locs[locs.length - 1];\n\n    for (let i = 0; i < locs.length - 1; ++i) {\n      index += this.strides[i] * locs[i];\n    }\n\n    return this.values[index];\n  }\n\n  locToIndex(locs) {\n    if (this.rank === 0) {\n      return 0;\n    } else if (this.rank === 1) {\n      return locs[0];\n    }\n\n    let index = locs[locs.length - 1];\n\n    for (let i = 0; i < locs.length - 1; ++i) {\n      index += this.strides[i] * locs[i];\n    }\n\n    return index;\n  }\n\n  indexToLoc(index) {\n    if (this.rank === 0) {\n      return [];\n    } else if (this.rank === 1) {\n      return [index];\n    }\n\n    const locs = new Array(this.shape.length);\n\n    for (let i = 0; i < locs.length - 1; ++i) {\n      locs[i] = Math.floor(index / this.strides[i]);\n      index -= locs[i] * this.strides[i];\n    }\n\n    locs[locs.length - 1] = index;\n    return locs;\n  }\n\n  get rank() {\n    return this.shape.length;\n  }\n  /**\r\n   * Creates an immutable `tf.Tensor` object from the buffer.\r\n   *\r\n   * @doc {heading: 'Tensors', subheading: 'Creation'}\r\n   */\n\n\n  toTensor() {\n    return trackerFn().makeTensor(this.values, this.shape, this.dtype);\n  }\n\n} // For tracking tensor creation and disposal.\n\nlet trackerFn = null; // Used by chaining methods to call into ops.\n\nlet opHandler = null; // Used to warn about deprecated methods.\n\nlet deprecationWarningFn = null; // This here so that we can use this method on dev branches and keep the\n// functionality at master.\n// tslint:disable-next-line:no-unused-expression\n\n[deprecationWarningFn];\n/**\r\n * An external consumer can register itself as the tensor tracker. This way\r\n * the Tensor class can notify the tracker for every tensor created and\r\n * disposed.\r\n */\n\nexport function setTensorTracker(fn) {\n  trackerFn = fn;\n}\n/**\r\n * An external consumer can register itself as the op handler. This way the\r\n * Tensor class can have chaining methods that call into ops via the op\r\n * handler.\r\n */\n\nexport function setOpHandler(handler) {\n  opHandler = handler;\n}\n/**\r\n * Sets the deprecation warning function to be used by this file. This way the\r\n * Tensor class can be a leaf but still use the environment.\r\n */\n\nexport function setDeprecationWarningFn(fn) {\n  deprecationWarningFn = fn;\n}\n/**\r\n * A `tf.Tensor` object represents an immutable, multidimensional array of\r\n * numbers that has a shape and a data type.\r\n *\r\n * See `tf.tensor` for details on how to create a `tf.Tensor`.\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n */\n\nexport class Tensor {\n  constructor(shape, dtype, dataId, id) {\n    /** Whether this tensor has been globally kept. */\n    this.kept = false;\n    this.isDisposedInternal = false;\n    this.shape = shape.slice();\n    this.dtype = dtype || 'float32';\n    this.size = util.sizeFromShape(shape);\n    this.strides = computeStrides(shape);\n    this.dataId = dataId;\n    this.id = id;\n    this.rankType = this.rank < 5 ? this.rank.toString() : 'higher';\n  }\n\n  get rank() {\n    return this.shape.length;\n  }\n  /**\r\n   * Returns a promise of `tf.TensorBuffer` that holds the underlying data.\r\n   *\r\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n   */\n\n\n  async buffer() {\n    const vals = await this.data();\n    return opHandler.buffer(this.shape, this.dtype, vals);\n  }\n  /**\r\n   * Returns a `tf.TensorBuffer` that holds the underlying data.\r\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n   */\n\n\n  bufferSync() {\n    return opHandler.buffer(this.shape, this.dtype, this.dataSync());\n  }\n  /**\r\n   * Returns the tensor data as a nested array. The transfer of data is done\r\n   * asynchronously.\r\n   *\r\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n   */\n\n\n  async array() {\n    const vals = await this.data();\n    return toNestedArray(this.shape, vals);\n  }\n  /**\r\n   * Returns the tensor data as a nested array. The transfer of data is done\r\n   * synchronously.\r\n   *\r\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n   */\n\n\n  arraySync() {\n    return toNestedArray(this.shape, this.dataSync());\n  }\n  /**\r\n   * Asynchronously downloads the values from the `tf.Tensor`. Returns a\r\n   * promise of `TypedArray` that resolves when the computation has finished.\r\n   *\r\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n   */\n\n\n  async data() {\n    this.throwIfDisposed();\n    const data = trackerFn().read(this.dataId);\n\n    if (this.dtype === 'string') {\n      const bytes = await data;\n\n      try {\n        return bytes.map(b => util.decodeString(b));\n      } catch (_a) {\n        throw new Error('Failed to decode the string bytes into utf-8. ' + 'To get the original bytes, call tensor.bytes().');\n      }\n    }\n\n    return data;\n  }\n  /**\r\n   * Synchronously downloads the values from the `tf.Tensor`. This blocks the\r\n   * UI thread until the values are ready, which can cause performance issues.\r\n   *\r\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n   */\n\n\n  dataSync() {\n    this.throwIfDisposed();\n    const data = trackerFn().readSync(this.dataId);\n\n    if (this.dtype === 'string') {\n      try {\n        return data.map(b => util.decodeString(b));\n      } catch (_a) {\n        throw new Error('Failed to decode the string bytes into utf-8. ' + 'To get the original bytes, call tensor.bytes().');\n      }\n    }\n\n    return data;\n  }\n  /** Returns the underlying bytes of the tensor's data. */\n\n\n  async bytes() {\n    this.throwIfDisposed();\n    const data = await trackerFn().read(this.dataId);\n\n    if (this.dtype === 'string') {\n      return data;\n    } else {\n      return new Uint8Array(data.buffer);\n    }\n  }\n  /**\r\n   * Disposes `tf.Tensor` from memory.\r\n   *\r\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n   */\n\n\n  dispose() {\n    if (this.isDisposed) {\n      return;\n    }\n\n    trackerFn().disposeTensor(this);\n    this.isDisposedInternal = true;\n  }\n\n  get isDisposed() {\n    return this.isDisposedInternal;\n  }\n\n  throwIfDisposed() {\n    if (this.isDisposed) {\n      throw new Error(`Tensor is disposed.`);\n    }\n  }\n  /**\r\n   * Prints the `tf.Tensor`. See `tf.print` for details.\r\n   *\r\n   * @param verbose Whether to print verbose information about the tensor,\r\n   *    including dtype and size.\r\n   *\r\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n   */\n\n\n  print(verbose = false) {\n    return opHandler.print(this, verbose);\n  }\n  /**\r\n   * Returns a copy of the tensor. See `tf.clone` for details.\r\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n   */\n\n\n  clone() {\n    this.throwIfDisposed();\n    return opHandler.clone(this);\n  }\n  /**\r\n   * Returns a human-readable description of the tensor. Useful for logging.\r\n   *\r\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n   */\n\n\n  toString(verbose = false) {\n    const vals = this.dataSync();\n    return tensorToString(vals, this.shape, this.dtype, verbose);\n  }\n\n  cast(dtype) {\n    this.throwIfDisposed();\n    return opHandler.cast(this, dtype);\n  }\n\n  variable(trainable = true, name, dtype) {\n    this.throwIfDisposed();\n    return trackerFn().makeVariable(this, trainable, name, dtype);\n  }\n\n}\nObject.defineProperty(Tensor, Symbol.hasInstance, {\n  value: instance => {\n    // Implementation note: we should use properties of the object that will be\n    // defined before the constructor body has finished executing (methods).\n    // This is because when this code is transpiled by babel, babel will call\n    // classCallCheck before the constructor body is run.\n    // See https://github.com/tensorflow/tfjs/issues/3384 for backstory.\n    return !!instance && instance.data != null && instance.dataSync != null && instance.throwIfDisposed != null;\n  }\n});\n/**\r\n * A mutable `tf.Tensor`, useful for persisting state, e.g. for training.\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n */\n\nexport class Variable extends Tensor {\n  constructor(initialValue, trainable, name, tensorId) {\n    super(initialValue.shape, initialValue.dtype, initialValue.dataId, tensorId);\n    this.trainable = trainable;\n    this.name = name;\n  }\n  /**\r\n   * Assign a new `tf.Tensor` to this variable. The new `tf.Tensor` must have\r\n   * the same shape and dtype as the old `tf.Tensor`.\r\n   *\r\n   * @param newValue New tensor to be assigned to this variable.\r\n   *\r\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n   */\n\n\n  assign(newValue) {\n    if (newValue.dtype !== this.dtype) {\n      throw new Error(`dtype of the new value (${newValue.dtype}) and ` + `previous value (${this.dtype}) must match`);\n    }\n\n    if (!util.arraysEqual(newValue.shape, this.shape)) {\n      throw new Error(`shape of the new value (${newValue.shape}) and ` + `previous value (${this.shape}) must match`);\n    }\n\n    trackerFn().disposeTensor(this);\n    this.dataId = newValue.dataId;\n    trackerFn().incRef(this, null\n    /* backend */\n    );\n  }\n\n  dispose() {\n    trackerFn().disposeVariable(this);\n    this.isDisposedInternal = true;\n  }\n\n}\nObject.defineProperty(Variable, Symbol.hasInstance, {\n  value: instance => {\n    return instance instanceof Tensor && instance.assign != null && instance.assign instanceof Function;\n  }\n});","map":{"version":3,"sources":["../src/tensor.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2017 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { tensorToString } from './tensor_format';\r\nimport * as util from './util';\r\nimport { computeStrides, toNestedArray } from './util';\r\n/**\r\n * A mutable object, similar to `tf.Tensor`, that allows users to set values\r\n * at locations before converting to an immutable `tf.Tensor`.\r\n *\r\n * See `tf.buffer` for creating a tensor buffer.\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n */\r\nexport class TensorBuffer {\r\n    constructor(shape, dtype, values) {\r\n        this.dtype = dtype;\r\n        this.shape = shape.slice();\r\n        this.size = util.sizeFromShape(shape);\r\n        if (values != null) {\r\n            const n = values.length;\r\n            util.assert(n === this.size, () => `Length of values '${n}' does not match the size ` +\r\n                `inferred by the shape '${this.size}'.`);\r\n        }\r\n        if (dtype === 'complex64') {\r\n            throw new Error(`complex64 dtype TensorBuffers are not supported. Please create ` +\r\n                `a TensorBuffer for the real and imaginary parts separately and ` +\r\n                `call tf.complex(real, imag).`);\r\n        }\r\n        this.values = values || util.getArrayFromDType(dtype, this.size);\r\n        this.strides = computeStrides(shape);\r\n    }\r\n    /**\r\n     * Sets a value in the buffer at a given location.\r\n     *\r\n     * @param value The value to set.\r\n     * @param locs  The location indices.\r\n     *\r\n     * @doc {heading: 'Tensors', subheading: 'Creation'}\r\n     */\r\n    set(value, ...locs) {\r\n        if (locs.length === 0) {\r\n            locs = [0];\r\n        }\r\n        util.assert(locs.length === this.rank, () => `The number of provided coordinates (${locs.length}) must ` +\r\n            `match the rank (${this.rank})`);\r\n        const index = this.locToIndex(locs);\r\n        this.values[index] = value;\r\n    }\r\n    /**\r\n     * Returns the value in the buffer at the provided location.\r\n     *\r\n     * @param locs The location indices.\r\n     *\r\n     * @doc {heading: 'Tensors', subheading: 'Creation'}\r\n     */\r\n    get(...locs) {\r\n        if (locs.length === 0) {\r\n            locs = [0];\r\n        }\r\n        let i = 0;\r\n        for (const loc of locs) {\r\n            if (loc < 0 || loc >= this.shape[i]) {\r\n                const msg = `Requested out of range element at ${locs}. ` +\r\n                    `  Buffer shape=${this.shape}`;\r\n                throw new Error(msg);\r\n            }\r\n            i++;\r\n        }\r\n        let index = locs[locs.length - 1];\r\n        for (let i = 0; i < locs.length - 1; ++i) {\r\n            index += this.strides[i] * locs[i];\r\n        }\r\n        return this.values[index];\r\n    }\r\n    locToIndex(locs) {\r\n        if (this.rank === 0) {\r\n            return 0;\r\n        }\r\n        else if (this.rank === 1) {\r\n            return locs[0];\r\n        }\r\n        let index = locs[locs.length - 1];\r\n        for (let i = 0; i < locs.length - 1; ++i) {\r\n            index += this.strides[i] * locs[i];\r\n        }\r\n        return index;\r\n    }\r\n    indexToLoc(index) {\r\n        if (this.rank === 0) {\r\n            return [];\r\n        }\r\n        else if (this.rank === 1) {\r\n            return [index];\r\n        }\r\n        const locs = new Array(this.shape.length);\r\n        for (let i = 0; i < locs.length - 1; ++i) {\r\n            locs[i] = Math.floor(index / this.strides[i]);\r\n            index -= locs[i] * this.strides[i];\r\n        }\r\n        locs[locs.length - 1] = index;\r\n        return locs;\r\n    }\r\n    get rank() {\r\n        return this.shape.length;\r\n    }\r\n    /**\r\n     * Creates an immutable `tf.Tensor` object from the buffer.\r\n     *\r\n     * @doc {heading: 'Tensors', subheading: 'Creation'}\r\n     */\r\n    toTensor() {\r\n        return trackerFn().makeTensor(this.values, this.shape, this.dtype);\r\n    }\r\n}\r\n// For tracking tensor creation and disposal.\r\nlet trackerFn = null;\r\n// Used by chaining methods to call into ops.\r\nlet opHandler = null;\r\n// Used to warn about deprecated methods.\r\nlet deprecationWarningFn = null;\r\n// This here so that we can use this method on dev branches and keep the\r\n// functionality at master.\r\n// tslint:disable-next-line:no-unused-expression\r\n[deprecationWarningFn];\r\n/**\r\n * An external consumer can register itself as the tensor tracker. This way\r\n * the Tensor class can notify the tracker for every tensor created and\r\n * disposed.\r\n */\r\nexport function setTensorTracker(fn) {\r\n    trackerFn = fn;\r\n}\r\n/**\r\n * An external consumer can register itself as the op handler. This way the\r\n * Tensor class can have chaining methods that call into ops via the op\r\n * handler.\r\n */\r\nexport function setOpHandler(handler) {\r\n    opHandler = handler;\r\n}\r\n/**\r\n * Sets the deprecation warning function to be used by this file. This way the\r\n * Tensor class can be a leaf but still use the environment.\r\n */\r\nexport function setDeprecationWarningFn(fn) {\r\n    deprecationWarningFn = fn;\r\n}\r\n/**\r\n * A `tf.Tensor` object represents an immutable, multidimensional array of\r\n * numbers that has a shape and a data type.\r\n *\r\n * See `tf.tensor` for details on how to create a `tf.Tensor`.\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n */\r\nexport class Tensor {\r\n    constructor(shape, dtype, dataId, id) {\r\n        /** Whether this tensor has been globally kept. */\r\n        this.kept = false;\r\n        this.isDisposedInternal = false;\r\n        this.shape = shape.slice();\r\n        this.dtype = dtype || 'float32';\r\n        this.size = util.sizeFromShape(shape);\r\n        this.strides = computeStrides(shape);\r\n        this.dataId = dataId;\r\n        this.id = id;\r\n        this.rankType = (this.rank < 5 ? this.rank.toString() : 'higher');\r\n    }\r\n    get rank() {\r\n        return this.shape.length;\r\n    }\r\n    /**\r\n     * Returns a promise of `tf.TensorBuffer` that holds the underlying data.\r\n     *\r\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n     */\r\n    async buffer() {\r\n        const vals = await this.data();\r\n        return opHandler.buffer(this.shape, this.dtype, vals);\r\n    }\r\n    /**\r\n     * Returns a `tf.TensorBuffer` that holds the underlying data.\r\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n     */\r\n    bufferSync() {\r\n        return opHandler.buffer(this.shape, this.dtype, this.dataSync());\r\n    }\r\n    /**\r\n     * Returns the tensor data as a nested array. The transfer of data is done\r\n     * asynchronously.\r\n     *\r\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n     */\r\n    async array() {\r\n        const vals = await this.data();\r\n        return toNestedArray(this.shape, vals);\r\n    }\r\n    /**\r\n     * Returns the tensor data as a nested array. The transfer of data is done\r\n     * synchronously.\r\n     *\r\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n     */\r\n    arraySync() {\r\n        return toNestedArray(this.shape, this.dataSync());\r\n    }\r\n    /**\r\n     * Asynchronously downloads the values from the `tf.Tensor`. Returns a\r\n     * promise of `TypedArray` that resolves when the computation has finished.\r\n     *\r\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n     */\r\n    async data() {\r\n        this.throwIfDisposed();\r\n        const data = trackerFn().read(this.dataId);\r\n        if (this.dtype === 'string') {\r\n            const bytes = await data;\r\n            try {\r\n                return bytes.map(b => util.decodeString(b));\r\n            }\r\n            catch (_a) {\r\n                throw new Error('Failed to decode the string bytes into utf-8. ' +\r\n                    'To get the original bytes, call tensor.bytes().');\r\n            }\r\n        }\r\n        return data;\r\n    }\r\n    /**\r\n     * Synchronously downloads the values from the `tf.Tensor`. This blocks the\r\n     * UI thread until the values are ready, which can cause performance issues.\r\n     *\r\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n     */\r\n    dataSync() {\r\n        this.throwIfDisposed();\r\n        const data = trackerFn().readSync(this.dataId);\r\n        if (this.dtype === 'string') {\r\n            try {\r\n                return data.map(b => util.decodeString(b));\r\n            }\r\n            catch (_a) {\r\n                throw new Error('Failed to decode the string bytes into utf-8. ' +\r\n                    'To get the original bytes, call tensor.bytes().');\r\n            }\r\n        }\r\n        return data;\r\n    }\r\n    /** Returns the underlying bytes of the tensor's data. */\r\n    async bytes() {\r\n        this.throwIfDisposed();\r\n        const data = await trackerFn().read(this.dataId);\r\n        if (this.dtype === 'string') {\r\n            return data;\r\n        }\r\n        else {\r\n            return new Uint8Array(data.buffer);\r\n        }\r\n    }\r\n    /**\r\n     * Disposes `tf.Tensor` from memory.\r\n     *\r\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n     */\r\n    dispose() {\r\n        if (this.isDisposed) {\r\n            return;\r\n        }\r\n        trackerFn().disposeTensor(this);\r\n        this.isDisposedInternal = true;\r\n    }\r\n    get isDisposed() {\r\n        return this.isDisposedInternal;\r\n    }\r\n    throwIfDisposed() {\r\n        if (this.isDisposed) {\r\n            throw new Error(`Tensor is disposed.`);\r\n        }\r\n    }\r\n    /**\r\n     * Prints the `tf.Tensor`. See `tf.print` for details.\r\n     *\r\n     * @param verbose Whether to print verbose information about the tensor,\r\n     *    including dtype and size.\r\n     *\r\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n     */\r\n    print(verbose = false) {\r\n        return opHandler.print(this, verbose);\r\n    }\r\n    /**\r\n     * Returns a copy of the tensor. See `tf.clone` for details.\r\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n     */\r\n    clone() {\r\n        this.throwIfDisposed();\r\n        return opHandler.clone(this);\r\n    }\r\n    /**\r\n     * Returns a human-readable description of the tensor. Useful for logging.\r\n     *\r\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n     */\r\n    toString(verbose = false) {\r\n        const vals = this.dataSync();\r\n        return tensorToString(vals, this.shape, this.dtype, verbose);\r\n    }\r\n    cast(dtype) {\r\n        this.throwIfDisposed();\r\n        return opHandler.cast(this, dtype);\r\n    }\r\n    variable(trainable = true, name, dtype) {\r\n        this.throwIfDisposed();\r\n        return trackerFn().makeVariable(this, trainable, name, dtype);\r\n    }\r\n}\r\nObject.defineProperty(Tensor, Symbol.hasInstance, {\r\n    value: (instance) => {\r\n        // Implementation note: we should use properties of the object that will be\r\n        // defined before the constructor body has finished executing (methods).\r\n        // This is because when this code is transpiled by babel, babel will call\r\n        // classCallCheck before the constructor body is run.\r\n        // See https://github.com/tensorflow/tfjs/issues/3384 for backstory.\r\n        return !!instance && instance.data != null && instance.dataSync != null &&\r\n            instance.throwIfDisposed != null;\r\n    }\r\n});\r\n/**\r\n * A mutable `tf.Tensor`, useful for persisting state, e.g. for training.\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n */\r\nexport class Variable extends Tensor {\r\n    constructor(initialValue, trainable, name, tensorId) {\r\n        super(initialValue.shape, initialValue.dtype, initialValue.dataId, tensorId);\r\n        this.trainable = trainable;\r\n        this.name = name;\r\n    }\r\n    /**\r\n     * Assign a new `tf.Tensor` to this variable. The new `tf.Tensor` must have\r\n     * the same shape and dtype as the old `tf.Tensor`.\r\n     *\r\n     * @param newValue New tensor to be assigned to this variable.\r\n     *\r\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n     */\r\n    assign(newValue) {\r\n        if (newValue.dtype !== this.dtype) {\r\n            throw new Error(`dtype of the new value (${newValue.dtype}) and ` +\r\n                `previous value (${this.dtype}) must match`);\r\n        }\r\n        if (!util.arraysEqual(newValue.shape, this.shape)) {\r\n            throw new Error(`shape of the new value (${newValue.shape}) and ` +\r\n                `previous value (${this.shape}) must match`);\r\n        }\r\n        trackerFn().disposeTensor(this);\r\n        this.dataId = newValue.dataId;\r\n        trackerFn().incRef(this, null /* backend */);\r\n    }\r\n    dispose() {\r\n        trackerFn().disposeVariable(this);\r\n        this.isDisposedInternal = true;\r\n    }\r\n}\r\nObject.defineProperty(Variable, Symbol.hasInstance, {\r\n    value: (instance) => {\r\n        return instance instanceof Tensor && instance.assign != null &&\r\n            instance.assign instanceof Function;\r\n    }\r\n});\r\n//# sourceMappingURL=tensor.js.map"]},"metadata":{},"sourceType":"module"}