{"ast":null,"code":"import _classCallCheck from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nexport var LRNGradProgram = function LRNGradProgram(inputShape, depthRadius, bias, alpha, beta) {\n  _classCallCheck(this, LRNGradProgram);\n\n  this.variableNames = ['inputImage', 'outputImage', 'dy'];\n  this.outputShape = [];\n  this.outputShape = inputShape;\n  this.depth = inputShape[3];\n  this.depthRadius = depthRadius;\n  this.bias = bias;\n  this.alpha = alpha;\n  this.beta = beta;\n  this.userCode = \"\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int r = coords[1];\\n        int c = coords[2];\\n\\n        float result = 0.0;\\n        for (int d = 0; d < \".concat(this.depth, \"; ++d) {\\n          int depthBegin = int(max(0.0, float(d - \").concat(depthRadius, \")));\\n          int depthEnd = int(min(float(\").concat(this.depth, \"),\\n              float(d + \").concat(depthRadius, \" + 1)));\\n\\n          const int MIN_DEPTH_BEGIN = 0;\\n          const int MAX_DEPTH_END = \").concat(this.depth, \";\\n\\n          float norm = 0.0;\\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\\n            if (k < depthBegin){\\n              continue;\\n            }\\n            else if (k >= depthBegin && k < depthEnd) {\\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\\n            }\\n            else {\\n              break;\\n            }\\n          }\\n\\n          norm = float(\").concat(alpha, \") * norm + float(\").concat(bias, \");\\n\\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\\n            if (k < depthBegin){\\n              continue;\\n            }\\n            else if (k >= depthBegin && k < depthEnd){\\n              float dyi = -2.0 * float(\").concat(alpha, \")\\n                * float(\").concat(beta, \")\\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\\n                / norm;\\n              if (k == d) {\\n                dyi += pow(norm, -1.0 * \").concat(beta, \");\\n              }\\n              if (k == coords[3]) {\\n                dyi *= getDy(b, r, c, d);\\n                result += dyi;\\n              }\\n            }\\n            else {\\n              break;\\n            }\\n          }\\n      }\\n      setOutput(result);\\n      }\\n    \");\n};","map":{"version":3,"sources":["../src/lrn_grad_gpu.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AAIH,WAAa,cAAb,GAUE,wBACI,UADJ,EAC0B,WAD1B,EAC+C,IAD/C,EAC6D,KAD7D,EAEI,IAFJ,EAEgB;AAAA;;AAXhB,OAAA,aAAA,GAAgB,CAAC,YAAD,EAAe,aAAf,EAA8B,IAA9B,CAAhB;AACA,OAAA,WAAA,GAAwB,EAAxB;AAWE,OAAK,WAAL,GAAmB,UAAnB;AACA,OAAK,KAAL,GAAa,UAAU,CAAC,CAAD,CAAvB;AACA,OAAK,WAAL,GAAmB,WAAnB;AACA,OAAK,IAAL,GAAY,IAAZ;AACA,OAAK,KAAL,GAAa,KAAb;AACA,OAAK,IAAL,GAAY,IAAZ;AACA,OAAK,QAAL,8NAQ0B,KAAK,KAR/B,yEASgD,WAThD,0DAUqC,KAAK,KAV1C,yCAWsB,WAXtB,uGAckC,KAAK,KAdvC,ibA6BqB,KA7BrB,8BA6B8C,IA7B9C,6PAoCqC,KApCrC,wCAqCsB,IArCtB,wLAyCsC,IAzCtC;AAwDD,CA3EH","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nexport class LRNGradProgram {\r\n    constructor(inputShape, depthRadius, bias, alpha, beta) {\r\n        this.variableNames = ['inputImage', 'outputImage', 'dy'];\r\n        this.outputShape = [];\r\n        this.outputShape = inputShape;\r\n        this.depth = inputShape[3];\r\n        this.depthRadius = depthRadius;\r\n        this.bias = bias;\r\n        this.alpha = alpha;\r\n        this.beta = beta;\r\n        this.userCode = `\r\n      void main() {\r\n        ivec4 coords = getOutputCoords();\r\n        int b = coords[0];\r\n        int r = coords[1];\r\n        int c = coords[2];\r\n\r\n        float result = 0.0;\r\n        for (int d = 0; d < ${this.depth}; ++d) {\r\n          int depthBegin = int(max(0.0, float(d - ${depthRadius})));\r\n          int depthEnd = int(min(float(${this.depth}),\r\n              float(d + ${depthRadius} + 1)));\r\n\r\n          const int MIN_DEPTH_BEGIN = 0;\r\n          const int MAX_DEPTH_END = ${this.depth};\r\n\r\n          float norm = 0.0;\r\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\r\n            if (k < depthBegin){\r\n              continue;\r\n            }\r\n            else if (k >= depthBegin && k < depthEnd) {\r\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\r\n            }\r\n            else {\r\n              break;\r\n            }\r\n          }\r\n\r\n          norm = float(${alpha}) * norm + float(${bias});\r\n\r\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\r\n            if (k < depthBegin){\r\n              continue;\r\n            }\r\n            else if (k >= depthBegin && k < depthEnd){\r\n              float dyi = -2.0 * float(${alpha})\r\n                * float(${beta})\r\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\r\n                / norm;\r\n              if (k == d) {\r\n                dyi += pow(norm, -1.0 * ${beta});\r\n              }\r\n              if (k == coords[3]) {\r\n                dyi *= getDy(b, r, c, d);\r\n                result += dyi;\r\n              }\r\n            }\r\n            else {\r\n              break;\r\n            }\r\n          }\r\n      }\r\n      setOutput(result);\r\n      }\r\n    `;\r\n    }\r\n}\r\n//# sourceMappingURL=lrn_grad_gpu.js.map"]},"metadata":{},"sourceType":"module"}