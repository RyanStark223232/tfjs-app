{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { Complex } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\r\n * Converts two real numbers to a complex number.\r\n *\r\n * Given a tensor `real` representing the real part of a complex number, and a\r\n * tensor `imag` representing the imaginary part of a complex number, this\r\n * operation returns complex numbers elementwise of the form [r0, i0, r1, i1],\r\n * where r represents the real part and i represents the imag part.\r\n *\r\n * The input tensors real and imag must have the same shape.\r\n *\r\n * ```js\r\n * const real = tf.tensor1d([2.25, 3.25]);\r\n * const imag = tf.tensor1d([4.75, 5.75]);\r\n * const complex = tf.complex(real, imag);\r\n *\r\n * complex.print();\r\n * ```\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Creation'}\r\n */\n\nfunction complex_(real, imag) {\n  var $real = convertToTensor(real, 'real', 'complex');\n  var $imag = convertToTensor(imag, 'imag', 'complex');\n  util.assertShapesMatch($real.shape, $imag.shape, \"real and imag shapes, \".concat($real.shape, \" and \").concat($imag.shape, \", \") + \"must match in call to tf.complex().\");\n\n  var forward = function forward(backend) {\n    return backend.complex($real, $imag);\n  };\n\n  var inputs = {\n    real: $real,\n    imag: $imag\n  };\n  return ENGINE.runKernelFunc(forward, inputs, null\n  /* gradient */\n  , Complex);\n}\n\nexport var complex = op({\n  complex_: complex_\n});","map":{"version":3,"sources":["../../src/ops/complex.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AACH,SAAQ,MAAR,QAAkC,WAAlC;AACA,SAAQ,OAAR,QAAqC,iBAArC;AAGA,SAAQ,eAAR,QAA8B,oBAA9B;AAEA,OAAO,KAAK,IAAZ,MAAsB,SAAtB;AAEA,SAAQ,EAAR,QAAiB,aAAjB;AAEA;;;;;;;;;;;;;;;;;;;AAmBG;;AACH,SAAS,QAAT,CAAoC,IAApC,EAAwD,IAAxD,EAA0E;AACxE,MAAM,KAAK,GAAG,eAAe,CAAC,IAAD,EAAO,MAAP,EAAe,SAAf,CAA7B;AACA,MAAM,KAAK,GAAG,eAAe,CAAC,IAAD,EAAO,MAAP,EAAe,SAAf,CAA7B;AACA,EAAA,IAAI,CAAC,iBAAL,CACI,KAAK,CAAC,KADV,EACiB,KAAK,CAAC,KADvB,EAEI,gCAAyB,KAAK,CAAC,KAA/B,kBAA4C,KAAK,CAAC,KAAlD,+CAFJ;;AAKA,MAAM,OAAO,GAAwB,SAA/B,OAA+B,CAAC,OAAD,EAAY;AAC/C,WAAO,OAAO,CAAC,OAAR,CAAgB,KAAhB,EAAuB,KAAvB,CAAP;AACD,GAFD;;AAGA,MAAM,MAAM,GAAkB;AAAC,IAAA,IAAI,EAAE,KAAP;AAAc,IAAA,IAAI,EAAE;AAApB,GAA9B;AACA,SAAO,MAAM,CAAC,aAAP,CACI,OADJ,EACa,MADb,EAC6C;AAAK;AADlD,IAEI,OAFJ,CAAP;AAGD;;AAED,OAAO,IAAM,OAAO,GAAG,EAAE,CAAC;AAAC,EAAA,QAAQ,EAAR;AAAD,CAAD,CAAlB","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { ENGINE } from '../engine';\r\nimport { Complex } from '../kernel_names';\r\nimport { convertToTensor } from '../tensor_util_env';\r\nimport * as util from '../util';\r\nimport { op } from './operation';\r\n/**\r\n * Converts two real numbers to a complex number.\r\n *\r\n * Given a tensor `real` representing the real part of a complex number, and a\r\n * tensor `imag` representing the imaginary part of a complex number, this\r\n * operation returns complex numbers elementwise of the form [r0, i0, r1, i1],\r\n * where r represents the real part and i represents the imag part.\r\n *\r\n * The input tensors real and imag must have the same shape.\r\n *\r\n * ```js\r\n * const real = tf.tensor1d([2.25, 3.25]);\r\n * const imag = tf.tensor1d([4.75, 5.75]);\r\n * const complex = tf.complex(real, imag);\r\n *\r\n * complex.print();\r\n * ```\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Creation'}\r\n */\r\nfunction complex_(real, imag) {\r\n    const $real = convertToTensor(real, 'real', 'complex');\r\n    const $imag = convertToTensor(imag, 'imag', 'complex');\r\n    util.assertShapesMatch($real.shape, $imag.shape, `real and imag shapes, ${$real.shape} and ${$imag.shape}, ` +\r\n        `must match in call to tf.complex().`);\r\n    const forward = (backend) => {\r\n        return backend.complex($real, $imag);\r\n    };\r\n    const inputs = { real: $real, imag: $imag };\r\n    return ENGINE.runKernelFunc(forward, inputs, null /* gradient */, Complex);\r\n}\r\nexport const complex = op({ complex_ });\r\n//# sourceMappingURL=complex.js.map"]},"metadata":{},"sourceType":"module"}