{"ast":null,"code":"import { deepForEach } from '../../utils/collection';\nimport { factory } from '../../utils/factory';\nimport { improveErrorMessage } from './utils/improveErrorMessage';\nvar name = 'prod';\nvar dependencies = ['typed', 'config', 'multiplyScalar', 'numeric'];\nexport var createProd = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      multiplyScalar = _ref.multiplyScalar,\n      numeric = _ref.numeric;\n  /**\r\n   * Compute the product of a matrix or a list with values.\r\n   * In case of a (multi dimensional) array or matrix, the sum of all\r\n   * elements will be calculated.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.prod(a, b, c, ...)\r\n   *     math.prod(A)\r\n   *\r\n   * Examples:\r\n   *\r\n   *     math.multiply(2, 3)           // returns 6\r\n   *     math.prod(2, 3)               // returns 6\r\n   *     math.prod(2, 3, 4)            // returns 24\r\n   *     math.prod([2, 3, 4])          // returns 24\r\n   *     math.prod([[2, 5], [4, 3]])   // returns 120\r\n   *\r\n   * See also:\r\n   *\r\n   *    mean, median, min, max, sum, std, variance\r\n   *\r\n   * @param {... *} args  A single matrix or or multiple scalar values\r\n   * @return {*} The product of all values\r\n   */\n\n  return typed(name, {\n    // prod([a, b, c, d, ...])\n    'Array | Matrix': _prod,\n    // prod([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {\n      // TODO: implement prod(A, dim)\n      throw new Error('prod(A, dim) is not yet supported'); // return reduce(arguments[0], arguments[1], math.prod)\n    },\n    // prod(a, b, c, d, ...)\n    '...': function _(args) {\n      return _prod(args);\n    }\n  });\n  /**\r\n   * Recursively calculate the product of an n-dimensional array\r\n   * @param {Array} array\r\n   * @return {number} prod\r\n   * @private\r\n   */\n\n  function _prod(array) {\n    var prod;\n    deepForEach(array, function (value) {\n      try {\n        prod = prod === undefined ? value : multiplyScalar(prod, value);\n      } catch (err) {\n        throw improveErrorMessage(err, 'prod', value);\n      }\n    }); // make sure returning numeric value: parse a string into a numeric value\n\n    if (typeof prod === 'string') {\n      prod = numeric(prod, config.number);\n    }\n\n    if (prod === undefined) {\n      throw new Error('Cannot calculate prod of an empty array');\n    }\n\n    return prod;\n  }\n});","map":{"version":3,"sources":["C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/mathjs/es/function/statistics/prod.js"],"names":["deepForEach","factory","improveErrorMessage","name","dependencies","createProd","_ref","typed","config","multiplyScalar","numeric","_prod","ArrayMatrixNumberBigNumber","array","dim","Error","_","args","prod","value","undefined","err","number"],"mappings":"AAAA,SAASA,WAAT,QAA4B,wBAA5B;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,SAASC,mBAAT,QAAoC,6BAApC;AACA,IAAIC,IAAI,GAAG,MAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,gBAApB,EAAsC,SAAtC,CAAnB;AACA,OAAO,IAAIC,UAAU,GAAG,eAAeJ,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AACjF,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAAA,MACIC,MAAM,GAAGF,IAAI,CAACE,MADlB;AAAA,MAEIC,cAAc,GAAGH,IAAI,CAACG,cAF1B;AAAA,MAGIC,OAAO,GAAGJ,IAAI,CAACI,OAHnB;AAKA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOH,KAAK,CAACJ,IAAD,EAAO;AACjB;AACA,sBAAkBQ,KAFD;AAGjB;AACA,0CAAsC,SAASC,0BAAT,CAAoCC,KAApC,EAA2CC,GAA3C,EAAgD;AACpF;AACA,YAAM,IAAIC,KAAJ,CAAU,mCAAV,CAAN,CAFoF,CAE9B;AACvD,KAPgB;AAQjB;AACA,WAAO,SAASC,CAAT,CAAWC,IAAX,EAAiB;AACtB,aAAON,KAAK,CAACM,IAAD,CAAZ;AACD;AAXgB,GAAP,CAAZ;AAaA;AACF;AACA;AACA;AACA;AACA;;AAEE,WAASN,KAAT,CAAeE,KAAf,EAAsB;AACpB,QAAIK,IAAJ;AACAlB,IAAAA,WAAW,CAACa,KAAD,EAAQ,UAAUM,KAAV,EAAiB;AAClC,UAAI;AACFD,QAAAA,IAAI,GAAGA,IAAI,KAAKE,SAAT,GAAqBD,KAArB,GAA6BV,cAAc,CAACS,IAAD,EAAOC,KAAP,CAAlD;AACD,OAFD,CAEE,OAAOE,GAAP,EAAY;AACZ,cAAMnB,mBAAmB,CAACmB,GAAD,EAAM,MAAN,EAAcF,KAAd,CAAzB;AACD;AACF,KANU,CAAX,CAFoB,CAQhB;;AAEJ,QAAI,OAAOD,IAAP,KAAgB,QAApB,EAA8B;AAC5BA,MAAAA,IAAI,GAAGR,OAAO,CAACQ,IAAD,EAAOV,MAAM,CAACc,MAAd,CAAd;AACD;;AAED,QAAIJ,IAAI,KAAKE,SAAb,EAAwB;AACtB,YAAM,IAAIL,KAAJ,CAAU,yCAAV,CAAN;AACD;;AAED,WAAOG,IAAP;AACD;AACF,CAvE6C,CAAvC","sourcesContent":["import { deepForEach } from '../../utils/collection';\r\nimport { factory } from '../../utils/factory';\r\nimport { improveErrorMessage } from './utils/improveErrorMessage';\r\nvar name = 'prod';\r\nvar dependencies = ['typed', 'config', 'multiplyScalar', 'numeric'];\r\nexport var createProd = /* #__PURE__ */factory(name, dependencies, function (_ref) {\r\n  var typed = _ref.typed,\r\n      config = _ref.config,\r\n      multiplyScalar = _ref.multiplyScalar,\r\n      numeric = _ref.numeric;\r\n\r\n  /**\r\n   * Compute the product of a matrix or a list with values.\r\n   * In case of a (multi dimensional) array or matrix, the sum of all\r\n   * elements will be calculated.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.prod(a, b, c, ...)\r\n   *     math.prod(A)\r\n   *\r\n   * Examples:\r\n   *\r\n   *     math.multiply(2, 3)           // returns 6\r\n   *     math.prod(2, 3)               // returns 6\r\n   *     math.prod(2, 3, 4)            // returns 24\r\n   *     math.prod([2, 3, 4])          // returns 24\r\n   *     math.prod([[2, 5], [4, 3]])   // returns 120\r\n   *\r\n   * See also:\r\n   *\r\n   *    mean, median, min, max, sum, std, variance\r\n   *\r\n   * @param {... *} args  A single matrix or or multiple scalar values\r\n   * @return {*} The product of all values\r\n   */\r\n  return typed(name, {\r\n    // prod([a, b, c, d, ...])\r\n    'Array | Matrix': _prod,\r\n    // prod([a, b, c, d, ...], dim)\r\n    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {\r\n      // TODO: implement prod(A, dim)\r\n      throw new Error('prod(A, dim) is not yet supported'); // return reduce(arguments[0], arguments[1], math.prod)\r\n    },\r\n    // prod(a, b, c, d, ...)\r\n    '...': function _(args) {\r\n      return _prod(args);\r\n    }\r\n  });\r\n  /**\r\n   * Recursively calculate the product of an n-dimensional array\r\n   * @param {Array} array\r\n   * @return {number} prod\r\n   * @private\r\n   */\r\n\r\n  function _prod(array) {\r\n    var prod;\r\n    deepForEach(array, function (value) {\r\n      try {\r\n        prod = prod === undefined ? value : multiplyScalar(prod, value);\r\n      } catch (err) {\r\n        throw improveErrorMessage(err, 'prod', value);\r\n      }\r\n    }); // make sure returning numeric value: parse a string into a numeric value\r\n\r\n    if (typeof prod === 'string') {\r\n      prod = numeric(prod, config.number);\r\n    }\r\n\r\n    if (prod === undefined) {\r\n      throw new Error('Cannot calculate prod of an empty array');\r\n    }\r\n\r\n    return prod;\r\n  }\r\n});"]},"metadata":{},"sourceType":"module"}