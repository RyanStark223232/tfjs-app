{"ast":null,"code":"import _slicedToArray from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { TopK } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\r\n * Finds the values and indices of the `k` largest entries along the last\r\n * dimension.\r\n *\r\n * If the input is a vector (rank=1), finds the k largest entries in the vector\r\n * and outputs their values and indices as vectors. Thus values[j] is the j-th\r\n * largest entry in input, and its index is indices[j].\r\n * For higher rank inputs, computes the top k entries along the last dimension.\r\n *\r\n * If two elements are equal, the lower-index element appears first.\r\n *\r\n * ```js\r\n * const a = tf.tensor2d([[1, 5], [4, 3]]);\r\n * const {values, indices} = tf.topk(a);\r\n * values.print();\r\n * indices.print();\r\n * ```\r\n * @param x 1-D or higher `tf.Tensor` with last dimension being at least `k`.\r\n * @param k Number of top elements to look for along the last dimension.\r\n * @param sorted If true, the resulting `k` elements will be sorted by the\r\n *     values in descending order.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Evaluation'}\r\n */\n\nfunction topk_(x) {\n  var k = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  var sorted = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var $x = convertToTensor(x, 'x', 'topk');\n\n  if ($x.rank === 0) {\n    throw new Error('topk() expects the input to be of rank 1 or higher');\n  }\n\n  var lastDim = $x.shape[$x.shape.length - 1];\n\n  if (k > lastDim) {\n    throw new Error(\"'k' passed to topk() must be <= the last dimension (\".concat(lastDim, \") \") + \"but got \".concat(k));\n  }\n\n  var inputs = {\n    x: $x\n  };\n  var attrs = {\n    k: k,\n    sorted: sorted\n  };\n\n  var _ENGINE$runKernelFunc = ENGINE.runKernelFunc(function (b) {\n    return b.topk($x, k, sorted);\n  }, inputs, null\n  /* grad */\n  , TopK, attrs),\n      _ENGINE$runKernelFunc2 = _slicedToArray(_ENGINE$runKernelFunc, 2),\n      values = _ENGINE$runKernelFunc2[0],\n      indices = _ENGINE$runKernelFunc2[1];\n\n  return {\n    values: values,\n    indices: indices\n  };\n}\n\nexport var topk = op({\n  topk_: topk_\n});","map":{"version":3,"sources":["../../src/ops/topk.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,MAAR,QAAqB,WAArB;AACA,SAAQ,IAAR,QAA0C,iBAA1C;AAIA,SAAQ,eAAR,QAA8B,oBAA9B;AAGA,SAAQ,EAAR,QAAiB,aAAjB;AAEA;;;;;;;;;;;;;;;;;;;;;;;AAuBG;;AACH,SAAS,KAAT,CACI,CADJ,EACyC;AAAA,MAApB,CAAoB,uEAAhB,CAAgB;AAAA,MAAb,MAAa,uEAAJ,IAAI;AACvC,MAAM,EAAE,GAAG,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,MAAT,CAA1B;;AACA,MAAI,EAAE,CAAC,IAAH,KAAY,CAAhB,EAAmB;AACjB,UAAM,IAAI,KAAJ,CAAU,oDAAV,CAAN;AACD;;AACD,MAAM,OAAO,GAAG,EAAE,CAAC,KAAH,CAAS,EAAE,CAAC,KAAH,CAAS,MAAT,GAAkB,CAA3B,CAAhB;;AACA,MAAI,CAAC,GAAG,OAAR,EAAiB;AACf,UAAM,IAAI,KAAJ,CACF,8DAAuD,OAAvD,4BACW,CADX,CADE,CAAN;AAGD;;AAED,MAAM,MAAM,GAAe;AAAC,IAAA,CAAC,EAAE;AAAJ,GAA3B;AACA,MAAM,KAAK,GAAc;AAAC,IAAA,CAAC,EAAD,CAAD;AAAI,IAAA,MAAM,EAAN;AAAJ,GAAzB;;AAbuC,8BAeb,MAAM,CAAC,aAAP,CACtB,UAAA,CAAC;AAAA,WAAI,CAAC,CAAC,IAAF,CAAO,EAAP,EAA4B,CAA5B,EAA+B,MAA/B,CAAJ;AAAA,GADqB,EAEtB,MAFsB,EAEU;AAAK;AAFf,IAE2B,IAF3B,EAGtB,KAHsB,CAfa;AAAA;AAAA,MAehC,MAfgC;AAAA,MAexB,OAfwB;;AAoBvC,SAAO;AAAC,IAAA,MAAM,EAAN,MAAD;AAAS,IAAA,OAAO,EAAP;AAAT,GAAP;AACD;;AAED,OAAO,IAAM,IAAI,GAAG,EAAE,CAAC;AAAC,EAAA,KAAK,EAAL;AAAD,CAAD,CAAf","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { ENGINE } from '../engine';\r\nimport { TopK } from '../kernel_names';\r\nimport { convertToTensor } from '../tensor_util_env';\r\nimport { op } from './operation';\r\n/**\r\n * Finds the values and indices of the `k` largest entries along the last\r\n * dimension.\r\n *\r\n * If the input is a vector (rank=1), finds the k largest entries in the vector\r\n * and outputs their values and indices as vectors. Thus values[j] is the j-th\r\n * largest entry in input, and its index is indices[j].\r\n * For higher rank inputs, computes the top k entries along the last dimension.\r\n *\r\n * If two elements are equal, the lower-index element appears first.\r\n *\r\n * ```js\r\n * const a = tf.tensor2d([[1, 5], [4, 3]]);\r\n * const {values, indices} = tf.topk(a);\r\n * values.print();\r\n * indices.print();\r\n * ```\r\n * @param x 1-D or higher `tf.Tensor` with last dimension being at least `k`.\r\n * @param k Number of top elements to look for along the last dimension.\r\n * @param sorted If true, the resulting `k` elements will be sorted by the\r\n *     values in descending order.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Evaluation'}\r\n */\r\nfunction topk_(x, k = 1, sorted = true) {\r\n    const $x = convertToTensor(x, 'x', 'topk');\r\n    if ($x.rank === 0) {\r\n        throw new Error('topk() expects the input to be of rank 1 or higher');\r\n    }\r\n    const lastDim = $x.shape[$x.shape.length - 1];\r\n    if (k > lastDim) {\r\n        throw new Error(`'k' passed to topk() must be <= the last dimension (${lastDim}) ` +\r\n            `but got ${k}`);\r\n    }\r\n    const inputs = { x: $x };\r\n    const attrs = { k, sorted };\r\n    const [values, indices] = ENGINE.runKernelFunc(b => b.topk($x, k, sorted), inputs, null /* grad */, TopK, attrs);\r\n    return { values, indices };\r\n}\r\nexport const topk = op({ topk_ });\r\n//# sourceMappingURL=topk.js.map"]},"metadata":{},"sourceType":"module"}