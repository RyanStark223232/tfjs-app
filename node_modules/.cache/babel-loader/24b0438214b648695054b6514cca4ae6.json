{"ast":null,"code":"import _slicedToArray from \"C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../../engine';\nimport { ResizeBilinear } from '../../kernel_names';\nimport { convertToTensor } from '../../tensor_util_env';\nimport * as util from '../../util';\nimport { op } from '../operation';\nimport { reshape } from '../reshape';\n/**\r\n * Bilinear resize a single 3D image or a batch of 3D images to a new shape.\r\n *\r\n * @param images The images, of rank 4 or rank 3, of shape\r\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\r\n * @param size The new shape `[newHeight, newWidth]` to resize the\r\n *     images to. Each channel is resized individually.\r\n * @param alignCorners Defaults to False. If true, rescale\r\n *     input by `(new_height - 1) / (height - 1)`, which exactly aligns the 4\r\n *     corners of images and resized images. If false, rescale by\r\n *     `new_height / height`. Treat similarly the width dimension.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\r\n */\n\nfunction resizeBilinear_(images, size) {\n  var alignCorners = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var $images = convertToTensor(images, 'images', 'resizeBilinear');\n  util.assert($images.rank === 3 || $images.rank === 4, function () {\n    return \"Error in resizeBilinear: x must be rank 3 or 4, but got \" + \"rank \".concat($images.rank, \".\");\n  });\n  util.assert(size.length === 2, function () {\n    return \"Error in resizeBilinear: new shape must 2D, but got shape \" + \"\".concat(size, \".\");\n  });\n  var batchImages = $images;\n  var reshapedTo4D = false;\n\n  if ($images.rank === 3) {\n    reshapedTo4D = true;\n    batchImages = reshape($images, [1, $images.shape[0], $images.shape[1], $images.shape[2]]);\n  }\n\n  var _size = _slicedToArray(size, 2),\n      newHeight = _size[0],\n      newWidth = _size[1];\n\n  var forward = function forward(backend, save) {\n    save([batchImages]);\n    return backend.resizeBilinear(batchImages, newHeight, newWidth, alignCorners);\n  };\n\n  var inputs = {\n    images: batchImages\n  };\n  var attrs = {\n    alignCorners: alignCorners,\n    size: size\n  };\n  var res = ENGINE.runKernelFunc(forward, inputs, null\n  /* gradient */\n  , ResizeBilinear, attrs);\n\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n  }\n\n  return res;\n}\n\nexport var resizeBilinear = op({\n  resizeBilinear_: resizeBilinear_\n});","map":{"version":3,"sources":["../../../src/ops/image/resize_bilinear.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,MAAR,QAAkC,cAAlC;AACA,SAAQ,cAAR,QAAwE,oBAAxE;AAIA,SAAQ,eAAR,QAA8B,uBAA9B;AAEA,OAAO,KAAK,IAAZ,MAAsB,YAAtB;AAEA,SAAQ,EAAR,QAAiB,cAAjB;AACA,SAAQ,OAAR,QAAsB,YAAtB;AAEA;;;;;;;;;;;;;AAaG;;AACH,SAAS,eAAT,CACI,MADJ,EAC0B,IAD1B,EACsE;AAAA,MAApB,YAAoB,uEAAL,KAAK;AACpE,MAAM,OAAO,GAAG,eAAe,CAAC,MAAD,EAAS,QAAT,EAAmB,gBAAnB,CAA/B;AAEA,EAAA,IAAI,CAAC,MAAL,CACI,OAAO,CAAC,IAAR,KAAiB,CAAjB,IAAsB,OAAO,CAAC,IAAR,KAAiB,CAD3C,EAEI;AAAA,WAAM,4EACM,OAAO,CAAC,IADd,MAAN;AAAA,GAFJ;AAIA,EAAA,IAAI,CAAC,MAAL,CACI,IAAI,CAAC,MAAL,KAAgB,CADpB,EAEI;AAAA,WAAM,yEACC,IADD,MAAN;AAAA,GAFJ;AAKA,MAAI,WAAW,GAAG,OAAlB;AACA,MAAI,YAAY,GAAG,KAAnB;;AACA,MAAI,OAAO,CAAC,IAAR,KAAiB,CAArB,EAAwB;AACtB,IAAA,YAAY,GAAG,IAAf;AACA,IAAA,WAAW,GAAG,OAAO,CACjB,OADiB,EACR,CAAC,CAAD,EAAI,OAAO,CAAC,KAAR,CAAc,CAAd,CAAJ,EAAsB,OAAO,CAAC,KAAR,CAAc,CAAd,CAAtB,EAAwC,OAAO,CAAC,KAAR,CAAc,CAAd,CAAxC,CADQ,CAArB;AAED;;AAlBmE,6BAoBtC,IApBsC;AAAA,MAoB7D,SApB6D;AAAA,MAoBlD,QApBkD;;AAqBpE,MAAM,OAAO,GAA0B,SAAjC,OAAiC,CAAC,OAAD,EAAU,IAAV,EAAkB;AACvD,IAAA,IAAI,CAAC,CAAC,WAAD,CAAD,CAAJ;AACA,WAAO,OAAO,CAAC,cAAR,CACH,WADG,EACU,SADV,EACqB,QADrB,EAC+B,YAD/B,CAAP;AAED,GAJD;;AAMA,MAAM,MAAM,GAAyB;AAAC,IAAA,MAAM,EAAE;AAAT,GAArC;AACA,MAAM,KAAK,GAAwB;AAAC,IAAA,YAAY,EAAZ,YAAD;AAAe,IAAA,IAAI,EAAJ;AAAf,GAAnC;AAEA,MAAM,GAAG,GAAG,MAAM,CAAC,aAAP,CACR,OADQ,EACC,MADD,EACiC;AAAK;AADtC,IAER,cAFQ,EAEQ,KAFR,CAAZ;;AAIA,MAAI,YAAJ,EAAkB;AAChB,WAAO,OAAO,CAAC,GAAD,EAAM,CAAC,GAAG,CAAC,KAAJ,CAAU,CAAV,CAAD,EAAe,GAAG,CAAC,KAAJ,CAAU,CAAV,CAAf,EAA6B,GAAG,CAAC,KAAJ,CAAU,CAAV,CAA7B,CAAN,CAAd;AACD;;AACD,SAAO,GAAP;AACD;;AAED,OAAO,IAAM,cAAc,GAAG,EAAE,CAAC;AAAC,EAAA,eAAe,EAAf;AAAD,CAAD,CAAzB","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { ENGINE } from '../../engine';\r\nimport { ResizeBilinear } from '../../kernel_names';\r\nimport { convertToTensor } from '../../tensor_util_env';\r\nimport * as util from '../../util';\r\nimport { op } from '../operation';\r\nimport { reshape } from '../reshape';\r\n/**\r\n * Bilinear resize a single 3D image or a batch of 3D images to a new shape.\r\n *\r\n * @param images The images, of rank 4 or rank 3, of shape\r\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\r\n * @param size The new shape `[newHeight, newWidth]` to resize the\r\n *     images to. Each channel is resized individually.\r\n * @param alignCorners Defaults to False. If true, rescale\r\n *     input by `(new_height - 1) / (height - 1)`, which exactly aligns the 4\r\n *     corners of images and resized images. If false, rescale by\r\n *     `new_height / height`. Treat similarly the width dimension.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\r\n */\r\nfunction resizeBilinear_(images, size, alignCorners = false) {\r\n    const $images = convertToTensor(images, 'images', 'resizeBilinear');\r\n    util.assert($images.rank === 3 || $images.rank === 4, () => `Error in resizeBilinear: x must be rank 3 or 4, but got ` +\r\n        `rank ${$images.rank}.`);\r\n    util.assert(size.length === 2, () => `Error in resizeBilinear: new shape must 2D, but got shape ` +\r\n        `${size}.`);\r\n    let batchImages = $images;\r\n    let reshapedTo4D = false;\r\n    if ($images.rank === 3) {\r\n        reshapedTo4D = true;\r\n        batchImages = reshape($images, [1, $images.shape[0], $images.shape[1], $images.shape[2]]);\r\n    }\r\n    const [newHeight, newWidth] = size;\r\n    const forward = (backend, save) => {\r\n        save([batchImages]);\r\n        return backend.resizeBilinear(batchImages, newHeight, newWidth, alignCorners);\r\n    };\r\n    const inputs = { images: batchImages };\r\n    const attrs = { alignCorners, size };\r\n    const res = ENGINE.runKernelFunc(forward, inputs, null /* gradient */, ResizeBilinear, attrs);\r\n    if (reshapedTo4D) {\r\n        return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\r\n    }\r\n    return res;\r\n}\r\nexport const resizeBilinear = op({ resizeBilinear_ });\r\n//# sourceMappingURL=resize_bilinear.js.map"]},"metadata":{},"sourceType":"module"}