{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\wongh\\\\Documents\\\\GitHub\\\\tfjs-app\\\\src\\\\App.js\";\nimport React from \"react\";\nimport Button from '@material-ui/core/Button';\nimport * as handpose from \"@tensorflow-models/handpose\";\nimport * as posenet from \"@tensorflow-models/posenet\";\nimport * as facemesh from \"@tensorflow-models/facemesh\"; //import * as tf from '@tensorflow/tfjs-core';\n\nimport Webcam from \"react-webcam\";\nimport \"./App.css\";\nimport { drawHand_tap, drawHand_rotate, drawHand_fist, drawHand_still, writeText, drawKeypoints, drawSkeleton, drawMesh } from \"./utilities\";\nimport { sqrt, pow } from \"mathjs\";\nimport { Line } from 'react-chartjs-2';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.sleep = milliseconds => {\n      return new Promise(resolve => setTimeout(resolve, milliseconds));\n    };\n\n    this.exportToJson = (objectData, filename) => {\n      let contentType = \"application/json;charset=utf-8;\";\n\n      if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n        var blob = new Blob([decodeURIComponent(encodeURI(JSON.stringify(objectData)))], {\n          type: contentType\n        });\n        navigator.msSaveOrOpenBlob(blob, filename);\n      } else {\n        var a = document.createElement('a');\n        a.download = filename;\n        a.href = 'data:' + contentType + ',' + encodeURIComponent(JSON.stringify(objectData));\n        a.target = '_blank';\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n      }\n    };\n\n    this.getArray = () => {\n      let dict = {\n        tap_count: this.state.tap_count,\n        rotate_count: this.state.rotate_count,\n        fist_count: this.state.fist_count,\n        dist_array: this.state.dist_array,\n        dist_time_array: this.state.dist_time_array,\n        dist_record: this.state.dist_record,\n        dist_time_record: this.state.dist_time_record,\n        rotate_array: this.state.rotate_array,\n        rotate_time_array: this.state.rotate_time_array,\n        rotate_record: this.state.rotate_record,\n        rotate_time_record: this.state.rotate_time_record,\n        fist_array: this.state.fist_array,\n        fist_time_array: this.state.fist_time_array,\n        fist_record: this.state.fist_record,\n        fist_time_record: this.state.fist_time_record,\n        still_array: this.state.still_array,\n        still_time_array: this.state.still_time_array,\n        still_record: this.state.still_record,\n        still_time_record: this.state.still_time_record,\n        startAt: this.state.startAt,\n        avg_fps: this.state.avg_fps,\n        hand_dist_array: this.state.hand_dist_array,\n        hand_rotate_array: this.state.hand_rotate_array,\n        hand_fist_array: this.state.hand_fist_array,\n        hand_still_array: this.state.hand_still_array\n      };\n      this.exportToJson(dict, \"state\");\n    };\n\n    this.state = {\n      ID: 0,\n      tap_count: [],\n      rotate_count: [],\n      fist_count: [],\n      last_hand: [],\n      index_passed: 0,\n      min_dist: 0,\n      max_dist: 99.0,\n      rotate_passed: 0,\n      last_pressed: 0,\n      real_time_inferencing: false,\n      recording: false,\n      button_mode: false,\n      chart_ready: false,\n      finger_done: false,\n      rotate_done: false,\n      fist_done: false,\n      hand_dist_array: [],\n      hand_rotate_array: [],\n      hand_fist_array: [],\n      hand_still_array: [],\n      dist_array_L: [],\n      dist_time_array_L: [],\n      dist_record_L: [],\n      dist_time_record_L: [],\n      dist_array_R: [],\n      dist_time_array_R: [],\n      dist_record_R: [],\n      dist_time_record_R: [],\n      rotate_array_L: [],\n      rotate_time_array_L: [],\n      rotate_record_L: [],\n      rotate_time_record_L: [],\n      rotate_array_R: [],\n      rotate_time_array_R: [],\n      rotate_record_R: [],\n      rotate_time_record_R: [],\n      fist_array_L: [],\n      fist_time_array_L: [],\n      fist_record_L: [],\n      fist_time_record_L: [],\n      fist_array_R: [],\n      fist_time_array_R: [],\n      fist_record_R: [],\n      fist_time_record_R: [],\n      still_array_L: [],\n      still_time_array_L: [],\n      still_record_L: [],\n      still_time_record_L: [],\n      still_array_R: [],\n      still_time_array_R: [],\n      still_record_R: [],\n      still_time_record_R: [],\n      chart_data1: null,\n      chart_data2: null,\n      chart_data3: null,\n      chart_data4: null,\n      stage: 0,\n      wait: false,\n      wait_till: 0,\n      startAt: Date.now(),\n      dead_frame: 0,\n      raw: true,\n      facingMode: \"user\",\n      avg_fps: 0\n    };\n    this.webcamRef = /*#__PURE__*/React.createRef(null);\n    this.canvasRef = /*#__PURE__*/React.createRef(null);\n    this.videoConstraints = {\n      facingMode: \"user\"\n    };\n    this.capture_interval = 50;\n    this.runHandpose = this.runHandpose.bind(this);\n    this.stop_real_time_inference = this.stop_real_time_inference.bind(this);\n    this.stop_tapping = this.stop_tapping.bind(this);\n    this.stop_rotating = this.stop_rotating.bind(this);\n    this.stop_gripping = this.stop_gripping.bind(this);\n    this.stop_record = this.stop_record.bind(this);\n    this.record_video = this.record_video.bind(this);\n    this.concat_frame = this.concat_frame.bind(this);\n    this.inference = this.inference.bind(this);\n    this.reset_counter = this.reset_counter.bind(this);\n    this.increment_tap1 = this.increment_tap1.bind(this);\n    this.increment_tap2 = this.increment_tap2.bind(this);\n    this.switch_button = this.switch_button.bind(this);\n    this.compose_chart = this.compose_chart.bind(this);\n    this.runPosenet = this.runPosenet.bind(this);\n    this.real_time_posenet = this.real_time_posenet.bind(this);\n    this.runFacemesh = this.runFacemesh.bind(this);\n    this.real_time_facemesh = this.real_time_facemesh.bind(this);\n    this.switch_style = this.switch_style.bind(this);\n    this.switch_cam = this.switch_cam.bind(this);\n    this.getArray = this.getArray.bind(this);\n    this.exportToJson = this.exportToJson.bind(this);\n    this.next_step = this.next_step.bind(this);\n  }\n\n  switch_cam() {\n    if (this.state.facingMode === \"user\") this.setState({\n      facingMode: \"environment\"\n    });else if (this.state.facingMode === \"environment\") this.setState({\n      facingMode: \"user\"\n    });\n  }\n\n  async runFacemesh() {\n    require('@tensorflow/tfjs-backend-webgl');\n\n    const net = await facemesh.load();\n    console.log(\"Facemesh model loaded.\");\n    this.setState({\n      startAt: Date.now()\n    });\n    const Interval_ID = setInterval(() => {\n      this.real_time_facemesh(net);\n    }, this.capture_interval);\n    this.setState({\n      ID: Interval_ID,\n      real_time_inferencing: true\n    });\n  }\n\n  async real_time_facemesh(net) {\n    if (this.state.wait) {\n      this.setState({\n        wait_till: Date.now() + 3000\n      });\n      this.setState({\n        wait: false\n      });\n    }\n\n    if (typeof this.webcamRef.current !== \"undefined\" && this.webcamRef.current !== null && this.webcamRef.current.video.readyState === 4) {\n      const video = this.webcamRef.current.video;\n      const videoWidth = this.webcamRef.current.video.videoWidth;\n      const videoHeight = this.webcamRef.current.video.videoHeight;\n      this.webcamRef.current.video.width = videoWidth;\n      this.webcamRef.current.video.height = videoHeight;\n      this.canvasRef.current.width = videoWidth;\n      this.canvasRef.current.height = videoHeight;\n      const face = await net.estimateFaces(video);\n      const ctx = this.canvasRef.current.getContext(\"2d\");\n      drawMesh(face, ctx);\n    }\n  }\n\n  async runPosenet() {\n    require('@tensorflow/tfjs-backend-webgl');\n\n    const net = await posenet.load();\n    console.log(\"PoseNet model loaded.\");\n    this.setState({\n      startAt: Date.now()\n    });\n    const Interval_ID = setInterval(() => {\n      this.real_time_posenet(net);\n    }, this.capture_interval);\n    this.setState({\n      ID: Interval_ID,\n      real_time_inferencing: true\n    });\n  }\n\n  async real_time_posenet(net) {\n    if (this.state.wait) {\n      this.setState({\n        wait_till: Date.now() + 3000,\n        wait: false\n      });\n    }\n\n    if (typeof this.webcamRef.current !== \"undefined\" && this.webcamRef.current !== null && this.webcamRef.current.video.readyState === 4) {\n      const video = this.webcamRef.current.video;\n      const videoWidth = this.webcamRef.current.video.videoWidth;\n      const videoHeight = this.webcamRef.current.video.videoHeight;\n      this.webcamRef.current.video.width = videoWidth;\n      this.webcamRef.current.video.height = videoHeight;\n      this.canvasRef.current.width = videoWidth;\n      this.canvasRef.current.height = videoHeight;\n      const pose = await net.estimateSinglePose(video);\n      const ctx = this.canvasRef.current.getContext(\"2d\");\n      drawKeypoints(pose[\"keypoints\"], 0.6, ctx);\n      drawSkeleton(pose[\"keypoints\"], 0.7, ctx);\n    }\n  }\n\n  async switch_style() {\n    await this.setState({\n      raw: !this.state.raw\n    });\n    this.compose_chart();\n  }\n\n  compose_chart() {\n    let time_array_1 = [];\n    let count_array_1 = [];\n    let label_1 = \"\";\n    let time_array_2 = [];\n    let count_array_2 = [];\n    let label_2 = \"\";\n    let time_array_3 = [];\n    let count_array_3 = [];\n    let label_3 = \"\";\n    let time_array_4 = [];\n    let count_array_4 = [];\n    let label_4 = \"\";\n    let real_dist = document.getElementById(\"real_measurement\").value;\n    let avg_fps = this.state.dist_time_array.length / (this.state.dist_time_array[this.state.dist_time_array.length - 1] - this.state.dist_time_array[0]);\n    this.setState({\n      avg_fps: avg_fps\n    });\n\n    if (this.state.raw) {\n      // Print Data Raw\n      time_array_1 = [...this.state.dist_time_array];\n      count_array_1 = [...this.state.dist_array];\n      time_array_2 = [...this.state.rotate_time_array];\n      count_array_2 = [...this.state.rotate_array];\n      time_array_3 = [...this.state.fist_time_array];\n      count_array_3 = [...this.state.fist_array];\n\n      if (this.state.still_array.length > 100) {\n        time_array_4 = this.state.still_time_array.slice(20, this.state.still_time_array.length - 20);\n        count_array_4 = this.state.still_array.slice(20, this.state.still_array.length - 20);\n      } else {\n        time_array_4 = [...this.state.still_time_array];\n        count_array_4 = [...this.state.still_array];\n      } // Change to Real Life Measurement\n\n\n      if (real_dist > 0.0001) {\n        label_1 = \"Distance between Index and Thumb (cm)\";\n        label_2 = \"Relative Location between Left and Right of Hand (cm)\";\n        label_3 = \"Relative Location between Tip of Fingers and Finger Joints (cm)\";\n        label_4 = \"Relative Location Moved (cm)\";\n        let i = 0;\n        let tmp = 0;\n\n        for (i = 0; i < count_array_1.length; i++) {\n          tmp = count_array_1[i];\n          count_array_1[i] = tmp * real_dist;\n        }\n\n        for (i = 0; i < count_array_2.length; i++) {\n          tmp = count_array_2[i];\n          count_array_2[i] = tmp * real_dist;\n        }\n\n        for (i = 0; i < count_array_3.length; i++) {\n          tmp = count_array_3[i];\n          count_array_3[i] = tmp * real_dist;\n        }\n\n        for (i = 0; i < count_array_4.length; i++) {\n          tmp = count_array_4[i];\n          count_array_4[i] = tmp * real_dist;\n        }\n      } else {\n        label_1 = \"Distance between Index and Thumb (Relative Scale)\";\n        label_2 = \"Relative Location between Left and Right of Hand (Relative Scale)\";\n        label_3 = \"Relative Location between Tip of Fingers and Finger Joints (Relative Scale)\";\n        label_4 = \"Relative Location Moved (Relative Scale)\";\n      }\n    } else {\n      // Recalculate Tapping Data\n      console.log(\"Use Avg\");\n      let d_array = [];\n      let frames = 1000 / this.capture_interval;\n\n      for (let i = 1; i < this.state.dist_array.length; i++) d_array = [...d_array, Math.abs(this.state.dist_array[i - 1] - this.state.dist_array[i])];\n\n      for (let i = 0; i < d_array.length - frames; i++) {\n        let total = 0.0;\n\n        for (let j = 0; j < frames; j++) total += d_array[i + j];\n\n        count_array_1 = [...count_array_1, total / frames];\n        time_array_1 = [...time_array_1, this.state.dist_time_array[i]];\n      }\n\n      d_array = [];\n\n      for (let i = 1; i < this.state.rotate_array.length; i++) d_array = [...d_array, Math.abs(this.state.rotate_array[i - 1] - this.state.rotate_array[i])];\n\n      for (let i = 0; i < d_array.length - frames; i++) {\n        let total = 0.0;\n\n        for (let j = 0; j < frames; j++) total += d_array[i + j];\n\n        count_array_2 = [...count_array_2, total / frames];\n        time_array_2 = [...time_array_2, this.state.rotate_time_array[i]];\n      }\n\n      d_array = [];\n\n      for (let i = 1; i < this.state.fist_array.length; i++) d_array = [...d_array, Math.abs(this.state.fist_array[i - 1] - this.state.fist_array[i])];\n\n      for (let i = 0; i < d_array.length - frames; i++) {\n        let total = 0.0;\n\n        for (let j = 0; j < frames; j++) total += d_array[i + j];\n\n        count_array_3 = [...count_array_3, total / frames];\n        time_array_3 = [...time_array_3, this.state.fist_time_array[i]];\n      }\n\n      d_array = [];\n\n      for (let i = 1; i < this.state.still_array.length; i++) d_array = [...d_array, Math.abs(this.state.still_array[i - 1] - this.state.still_array[i])];\n\n      for (let i = 0; i < d_array.length - frames; i++) {\n        let total = 0.0;\n\n        for (let j = 0; j < frames; j++) total += d_array[i + j];\n\n        count_array_4 = [...count_array_4, total / frames];\n        time_array_4 = [...time_array_4, this.state.still_time_array[i]];\n      }\n\n      if (this.state.still_array.length > 100) {\n        time_array_4 = this.state.still_time_array.slice(20, this.state.still_time_array.length - 20);\n        count_array_4 = this.state.still_array.slice(20, this.state.still_array.length - 20);\n      } else {\n        time_array_4 = [...this.state.still_time_array];\n        count_array_4 = [...this.state.still_array];\n      } // Change to Real Life Measurement\n\n\n      if (real_dist > 0.0001) {\n        label_1 = \"Average Distance between Index and Thumb per Second (cm)\";\n        label_2 = \"Average Distance between Left and Right of Hand per Second (cm)\";\n        label_3 = \"Average Distance Location between Tip of Fingers and Finger Joints per Second (cm)\";\n        label_4 = \"Relative Location Moved per Second (cm)\";\n        let i = 0;\n        let tmp = 0;\n\n        for (i = 0; i < count_array_1.length; i++) {\n          tmp = count_array_1[i];\n          count_array_1[i] = tmp * real_dist;\n        }\n\n        for (i = 0; i < count_array_2.length; i++) {\n          tmp = count_array_2[i];\n          count_array_2[i] = tmp * real_dist;\n        }\n\n        for (i = 0; i < count_array_3.length; i++) {\n          tmp = count_array_3[i];\n          count_array_3[i] = tmp * real_dist;\n        }\n\n        for (i = 0; i < count_array_4.length; i++) {\n          tmp = count_array_4[i];\n          count_array_4[i] = tmp * real_dist;\n        }\n      } else {\n        label_1 = \"Average Distance between Index and Thumb per Second (Relative Scale)\";\n        label_2 = \"Average Distance between Left and Right of Hand per Second (Relative Scale)\";\n        label_3 = \"Average Distance Location between Tip of Fingers and Finger Joints per Second (Relative Scale)\";\n        label_4 = \"Relative Location Moved per Second (Relative Scale)\";\n      }\n    } // Setup Graphs\n\n\n    const data1 = {\n      labels: time_array_1,\n      datasets: [{\n        label: label_1,\n        fill: false,\n        lineTension: 0.3,\n        backgroundColor: 'rgba(75,192,192,0.4)',\n        borderColor: 'rgba(75,192,192,1)',\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: 'rgba(75,192,192,1)',\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: count_array_1\n      }]\n    };\n    const data2 = {\n      labels: time_array_2,\n      datasets: [{\n        label: label_2,\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: 'rgba(192,75,192,0.4)',\n        borderColor: 'rgba(192,75,192,1)',\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: 'rgba(192,75,192,1)',\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'rgba(192,75,192,1)',\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: count_array_2\n      }]\n    };\n    const data3 = {\n      labels: time_array_3,\n      datasets: [{\n        label: label_3,\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: 'rgba(192,192,75,0.4)',\n        borderColor: 'rgba(192,192,75,1)',\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: 'rgba(192,192,75,1)',\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'rgba(192,192,75,1)',\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: count_array_3\n      }]\n    };\n    const data4 = {\n      labels: time_array_4,\n      datasets: [{\n        label: label_4,\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: 'rgba(75,192,75,0.4)',\n        borderColor: 'rgba(75,192,75,1)',\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: 'rgba(75,192,75,1)',\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'rgba(75,192,75,1)',\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: count_array_4\n      }]\n    };\n    this.setState({\n      chart_data1: data1\n    });\n    this.setState({\n      chart_data2: data2\n    });\n    this.setState({\n      chart_data3: data3\n    });\n    this.setState({\n      chart_data4: data4\n    });\n    this.setState({\n      chart_ready: true\n    });\n  }\n\n  switch_button() {\n    if (this.state.button_mode === true) {\n      this.setState({\n        button_mode: false\n      });\n      this.compose_chart();\n    } else {\n      this.setState({\n        button_mode: true\n      });\n    }\n  }\n\n  increment_tap1() {\n    if (this.state.last_pressed !== 1) {\n      let current_moment = (Date.now() - this.state.startAt) / 1000;\n      this.setState({\n        last_pressed: 1\n      });\n      this.setState({\n        dist_array: [...this.state.dist_array, 1.0]\n      });\n      this.setState({\n        dist_time_array: [...this.state.dist_time_array, current_moment]\n      });\n      this.setState({\n        tap_count: [...this.state.tap_count, current_moment]\n      });\n    }\n  }\n\n  increment_tap2() {\n    if (this.state.last_pressed !== 2) {\n      let current_moment = (Date.now() - this.state.startAt) / 1000;\n      this.setState({\n        last_pressed: 2\n      });\n      this.setState({\n        dist_array: [...this.state.dist_array, 1.0]\n      });\n      this.setState({\n        dist_time_array: [...this.state.dist_time_array, current_moment]\n      });\n      this.setState({\n        tap_count: [...this.state.tap_count, current_moment]\n      });\n    }\n  }\n\n  norm(lm1, lm2) {\n    return sqrt(pow(lm1[0] - lm2[0], 2) + pow(lm1[1] - lm2[1], 2));\n  }\n\n  reset_counter() {\n    clearInterval(this.state.ID);\n    const ctx = this.canvasRef.current.getContext(\"2d\");\n    ctx.clearRect(0, 0, this.canvasRef.current.width, this.canvasRef.current.height);\n    this.setState({\n      ID: 0,\n      tap_count: [],\n      rotate_count: [],\n      fist_count: [],\n      index_passed: 0,\n      min_dist: 0,\n      max_dist: 5.0,\n      rotate_passed: 0,\n      last_pressed: 0,\n      real_time_inferencing: false,\n      recording: false,\n      button_mode: false,\n      chart_ready: false,\n      finger_done: false,\n      rotate_done: false,\n      fist_done: false,\n      hand_dist_array: [],\n      hand_rotate_array: [],\n      hand_fist_array: [],\n      hand_still_array: [],\n      dist_array: [],\n      dist_time_array: [],\n      dist_record: [],\n      dist_time_record: [],\n      rotate_array: [],\n      rotate_time_array: [],\n      rotate_record: [],\n      rotate_time_record: [],\n      fist_array: [],\n      fist_time_array: [],\n      fist_record: [],\n      fist_time_record: [],\n      still_array: [],\n      still_time_array: [],\n      still_record: [],\n      still_time_record: [],\n      chart_data1: null,\n      chart_data2: null,\n      chart_data3: null,\n      wait: false,\n      wait_till: 0,\n      startAt: Date.now(),\n      dead_frame: 0,\n      raw: true,\n      facingMode: \"user\",\n      avg_fps: 0\n    });\n  }\n\n  async runHandpose() {\n    const ctx = this.canvasRef.current.getContext(\"2d\");\n    writeText(ctx, {\n      text: 'Loading',\n      x: 180,\n      y: 70\n    });\n\n    require('@tensorflow/tfjs-backend-webgl');\n\n    const net = await handpose.load();\n    ctx.clearRect(0, 0, this.canvasRef.current.width, this.canvasRef.current.height); //const uploadJSONInput = document.getElementById('upload-json');\n    //const uploadWeightsInput = document.getElementById('upload-weights');\n    //const model = await tf.loadLayersModel(tf.io.browserFiles([uploadJSONInput.files[0], uploadWeightsInput.files[0]]));\n\n    console.log(\"Handpose model loaded.\");\n    this.setState({\n      startAt: Date.now()\n    });\n    const Interval_ID = setInterval(() => {\n      this.real_time_inference(net);\n    }, this.capture_interval);\n    this.setState({\n      ID: Interval_ID,\n      real_time_inferencing: true,\n      wait: true,\n      stage: this.state.stage + 1\n    });\n  }\n\n  async real_time_inference(net) {\n    if (this.state.wait) {\n      this.setState({\n        wait_till: Date.now() + 3000\n      });\n      this.setState({\n        wait: false\n      });\n    }\n\n    if (typeof this.webcamRef.current !== \"undefined\" && this.webcamRef.current !== null && this.webcamRef.current.video.readyState === 4) {\n      const video = this.webcamRef.current.video;\n      const videoWidth = this.webcamRef.current.video.videoWidth;\n      const videoHeight = this.webcamRef.current.video.videoHeight;\n      this.webcamRef.current.video.width = videoWidth;\n      this.webcamRef.current.video.height = videoHeight;\n      this.canvasRef.current.width = videoWidth;\n      this.canvasRef.current.height = videoHeight;\n      const hand = await net.estimateHands(video);\n      const ctx = this.canvasRef.current.getContext(\"2d\"); //check if waiting\n\n      if (Date.now() < this.state.wait_till) {\n        if (hand.length > 0) drawHand_tap(hand, ctx); //count down 3, 2, 1\n\n        if (this.state.wait_till - Date.now() < 1000) writeText(ctx, {\n          text: '1',\n          x: 180,\n          y: 70\n        });else if (this.state.wait_till - Date.now() < 2000) writeText(ctx, {\n          text: '2',\n          x: 140,\n          y: 70\n        });else if (this.state.wait_till - Date.now() < 3000) writeText(ctx, {\n          text: '3',\n          x: 100,\n          y: 70\n        });\n      } else {\n        if (hand.length > 0) {\n          hand.forEach(prediction => {\n            this.setState({\n              dead_frame: 0\n            });\n            const landmarks = prediction.landmarks;\n            let pawn_dist = this.norm(landmarks[0], landmarks[2]);\n            let y_dist = this.norm(landmarks[0], landmarks[12]);\n            let current_moment = (Date.now() - this.state.startAt) / 1000;\n            let index_dist = null;\n            let current_dist = null;\n            let rotate_dist = null;\n            let fist_dist = null;\n            let total_move = null;\n            let pinky_rest = null;\n            let ring_rest = null;\n            let middle_rest = null;\n            let index_rest = null;\n            let thumb_rest = null;\n\n            switch (this.state.stage) {\n              case 1:\n                drawHand_tap(hand, ctx);\n                index_dist = this.norm(landmarks[4], landmarks[8]);\n                current_dist = index_dist / pawn_dist;\n                this.setState({\n                  dist_array_L: [...this.state.dist_array_L, current_dist],\n                  dist_time_array_L: [...this.state.dist_time_array_L, current_moment],\n                  hand_dist_array_L: [...this.state.hand_dist_array_L, hand]\n                });\n\n                if (this.state.index_passed === 0 && current_dist - this.state.min_dist > 0.2) {\n                  this.setState({\n                    index_passed: 1,\n                    max_dist: current_dist\n                  });\n                }\n\n                if (this.state.index_passed === 1 && current_dist > this.state.max_dist) {\n                  this.setState({\n                    max_dist: current_dist\n                  });\n                }\n\n                if (this.state.index_passed === 1 && this.state.max_dist - current_dist > 0.2) {\n                  this.setState({\n                    index_passed: 0,\n                    min_dist: current_dist,\n                    tap_count: [...this.state.tap_count, current_moment]\n                  });\n                }\n\n                if (this.state.index_passed === 0 && current_dist < this.state.min_dist) {\n                  this.setState({\n                    min_dist: current_dist\n                  });\n                }\n\n                break;\n\n              case 2:\n                drawHand_tap(hand, ctx);\n                index_dist = this.norm(landmarks[4], landmarks[8]);\n                current_dist = index_dist / pawn_dist;\n                this.setState({\n                  dist_array_R: [...this.state.dist_array_R, current_dist],\n                  dist_time_array_R: [...this.state.dist_time_array_R, current_moment],\n                  hand_dist_array_R: [...this.state.hand_dist_array_R, hand]\n                });\n\n                if (this.state.index_passed === 0 && current_dist - this.state.min_dist > 0.2) {\n                  this.setState({\n                    index_passed: 1,\n                    max_dist: current_dist\n                  });\n                }\n\n                if (this.state.index_passed === 1 && current_dist > this.state.max_dist) {\n                  this.setState({\n                    max_dist: current_dist\n                  });\n                }\n\n                if (this.state.index_passed === 1 && this.state.max_dist - current_dist > 0.2) {\n                  this.setState({\n                    index_passed: 0,\n                    min_dist: current_dist,\n                    tap_count: [...this.state.tap_count, current_moment]\n                  });\n                }\n\n                if (this.state.index_passed === 0 && current_dist < this.state.min_dist) {\n                  this.setState({\n                    min_dist: current_dist\n                  });\n                }\n\n                break;\n\n              case 3:\n                drawHand_rotate(hand, ctx, this.state.rotate_passed);\n                rotate_dist = (landmarks[2][0] - landmarks[17][0]) / y_dist;\n                this.setState({\n                  rotate_array_L: [...this.state.rotate_array_L, rotate_dist],\n                  rotate_time_array_L: [...this.state.rotate_time_array_L, current_moment],\n                  hand_rotate_array_L: [...this.state.hand_rotate_array_L, hand]\n                });\n\n                if (this.state.rotate_passed === 0) {\n                  if (rotate_dist >= 0.2) this.setState({\n                    rotate_passed: 1\n                  });\n                  if (rotate_dist <= -0.2) this.setState({\n                    rotate_passed: -1\n                  });\n                }\n\n                if (this.state.rotate_passed === 1 && rotate_dist <= -0.2) {\n                  this.setState({\n                    rotate_passed: -1\n                  });\n                }\n\n                if (this.state.rotate_passed === -1 && rotate_dist >= 0.2) {\n                  this.setState({\n                    rotate_passed: 1,\n                    rotate_count: [...this.state.rotate_count, current_moment]\n                  });\n                }\n\n                break;\n\n              case 4:\n                drawHand_rotate(hand, ctx, this.state.rotate_passed);\n                rotate_dist = (landmarks[2][0] - landmarks[17][0]) / y_dist;\n                this.setState({\n                  rotate_array_R: [...this.state.rotate_array_R, rotate_dist],\n                  rotate_time_array_R: [...this.state.rotate_time_array_R, current_moment],\n                  hand_rotate_array_R: [...this.state.hand_rotate_array_R, hand]\n                });\n\n                if (this.state.rotate_passed === 0) {\n                  if (rotate_dist >= 0.2) this.setState({\n                    rotate_passed: 1\n                  });\n                  if (rotate_dist <= -0.2) this.setState({\n                    rotate_passed: -1\n                  });\n                }\n\n                if (this.state.rotate_passed === 1 && rotate_dist <= -0.2) {\n                  this.setState({\n                    rotate_passed: -1\n                  });\n                }\n\n                if (this.state.rotate_passed === -1 && rotate_dist >= 0.2) {\n                  this.setState({\n                    rotate_passed: 1,\n                    rotate_count: [...this.state.rotate_count, current_moment]\n                  });\n                }\n\n                break;\n\n              case 5:\n                drawHand_fist(hand, ctx, this.state.fist_passed);\n                fist_dist = (landmarks[8][1] - landmarks[5][1] + (landmarks[12][1] - landmarks[9][1]) + (landmarks[16][1] - landmarks[13][1]) + (landmarks[20][1] - landmarks[17][1])) / (4 * pawn_dist);\n                this.setState({\n                  fist_array_L: [...this.state.fist_array_L, fist_dist],\n                  fist_time_array_L: [...this.state.fist_time_array_L, current_moment],\n                  hand_fist_array_L: [...this.state.hand_fist_array_L, hand]\n                });\n\n                if (fist_dist >= 0.0) {\n                  this.setState({\n                    fist_passed: 1\n                  });\n                }\n\n                if (fist_dist < -0.4 && this.state.fist_passed === 1) {\n                  this.setState({\n                    fist_passed: 0,\n                    fist_count: [...this.state.fist_count, current_moment]\n                  });\n                }\n\n                break;\n\n              case 6:\n                drawHand_fist(hand, ctx, this.state.fist_passed);\n                fist_dist = (landmarks[8][1] - landmarks[5][1] + (landmarks[12][1] - landmarks[9][1]) + (landmarks[16][1] - landmarks[13][1]) + (landmarks[20][1] - landmarks[17][1])) / (4 * pawn_dist);\n                this.setState({\n                  fist_array_R: [...this.state.fist_array_R, fist_dist],\n                  fist_time_array_R: [...this.state.fist_time_array_R, current_moment],\n                  hand_fist_array_R: [...this.state.hand_fist_array_R, hand]\n                });\n\n                if (fist_dist >= 0.0) {\n                  this.setState({\n                    fist_passed: 1\n                  });\n                }\n\n                if (fist_dist < -0.4 && this.state.fist_passed === 1) {\n                  this.setState({\n                    fist_passed: 0,\n                    fist_count: [...this.state.fist_count, current_moment]\n                  });\n                }\n\n                break;\n\n              case 7:\n                total_move = 0.0;\n\n                if (this.state.last_hand.length > 0) {\n                  let moved = [];\n                  pinky_rest = this.norm(landmarks[0], landmarks[4]) - this.norm(this.state.last_hand[0], this.state.last_hand[4]) / pawn_dist;\n                  ring_rest = this.norm(landmarks[0], landmarks[8]) - this.norm(this.state.last_hand[0], this.state.last_hand[8]) / pawn_dist;\n                  middle_rest = this.norm(landmarks[0], landmarks[12]) - this.norm(this.state.last_hand[0], this.state.last_hand[12]) / pawn_dist;\n                  index_rest = this.norm(landmarks[0], landmarks[16]) - this.norm(this.state.last_hand[0], this.state.last_hand[16]) / pawn_dist;\n                  thumb_rest = this.norm(landmarks[0], landmarks[20]) - this.norm(this.state.last_hand[0], this.state.last_hand[20]) / pawn_dist;\n                  if (pinky_rest > 0.05) moved = [...moved, 4];\n                  if (ring_rest > 0.05) moved = [...moved, 8];\n                  if (middle_rest > 0.05) moved = [...moved, 12];\n                  if (index_rest > 0.05) moved = [...moved, 16];\n                  if (thumb_rest > 0.05) moved = [...moved, 20];\n                  total_move += pinky_rest + ring_rest + middle_rest + index_rest + thumb_rest;\n                  drawHand_still(hand, ctx, moved);\n                }\n\n                this.setState({\n                  still_array_L: [...this.state.still_array_L, total_move],\n                  still_time_array_L: [...this.state.still_time_array_L, current_moment],\n                  hand_still_array_L: [...this.state.hand_still_array_L, hand],\n                  last_hand: landmarks\n                });\n                break;\n\n              case 8:\n                total_move = 0.0;\n\n                if (this.state.last_hand.length > 0) {\n                  let moved = [];\n                  pinky_rest = this.norm(landmarks[0], landmarks[4]) - this.norm(this.state.last_hand[0], this.state.last_hand[4]) / pawn_dist;\n                  ring_rest = this.norm(landmarks[0], landmarks[8]) - this.norm(this.state.last_hand[0], this.state.last_hand[8]) / pawn_dist;\n                  middle_rest = this.norm(landmarks[0], landmarks[12]) - this.norm(this.state.last_hand[0], this.state.last_hand[12]) / pawn_dist;\n                  index_rest = this.norm(landmarks[0], landmarks[16]) - this.norm(this.state.last_hand[0], this.state.last_hand[16]) / pawn_dist;\n                  thumb_rest = this.norm(landmarks[0], landmarks[20]) - this.norm(this.state.last_hand[0], this.state.last_hand[20]) / pawn_dist;\n                  if (pinky_rest > 0.05) moved = [...moved, 4];\n                  if (ring_rest > 0.05) moved = [...moved, 8];\n                  if (middle_rest > 0.05) moved = [...moved, 12];\n                  if (index_rest > 0.05) moved = [...moved, 16];\n                  if (thumb_rest > 0.05) moved = [...moved, 20];\n                  total_move += pinky_rest + ring_rest + middle_rest + index_rest + thumb_rest;\n                  drawHand_still(hand, ctx, moved);\n                }\n\n                this.setState({\n                  still_array_R: [...this.state.still_array_R, total_move],\n                  still_time_array_R: [...this.state.still_time_array_R, current_moment],\n                  hand_still_array_R: [...this.state.hand_still_array_R, hand],\n                  last_hand: landmarks\n                });\n                break;\n\n              default:\n                console.log(\"Should Not Print\");\n                break;\n            }\n            /*\r\n            if (this.state.finger_done === false){\r\n              drawHand_tap (hand, ctx);\r\n              // Calculate relative distance\r\n              let index_dist = this.norm(landmarks[4], landmarks[8]);\r\n              let current_dist = index_dist/pawn_dist;\r\n                // Record distance\r\n              this.setState({dist_array:[...this.state.dist_array, current_dist],\r\n                dist_time_array:[...this.state.dist_time_array, current_moment],\r\n                hand_dist_array:[...this.state.hand_dist_array, hand]});\r\n              \r\n              // Perform counting\r\n              if (this.state.index_passed === 0 && (current_dist - this.state.min_dist) > 0.2){\r\n                this.setState({index_passed:1,\r\n                  max_dist: current_dist});\r\n              }\r\n              if (this.state.index_passed === 1 && current_dist > this.state.max_dist){\r\n                this.setState({max_dist: current_dist});\r\n              }\r\n              if (this.state.index_passed === 1 && (this.state.max_dist - current_dist) > 0.2){\r\n                this.setState({index_passed:0,\r\n                  min_dist: current_dist,\r\n                  tap_count:[...this.state.tap_count, current_moment]});\r\n              }\r\n              if (this.state.index_passed === 0 && current_dist < this.state.min_dist){\r\n                this.setState({min_dist: current_dist});\r\n              }\r\n            }\r\n            \r\n            if (this.state.finger_done === true && this.state.rotate_done === false){\r\n              drawHand_rotate (hand, ctx, this.state.rotate_passed);\r\n              // Calculate relative distance\r\n              let rotate_dist = (landmarks[2][0] - landmarks[17][0]) / y_dist;\r\n                // Record distance\r\n              this.setState({rotate_array:[...this.state.rotate_array, rotate_dist],\r\n                rotate_time_array:[...this.state.rotate_time_array, current_moment],\r\n                hand_rotate_array:[...this.state.hand_rotate_array, hand]});\r\n                // Perform counting\r\n              if (this.state.rotate_passed === 0){\r\n                if (rotate_dist >= 0.2) this.setState({rotate_passed:1});\r\n                if (rotate_dist <= -0.2) this.setState({rotate_passed:-1});\r\n              }\r\n              if (this.state.rotate_passed === 1 && rotate_dist <= -0.2){\r\n                this.setState({rotate_passed:-1});\r\n              }\r\n              if (this.state.rotate_passed === -1 && rotate_dist >= 0.2){\r\n                this.setState({rotate_passed:1,\r\n                  rotate_count:[...this.state.rotate_count, current_moment]});\r\n              }\r\n            }\r\n              if (this.state.rotate_done === true && this.state.fist_done === false){\r\n              //console.log(this.state.fist_passed);\r\n              drawHand_fist (hand, ctx, this.state.fist_passed);\r\n              // Calculate relative distance\r\n              let fist_dist =  ((landmarks[8][1] - landmarks[5][1])+\r\n                                (landmarks[12][1] - landmarks[9][1])+\r\n                                (landmarks[16][1] - landmarks[13][1])+\r\n                                (landmarks[20][1] - landmarks[17][1]))/\r\n                                (4*pawn_dist)\r\n                // Record distance\r\n              this.setState({fist_array:[...this.state.fist_array, fist_dist],\r\n                fist_time_array:[...this.state.fist_time_array, current_moment],\r\n                hand_fist_array:[...this.state.hand_fist_array, hand]});\r\n                // Perform counting\r\n              if (fist_dist >= 0.0){this.setState({fist_passed:1})}\r\n              if (fist_dist < -0.4 && this.state.fist_passed === 1){\r\n                this.setState({fist_passed:0,\r\n                  fist_count:[...this.state.fist_count, current_moment]});\r\n              }\r\n            }\r\n            \r\n            if (this.state.fist_done === true ){\r\n              // Calculate relative distance\r\n              let total_move;\r\n              if (this.state.last_hand.length > 0){\r\n                let i;\r\n                let moved = [];\r\n                total_move = 0.0;\r\n                for (i = 0; i < 21; i++){\r\n                  let move_dist = this.norm(landmarks[i], this.state.last_hand[i]) / pawn_dist;\r\n                  total_move += move_dist;\r\n                  if ( move_dist > 0.05){\r\n                    moved = [...moved, i];\r\n                  }\r\n                }\r\n                drawHand_still (hand, ctx, moved);\r\n              }\r\n                // Record Hand Landmarks\r\n              this.setState({still_array:[...this.state.still_array, total_move],\r\n                still_time_array:[...this.state.still_time_array, current_moment],\r\n                hand_still_array:[...this.state.hand_still_array, hand],\r\n                last_hand: landmarks,\r\n              });\r\n            }\r\n            */\n\n          });\n        } else {\n          // Warning message for hand off screen\n          if (this.state.dead_frame > 9) writeText(ctx, {\n            text: 'Hand Off Screen',\n            x: 180,\n            y: 70\n          });\n          this.setState({\n            dead_frame: this.state.dead_frame + 1\n          });\n        }\n      }\n    }\n  }\n\n  async next_step() {\n    if (this.state.stage !== 8) this.setState({\n      stage: this.state.stage + 1,\n      wait: true\n    });else {\n      clearInterval(this.state.ID);\n      this.setState({\n        real_time_inferencing: false,\n        recording: false,\n        stage: 0\n      });\n      this.compose_chart();\n      const ctx = this.canvasRef.current.getContext(\"2d\");\n      ctx.clearRect(0, 0, this.canvasRef.current.width, this.canvasRef.current.height);\n    }\n  }\n\n  async stop_tapping() {\n    this.setState({\n      finger_done: true\n    });\n    this.setState({\n      wait: true\n    });\n  }\n\n  async stop_rotating() {\n    this.setState({\n      rotate_done: true\n    });\n    this.setState({\n      wait: true\n    });\n  }\n\n  async stop_gripping() {\n    this.setState({\n      fist_done: true\n    });\n    this.setState({\n      wait: true\n    });\n  }\n\n  stop_real_time_inference() {\n    clearInterval(this.state.ID);\n    this.setState({\n      real_time_inferencing: false,\n      finger_done: false,\n      rotate_done: false,\n      fist_done: false\n    });\n    this.compose_chart();\n    const ctx = this.canvasRef.current.getContext(\"2d\");\n    ctx.clearRect(0, 0, this.canvasRef.current.width, this.canvasRef.current.height);\n  }\n\n  async record_video() {\n    this.setState({\n      startAt: Date.now()\n    });\n    console.log(\"Handpose model loaded.\");\n    const Interval_ID = setInterval(() => {\n      this.concat_frame();\n    }, this.capture_interval);\n    this.setState({\n      ID: Interval_ID,\n      recording: true,\n      wait: true,\n      stage: this.state.stage + 1\n    });\n  }\n\n  async concat_frame() {\n    if (this.state.wait) {\n      this.setState({\n        wait_till: Date.now() + 3000,\n        wait: false\n      });\n    }\n\n    if (typeof this.webcamRef.current !== \"undefined\" && this.webcamRef.current !== null && this.webcamRef.current.video.readyState === 4) {\n      if (Date.now() < this.state.wait_till) {\n        //console.log(\"Waiting till \", this.state.wait_till);\n        //count down 3, 2, 1\n        const ctx = this.canvasRef.current.getContext(\"2d\");\n        if (this.state.wait_till - Date.now() < 250) ctx.clearRect(0, 0, this.canvasRef.current.width, this.canvasRef.current.height);else if (this.state.wait_till - Date.now() < 1000) writeText(ctx, {\n          text: '1',\n          x: 180,\n          y: 70\n        });else if (this.state.wait_till - Date.now() < 2000) writeText(ctx, {\n          text: '2',\n          x: 140,\n          y: 70\n        });else if (this.state.wait_till - Date.now() < 3000) writeText(ctx, {\n          text: '3',\n          x: 100,\n          y: 70\n        });\n      } else {\n        let current_moment = (Date.now() - this.state.startAt) / 1000;\n        const image = this.webcamRef.current.getScreenshot();\n        var img = document.createElement(\"img\");\n        img.src = image;\n\n        img.onload = function () {\n          if (this.state.finger_done === false) {\n            this.setState({\n              dist_record: [...this.state.dist_record, img],\n              dist_time_record: [...this.state.dist_time_record, current_moment]\n            });\n          } else if (this.state.finger_done === true && this.state.rotate_done === false) {\n            this.setState({\n              rotate_record: [...this.state.rotate_record, img],\n              rotate_time_record: [...this.state.rotate_time_record, current_moment]\n            });\n          } else if (this.state.rotate_done === true && this.state.fist_done === false) {\n            this.setState({\n              fist_record: [...this.state.fist_record, img],\n              fist_time_record: [...this.state.fist_time_record, current_moment]\n            });\n          }\n\n          if (this.state.fist_done === true) {\n            this.setState({\n              still_record: [...this.state.still_record, img],\n              still_time_record: [...this.state.still_time_record, current_moment]\n            });\n          }\n        }.bind(this);\n      }\n    }\n  }\n\n  async inference() {\n    require('@tensorflow/tfjs-backend-webgl');\n\n    const net = await handpose.load();\n    console.log(\"Handpose model loaded.\"); // Run prediction on recorded tapping data\n\n    for (let i = 0; i < this.state.dist_record.length; i++) {\n      const hand = await net.estimateHands(this.state.dist_record[i]);\n\n      if (hand.length > 0) {\n        hand.forEach(prediction => {\n          // Calculate relative distance\n          const landmarks = prediction.landmarks;\n          let index_dist = this.norm(landmarks[4], landmarks[8]);\n          let pawn_dist = this.norm(landmarks[0], landmarks[2]);\n          let current_dist = index_dist / pawn_dist; // Record distance\n\n          this.setState({\n            dist_array: [...this.state.dist_array, current_dist],\n            dist_time_array: [...this.state.dist_time_array, this.state.dist_time_record[i]],\n            hand_dist_array: [...this.state.hand_dist_array, hand]\n          }); // Perform counting\n\n          if (this.state.index_passed === 0 && current_dist - this.state.min_dist > 0.05) {\n            this.setState({\n              index_passed: 1,\n              max_dist: current_dist\n            });\n          }\n\n          if (this.state.index_passed === 1 && current_dist > this.state.max_dist) {\n            this.setState({\n              max_dist: current_dist\n            });\n          }\n\n          if (this.state.index_passed === 1 && this.state.max_dist - current_dist > 0.05) {\n            this.setState({\n              index_passed: 0,\n              min_dist: current_dist,\n              tap_count: [...this.state.tap_count, this.state.dist_time_record[i]]\n            });\n          }\n\n          if (this.state.index_passed === 0 && current_dist < this.state.min_dist) {\n            this.setState({\n              min_dist: current_dist\n            });\n          } //console.log(\"INDEX COUNT:\", this.state.tap_count);\n\n        });\n      }\n    } // Run prediction on recorded rotation data\n\n\n    for (let i = 0; i < this.state.rotate_record.length; i++) {\n      const hand = await net.estimateHands(this.state.rotate_record[i]);\n\n      if (hand.length > 0) {\n        hand.forEach(prediction => {\n          const landmarks = prediction.landmarks;\n          let pawn_dist = this.norm(landmarks[0], landmarks[12]);\n          let rotate_dist = (landmarks[2][0] - landmarks[17][0]) / pawn_dist; //this.setState({pawn_rotate_array:[...this.state.pawn_rotate_array, pawn_dist]});\n\n          this.setState({\n            rotate_array: [...this.state.rotate_array, rotate_dist],\n            rotate_time_array: [...this.state.rotate_time_array, this.state.rotate_time_record[i]],\n            hand_rotate_array: [...this.state.hand_rotate_array, hand]\n          });\n\n          if (this.state.rotate_passed === 0) {\n            if (rotate_dist >= 0.2) this.setState({\n              rotate_passed: 1\n            });\n            if (rotate_dist <= -0.2) this.setState({\n              rotate_passed: -1\n            });\n          }\n\n          if (this.state.rotate_passed === 1 && rotate_dist <= -0.2) {\n            this.setState({\n              rotate_passed: -1\n            });\n          }\n\n          if (this.state.rotate_passed === -1 && rotate_dist >= 0.2) {\n            this.setState({\n              rotate_passed: 1,\n              rotate_count: [...this.state.rotate_count, this.state.rotate_time_record[i]]\n            });\n          } //console.log(\"ROTATE COUNT:\", this.state.rotate_count);\n\n        });\n      }\n    } // Run prediction on recorded gripping data\n\n\n    for (let i = 0; i < this.state.fist_record.length; i++) {\n      const hand = await net.estimateHands(this.state.fist_record[i]);\n\n      if (hand.length > 0) {\n        hand.forEach(prediction => {\n          const landmarks = prediction.landmarks;\n          let pawn_dist = this.norm(landmarks[0], landmarks[2]);\n          let fist_dist = (landmarks[8][1] - landmarks[5][1] + (landmarks[12][1] - landmarks[9][1]) + (landmarks[16][1] - landmarks[13][1]) + (landmarks[20][1] - landmarks[17][1])) / (4 * pawn_dist); //this.setState({pawn_fist_array:[...this.state.pawn_fist_array, pawn_dist]});\n\n          this.setState({\n            fist_array: [...this.state.fist_array, fist_dist],\n            fist_time_array: [...this.state.fist_time_array, this.state.fist_time_record[i]],\n            hand_fist_array: [...this.state.hand_fist_array, hand]\n          });\n\n          if (fist_dist >= 0.0) {\n            this.setState({\n              fist_passed: 1\n            });\n          }\n\n          if (fist_dist < -0.4 && this.state.fist_passed === 1) {\n            this.setState({\n              fist_passed: 0\n            });\n            this.setState({\n              fist_count: [...this.state.fist_count, this.state.fist_time_record[i]]\n            });\n          } //console.log(\"FIST COUNT:\", this.state.fist_count);\n\n        });\n      }\n    } // Run prediction on recorded postural data\n\n\n    for (let i = 0; i < this.state.still_record.length; i++) {\n      const hand = await net.estimateHands(this.state.still_record[i]);\n\n      if (hand.length > 0) {\n        hand.forEach(prediction => {\n          const landmarks = prediction.landmarks;\n          let pawn_dist = this.norm(landmarks[0], landmarks[2]);\n          let total_move;\n          let i;\n          let moved = [];\n\n          if (this.state.last_hand.length > 0) {\n            total_move = 0.0;\n\n            for (i = 0; i < 21; i++) {\n              let move_dist = this.norm(landmarks[i], this.state.last_hand[i]) / pawn_dist;\n              total_move += move_dist;\n\n              if (move_dist > 0.1) {\n                moved = [...moved, i];\n              }\n            }\n          } //console.log(\"TOTAL MOVED:\", total_move);\n          //this.setState({pawn_fist_array:[...this.state.pawn_fist_array, pawn_dist]});\n\n\n          this.setState({\n            still_array: [...this.state.still_array, total_move],\n            still_time_array: [...this.state.still_time_array, this.state.still_time_record[i]],\n            hand_still_array: [...this.state.hand_still_array, hand],\n            last_hand: landmarks\n          });\n        });\n      }\n    }\n\n    this.setState({\n      record: []\n    });\n  }\n\n  async stop_record() {\n    clearInterval(this.state.ID);\n    await this.inference();\n    this.setState({\n      recording: false,\n      finger_done: false,\n      rotate_done: false,\n      fist_done: false\n    });\n    this.compose_chart();\n  }\n\n  render() {\n    const videoConstraints = {\n      facingMode: this.state.facingMode\n    };\n    let button_1 = null;\n    let button_2 = null;\n\n    switch (this.state.stage) {\n      case 1:\n        button_1 = /*#__PURE__*/_jsxDEV(Button, {\n          disabled: this.state.recording,\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: this.next_step,\n          children: \"Finish Finger Tapping Left (Real Time)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1200,\n          columnNumber: 20\n        }, this);\n        button_2 = /*#__PURE__*/_jsxDEV(Button, {\n          disabled: this.state.real_time_inferencing,\n          variant: \"contained\",\n          color: \"secondary\",\n          onClick: this.next_step,\n          children: \"Finish Finger Tapping Left (Record)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1201,\n          columnNumber: 20\n        }, this);\n        break;\n\n      case 2:\n        button_1 = /*#__PURE__*/_jsxDEV(Button, {\n          disabled: this.state.recording,\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: this.next_step,\n          children: \"Finish Finger Tapping Right (Real Time)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1204,\n          columnNumber: 20\n        }, this);\n        button_2 = /*#__PURE__*/_jsxDEV(Button, {\n          disabled: this.state.real_time_inferencing,\n          variant: \"contained\",\n          color: \"secondary\",\n          onClick: this.next_step,\n          children: \"Finish Finger Tapping Right (Record)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1205,\n          columnNumber: 20\n        }, this);\n        break;\n\n      case 3:\n        button_1 = /*#__PURE__*/_jsxDEV(Button, {\n          disabled: this.state.recording,\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: this.next_step,\n          children: \"Finish Rotation Left (Real Time)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1208,\n          columnNumber: 20\n        }, this);\n        button_2 = /*#__PURE__*/_jsxDEV(Button, {\n          disabled: this.state.real_time_inferencing,\n          variant: \"contained\",\n          color: \"secondary\",\n          onClick: this.next_step,\n          children: \"Finish Rotation Left (Record)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1209,\n          columnNumber: 20\n        }, this);\n        break;\n\n      case 4:\n        button_1 = /*#__PURE__*/_jsxDEV(Button, {\n          disabled: this.state.recording,\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: this.next_step,\n          children: \"Finish Rotation Right (Real Time)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1212,\n          columnNumber: 20\n        }, this);\n        button_2 = /*#__PURE__*/_jsxDEV(Button, {\n          disabled: this.state.real_time_inferencing,\n          variant: \"contained\",\n          color: \"secondary\",\n          onClick: this.next_step,\n          children: \"Finish Rotation Right (Record)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1213,\n          columnNumber: 20\n        }, this);\n        break;\n\n      case 5:\n        button_1 = /*#__PURE__*/_jsxDEV(Button, {\n          disabled: this.state.recording,\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: this.next_step,\n          children: \"Finish Gripping Left (Real Time)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1216,\n          columnNumber: 20\n        }, this);\n        button_2 = /*#__PURE__*/_jsxDEV(Button, {\n          disabled: this.state.real_time_inferencing,\n          variant: \"contained\",\n          color: \"secondary\",\n          onClick: this.next_step,\n          children: \"Finish Gripping Left (Record)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1217,\n          columnNumber: 20\n        }, this);\n        break;\n\n      case 6:\n        button_1 = /*#__PURE__*/_jsxDEV(Button, {\n          disabled: this.state.recording,\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: this.next_step,\n          children: \"Finish Gripping Right (Real Time)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1220,\n          columnNumber: 20\n        }, this);\n        button_2 = /*#__PURE__*/_jsxDEV(Button, {\n          disabled: this.state.real_time_inferencing,\n          variant: \"contained\",\n          color: \"secondary\",\n          onClick: this.next_step,\n          children: \"Finish Gripping Right (Record)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1221,\n          columnNumber: 20\n        }, this);\n        break;\n\n      case 7:\n        button_1 = /*#__PURE__*/_jsxDEV(Button, {\n          disabled: this.state.recording,\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: this.next_step,\n          children: \"Finish Resting Left (Real Time)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1224,\n          columnNumber: 20\n        }, this);\n        button_2 = /*#__PURE__*/_jsxDEV(Button, {\n          disabled: this.state.real_time_inferencing,\n          variant: \"contained\",\n          color: \"secondary\",\n          onClick: this.next_step,\n          children: \"Finish Resting Left (Record)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1225,\n          columnNumber: 20\n        }, this);\n        break;\n\n      case 8:\n        button_1 = /*#__PURE__*/_jsxDEV(Button, {\n          disabled: this.state.recording,\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: this.next_step,\n          children: \"Finish Resting Right (Real Time)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1228,\n          columnNumber: 20\n        }, this);\n        button_2 = /*#__PURE__*/_jsxDEV(Button, {\n          disabled: this.state.real_time_inferencing,\n          variant: \"contained\",\n          color: \"secondary\",\n          onClick: this.next_step,\n          children: \"Finish Resting Right (Record)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1229,\n          columnNumber: 20\n        }, this);\n        break;\n\n      default:\n        button_1 = /*#__PURE__*/_jsxDEV(Button, {\n          disabled: this.state.recording,\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: this.runHandpose,\n          children: \"Start Test (Real Time)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1232,\n          columnNumber: 20\n        }, this);\n        button_2 = /*#__PURE__*/_jsxDEV(Button, {\n          disabled: this.state.real_time_inferencing,\n          variant: \"contained\",\n          color: \"secondary\",\n          onClick: this.record_video,\n          children: \"Start Test (Record)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1233,\n          columnNumber: 20\n        }, this);\n        break;\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"App-header\",\n        children: [/*#__PURE__*/_jsxDEV(Webcam, {\n          ref: this.webcamRef,\n          videoConstraints: videoConstraints,\n          style: {\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 9,\n            width: \"auto\",\n            height: \"auto\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1239,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: this.canvasRef,\n          style: {\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 9,\n            width: \"auto\",\n            height: \"auto\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1254,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1238,\n        columnNumber: 9\n      }, this), this.state.button_mode ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.increment_tap1,\n          id: \"button1\",\n          children: \"Index Finger\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1271,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.increment_tap2,\n          id: \"button2\",\n          children: \"Middle Finger\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1272,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1270,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1275,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [button_1, button_2, this.state.real_time_inferencing ? this.state.finger_done ? this.state.rotate_done ? this.state.fist_done ? /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: this.stop_real_time_inference,\n          children: \"Calculate Result\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1285,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: this.stop_gripping,\n          children: \"Finish Gripping\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1287,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: this.stop_rotating,\n          children: \"Finish Rotating\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1290,\n          columnNumber: 19\n        }, this) : /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: this.stop_tapping,\n          children: \"Finish Tapping\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1293,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(Button, {\n          disabled: this.state.recording,\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: this.runHandpose,\n          children: \"Starting Real Time Inference\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1296,\n          columnNumber: 13\n        }, this), this.state.recording ? this.state.finger_done ? this.state.rotate_done ? this.state.fist_done ? /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"secondary\",\n          onClick: this.stop_record,\n          children: \"Calculate Result\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1303,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"secondary\",\n          onClick: this.stop_gripping,\n          children: \"Finish Gripping\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1305,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"secondary\",\n          onClick: this.stop_rotating,\n          children: \"Finish Rotating\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1308,\n          columnNumber: 19\n        }, this) : /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"secondary\",\n          onClick: this.stop_tapping,\n          children: \"Finish Tapping\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1311,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(Button, {\n          disabled: this.state.real_time_inferencing,\n          variant: \"contained\",\n          color: \"secondary\",\n          onClick: this.record_video,\n          children: \"Starting Recording\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1314,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          disabled: this.state.recording || this.state.real_time_inferencing,\n          variant: \"outlined\",\n          color: \"secondary\",\n          onClick: this.reset_counter,\n          children: \"Reset All\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1317,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1278,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h5\", {\n          children: [\"Finger Tapping Count:\", this.state.tap_count.length, \"\\xA0\\xA0\\xA0\\xA0 Rotate Count:\", this.state.rotate_count.length, \"\\xA0\\xA0\\xA0\\xA0 Gripping Count: \", this.state.fist_count.length, \"\\xA0\\xA0\\xA0\\xA0 FPS: \", this.state.avg_fps]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1322,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1321,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"small\", {\n          children: \"Enter Real Measurement (cm)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1330,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"real_measurement\",\n          onChange: this.compose_chart,\n          step: \"0.001\",\n          min: \"0\",\n          max: \"20\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1331,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          disabled: !this.state.chart_ready,\n          onClick: this.switch_style,\n          children: \"Switch Chart Style\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1332,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.switch_cam,\n          children: \"Switch Camera\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1333,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1329,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"small\", {\n          children: \"Experimental Features\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1336,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          disabled: this.state.recording || this.state.real_time_inferencing,\n          onClick: this.runPosenet,\n          children: \"PoseNet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1337,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          disabled: this.state.recording || this.state.real_time_inferencing,\n          onClick: this.runFacemesh,\n          children: \"Facemesh\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1338,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          disabled: this.state.recording || this.state.real_time_inferencing,\n          onClick: this.switch_button,\n          children: \"Switch On/Off Button\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1339,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1335,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [this.state.chart_ready ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Line, {\n            data: this.state.chart_data1\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1344,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            data: this.state.chart_data2\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1345,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            data: this.state.chart_data3\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1346,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            data: this.state.chart_data4\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1347,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1343,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1350,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            id: \"upload-json\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1353,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1352,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            id: \"upload-weights\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1356,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1355,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.getArray,\n          children: \"Get Array\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1358,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1341,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1237,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/wongh/Documents/GitHub/tfjs-app/src/App.js"],"names":["React","Button","handpose","posenet","facemesh","Webcam","drawHand_tap","drawHand_rotate","drawHand_fist","drawHand_still","writeText","drawKeypoints","drawSkeleton","drawMesh","sqrt","pow","Line","App","Component","constructor","props","sleep","milliseconds","Promise","resolve","setTimeout","exportToJson","objectData","filename","contentType","window","navigator","msSaveOrOpenBlob","blob","Blob","decodeURIComponent","encodeURI","JSON","stringify","type","a","document","createElement","download","href","encodeURIComponent","target","body","appendChild","click","removeChild","getArray","dict","tap_count","state","rotate_count","fist_count","dist_array","dist_time_array","dist_record","dist_time_record","rotate_array","rotate_time_array","rotate_record","rotate_time_record","fist_array","fist_time_array","fist_record","fist_time_record","still_array","still_time_array","still_record","still_time_record","startAt","avg_fps","hand_dist_array","hand_rotate_array","hand_fist_array","hand_still_array","ID","last_hand","index_passed","min_dist","max_dist","rotate_passed","last_pressed","real_time_inferencing","recording","button_mode","chart_ready","finger_done","rotate_done","fist_done","dist_array_L","dist_time_array_L","dist_record_L","dist_time_record_L","dist_array_R","dist_time_array_R","dist_record_R","dist_time_record_R","rotate_array_L","rotate_time_array_L","rotate_record_L","rotate_time_record_L","rotate_array_R","rotate_time_array_R","rotate_record_R","rotate_time_record_R","fist_array_L","fist_time_array_L","fist_record_L","fist_time_record_L","fist_array_R","fist_time_array_R","fist_record_R","fist_time_record_R","still_array_L","still_time_array_L","still_record_L","still_time_record_L","still_array_R","still_time_array_R","still_record_R","still_time_record_R","chart_data1","chart_data2","chart_data3","chart_data4","stage","wait","wait_till","Date","now","dead_frame","raw","facingMode","webcamRef","createRef","canvasRef","videoConstraints","capture_interval","runHandpose","bind","stop_real_time_inference","stop_tapping","stop_rotating","stop_gripping","stop_record","record_video","concat_frame","inference","reset_counter","increment_tap1","increment_tap2","switch_button","compose_chart","runPosenet","real_time_posenet","runFacemesh","real_time_facemesh","switch_style","switch_cam","next_step","setState","require","net","load","console","log","Interval_ID","setInterval","current","video","readyState","videoWidth","videoHeight","width","height","face","estimateFaces","ctx","getContext","pose","estimateSinglePose","time_array_1","count_array_1","label_1","time_array_2","count_array_2","label_2","time_array_3","count_array_3","label_3","time_array_4","count_array_4","label_4","real_dist","getElementById","value","length","slice","i","tmp","d_array","frames","Math","abs","total","j","data1","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","data","data2","data3","data4","current_moment","norm","lm1","lm2","clearInterval","clearRect","text","x","y","real_time_inference","hand","estimateHands","forEach","prediction","landmarks","pawn_dist","y_dist","index_dist","current_dist","rotate_dist","fist_dist","total_move","pinky_rest","ring_rest","middle_rest","index_rest","thumb_rest","hand_dist_array_L","hand_dist_array_R","hand_rotate_array_L","hand_rotate_array_R","fist_passed","hand_fist_array_L","hand_fist_array_R","moved","hand_still_array_L","hand_still_array_R","image","getScreenshot","img","src","onload","move_dist","record","render","button_1","button_2","position","marginLeft","marginRight","left","right","textAlign","zindex"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Button from '@material-ui/core/Button';\r\nimport * as handpose from \"@tensorflow-models/handpose\";\r\nimport * as posenet from \"@tensorflow-models/posenet\";\r\nimport * as facemesh from \"@tensorflow-models/facemesh\";\r\n//import * as tf from '@tensorflow/tfjs-core';\r\nimport Webcam from \"react-webcam\";\r\nimport \"./App.css\";\r\nimport { drawHand_tap, drawHand_rotate, drawHand_fist, drawHand_still, writeText, drawKeypoints, drawSkeleton, drawMesh } from \"./utilities\";\r\nimport { sqrt, pow } from \"mathjs\"\r\nimport {Line} from 'react-chartjs-2';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      ID : 0,\r\n      tap_count : [],\r\n      rotate_count : [],\r\n      fist_count : [],\r\n      last_hand: [],\r\n      index_passed : 0,\r\n      min_dist: 0,\r\n      max_dist: 99.0,\r\n      rotate_passed : 0,\r\n      last_pressed:0,\r\n\r\n      real_time_inferencing:false,\r\n      recording:false,\r\n      button_mode:false,\r\n      chart_ready:false,\r\n      finger_done : false,\r\n      rotate_done : false,\r\n      fist_done : false,\r\n\r\n      hand_dist_array : [],\r\n      hand_rotate_array : [],\r\n      hand_fist_array : [],\r\n      hand_still_array : [],\r\n\r\n      dist_array_L : [],\r\n      dist_time_array_L : [],\r\n      dist_record_L : [],\r\n      dist_time_record_L : [],\r\n      dist_array_R : [],\r\n      dist_time_array_R : [],\r\n      dist_record_R : [],\r\n      dist_time_record_R : [],\r\n\r\n      rotate_array_L : [],\r\n      rotate_time_array_L : [],\r\n      rotate_record_L : [],\r\n      rotate_time_record_L : [],\r\n      rotate_array_R : [],\r\n      rotate_time_array_R : [],\r\n      rotate_record_R : [],\r\n      rotate_time_record_R : [],\r\n\r\n      fist_array_L : [],\r\n      fist_time_array_L : [],\r\n      fist_record_L : [],\r\n      fist_time_record_L : [],\r\n      fist_array_R : [],\r\n      fist_time_array_R : [],\r\n      fist_record_R : [],\r\n      fist_time_record_R : [],\r\n\r\n      still_array_L : [],\r\n      still_time_array_L : [],\r\n      still_record_L : [],\r\n      still_time_record_L : [],\r\n      still_array_R : [],\r\n      still_time_array_R : [],\r\n      still_record_R : [],\r\n      still_time_record_R : [],\r\n\r\n      chart_data1 : null,\r\n      chart_data2 : null,\r\n      chart_data3 : null,\r\n      chart_data4 : null,\r\n\r\n      stage:0,\r\n      wait : false,\r\n      wait_till : 0,\r\n\r\n      startAt: Date.now(),\r\n      dead_frame: 0,\r\n      raw: true,\r\n      facingMode: \"user\",\r\n      avg_fps: 0,\r\n    };\r\n    this.webcamRef = React.createRef(null);\r\n    this.canvasRef = React.createRef(null);\r\n    this.videoConstraints = {facingMode: \"user\"};\r\n    this.capture_interval = 50;\r\n    this.runHandpose = this.runHandpose.bind(this);\r\n    this.stop_real_time_inference = this.stop_real_time_inference.bind(this);\r\n    this.stop_tapping = this.stop_tapping.bind(this);\r\n    this.stop_rotating = this.stop_rotating.bind(this);\r\n    this.stop_gripping = this.stop_gripping.bind(this);\r\n    this.stop_record = this.stop_record.bind(this);\r\n    this.record_video = this.record_video.bind(this);\r\n    this.concat_frame = this.concat_frame.bind(this);\r\n    this.inference = this.inference.bind(this);\r\n    this.reset_counter = this.reset_counter.bind(this);\r\n    this.increment_tap1 = this.increment_tap1.bind(this);\r\n    this.increment_tap2 = this.increment_tap2.bind(this);\r\n    this.switch_button = this.switch_button.bind(this);\r\n    this.compose_chart = this.compose_chart.bind(this);\r\n    this.runPosenet = this.runPosenet.bind(this);\r\n    this.real_time_posenet = this.real_time_posenet.bind(this);\r\n    this.runFacemesh = this.runFacemesh.bind(this);\r\n    this.real_time_facemesh = this.real_time_facemesh.bind(this);\r\n    this.switch_style = this.switch_style.bind(this);\r\n    this.switch_cam = this.switch_cam.bind(this);\r\n    this.getArray = this.getArray.bind(this);\r\n    this.exportToJson = this.exportToJson.bind(this);\r\n    this.next_step = this.next_step.bind(this);\r\n  }\r\n\r\n  switch_cam(){\r\n    if (this.state.facingMode === \"user\") this.setState({facingMode: \"environment\"});\r\n    else if (this.state.facingMode === \"environment\") this.setState({facingMode: \"user\"});\r\n  }\r\n\r\n  async runFacemesh(){\r\n    require('@tensorflow/tfjs-backend-webgl');\r\n    const net = await facemesh.load();\r\n    console.log(\"Facemesh model loaded.\");\r\n    this.setState({startAt:Date.now()});\r\n    const Interval_ID = setInterval(() => {\r\n      this.real_time_facemesh(net);\r\n    }, this.capture_interval);\r\n    this.setState({ID:Interval_ID,\r\n      real_time_inferencing:true});\r\n  }\r\n\r\n  async real_time_facemesh(net) {\r\n    if (this.state.wait){\r\n      this.setState({wait_till:Date.now()+3000});\r\n      this.setState({wait:false});\r\n    }\r\n    if (\r\n      typeof this.webcamRef.current !== \"undefined\" &&\r\n      this.webcamRef.current !== null &&\r\n      this.webcamRef.current.video.readyState === 4\r\n    ) {\r\n      const video = this.webcamRef.current.video;\r\n      const videoWidth = this.webcamRef.current.video.videoWidth;\r\n      const videoHeight = this.webcamRef.current.video.videoHeight;\r\n      this.webcamRef.current.video.width = videoWidth;\r\n      this.webcamRef.current.video.height = videoHeight;\r\n      this.canvasRef.current.width = videoWidth;\r\n      this.canvasRef.current.height = videoHeight;\r\n      const face = await net.estimateFaces(video);\r\n      const ctx = this.canvasRef.current.getContext(\"2d\");\r\n      drawMesh(face, ctx);\r\n    }\r\n  }\r\n\r\n  async runPosenet(){\r\n    require('@tensorflow/tfjs-backend-webgl');\r\n    const net = await posenet.load();\r\n    console.log(\"PoseNet model loaded.\");\r\n    this.setState({startAt:Date.now()});\r\n    const Interval_ID = setInterval(() => {\r\n      this.real_time_posenet(net);\r\n    }, this.capture_interval);\r\n    this.setState({ID:Interval_ID,\r\n      real_time_inferencing:true});\r\n  }\r\n\r\n  async real_time_posenet(net) {\r\n    if (this.state.wait){\r\n      this.setState({wait_till:Date.now()+3000,\r\n        wait:false});\r\n    }\r\n    if (\r\n      typeof this.webcamRef.current !== \"undefined\" &&\r\n      this.webcamRef.current !== null &&\r\n      this.webcamRef.current.video.readyState === 4\r\n    ) {\r\n      const video = this.webcamRef.current.video;\r\n      const videoWidth = this.webcamRef.current.video.videoWidth;\r\n      const videoHeight = this.webcamRef.current.video.videoHeight;\r\n      this.webcamRef.current.video.width = videoWidth;\r\n      this.webcamRef.current.video.height = videoHeight;\r\n      this.canvasRef.current.width = videoWidth;\r\n      this.canvasRef.current.height = videoHeight;\r\n      const pose = await net.estimateSinglePose(video);\r\n      const ctx = this.canvasRef.current.getContext(\"2d\");\r\n      drawKeypoints(pose[\"keypoints\"], 0.6, ctx);\r\n      drawSkeleton(pose[\"keypoints\"], 0.7, ctx);\r\n    }\r\n  }\r\n\r\n  async switch_style(){\r\n    await this.setState({raw: !this.state.raw});\r\n    this.compose_chart();\r\n  }\r\n\r\n  compose_chart(){\r\n    let time_array_1 = [];\r\n    let count_array_1 = [];\r\n    let label_1 = \"\";\r\n    let time_array_2 = [];\r\n    let count_array_2 = [];\r\n    let label_2 = \"\";\r\n    let time_array_3 = [];\r\n    let count_array_3 = [];\r\n    let label_3 = \"\";\r\n    let time_array_4 = [];\r\n    let count_array_4 = [];\r\n    let label_4 = \"\";\r\n    let real_dist = document.getElementById(\"real_measurement\").value;\r\n    let avg_fps = this.state.dist_time_array.length / \r\n                 (this.state.dist_time_array[this.state.dist_time_array.length - 1] - \r\n                  this.state.dist_time_array[0]);\r\n    this.setState({avg_fps:avg_fps});\r\n    \r\n    if (this.state.raw){\r\n      // Print Data Raw\r\n      time_array_1 = [...this.state.dist_time_array];\r\n      count_array_1 = [...this.state.dist_array];\r\n      time_array_2 = [...this.state.rotate_time_array];\r\n      count_array_2 = [...this.state.rotate_array];\r\n      time_array_3 = [...this.state.fist_time_array];\r\n      count_array_3 = [...this.state.fist_array];\r\n      if (this.state.still_array.length > 100){\r\n        time_array_4 = this.state.still_time_array.slice(20, this.state.still_time_array.length-20);\r\n        count_array_4 = this.state.still_array.slice(20, this.state.still_array.length-20);\r\n      }\r\n      else {\r\n        time_array_4 = [...this.state.still_time_array];\r\n        count_array_4 = [...this.state.still_array];\r\n      }\r\n      \r\n      \r\n      // Change to Real Life Measurement\r\n      if (real_dist > 0.0001){\r\n        label_1 = \"Distance between Index and Thumb (cm)\";\r\n        label_2 = \"Relative Location between Left and Right of Hand (cm)\";\r\n        label_3 = \"Relative Location between Tip of Fingers and Finger Joints (cm)\";\r\n        label_4 = \"Relative Location Moved (cm)\";\r\n        let i = 0;\r\n        let tmp = 0;\r\n        for (i = 0; i < count_array_1.length; i++){\r\n          tmp = count_array_1[i];\r\n          count_array_1[i] = tmp*real_dist;\r\n        }\r\n        for (i = 0; i < count_array_2.length; i++){\r\n          tmp = count_array_2[i];\r\n          count_array_2[i] = tmp*real_dist;\r\n        }\r\n        for (i = 0; i < count_array_3.length; i++){\r\n          tmp = count_array_3[i];\r\n          count_array_3[i] = tmp*real_dist;\r\n        }\r\n        for (i = 0; i < count_array_4.length; i++){\r\n          tmp = count_array_4[i];\r\n          count_array_4[i] = tmp*real_dist;\r\n        }\r\n      }\r\n      else{\r\n        label_1 = \"Distance between Index and Thumb (Relative Scale)\";\r\n        label_2 = \"Relative Location between Left and Right of Hand (Relative Scale)\";\r\n        label_3 = \"Relative Location between Tip of Fingers and Finger Joints (Relative Scale)\";\r\n        label_4 = \"Relative Location Moved (Relative Scale)\";\r\n      }\r\n    }\r\n    else{\r\n      // Recalculate Tapping Data\r\n      console.log(\"Use Avg\");\r\n      let d_array = [];\r\n      let frames = (1000/this.capture_interval);\r\n      for (let i = 1; i < this.state.dist_array.length; i++) d_array = [...d_array, Math.abs(this.state.dist_array[i-1] - this.state.dist_array[i])];\r\n      for (let i = 0; i < d_array.length - frames; i++){\r\n        let total = 0.0;\r\n        for (let j = 0; j < frames; j++) total += d_array[i+j];\r\n        count_array_1 = [...count_array_1, total / frames];\r\n        time_array_1 = [...time_array_1, this.state.dist_time_array[i]];\r\n      }\r\n\r\n      d_array = [];\r\n      for (let i = 1; i < this.state.rotate_array.length; i++) d_array = [...d_array, Math.abs(this.state.rotate_array[i-1] - this.state.rotate_array[i])];\r\n      for (let i = 0; i < d_array.length - frames; i++){\r\n        let total = 0.0;\r\n        for (let j = 0; j < frames; j++) total += d_array[i+j];\r\n        count_array_2 = [...count_array_2, total / frames];\r\n        time_array_2 = [...time_array_2, this.state.rotate_time_array[i]];\r\n      }\r\n\r\n      d_array = [];\r\n      for (let i = 1; i < this.state.fist_array.length; i++) d_array = [...d_array, Math.abs(this.state.fist_array[i-1] - this.state.fist_array[i])];\r\n      for (let i = 0; i < d_array.length - frames; i++){\r\n        let total = 0.0;\r\n        for (let j = 0; j < frames; j++) total += d_array[i+j];\r\n        count_array_3 = [...count_array_3, total / frames];\r\n        time_array_3 = [...time_array_3, this.state.fist_time_array[i]];\r\n      }\r\n\r\n      d_array = [];\r\n      for (let i = 1; i < this.state.still_array.length; i++) d_array = [...d_array, Math.abs(this.state.still_array[i-1] - this.state.still_array[i])];\r\n      for (let i = 0; i < d_array.length - frames; i++){\r\n        let total = 0.0;\r\n        for (let j = 0; j < frames; j++) total += d_array[i+j];\r\n        count_array_4 = [...count_array_4, total / frames];\r\n        time_array_4 = [...time_array_4, this.state.still_time_array[i]];\r\n      }\r\n      if (this.state.still_array.length > 100){\r\n        time_array_4 = this.state.still_time_array.slice(20, this.state.still_time_array.length-20);\r\n        count_array_4 = this.state.still_array.slice(20, this.state.still_array.length-20);\r\n      }\r\n      else {\r\n        time_array_4 = [...this.state.still_time_array];\r\n        count_array_4 = [...this.state.still_array];\r\n      }\r\n\r\n      // Change to Real Life Measurement\r\n      if (real_dist > 0.0001){\r\n        label_1 = \"Average Distance between Index and Thumb per Second (cm)\";\r\n        label_2 = \"Average Distance between Left and Right of Hand per Second (cm)\";\r\n        label_3 = \"Average Distance Location between Tip of Fingers and Finger Joints per Second (cm)\";\r\n        label_4 = \"Relative Location Moved per Second (cm)\";\r\n        let i = 0;\r\n        let tmp = 0;\r\n        for (i = 0; i < count_array_1.length; i++){\r\n          tmp = count_array_1[i];\r\n          count_array_1[i] = tmp*real_dist;\r\n        }\r\n        for (i = 0; i < count_array_2.length; i++){\r\n          tmp = count_array_2[i];\r\n          count_array_2[i] = tmp*real_dist;\r\n        }\r\n        for (i = 0; i < count_array_3.length; i++){\r\n          tmp = count_array_3[i];\r\n          count_array_3[i] = tmp*real_dist;\r\n        }\r\n        for (i = 0; i < count_array_4.length; i++){\r\n          tmp = count_array_4[i];\r\n          count_array_4[i] = tmp*real_dist;\r\n        }\r\n      }\r\n      else{\r\n        label_1 = \"Average Distance between Index and Thumb per Second (Relative Scale)\";\r\n        label_2 = \"Average Distance between Left and Right of Hand per Second (Relative Scale)\";\r\n        label_3 = \"Average Distance Location between Tip of Fingers and Finger Joints per Second (Relative Scale)\";\r\n        label_4 = \"Relative Location Moved per Second (Relative Scale)\";\r\n      }\r\n    }\r\n\r\n    // Setup Graphs\r\n    const data1 = {\r\n      labels: time_array_1,\r\n      datasets: [        \r\n        {\r\n          label: label_1,\r\n          fill: false,\r\n          lineTension: 0.3,\r\n          backgroundColor: 'rgba(75,192,192,0.4)',\r\n          borderColor: 'rgba(75,192,192,1)',\r\n          borderCapStyle: 'butt',\r\n          borderDash: [],\r\n          borderDashOffset: 0.0,\r\n          borderJoinStyle: 'miter',\r\n          pointBorderColor: 'rgba(75,192,192,1)',\r\n          pointBackgroundColor: '#fff',\r\n          pointBorderWidth: 1,\r\n          pointHoverRadius: 5,\r\n          pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n          pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n          pointHoverBorderWidth: 2,\r\n          pointRadius: 1,\r\n          pointHitRadius: 10,\r\n          data: count_array_1\r\n        }\r\n      ]\r\n    };\r\n    const data2 = {\r\n      labels: time_array_2,\r\n      datasets: [        \r\n        {\r\n          label: label_2,\r\n          fill: false,\r\n          lineTension: 0.1,\r\n          backgroundColor: 'rgba(192,75,192,0.4)',\r\n          borderColor: 'rgba(192,75,192,1)',\r\n          borderCapStyle: 'butt',\r\n          borderDash: [],\r\n          borderDashOffset: 0.0,\r\n          borderJoinStyle: 'miter',\r\n          pointBorderColor: 'rgba(192,75,192,1)',\r\n          pointBackgroundColor: '#fff',\r\n          pointBorderWidth: 1,\r\n          pointHoverRadius: 5,\r\n          pointHoverBackgroundColor: 'rgba(192,75,192,1)',\r\n          pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n          pointHoverBorderWidth: 2,\r\n          pointRadius: 1,\r\n          pointHitRadius: 10,\r\n          data: count_array_2 \r\n        },\r\n      ]\r\n    };\r\n    const data3 = {\r\n      labels: time_array_3,\r\n      datasets: [        \r\n        {\r\n          label: label_3,\r\n          fill: false,\r\n          lineTension: 0.1,\r\n          backgroundColor: 'rgba(192,192,75,0.4)',\r\n          borderColor: 'rgba(192,192,75,1)',\r\n          borderCapStyle: 'butt',\r\n          borderDash: [],\r\n          borderDashOffset: 0.0,\r\n          borderJoinStyle: 'miter',\r\n          pointBorderColor: 'rgba(192,192,75,1)',\r\n          pointBackgroundColor: '#fff',\r\n          pointBorderWidth: 1,\r\n          pointHoverRadius: 5,\r\n          pointHoverBackgroundColor: 'rgba(192,192,75,1)',\r\n          pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n          pointHoverBorderWidth: 2,\r\n          pointRadius: 1,\r\n          pointHitRadius: 10,\r\n          data: count_array_3\r\n        }\r\n      ]\r\n    };\r\n    const data4 = {\r\n      labels: time_array_4,\r\n      datasets: [        \r\n        {\r\n          label: label_4,\r\n          fill: false,\r\n          lineTension: 0.1,\r\n          backgroundColor: 'rgba(75,192,75,0.4)',\r\n          borderColor: 'rgba(75,192,75,1)',\r\n          borderCapStyle: 'butt',\r\n          borderDash: [],\r\n          borderDashOffset: 0.0,\r\n          borderJoinStyle: 'miter',\r\n          pointBorderColor: 'rgba(75,192,75,1)',\r\n          pointBackgroundColor: '#fff',\r\n          pointBorderWidth: 1,\r\n          pointHoverRadius: 5,\r\n          pointHoverBackgroundColor: 'rgba(75,192,75,1)',\r\n          pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n          pointHoverBorderWidth: 2,\r\n          pointRadius: 1,\r\n          pointHitRadius: 10,\r\n          data: count_array_4\r\n        }\r\n      ]\r\n    };\r\n    this.setState({chart_data1:data1});\r\n    this.setState({chart_data2:data2});\r\n    this.setState({chart_data3:data3});\r\n    this.setState({chart_data4:data4});\r\n    this.setState({chart_ready:true});\r\n  }\r\n\r\n  switch_button(){\r\n    if (this.state.button_mode === true){\r\n      this.setState({button_mode:false});\r\n      this.compose_chart();\r\n    }\r\n    else{\r\n      this.setState({button_mode:true})\r\n    }\r\n  }\r\n\r\n  increment_tap1(){\r\n    if (this.state.last_pressed !== 1){\r\n      let current_moment = (Date.now() - this.state.startAt)/1000\r\n      this.setState({last_pressed:1})\r\n      this.setState({dist_array:[...this.state.dist_array, 1.0]});\r\n      this.setState({dist_time_array:[...this.state.dist_time_array, current_moment]});\r\n      this.setState({tap_count:[...this.state.tap_count, current_moment]});\r\n    }\r\n  }\r\n\r\n  increment_tap2(){\r\n    if (this.state.last_pressed !== 2){\r\n      let current_moment = (Date.now() - this.state.startAt)/1000\r\n      this.setState({last_pressed:2})\r\n      this.setState({dist_array:[...this.state.dist_array, 1.0]});\r\n      this.setState({dist_time_array:[...this.state.dist_time_array, current_moment]});\r\n      this.setState({tap_count:[...this.state.tap_count, current_moment]});\r\n    }\r\n  }\r\n\r\n  norm(lm1, lm2){\r\n    return sqrt(pow(lm1[0]-lm2[0], 2)+pow(lm1[1]-lm2[1], 2))\r\n  }\r\n\r\n  reset_counter(){\r\n    clearInterval(this.state.ID);\r\n    const ctx = this.canvasRef.current.getContext(\"2d\");\r\n    ctx.clearRect(0,0, this.canvasRef.current.width, this.canvasRef.current.height);\r\n    this.setState({\r\n      ID : 0,\r\n      tap_count : [],\r\n      rotate_count : [],\r\n      fist_count : [],\r\n      index_passed : 0,\r\n      min_dist: 0,\r\n      max_dist: 5.0,\r\n      rotate_passed : 0,\r\n      last_pressed:0,\r\n      real_time_inferencing:false,\r\n      recording:false,\r\n      button_mode:false,\r\n      chart_ready:false,\r\n      finger_done : false,\r\n      rotate_done : false,\r\n      fist_done : false,\r\n      hand_dist_array : [],\r\n      hand_rotate_array : [],\r\n      hand_fist_array : [],\r\n      hand_still_array : [],\r\n      dist_array : [],\r\n      dist_time_array : [],\r\n      dist_record : [],\r\n      dist_time_record : [],\r\n      rotate_array : [],\r\n      rotate_time_array : [],\r\n      rotate_record : [],\r\n      rotate_time_record : [],\r\n      fist_array : [],\r\n      fist_time_array : [],\r\n      fist_record : [],\r\n      fist_time_record : [],\r\n      still_array : [],\r\n      still_time_array : [],\r\n      still_record : [],\r\n      still_time_record : [],\r\n      chart_data1 : null,\r\n      chart_data2 : null,\r\n      chart_data3 : null,\r\n      wait : false,\r\n      wait_till : 0,\r\n      startAt: Date.now(),\r\n      dead_frame: 0,\r\n      raw: true,\r\n      facingMode: \"user\",\r\n      avg_fps: 0,\r\n    });\r\n  }\r\n\r\n  sleep = (milliseconds) => {\r\n    return new Promise(resolve => setTimeout(resolve, milliseconds))\r\n  }\r\n\r\n  async runHandpose() {\r\n    const ctx = this.canvasRef.current.getContext(\"2d\");\r\n    writeText(ctx, { text: 'Loading', x: 180, y: 70 });\r\n    require('@tensorflow/tfjs-backend-webgl');\r\n    const net = await handpose.load();\r\n    ctx.clearRect(0,0, this.canvasRef.current.width, this.canvasRef.current.height);\r\n    //const uploadJSONInput = document.getElementById('upload-json');\r\n    //const uploadWeightsInput = document.getElementById('upload-weights');\r\n    //const model = await tf.loadLayersModel(tf.io.browserFiles([uploadJSONInput.files[0], uploadWeightsInput.files[0]]));\r\n    console.log(\"Handpose model loaded.\");\r\n    this.setState({startAt:Date.now()});\r\n    const Interval_ID = setInterval(() => {\r\n      this.real_time_inference(net);\r\n    }, this.capture_interval);\r\n    this.setState({ID:Interval_ID,\r\n      real_time_inferencing:true,\r\n      wait:true,\r\n      stage:this.state.stage + 1});\r\n  };\r\n\r\n  async real_time_inference(net) {\r\n    if (this.state.wait){\r\n      this.setState({wait_till:Date.now()+3000});\r\n      this.setState({wait:false});\r\n    }\r\n    if (\r\n      typeof this.webcamRef.current !== \"undefined\" &&\r\n      this.webcamRef.current !== null &&\r\n      this.webcamRef.current.video.readyState === 4\r\n    ) {\r\n      const video = this.webcamRef.current.video;\r\n      const videoWidth = this.webcamRef.current.video.videoWidth;\r\n      const videoHeight = this.webcamRef.current.video.videoHeight;\r\n      this.webcamRef.current.video.width = videoWidth;\r\n      this.webcamRef.current.video.height = videoHeight;\r\n      this.canvasRef.current.width = videoWidth;\r\n      this.canvasRef.current.height = videoHeight;\r\n      const hand = await net.estimateHands(video);\r\n      const ctx = this.canvasRef.current.getContext(\"2d\");\r\n      \r\n      //check if waiting\r\n      if (Date.now() < this.state.wait_till){\r\n        if (hand.length > 0) drawHand_tap (hand, ctx);\r\n        \r\n        //count down 3, 2, 1\r\n        if (this.state.wait_till - Date.now() < 1000) writeText(ctx, { text: '1', x: 180, y: 70 });\r\n        else if (this.state.wait_till - Date.now() < 2000) writeText(ctx, { text: '2', x: 140, y: 70 });\r\n        else if (this.state.wait_till - Date.now() < 3000) writeText(ctx, { text: '3', x: 100, y: 70 });\r\n      }\r\n      else {\r\n        if (hand.length > 0){\r\n          hand.forEach((prediction) => {\r\n            this.setState({dead_frame: 0});\r\n            const landmarks = prediction.landmarks\r\n\r\n            let pawn_dist = this.norm(landmarks[0], landmarks[2]);\r\n            let y_dist = this.norm(landmarks[0], landmarks[12]);\r\n            let current_moment = (Date.now() - this.state.startAt)/1000\r\n            let index_dist = null;\r\n            let current_dist = null;\r\n            let rotate_dist = null;\r\n            let fist_dist = null;\r\n            let total_move = null;\r\n            let pinky_rest = null;\r\n            let ring_rest = null;\r\n            let middle_rest = null;\r\n            let index_rest = null;\r\n            let thumb_rest = null;\r\n\r\n            switch (this.state.stage){\r\n              case 1:\r\n                drawHand_tap (hand, ctx);\r\n                index_dist = this.norm(landmarks[4], landmarks[8]);\r\n                current_dist = index_dist/pawn_dist;\r\n                this.setState({dist_array_L:[...this.state.dist_array_L, current_dist],\r\n                  dist_time_array_L:[...this.state.dist_time_array_L, current_moment],\r\n                  hand_dist_array_L:[...this.state.hand_dist_array_L, hand]});\r\n                if (this.state.index_passed === 0 && (current_dist - this.state.min_dist) > 0.2){\r\n                  this.setState({index_passed:1,\r\n                    max_dist: current_dist});\r\n                }\r\n                if (this.state.index_passed === 1 && current_dist > this.state.max_dist){\r\n                  this.setState({max_dist: current_dist});\r\n                }\r\n                if (this.state.index_passed === 1 && (this.state.max_dist - current_dist) > 0.2){\r\n                  this.setState({index_passed:0,\r\n                    min_dist: current_dist,\r\n                    tap_count:[...this.state.tap_count, current_moment]});\r\n                }\r\n                if (this.state.index_passed === 0 && current_dist < this.state.min_dist){\r\n                  this.setState({min_dist: current_dist});\r\n                }\r\n                break;\r\n              case 2:\r\n                drawHand_tap (hand, ctx);\r\n                index_dist = this.norm(landmarks[4], landmarks[8]);\r\n                current_dist = index_dist/pawn_dist;\r\n                this.setState({dist_array_R:[...this.state.dist_array_R, current_dist],\r\n                  dist_time_array_R:[...this.state.dist_time_array_R, current_moment],\r\n                  hand_dist_array_R:[...this.state.hand_dist_array_R, hand]});\r\n                if (this.state.index_passed === 0 && (current_dist - this.state.min_dist) > 0.2){\r\n                  this.setState({index_passed:1,\r\n                    max_dist: current_dist});\r\n                }\r\n                if (this.state.index_passed === 1 && current_dist > this.state.max_dist){\r\n                  this.setState({max_dist: current_dist});\r\n                }\r\n                if (this.state.index_passed === 1 && (this.state.max_dist - current_dist) > 0.2){\r\n                  this.setState({index_passed:0,\r\n                    min_dist: current_dist,\r\n                    tap_count:[...this.state.tap_count, current_moment]});\r\n                }\r\n                if (this.state.index_passed === 0 && current_dist < this.state.min_dist){\r\n                  this.setState({min_dist: current_dist});\r\n                }\r\n                break;\r\n              case 3:\r\n                drawHand_rotate (hand, ctx, this.state.rotate_passed);\r\n                rotate_dist = (landmarks[2][0] - landmarks[17][0]) / y_dist;\r\n                this.setState({rotate_array_L:[...this.state.rotate_array_L, rotate_dist],\r\n                  rotate_time_array_L:[...this.state.rotate_time_array_L, current_moment],\r\n                  hand_rotate_array_L:[...this.state.hand_rotate_array_L, hand]});\r\n                if (this.state.rotate_passed === 0){\r\n                  if (rotate_dist >= 0.2) this.setState({rotate_passed:1});\r\n                  if (rotate_dist <= -0.2) this.setState({rotate_passed:-1});\r\n                }\r\n                if (this.state.rotate_passed === 1 && rotate_dist <= -0.2){\r\n                  this.setState({rotate_passed:-1});\r\n                }\r\n                if (this.state.rotate_passed === -1 && rotate_dist >= 0.2){\r\n                  this.setState({rotate_passed:1,\r\n                    rotate_count:[...this.state.rotate_count, current_moment]});\r\n                }\r\n                break;\r\n              case 4:\r\n                drawHand_rotate (hand, ctx, this.state.rotate_passed);\r\n                rotate_dist = (landmarks[2][0] - landmarks[17][0]) / y_dist;\r\n                this.setState({rotate_array_R:[...this.state.rotate_array_R, rotate_dist],\r\n                  rotate_time_array_R:[...this.state.rotate_time_array_R, current_moment],\r\n                  hand_rotate_array_R:[...this.state.hand_rotate_array_R, hand]});\r\n                if (this.state.rotate_passed === 0){\r\n                  if (rotate_dist >= 0.2) this.setState({rotate_passed:1});\r\n                  if (rotate_dist <= -0.2) this.setState({rotate_passed:-1});\r\n                }\r\n                if (this.state.rotate_passed === 1 && rotate_dist <= -0.2){\r\n                  this.setState({rotate_passed:-1});\r\n                }\r\n                if (this.state.rotate_passed === -1 && rotate_dist >= 0.2){\r\n                  this.setState({rotate_passed:1,\r\n                    rotate_count:[...this.state.rotate_count, current_moment]});\r\n                }\r\n                break;\r\n              case 5:\r\n                drawHand_fist (hand, ctx, this.state.fist_passed);\r\n                fist_dist =((landmarks[8][1] - landmarks[5][1])+\r\n                            (landmarks[12][1] - landmarks[9][1])+\r\n                            (landmarks[16][1] - landmarks[13][1])+\r\n                            (landmarks[20][1] - landmarks[17][1]))/\r\n                            (4*pawn_dist)\r\n                this.setState({fist_array_L:[...this.state.fist_array_L, fist_dist],\r\n                  fist_time_array_L:[...this.state.fist_time_array_L, current_moment],\r\n                  hand_fist_array_L:[...this.state.hand_fist_array_L, hand]});\r\n                if (fist_dist >= 0.0){this.setState({fist_passed:1})}\r\n                if (fist_dist < -0.4 && this.state.fist_passed === 1){\r\n                  this.setState({fist_passed:0,\r\n                    fist_count:[...this.state.fist_count, current_moment]});\r\n                }\r\n                break;\r\n              case 6:\r\n                drawHand_fist (hand, ctx, this.state.fist_passed);\r\n                fist_dist =((landmarks[8][1] - landmarks[5][1])+\r\n                            (landmarks[12][1] - landmarks[9][1])+\r\n                            (landmarks[16][1] - landmarks[13][1])+\r\n                            (landmarks[20][1] - landmarks[17][1]))/\r\n                            (4*pawn_dist)\r\n                this.setState({fist_array_R:[...this.state.fist_array_R, fist_dist],\r\n                  fist_time_array_R:[...this.state.fist_time_array_R, current_moment],\r\n                  hand_fist_array_R:[...this.state.hand_fist_array_R, hand]});\r\n                if (fist_dist >= 0.0){this.setState({fist_passed:1})}\r\n                if (fist_dist < -0.4 && this.state.fist_passed === 1){\r\n                  this.setState({fist_passed:0,\r\n                    fist_count:[...this.state.fist_count, current_moment]});\r\n                }\r\n                break;\r\n              case 7:\r\n                total_move = 0.0;\r\n                if (this.state.last_hand.length > 0){\r\n                  let moved = [];\r\n                  pinky_rest = this.norm(landmarks[0], landmarks[4]) - this.norm(this.state.last_hand[0], this.state.last_hand[4])/pawn_dist;\r\n                  ring_rest = this.norm(landmarks[0], landmarks[8]) - this.norm(this.state.last_hand[0], this.state.last_hand[8])/pawn_dist;\r\n                  middle_rest = this.norm(landmarks[0], landmarks[12]) - this.norm(this.state.last_hand[0], this.state.last_hand[12])/pawn_dist;\r\n                  index_rest = this.norm(landmarks[0], landmarks[16]) - this.norm(this.state.last_hand[0], this.state.last_hand[16])/pawn_dist;\r\n                  thumb_rest = this.norm(landmarks[0], landmarks[20]) - this.norm(this.state.last_hand[0], this.state.last_hand[20])/pawn_dist;\r\n                  if (pinky_rest > 0.05) moved = [...moved, 4];\r\n                  if (ring_rest > 0.05) moved = [...moved, 8];\r\n                  if (middle_rest > 0.05) moved = [...moved, 12];\r\n                  if (index_rest > 0.05) moved = [...moved, 16];\r\n                  if (thumb_rest > 0.05) moved = [...moved, 20];\r\n                  total_move += pinky_rest+ring_rest+middle_rest+index_rest+thumb_rest;\r\n                  drawHand_still (hand, ctx, moved);\r\n                }\r\n                this.setState({still_array_L:[...this.state.still_array_L, total_move],\r\n                  still_time_array_L:[...this.state.still_time_array_L, current_moment],\r\n                  hand_still_array_L:[...this.state.hand_still_array_L, hand],\r\n                  last_hand: landmarks,\r\n                });\r\n                break;\r\n              case 8:\r\n                total_move = 0.0;\r\n                if (this.state.last_hand.length > 0){\r\n                  let moved = [];\r\n                  pinky_rest = this.norm(landmarks[0], landmarks[4]) - this.norm(this.state.last_hand[0], this.state.last_hand[4])/pawn_dist;\r\n                  ring_rest = this.norm(landmarks[0], landmarks[8]) - this.norm(this.state.last_hand[0], this.state.last_hand[8])/pawn_dist;\r\n                  middle_rest = this.norm(landmarks[0], landmarks[12]) - this.norm(this.state.last_hand[0], this.state.last_hand[12])/pawn_dist;\r\n                  index_rest = this.norm(landmarks[0], landmarks[16]) - this.norm(this.state.last_hand[0], this.state.last_hand[16])/pawn_dist;\r\n                  thumb_rest = this.norm(landmarks[0], landmarks[20]) - this.norm(this.state.last_hand[0], this.state.last_hand[20])/pawn_dist;\r\n                  if (pinky_rest > 0.05) moved = [...moved, 4];\r\n                  if (ring_rest > 0.05) moved = [...moved, 8];\r\n                  if (middle_rest > 0.05) moved = [...moved, 12];\r\n                  if (index_rest > 0.05) moved = [...moved, 16];\r\n                  if (thumb_rest > 0.05) moved = [...moved, 20];\r\n                  total_move += pinky_rest+ring_rest+middle_rest+index_rest+thumb_rest;\r\n                  drawHand_still (hand, ctx, moved);\r\n                }\r\n                this.setState({still_array_R:[...this.state.still_array_R, total_move],\r\n                  still_time_array_R:[...this.state.still_time_array_R, current_moment],\r\n                  hand_still_array_R:[...this.state.hand_still_array_R, hand],\r\n                  last_hand: landmarks,\r\n                });\r\n                break;\r\n              default:\r\n                console.log(\"Should Not Print\");\r\n                break;\r\n            }\r\n            /*\r\n            if (this.state.finger_done === false){\r\n              drawHand_tap (hand, ctx);\r\n              // Calculate relative distance\r\n              let index_dist = this.norm(landmarks[4], landmarks[8]);\r\n              let current_dist = index_dist/pawn_dist;\r\n\r\n              // Record distance\r\n              this.setState({dist_array:[...this.state.dist_array, current_dist],\r\n                dist_time_array:[...this.state.dist_time_array, current_moment],\r\n                hand_dist_array:[...this.state.hand_dist_array, hand]});\r\n              \r\n              // Perform counting\r\n              if (this.state.index_passed === 0 && (current_dist - this.state.min_dist) > 0.2){\r\n                this.setState({index_passed:1,\r\n                  max_dist: current_dist});\r\n              }\r\n              if (this.state.index_passed === 1 && current_dist > this.state.max_dist){\r\n                this.setState({max_dist: current_dist});\r\n              }\r\n              if (this.state.index_passed === 1 && (this.state.max_dist - current_dist) > 0.2){\r\n                this.setState({index_passed:0,\r\n                  min_dist: current_dist,\r\n                  tap_count:[...this.state.tap_count, current_moment]});\r\n              }\r\n              if (this.state.index_passed === 0 && current_dist < this.state.min_dist){\r\n                this.setState({min_dist: current_dist});\r\n              }\r\n            }\r\n            \r\n            if (this.state.finger_done === true && this.state.rotate_done === false){\r\n              drawHand_rotate (hand, ctx, this.state.rotate_passed);\r\n              // Calculate relative distance\r\n              let rotate_dist = (landmarks[2][0] - landmarks[17][0]) / y_dist;\r\n\r\n              // Record distance\r\n              this.setState({rotate_array:[...this.state.rotate_array, rotate_dist],\r\n                rotate_time_array:[...this.state.rotate_time_array, current_moment],\r\n                hand_rotate_array:[...this.state.hand_rotate_array, hand]});\r\n\r\n              // Perform counting\r\n              if (this.state.rotate_passed === 0){\r\n                if (rotate_dist >= 0.2) this.setState({rotate_passed:1});\r\n                if (rotate_dist <= -0.2) this.setState({rotate_passed:-1});\r\n              }\r\n              if (this.state.rotate_passed === 1 && rotate_dist <= -0.2){\r\n                this.setState({rotate_passed:-1});\r\n              }\r\n              if (this.state.rotate_passed === -1 && rotate_dist >= 0.2){\r\n                this.setState({rotate_passed:1,\r\n                  rotate_count:[...this.state.rotate_count, current_moment]});\r\n              }\r\n            }\r\n\r\n            if (this.state.rotate_done === true && this.state.fist_done === false){\r\n              //console.log(this.state.fist_passed);\r\n              drawHand_fist (hand, ctx, this.state.fist_passed);\r\n              // Calculate relative distance\r\n              let fist_dist =  ((landmarks[8][1] - landmarks[5][1])+\r\n                                (landmarks[12][1] - landmarks[9][1])+\r\n                                (landmarks[16][1] - landmarks[13][1])+\r\n                                (landmarks[20][1] - landmarks[17][1]))/\r\n                                (4*pawn_dist)\r\n\r\n              // Record distance\r\n              this.setState({fist_array:[...this.state.fist_array, fist_dist],\r\n                fist_time_array:[...this.state.fist_time_array, current_moment],\r\n                hand_fist_array:[...this.state.hand_fist_array, hand]});\r\n\r\n              // Perform counting\r\n              if (fist_dist >= 0.0){this.setState({fist_passed:1})}\r\n              if (fist_dist < -0.4 && this.state.fist_passed === 1){\r\n                this.setState({fist_passed:0,\r\n                  fist_count:[...this.state.fist_count, current_moment]});\r\n              }\r\n            }\r\n            \r\n            if (this.state.fist_done === true ){\r\n              // Calculate relative distance\r\n              let total_move;\r\n              if (this.state.last_hand.length > 0){\r\n                let i;\r\n                let moved = [];\r\n                total_move = 0.0;\r\n                for (i = 0; i < 21; i++){\r\n                  let move_dist = this.norm(landmarks[i], this.state.last_hand[i]) / pawn_dist;\r\n                  total_move += move_dist;\r\n                  if ( move_dist > 0.05){\r\n                    moved = [...moved, i];\r\n                  }\r\n                }\r\n                drawHand_still (hand, ctx, moved);\r\n              }\r\n\r\n              // Record Hand Landmarks\r\n              this.setState({still_array:[...this.state.still_array, total_move],\r\n                still_time_array:[...this.state.still_time_array, current_moment],\r\n                hand_still_array:[...this.state.hand_still_array, hand],\r\n                last_hand: landmarks,\r\n              });\r\n            }\r\n            */\r\n          });\r\n        }\r\n        else {\r\n          // Warning message for hand off screen\r\n          if (this.state.dead_frame > 9) writeText(ctx, { text: 'Hand Off Screen', x: 180, y: 70 });\r\n          this.setState({dead_frame: this.state.dead_frame + 1});\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  async next_step(){\r\n    if (this.state.stage !== 8)\r\n      this.setState({stage:this.state.stage + 1,\r\n        wait:true});\r\n    else{\r\n      clearInterval(this.state.ID);\r\n      this.setState({real_time_inferencing:false,\r\n        recording:false,\r\n        stage:0});\r\n      this.compose_chart();\r\n      const ctx = this.canvasRef.current.getContext(\"2d\");\r\n      ctx.clearRect(0,0, this.canvasRef.current.width, this.canvasRef.current.height);\r\n    }\r\n  }\r\n\r\n  async stop_tapping() {\r\n    this.setState({finger_done:true});\r\n    this.setState({wait:true});\r\n  }\r\n\r\n  async stop_rotating() {\r\n    this.setState({rotate_done:true});\r\n    this.setState({wait:true});\r\n  }\r\n\r\n  async stop_gripping() {\r\n    this.setState({fist_done:true});\r\n    this.setState({wait:true});\r\n  }\r\n\r\n  stop_real_time_inference() {\r\n    clearInterval(this.state.ID);\r\n    this.setState({real_time_inferencing:false,\r\n                   finger_done:false,\r\n                   rotate_done:false,\r\n                   fist_done:false});\r\n    this.compose_chart();\r\n    const ctx = this.canvasRef.current.getContext(\"2d\");\r\n    ctx.clearRect(0,0, this.canvasRef.current.width, this.canvasRef.current.height);\r\n  }\r\n\r\n  async record_video(){\r\n    this.setState({startAt:Date.now()});\r\n    console.log(\"Handpose model loaded.\");\r\n    const Interval_ID = setInterval(() => {\r\n      this.concat_frame();\r\n    }, this.capture_interval);\r\n    this.setState({ID:Interval_ID,\r\n      recording:true,\r\n      wait:true,\r\n      stage:this.state.stage + 1});\r\n  }\r\n\r\n  async concat_frame() {\r\n    if (this.state.wait){\r\n      this.setState({wait_till:Date.now()+3000,\r\n        wait:false});\r\n    }\r\n    if (\r\n      typeof this.webcamRef.current !== \"undefined\" &&\r\n      this.webcamRef.current !== null &&\r\n      this.webcamRef.current.video.readyState === 4\r\n    ) {\r\n      if (Date.now() < this.state.wait_till){\r\n        //console.log(\"Waiting till \", this.state.wait_till);\r\n        //count down 3, 2, 1\r\n        const ctx = this.canvasRef.current.getContext(\"2d\");\r\n        if (this.state.wait_till - Date.now() < 250) ctx.clearRect(0,0, this.canvasRef.current.width, this.canvasRef.current.height);\r\n        else if (this.state.wait_till - Date.now() < 1000) writeText(ctx, { text: '1', x: 180, y: 70 });\r\n        else if (this.state.wait_till - Date.now() < 2000) writeText(ctx, { text: '2', x: 140, y: 70 });\r\n        else if (this.state.wait_till - Date.now() < 3000) writeText(ctx, { text: '3', x: 100, y: 70 });\r\n      }\r\n      else {\r\n        let current_moment = (Date.now() - this.state.startAt)/1000;\r\n        const image = this.webcamRef.current.getScreenshot();      \r\n        var img = document.createElement(\"img\");\r\n        img.src = image;\r\n        img.onload = function(){\r\n          if (this.state.finger_done === false){\r\n            this.setState({dist_record:[...this.state.dist_record, img],\r\n              dist_time_record:[...this.state.dist_time_record, current_moment]});\r\n          }\r\n\r\n          else if (this.state.finger_done === true && this.state.rotate_done === false){\r\n            this.setState({rotate_record:[...this.state.rotate_record, img],\r\n              rotate_time_record:[...this.state.rotate_time_record, current_moment]});\r\n          }\r\n\r\n          else if (this.state.rotate_done === true && this.state.fist_done === false){\r\n            this.setState({fist_record:[...this.state.fist_record, img],\r\n              fist_time_record:[...this.state.fist_time_record, current_moment]});\r\n          }\r\n\r\n          if (this.state.fist_done === true ){\r\n            this.setState({still_record:[...this.state.still_record, img],\r\n              still_time_record:[...this.state.still_time_record, current_moment]});\r\n          }\r\n        }.bind(this)\r\n      }\r\n    }\r\n  }\r\n\r\n  async inference() {\r\n    require('@tensorflow/tfjs-backend-webgl');\r\n    const net = await handpose.load();\r\n    console.log(\"Handpose model loaded.\");\r\n\r\n    // Run prediction on recorded tapping data\r\n    for (let i = 0; i<this.state.dist_record.length; i++){\r\n      const hand = await net.estimateHands(this.state.dist_record[i]);\r\n      if (hand.length > 0){\r\n        hand.forEach((prediction) => { \r\n          // Calculate relative distance\r\n          const landmarks = prediction.landmarks\r\n          let index_dist = this.norm(landmarks[4], landmarks[8]);\r\n          let pawn_dist = this.norm(landmarks[0], landmarks[2]);\r\n          let current_dist = index_dist/pawn_dist;\r\n\r\n          // Record distance\r\n          this.setState({dist_array:[...this.state.dist_array, current_dist],\r\n            dist_time_array:[...this.state.dist_time_array, this.state.dist_time_record[i]],\r\n            hand_dist_array:[...this.state.hand_dist_array, hand]});\r\n          \r\n          // Perform counting\r\n          if (this.state.index_passed === 0 && (current_dist - this.state.min_dist) > 0.05){\r\n            this.setState({index_passed:1,\r\n              max_dist: current_dist});\r\n          }\r\n          if (this.state.index_passed === 1 && current_dist > this.state.max_dist){\r\n            this.setState({max_dist: current_dist});\r\n          }\r\n          if (this.state.index_passed === 1 && (this.state.max_dist - current_dist) > 0.05){\r\n            this.setState({index_passed:0,\r\n              min_dist: current_dist,\r\n              tap_count:[...this.state.tap_count, this.state.dist_time_record[i]]});\r\n          }\r\n          if (this.state.index_passed === 0 && current_dist < this.state.min_dist){\r\n            this.setState({min_dist: current_dist});\r\n          }\r\n          //console.log(\"INDEX COUNT:\", this.state.tap_count);\r\n        });\r\n      }\r\n    }\r\n\r\n    // Run prediction on recorded rotation data\r\n    for (let i = 0; i<this.state.rotate_record.length; i++){\r\n      const hand = await net.estimateHands(this.state.rotate_record[i]);\r\n      if (hand.length > 0){\r\n        hand.forEach((prediction) => {\r\n          const landmarks = prediction.landmarks\r\n          let pawn_dist = this.norm(landmarks[0], landmarks[12]);\r\n          let rotate_dist = (landmarks[2][0] - landmarks[17][0]) / pawn_dist;\r\n          //this.setState({pawn_rotate_array:[...this.state.pawn_rotate_array, pawn_dist]});\r\n          this.setState({rotate_array:[...this.state.rotate_array, rotate_dist],\r\n            rotate_time_array:[...this.state.rotate_time_array, this.state.rotate_time_record[i]],\r\n            hand_rotate_array:[...this.state.hand_rotate_array, hand]});\r\n          if (this.state.rotate_passed === 0){\r\n            if (rotate_dist >= 0.2) this.setState({rotate_passed:1});\r\n            if (rotate_dist <= -0.2) this.setState({rotate_passed:-1});\r\n          }\r\n          if (this.state.rotate_passed === 1 && rotate_dist <= -0.2){\r\n            this.setState({rotate_passed:-1});\r\n          }\r\n          if (this.state.rotate_passed === -1 && rotate_dist >= 0.2){\r\n            this.setState({rotate_passed:1, \r\n              rotate_count:[...this.state.rotate_count, this.state.rotate_time_record[i]]});\r\n          }\r\n          //console.log(\"ROTATE COUNT:\", this.state.rotate_count);\r\n        });\r\n      }\r\n    }\r\n\r\n    // Run prediction on recorded gripping data\r\n    for (let i = 0; i<this.state.fist_record.length; i++){\r\n      const hand = await net.estimateHands(this.state.fist_record[i]);\r\n      if (hand.length > 0){\r\n        hand.forEach((prediction) => {\r\n          const landmarks = prediction.landmarks\r\n          let pawn_dist = this.norm(landmarks[0], landmarks[2]);\r\n          let fist_dist =  ((landmarks[8][1] - landmarks[5][1])+\r\n            (landmarks[12][1] - landmarks[9][1])+\r\n            (landmarks[16][1] - landmarks[13][1])+\r\n            (landmarks[20][1] - landmarks[17][1]))/\r\n            (4*pawn_dist)\r\n          //this.setState({pawn_fist_array:[...this.state.pawn_fist_array, pawn_dist]});\r\n          this.setState({fist_array:[...this.state.fist_array, fist_dist],\r\n            fist_time_array:[...this.state.fist_time_array, this.state.fist_time_record[i]],\r\n            hand_fist_array:[...this.state.hand_fist_array, hand]});\r\n          if (fist_dist >= 0.0){this.setState({fist_passed:1})}\r\n          if (fist_dist < -0.4 && this.state.fist_passed === 1){\r\n            this.setState({fist_passed:0});\r\n            this.setState({fist_count:[...this.state.fist_count, this.state.fist_time_record[i]]});\r\n          }\r\n          //console.log(\"FIST COUNT:\", this.state.fist_count);\r\n        });\r\n      }\r\n    }\r\n\r\n    // Run prediction on recorded postural data\r\n    for (let i = 0; i<this.state.still_record.length; i++){\r\n      const hand = await net.estimateHands(this.state.still_record[i]);\r\n      if (hand.length > 0){\r\n        hand.forEach((prediction) => {\r\n          const landmarks = prediction.landmarks\r\n          let pawn_dist = this.norm(landmarks[0], landmarks[2]);\r\n          let total_move;\r\n          let i;\r\n          let moved = [];\r\n          if (this.state.last_hand.length > 0){\r\n            total_move = 0.0;\r\n            for (i = 0; i < 21; i++){\r\n              let move_dist = this.norm(landmarks[i], this.state.last_hand[i]) / pawn_dist;\r\n              total_move += move_dist;\r\n              if ( move_dist > 0.1){\r\n                moved = [...moved, i];\r\n              }\r\n            }\r\n          }\r\n          //console.log(\"TOTAL MOVED:\", total_move);\r\n          //this.setState({pawn_fist_array:[...this.state.pawn_fist_array, pawn_dist]});\r\n          this.setState({still_array:[...this.state.still_array, total_move],\r\n            still_time_array:[...this.state.still_time_array, this.state.still_time_record[i]],\r\n            hand_still_array:[...this.state.hand_still_array, hand],\r\n            last_hand: landmarks,\r\n          });\r\n        });\r\n      }\r\n    }\r\n\r\n    this.setState({record:[]});\r\n  }\r\n\r\n  async stop_record() {\r\n    clearInterval(this.state.ID);\r\n    await this.inference();\r\n    this.setState({recording:false,\r\n      finger_done:false,\r\n      rotate_done:false,\r\n      fist_done:false});\r\n    this.compose_chart();\r\n  }\r\n\r\n  exportToJson = (objectData, filename) => {\r\n    let contentType = \"application/json;charset=utf-8;\";\r\n    if (window.navigator && window.navigator.msSaveOrOpenBlob) {\r\n      var blob = new Blob([decodeURIComponent(encodeURI(JSON.stringify(objectData)))], { type: contentType });\r\n      navigator.msSaveOrOpenBlob(blob, filename);\r\n    } else {\r\n      var a = document.createElement('a');\r\n      a.download = filename;\r\n      a.href = 'data:' + contentType + ',' + encodeURIComponent(JSON.stringify(objectData));\r\n      a.target = '_blank';\r\n      document.body.appendChild(a);\r\n      a.click();\r\n      document.body.removeChild(a);\r\n    }\r\n  }\r\n \r\n  getArray = () => {\r\n    let dict = {\r\n      tap_count : this.state.tap_count,\r\n      rotate_count : this.state.rotate_count,\r\n      fist_count : this.state.fist_count,\r\n      dist_array : this.state.dist_array,\r\n      dist_time_array : this.state.dist_time_array,\r\n      dist_record : this.state.dist_record,\r\n      dist_time_record : this.state.dist_time_record,\r\n      rotate_array : this.state.rotate_array,\r\n      rotate_time_array : this.state.rotate_time_array,\r\n      rotate_record : this.state.rotate_record,\r\n      rotate_time_record : this.state.rotate_time_record,\r\n      fist_array : this.state.fist_array,\r\n      fist_time_array : this.state.fist_time_array,\r\n      fist_record : this.state.fist_record,\r\n      fist_time_record : this.state.fist_time_record,\r\n      still_array : this.state.still_array,\r\n      still_time_array : this.state.still_time_array,\r\n      still_record : this.state.still_record,\r\n      still_time_record : this.state.still_time_record,\r\n      startAt: this.state.startAt,\r\n      avg_fps: this.state.avg_fps,\r\n      hand_dist_array : this.state.hand_dist_array,\r\n      hand_rotate_array : this.state.hand_rotate_array,\r\n      hand_fist_array : this.state.hand_fist_array,\r\n      hand_still_array : this.state.hand_still_array,\r\n    }\r\n    this.exportToJson(dict, \"state\");\r\n  }\r\n\r\n  render(){\r\n    const videoConstraints = {\r\n      facingMode: this.state.facingMode\r\n    };\r\n    let button_1 = null;\r\n    let button_2 = null;\r\n    switch(this.state.stage){\r\n      case 1:\r\n        button_1 = <Button disabled={this.state.recording} variant=\"contained\" color=\"primary\"  onClick={this.next_step}>Finish Finger Tapping Left (Real Time)</Button>;\r\n        button_2 = <Button disabled={this.state.real_time_inferencing} variant=\"contained\" color=\"secondary\" onClick={this.next_step}>Finish Finger Tapping Left (Record)</Button>;\r\n        break;\r\n      case 2:\r\n        button_1 = <Button disabled={this.state.recording} variant=\"contained\" color=\"primary\"  onClick={this.next_step}>Finish Finger Tapping Right (Real Time)</Button>;\r\n        button_2 = <Button disabled={this.state.real_time_inferencing} variant=\"contained\" color=\"secondary\" onClick={this.next_step}>Finish Finger Tapping Right (Record)</Button>;\r\n        break;\r\n      case 3:\r\n        button_1 = <Button disabled={this.state.recording} variant=\"contained\" color=\"primary\"  onClick={this.next_step}>Finish Rotation Left (Real Time)</Button>;\r\n        button_2 = <Button disabled={this.state.real_time_inferencing} variant=\"contained\" color=\"secondary\" onClick={this.next_step}>Finish Rotation Left (Record)</Button>;\r\n        break;\r\n      case 4:\r\n        button_1 = <Button disabled={this.state.recording} variant=\"contained\" color=\"primary\"  onClick={this.next_step}>Finish Rotation Right (Real Time)</Button>;\r\n        button_2 = <Button disabled={this.state.real_time_inferencing} variant=\"contained\" color=\"secondary\" onClick={this.next_step}>Finish Rotation Right (Record)</Button>;\r\n        break;\r\n      case 5:\r\n        button_1 = <Button disabled={this.state.recording} variant=\"contained\" color=\"primary\"  onClick={this.next_step}>Finish Gripping Left (Real Time)</Button>;\r\n        button_2 = <Button disabled={this.state.real_time_inferencing} variant=\"contained\" color=\"secondary\" onClick={this.next_step}>Finish Gripping Left (Record)</Button>;\r\n        break;\r\n      case 6:\r\n        button_1 = <Button disabled={this.state.recording} variant=\"contained\" color=\"primary\"  onClick={this.next_step}>Finish Gripping Right (Real Time)</Button>;\r\n        button_2 = <Button disabled={this.state.real_time_inferencing} variant=\"contained\" color=\"secondary\" onClick={this.next_step}>Finish Gripping Right (Record)</Button>;\r\n        break;\r\n      case 7:\r\n        button_1 = <Button disabled={this.state.recording} variant=\"contained\" color=\"primary\"  onClick={this.next_step}>Finish Resting Left (Real Time)</Button>;\r\n        button_2 = <Button disabled={this.state.real_time_inferencing} variant=\"contained\" color=\"secondary\" onClick={this.next_step}>Finish Resting Left (Record)</Button>;\r\n        break;\r\n      case 8:\r\n        button_1 = <Button disabled={this.state.recording} variant=\"contained\" color=\"primary\"  onClick={this.next_step}>Finish Resting Right (Real Time)</Button>;\r\n        button_2 = <Button disabled={this.state.real_time_inferencing} variant=\"contained\" color=\"secondary\" onClick={this.next_step}>Finish Resting Right (Record)</Button>;\r\n        break;\r\n      default:\r\n        button_1 = <Button disabled={this.state.recording} variant=\"contained\" color=\"primary\"  onClick={this.runHandpose}>Start Test (Real Time)</Button>;\r\n        button_2 = <Button disabled={this.state.real_time_inferencing} variant=\"contained\" color=\"secondary\" onClick={this.record_video}>Start Test (Record)</Button>;\r\n        break;\r\n    }\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n        <Webcam\r\n          ref={this.webcamRef}\r\n          videoConstraints={videoConstraints}\r\n          style={{\r\n            position: \"absolute\",\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            left: 0,\r\n            right: 0,\r\n            textAlign: \"center\",\r\n            zindex: 9,\r\n            width: \"auto\",\r\n            height: \"auto\",\r\n          }}\r\n        />\r\n        <canvas\r\n          ref={this.canvasRef}\r\n          style={{\r\n            position: \"absolute\",\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            left: 0,\r\n            right: 0,\r\n            textAlign: \"center\",\r\n            zindex: 9,\r\n            width: \"auto\",\r\n            height: \"auto\",\r\n          }}\r\n        />\r\n        </header>\r\n          {this.state.button_mode ? (\r\n            <div>\r\n              <button onClick={this.increment_tap1} id=\"button1\">Index Finger</button>\r\n              <button onClick={this.increment_tap2} id=\"button2\">Middle Finger</button>\r\n            </div>\r\n          ) : (\r\n            <div></div>\r\n          )}\r\n\r\n          <div>\r\n            {button_1}\r\n            {button_2}\r\n            {this.state.real_time_inferencing ? (\r\n              this.state.finger_done ? (\r\n                this.state.rotate_done ? (\r\n                  this.state.fist_done ? (\r\n                    <Button variant=\"contained\" color=\"primary\"  onClick={this.stop_real_time_inference}>Calculate Result</Button>\r\n                  ):(\r\n                    <Button variant=\"contained\" color=\"primary\"  onClick={this.stop_gripping}>Finish Gripping</Button>\r\n                  )                  \r\n                ):(\r\n                  <Button variant=\"contained\" color=\"primary\"  onClick={this.stop_rotating}>Finish Rotating</Button>\r\n                )\r\n              ):(\r\n                <Button variant=\"contained\" color=\"primary\"  onClick={this.stop_tapping}>Finish Tapping</Button>\r\n              )            \r\n            ) : (\r\n            <Button disabled={this.state.recording} variant=\"contained\" color=\"primary\"  onClick={this.runHandpose}>Starting Real Time Inference</Button>\r\n            )}\r\n\r\n            {this.state.recording ? (\r\n              this.state.finger_done ? (\r\n                this.state.rotate_done ? (\r\n                  this.state.fist_done ? (\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={this.stop_record}>Calculate Result</Button>\r\n                  ) : (\r\n                    <Button variant=\"contained\" color=\"secondary\"  onClick={this.stop_gripping}>Finish Gripping</Button>\r\n                  )                  \r\n                ):(\r\n                  <Button variant=\"contained\" color=\"secondary\" onClick={this.stop_rotating}>Finish Rotating</Button>\r\n                )\r\n              ):(\r\n                <Button variant=\"contained\" color=\"secondary\" onClick={this.stop_tapping}>Finish Tapping</Button>\r\n              )            \r\n            ) : (\r\n            <Button disabled={this.state.real_time_inferencing} variant=\"contained\" color=\"secondary\" onClick={this.record_video}>Starting Recording</Button>\r\n            )}\r\n\r\n            <Button disabled={this.state.recording||this.state.real_time_inferencing} variant=\"outlined\" color=\"secondary\" onClick={this.reset_counter}>\r\n              Reset All\r\n            </Button>\r\n          </div>\r\n          <div>\r\n            <h5>\r\n              Finger Tapping Count:{this.state.tap_count.length}&nbsp;&nbsp;&nbsp;&nbsp;\r\n              Rotate Count:{this.state.rotate_count.length}&nbsp;&nbsp;&nbsp;&nbsp;\r\n              Gripping Count: {this.state.fist_count.length}&nbsp;&nbsp;&nbsp;&nbsp;\r\n              FPS: {this.state.avg_fps}\r\n            </h5>\r\n          </div>\r\n          <div>\r\n            <small>Enter Real Measurement (cm)</small>\r\n            <input type=\"number\" id=\"real_measurement\" onChange={this.compose_chart} step=\"0.001\" min='0' max='20'></input>\r\n            <button disabled={!this.state.chart_ready} onClick={this.switch_style}>Switch Chart Style</button>\r\n            <button onClick={this.switch_cam}>Switch Camera</button>\r\n          </div>\r\n          <div>\r\n            <small>Experimental Features</small>\r\n            <button disabled={this.state.recording||this.state.real_time_inferencing} onClick={this.runPosenet}>PoseNet</button>\r\n            <button disabled={this.state.recording||this.state.real_time_inferencing} onClick={this.runFacemesh}>Facemesh</button>\r\n            <button disabled={this.state.recording||this.state.real_time_inferencing} onClick={this.switch_button}>Switch On/Off Button</button>\r\n          </div>\r\n          <div>\r\n            {this.state.chart_ready ? (\r\n              <div>\r\n                <Line data={this.state.chart_data1} />\r\n                <Line data={this.state.chart_data2} />\r\n                <Line data={this.state.chart_data3} />\r\n                <Line data={this.state.chart_data4} />\r\n              </div>\r\n            ) : (\r\n              <div/>\r\n            )}\r\n            <div>\r\n              <input type=\"file\" id=\"upload-json\"></input>\r\n            </div>\r\n            <div>\r\n              <input type=\"file\" id=\"upload-weights\"></input>\r\n            </div>\r\n            <button onClick={this.getArray}>Get Array</button>\r\n          </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}