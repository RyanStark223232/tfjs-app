{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { deprecationWarn } from '../globals';\nimport { MaxPool3D } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport * as conv_util from './conv_util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\r\n * Computes the 3D max pooling.\r\n *\r\n * ```js\r\n * const x = tf.tensor5d([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 2, 2, 1]);\r\n * const result = tf.maxPool3d(x, 2, 1, 'valid');\r\n * result.print();\r\n * ```\r\n *\r\n * @param x The input tensor, of rank 5 or rank 4 of shape\r\n *     `[batch, depth, height, width, inChannels]`.\r\n * @param filterSize The filter size:\r\n *     `[filterDepth, filterHeight, filterWidth]`.\r\n *     If `filterSize` is a single number,\r\n *     then `filterDepth == filterHeight == filterWidth`.\r\n * @param strides The strides of the pooling:\r\n *     `[strideDepth, strideHeight, strideWidth]`.\r\n *     If `strides` is a single number,\r\n *     then `strideDepth == strideHeight == strideWidth`.\r\n * @param pad The type of padding algorithm.\r\n *    - `same` and stride 1: output will be of same size as input,\r\n *       regardless of filter size.\r\n *    - `valid`: output will be smaller than input if filter is larger\r\n *       than 1*1x1.\r\n *    - For more info, see this guide:\r\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\r\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\r\n * @param dimRoundingMode The rounding mode used when computing output\r\n *     dimensions if pad is a number. If none is provided, it will not round\r\n *     and error if the output is of fractional size.\r\n * @param dataFormat An optional string from: \"NDHWC\", \"NCDHW\". Defaults to\r\n *     \"NDHWC\". Specify the data format of the input and output data. With the\r\n *     default format \"NDHWC\", the data is stored in the order of: [batch,\r\n *     depth, height, width, channels]. Only \"NDHWC\" is currently supported.\r\n * @param dilations Deprecated, this field will be gone in v3.0.0.\r\n *     The dilation rates: `[dilationDepth, dilationHeight, dilationWidth]`\r\n *     in which we sample input values across the depth, height and width\r\n *     dimensions in dilated pooling.\r\n *     Defaults to `[1, 1, 1]`. If `dilations` is a single number,\r\n *     then `dilationDepth == dilationHeight == dilationWidth`.\r\n *     If it is greater than 1, then all values of `strides` must be 1.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Convolution'}\r\n */\n\nfunction maxPool3d_(x) {\n  var filterSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [1, 1, 1];\n  var strides = arguments.length > 2 ? arguments[2] : undefined;\n  var pad = arguments.length > 3 ? arguments[3] : undefined;\n  var dimRoundingMode = arguments.length > 4 ? arguments[4] : undefined;\n  var dataFormat = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'NDHWC';\n  var dilations = arguments.length > 6 ? arguments[6] : undefined;\n\n  if (dilations == null) {\n    dilations = [1, 1, 1];\n  } else {\n    deprecationWarn('dilations is deprecated, this field will be gone in ' + 'v3.0.0.');\n  }\n\n  var $x = convertToTensor(x, 'x', 'maxPool3d');\n  var x5D = $x;\n  var reshapedTo5D = false;\n\n  if ($x.rank === 4) {\n    reshapedTo5D = true;\n    x5D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2], $x.shape[3]]);\n  }\n\n  util.assert(x5D.rank === 5, function () {\n    return \"Error in maxPool3d: x must be rank 5 but got rank \".concat(x5D.rank, \".\");\n  });\n  util.assert(dataFormat === 'NDHWC', function () {\n    return \"Error in maxPool3d: Only NDHWC is currently supported, \" + \"but got dataFormat of \".concat(dataFormat);\n  });\n  util.assert(conv_util.eitherStridesOrDilationsAreOne(strides, dilations), function () {\n    return 'Error in maxPool3d: Either strides or dilations must be 1. ' + \"Got strides \".concat(strides, \" and dilations '\").concat(dilations, \"'\");\n  });\n\n  if (dimRoundingMode != null) {\n    util.assert(util.isInt(pad), function () {\n      return \"Error in maxPool3d: pad must be an integer when using, \" + \"dimRoundingMode \".concat(dimRoundingMode, \" but got pad \").concat(pad, \".\");\n    });\n  }\n\n  var forward = function forward(backend, save) {\n    if (dilations == null) {\n      dilations = [1, 1, 1];\n    }\n\n    var convInfo = conv_util.computePool3DInfo(x5D.shape, filterSize, strides, dilations, pad, dimRoundingMode, dataFormat);\n    var y = backend.maxPool3d(x5D, convInfo);\n    save([x5D, y]);\n    return y;\n  };\n\n  var inputs = {\n    x: x5D\n  };\n  var attrs = {\n    filterSize: filterSize,\n    strides: strides,\n    pad: pad,\n    dimRoundingMode: dimRoundingMode,\n    dataFormat: dataFormat,\n    dilations: dilations\n  };\n  var res = ENGINE.runKernelFunc(forward, inputs, null\n  /* grad */\n  , MaxPool3D, attrs);\n\n  if (reshapedTo5D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);\n  }\n\n  return res;\n}\n\nexport var maxPool3d = op({\n  maxPool3d_: maxPool3d_\n});","map":{"version":3,"sources":["../../src/ops/max_pool_3d.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport { ENGINE } from '../engine';\r\nimport { deprecationWarn } from '../globals';\r\nimport { MaxPool3D } from '../kernel_names';\r\nimport { convertToTensor } from '../tensor_util_env';\r\nimport * as util from '../util';\r\nimport * as conv_util from './conv_util';\r\nimport { op } from './operation';\r\nimport { reshape } from './reshape';\r\n/**\r\n * Computes the 3D max pooling.\r\n *\r\n * ```js\r\n * const x = tf.tensor5d([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 2, 2, 1]);\r\n * const result = tf.maxPool3d(x, 2, 1, 'valid');\r\n * result.print();\r\n * ```\r\n *\r\n * @param x The input tensor, of rank 5 or rank 4 of shape\r\n *     `[batch, depth, height, width, inChannels]`.\r\n * @param filterSize The filter size:\r\n *     `[filterDepth, filterHeight, filterWidth]`.\r\n *     If `filterSize` is a single number,\r\n *     then `filterDepth == filterHeight == filterWidth`.\r\n * @param strides The strides of the pooling:\r\n *     `[strideDepth, strideHeight, strideWidth]`.\r\n *     If `strides` is a single number,\r\n *     then `strideDepth == strideHeight == strideWidth`.\r\n * @param pad The type of padding algorithm.\r\n *    - `same` and stride 1: output will be of same size as input,\r\n *       regardless of filter size.\r\n *    - `valid`: output will be smaller than input if filter is larger\r\n *       than 1*1x1.\r\n *    - For more info, see this guide:\r\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\r\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\r\n * @param dimRoundingMode The rounding mode used when computing output\r\n *     dimensions if pad is a number. If none is provided, it will not round\r\n *     and error if the output is of fractional size.\r\n * @param dataFormat An optional string from: \"NDHWC\", \"NCDHW\". Defaults to\r\n *     \"NDHWC\". Specify the data format of the input and output data. With the\r\n *     default format \"NDHWC\", the data is stored in the order of: [batch,\r\n *     depth, height, width, channels]. Only \"NDHWC\" is currently supported.\r\n * @param dilations Deprecated, this field will be gone in v3.0.0.\r\n *     The dilation rates: `[dilationDepth, dilationHeight, dilationWidth]`\r\n *     in which we sample input values across the depth, height and width\r\n *     dimensions in dilated pooling.\r\n *     Defaults to `[1, 1, 1]`. If `dilations` is a single number,\r\n *     then `dilationDepth == dilationHeight == dilationWidth`.\r\n *     If it is greater than 1, then all values of `strides` must be 1.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Convolution'}\r\n */\r\nfunction maxPool3d_(x, filterSize = [1, 1, 1], strides, pad, dimRoundingMode, dataFormat = 'NDHWC', dilations) {\r\n    if (dilations == null) {\r\n        dilations = [1, 1, 1];\r\n    }\r\n    else {\r\n        deprecationWarn('dilations is deprecated, this field will be gone in ' +\r\n            'v3.0.0.');\r\n    }\r\n    const $x = convertToTensor(x, 'x', 'maxPool3d');\r\n    let x5D = $x;\r\n    let reshapedTo5D = false;\r\n    if ($x.rank === 4) {\r\n        reshapedTo5D = true;\r\n        x5D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2], $x.shape[3]]);\r\n    }\r\n    util.assert(x5D.rank === 5, () => `Error in maxPool3d: x must be rank 5 but got rank ${x5D.rank}.`);\r\n    util.assert(dataFormat === 'NDHWC', () => `Error in maxPool3d: Only NDHWC is currently supported, ` +\r\n        `but got dataFormat of ${dataFormat}`);\r\n    util.assert(conv_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in maxPool3d: Either strides or dilations must be 1. ' +\r\n        `Got strides ${strides} and dilations '${dilations}'`);\r\n    if (dimRoundingMode != null) {\r\n        util.assert(util.isInt(pad), () => `Error in maxPool3d: pad must be an integer when using, ` +\r\n            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\r\n    }\r\n    const forward = (backend, save) => {\r\n        if (dilations == null) {\r\n            dilations = [1, 1, 1];\r\n        }\r\n        const convInfo = conv_util.computePool3DInfo(x5D.shape, filterSize, strides, dilations, pad, dimRoundingMode, dataFormat);\r\n        const y = backend.maxPool3d(x5D, convInfo);\r\n        save([x5D, y]);\r\n        return y;\r\n    };\r\n    const inputs = { x: x5D };\r\n    const attrs = { filterSize, strides, pad, dimRoundingMode, dataFormat, dilations };\r\n    const res = ENGINE.runKernelFunc(forward, inputs, null /* grad */, MaxPool3D, attrs);\r\n    if (reshapedTo5D) {\r\n        return reshape(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);\r\n    }\r\n    return res;\r\n}\r\nexport const maxPool3d = op({ maxPool3d_ });\r\n//# sourceMappingURL=max_pool_3d.js.map"]},"metadata":{},"sourceType":"module"}