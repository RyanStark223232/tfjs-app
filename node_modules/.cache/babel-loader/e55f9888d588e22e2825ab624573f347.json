{"ast":null,"code":"import { bitNotBigNumber } from '../../utils/bignumber/bitwise';\nimport { deepMap } from '../../utils/collection';\nimport { factory } from '../../utils/factory';\nimport { bitNotNumber } from '../../plain/number';\nvar name = 'bitNot';\nvar dependencies = ['typed'];\nexport var createBitNot = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n  /**\r\n   * Bitwise NOT value, `~x`.\r\n   * For matrices, the function is evaluated element wise.\r\n   * For units, the function is evaluated on the best prefix base.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.bitNot(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.bitNot(1)               // returns number -2\r\n   *\r\n   *    math.bitNot([2, -3, 4])      // returns Array [-3, 2, 5]\r\n   *\r\n   * See also:\r\n   *\r\n   *    bitAnd, bitOr, bitXor, leftShift, rightArithShift, rightLogShift\r\n   *\r\n   * @param  {number | BigNumber | Array | Matrix} x Value to not\r\n   * @return {number | BigNumber | Array | Matrix} NOT of `x`\r\n   */\n\n  return typed(name, {\n    number: bitNotNumber,\n    BigNumber: bitNotBigNumber,\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, this);\n    }\n  });\n});","map":{"version":3,"sources":["C:/Users/wongh/Documents/GitHub/tfjs-app/node_modules/mathjs/es/function/bitwise/bitNot.js"],"names":["bitNotBigNumber","deepMap","factory","bitNotNumber","name","dependencies","createBitNot","_ref","typed","number","BigNumber","ArrayMatrix","x"],"mappings":"AAAA,SAASA,eAAT,QAAgC,+BAAhC;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,SAASC,YAAT,QAA6B,oBAA7B;AACA,IAAIC,IAAI,GAAG,QAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,CAAnB;AACA,OAAO,IAAIC,YAAY,GAAG,eAAeJ,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AACnF,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOA,KAAK,CAACJ,IAAD,EAAO;AACjBK,IAAAA,MAAM,EAAEN,YADS;AAEjBO,IAAAA,SAAS,EAAEV,eAFM;AAGjB,sBAAkB,SAASW,WAAT,CAAqBC,CAArB,EAAwB;AACxC,aAAOX,OAAO,CAACW,CAAD,EAAI,IAAJ,CAAd;AACD;AALgB,GAAP,CAAZ;AAOD,CAhC+C,CAAzC","sourcesContent":["import { bitNotBigNumber } from '../../utils/bignumber/bitwise';\r\nimport { deepMap } from '../../utils/collection';\r\nimport { factory } from '../../utils/factory';\r\nimport { bitNotNumber } from '../../plain/number';\r\nvar name = 'bitNot';\r\nvar dependencies = ['typed'];\r\nexport var createBitNot = /* #__PURE__ */factory(name, dependencies, function (_ref) {\r\n  var typed = _ref.typed;\r\n\r\n  /**\r\n   * Bitwise NOT value, `~x`.\r\n   * For matrices, the function is evaluated element wise.\r\n   * For units, the function is evaluated on the best prefix base.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.bitNot(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.bitNot(1)               // returns number -2\r\n   *\r\n   *    math.bitNot([2, -3, 4])      // returns Array [-3, 2, 5]\r\n   *\r\n   * See also:\r\n   *\r\n   *    bitAnd, bitOr, bitXor, leftShift, rightArithShift, rightLogShift\r\n   *\r\n   * @param  {number | BigNumber | Array | Matrix} x Value to not\r\n   * @return {number | BigNumber | Array | Matrix} NOT of `x`\r\n   */\r\n  return typed(name, {\r\n    number: bitNotNumber,\r\n    BigNumber: bitNotBigNumber,\r\n    'Array | Matrix': function ArrayMatrix(x) {\r\n      return deepMap(x, this);\r\n    }\r\n  });\r\n});"]},"metadata":{},"sourceType":"module"}