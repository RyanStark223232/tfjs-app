{"version":3,"sources":["utilities.js","App.js","serviceWorker.js","index.js"],"names":["style","0","color","size","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","drawHand","predictions","ctx","length","forEach","prediction","landmarks","beginPath","moveTo","lineTo","finger_dist","sqrt","pow","console","log","strokeStyle","lineWidth","stroke","i","x","y","arc","Math","PI","fillStyle","fill","count","passed","App","webcamRef","useRef","canvasRef","runHandpose","a","require","handpose","net","setInterval","detect","current","video","readyState","videoWidth","videoHeight","width","height","estimateHands","hand","getContext","className","ref","position","marginLeft","marginRight","left","right","textAlign","zindex","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ecc481e4.chunk.js","sourcesContent":["import { sqrt, pow } from 'mathjs'\r\n\r\n// Points for fingers\r\nconst fingerJoints = {\r\n    thumb: [0, 1, 2, 3, 4],\r\n    indexFinger: [0, 5, 6, 7, 8],\r\n    middleFinger: [0, 9, 10, 11, 12],\r\n    ringFinger: [0, 13, 14, 15, 16],\r\n    pinky: [0, 17, 18, 19, 20],\r\n  };\r\n  \r\n  // Infinity Gauntlet Style\r\n  const style = {\r\n    0: { color: \"gold\", size: 15 },\r\n    1: { color: \"gold\", size: 6 },\r\n    2: { color: \"gold\", size: 10 },\r\n    3: { color: \"gold\", size: 6 },\r\n    4: { color: \"red\", size: 6 },\r\n    5: { color: \"gold\", size: 10 },\r\n    6: { color: \"gold\", size: 6 },\r\n    7: { color: \"gold\", size: 6 },\r\n    8: { color: \"red\", size: 6 },\r\n    9: { color: \"gold\", size: 10 },\r\n    10: { color: \"gold\", size: 6 },\r\n    11: { color: \"gold\", size: 6 },\r\n    12: { color: \"gold\", size: 6 },\r\n    13: { color: \"gold\", size: 10 },\r\n    14: { color: \"gold\", size: 6 },\r\n    15: { color: \"gold\", size: 6 },\r\n    16: { color: \"gold\", size: 6 },\r\n    17: { color: \"gold\", size: 10 },\r\n    18: { color: \"gold\", size: 6 },\r\n    19: { color: \"gold\", size: 6 },\r\n    20: { color: \"gold\", size: 6 },\r\n  };\r\n  \r\n  // Drawing function\r\n  export const drawHand = (predictions, ctx) => {\r\n    // Check if we have predictions\r\n    if (predictions.length > 0) {\r\n      // Loop through each prediction\r\n      predictions.forEach((prediction) => {\r\n        // Grab landmarks\r\n        const landmarks = prediction.landmarks;\r\n        ctx.beginPath();\r\n        ctx.moveTo(landmarks[8][0], landmarks[8][1]);\r\n        ctx.lineTo(landmarks[4][0], landmarks[4][1]);\r\n        let finger_dist = sqrt(pow(landmarks[8][0]-landmarks[4][0], 2)+pow(landmarks[8][1]-landmarks[4][1], 2))\r\n        let pawn_dist = sqrt(pow(landmarks[0][0]-landmarks[2][0], 2)+pow(landmarks[0][1]-landmarks[2][1], 2))\r\n        finger_dist = finger_dist/pawn_dist\r\n        console.log(finger_dist)\r\n        ctx.strokeStyle = \"plum\";\r\n        ctx.lineWidth = 4;\r\n        ctx.stroke();\r\n\r\n        // Loop through landmarks and draw em\r\n        for (let i = 0; i < landmarks.length; i++) {\r\n          // Get x point\r\n          const x = landmarks[i][0];\r\n          // Get y point\r\n          const y = landmarks[i][1];\r\n          // Start drawing\r\n          ctx.beginPath();\r\n          ctx.arc(x, y, style[i][\"size\"], 0, 3 * Math.PI);\r\n  \r\n          // Set line color\r\n          ctx.fillStyle = style[i][\"color\"];\r\n          ctx.fill();\r\n        }\r\n      });\r\n    }\r\n  };","import React, { useRef , useState} from \"react\";\n// import logo from './logo.svg';\n//import * as tf from \"@tensorflow/tfjs-core\";\nimport * as handpose from \"@tensorflow-models/handpose\";\nimport Webcam from \"react-webcam\";\nimport \"./App.css\";\nimport { drawHand } from \"./utilities\";\nimport { sqrt, pow } from 'mathjs'\n\nvar count = 0;\nvar passed = 0;\nfunction App() {\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  const runHandpose = async () => {    \n    require('@tensorflow/tfjs-backend-webgl');\n    const net = await handpose.load();\n    console.log(\"Handpose model loaded.\");\n    //  Loop and detect hands\n    setInterval(() => {\n      detect(net);\n    }, 50);\n  };\n\n  const detect = async (net) => {\n    // Check data is available\n    if (\n      typeof webcamRef.current !== \"undefined\" &&\n      webcamRef.current !== null &&\n      webcamRef.current.video.readyState === 4\n    ) {\n      // Get Video Properties\n      const video = webcamRef.current.video;\n      const videoWidth = webcamRef.current.video.videoWidth;\n      const videoHeight = webcamRef.current.video.videoHeight;\n\n      // Set video width\n      webcamRef.current.video.width = videoWidth;\n      webcamRef.current.video.height = videoHeight;\n\n      // Set canvas height and width\n      canvasRef.current.width = videoWidth;\n      canvasRef.current.height = videoHeight;\n\n      // Make Detections\n      const hand = await net.estimateHands(video);\n\n      if (hand.length > 0){\n        hand.forEach((prediction) => {\n          const landmarks = prediction.landmarks\n          let finger_dist = sqrt(pow(landmarks[8][0]-landmarks[4][0], 2)+pow(landmarks[8][1]-landmarks[4][1], 2))\n          let pawn_dist = sqrt(pow(landmarks[0][0]-landmarks[2][0], 2)+pow(landmarks[0][1]-landmarks[2][1], 2))\n          finger_dist = finger_dist/pawn_dist\n          \n          if (finger_dist >= 0.5){passed = 1}\n          if (finger_dist < 0.5 && passed === 1){\n            passed = 0;\n            count = count+1;\n          }\n          console.log(\"passed:\", passed, \"count:\", count)\n          \n          // Draw mesh\n          const ctx = canvasRef.current.getContext(\"2d\");\n          drawHand(hand, ctx);\n        });\n      }\n    }\n  };\n\n  runHandpose();\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Webcam\n          ref={webcamRef}\n          style={{\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 9,\n            width: \"auto\",\n            height: \"auto\",\n          }}\n        />\n\n        <canvas\n          ref={canvasRef}\n          style={{\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 9,\n            width: \"auto\",\n            height: \"auto\",\n          }}\n        />\n      </header>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}